function getPointGen(){
	let gain = getPointConstant()
	gain = gain.times(getPointMultiplier())
	gain = gain.pow(getPointExponentiation())
	gain = dilate(gain, getPointDilationExponent())

	return gain
}

function getPointConstant(){
	let ret = new Decimal(.1)

	if (hasChallenge("l", 21) && !hasUpgrade("or", 121)) {
					ret = ret.plus(1.9)
	}
	if (player.cells.unlocked)      ret = ret.plus(10)

	return ret
}

function getPointMultiplier(){
	let ret = decimalOne

	if (hasUpgrade("h", 11))        ret = ret.times(tmp.h.upgrades[11].effect)
	if (hasUpgrade("h", 22))        ret = ret.times(tmp.h.upgrades[22].effect)
	if (hasUpgrade("h", 34))        ret = ret.times(tmp.h.upgrades[13].effect)
					ret = ret.times(tmp.mini.buyables[61].effect)
	if (hasUpgrade("o", 15))        ret = ret.times(tmp.o.upgrades[15].effect)
	if (hasUpgrade("h", 61))        ret = ret.times(tmp.h.upgrades[61].effect)
					ret = ret.times(tmp.tokens.buyables[11].effect)
					ret = ret.times(tmp.n.effect)
					ret = ret.times(tmp.l.effect)
	if (hasUpgrade("mu", 44))       ret = ret.times(player.o.points.max(1))
					ret = ret.times(tmp.sci.effect)
					ret = ret.times(tmp.sci.buyables[11].effect)
					ret = ret.times(tmp.sci.buyables[21].effect)
	if (hasUpgrade("sci", 202))     ret = ret.times(tmp.sci.upgrades[202].effect)
	if (hasUpgrade("sci", 302))     ret = ret.times(tmp.sci.upgrades[302].effect)
	if (player.easyMode)            ret = ret.times(4)

	return ret
}

function getPointExponentiation(){
	let exp = decimalOne

	if (player.easyMode)            exp = exp.times(1.001)
	if (hasUpgrade("h", 25))        exp = exp.times(tmp.h.upgrades[25].effect)
	if (hasUpgrade("o", 13))        exp = exp.times(tmp.o.upgrades[13].effect)
					exp = exp.times(tmp.tokens.buyables[41].effect)
	if (hasUpgrade("n", 11))        exp = exp.times(1.001)
	if (hasMilestone("l", 1))       exp = exp.times(tmp.l.milestones[1].effect)
	if (hasMilestone("l", 18) && !player.extremeMode) {
					exp = exp.times(2)
		if (player.l.challenges[11] == 33) {
					exp = exp.times(1.5)
		}
	}
	if (hasUpgrade("mu", 51))       exp = exp.times(player.l.points.max(10).log10())
	if (hasMilestone("l", 31)) {
		let l31exp = Math.max(0, player.l.challenges[11] - 100)
		let l31base = 100
		if (player.extremeMode) l31base = 9
		if (hasMilestone("l", 32)) l31base *= 10
		if (hasMilestone("l", 34)) l31base *= 10
					exp = exp.times(Decimal.pow(l31base, l31exp))
	}
	if (hasMilestone("l", 33)) {
		let l33base = Math.max(1, player.l.challenges[11]/(player.extremeMode ? 98 : 100) )
		let l33exp = player.mu.buyables[33]
					exp = exp.times(Decimal.pow(l33base, l33exp))
	}
					exp = exp.times(layers.l.grid.getGemEffect(102))
	if (hasMilestone("a", 18))      exp = exp.times(Decimal.pow(3, getBuyableAmount("l", 23)))
	if (!player.extremeMode) {
		let c31base = layers.l.grid.getGemEffect(301)
					exp = exp.times(c31base.pow(tmp.l.getNonZeroGemCount))
		let c34base = layers.l.grid.getGemEffect(304)
					exp = exp.times(c34base.pow(getBuyableAmount("mu", 32)))
		let c65base = layers.l.grid.getGemEffect(605)
					exp = exp.times(c65base.pow(getBuyableAmount("l", 11)))
		if (!hasUpgrade("or", 132)) {
			let c73base = layers.l.grid.getGemEffect(703)
					exp = exp.times(c73base.pow(getBuyableAmount("a", 21)))
		}
		let c38base = layers.l.grid.getGemEffect(308)
					exp = exp.times(c38base.pow(getBuyableAmount("l", 21)))
		if (hasMile("l", 36))   exp = exp.times(1.1)
	} else {
		let c34base = layers.l.grid.getGemEffect(304)
					exp = exp.times(c34base.pow(getBuyableAmount("l", 33)))
		if (hasUpg("p", 43))    exp = exp.times(Decimal.pow(2, player.p.upgrades.length))
		if (hasMile("a", 17))   exp = exp.times(Decimal.pow(3, player.a.milestones.length))
		if (hasMile("a", 22))   exp = exp.times(Decimal.pow(1 + player.a.milestones.length/100, player.a.milestones.length))
					exp = exp.times(.75)
	}
	if (!hasUpgrade("or", 132)) {
		let c54base = layers.l.grid.getGemEffect(504)
					exp = exp.times(c54base.pow(getBuyableAmount("a", 22)))
		let c64base = layers.l.grid.getGemEffect(604)
					exp = exp.times(c64base.pow(getBuyableAmount("a", 33)))
		let c17base = layers.l.grid.getGemEffect(107)
					exp = exp.times(c17base.pow(getBuyableAmount("a", 32)))
		let c18base = layers.l.grid.getGemEffect(108)
					exp = exp.times(c18base.pow(getBuyableAmount("l", 33).pow(player.extremeMode ? 1.9394 : 1.8)))
	}
	if (hasMilestone("a", 19))      exp = exp.times(tmp.a.milestones[19].effect)
	if (hasUpgrade("a", 11))        exp = exp.times(Decimal.pow(3, player.a.upgrades.length))
	if (hasUpgrade("a", 13))        exp = exp.times(getBuyableAmount("a", 11).max(1))
	if (hasUpgrade("a", 15))        exp = exp.times(getBuyableAmount("a", 12).max(1))
	if (hasUpgrade("a", 33))        exp = exp.times(Decimal.pow(100, getBuyableAmount("a", 13)))
	let logProteinTimes = hasUpgrade("a", 34) + hasUpgrade("a", 35)
					exp = exp.times(player.a.protein.points.max(10).log10().pow(logProteinTimes))
	if (hasMilestone("a", 24))      exp = exp.times(tmp.a.milestones[24].effect)
					exp = exp.times(tmp.a.buyables[22].effect)
	if (hasUpgrade("d", 12)) {
		let ncRNA = getBuyableAmount("a", 31)
		let d12exp = ncRNA.times(player.d.upgrades.length)
					exp = exp.times(ncRNA.pow(d12exp))
	}
	if (hasUpgrade("d", 13)) {
		let d13base = getBuyableAmount("a", 13)
		let d13exp = d13base.times(player.extremeMode && !hasUpgrade("sci", 455) ? 1 : player.d.upgrades.length)
					exp = exp.times(d13base.pow(d13exp))
	}
	if (hasUpgrade("d", 34)) {
		let a2da = getBuyableAmount("l", 11)
		let d34exp = a2da.times(player.d.upgrades.length)
					exp = exp.times(a2da.pow(d34exp))
	}
	if (hasMilestone("d", 27))      exp = exp.times(tmp.d.milestones[27].effect)
	if (hasUpgrade("l", 14))	exp = exp.times(tmp.l.upgrades[14].effect)
	if (hasUpgrade("l", 45))	exp = exp.times(player.l.buyables[22].max(1))
	if (hasUpgrade("sci", 411))     exp = exp.times(player.sci.protein_science.points.max(1))
	if (hasUpgrade("sci", 502))     exp = exp.times(player.d.points.max(1).pow(player.a.buyables[31].plus(player.a.buyables[13])))
	if (hasUpgrade("sci", 504))     exp = exp.times(tmp.sci.upgrades[504].effect)

	return exp
}

function getPointDilationExponent(){
	let exp = decimalOne

	if (inChallenge("l", 11))       exp = exp.times(tmp.l.challenges[11].challengeEffect)
	if (inChallenge("l", 12)) {
		let c2depth = tmp.l.challenges[12].getChallengeDepths[2] || 0
		let c5depth = tmp.l.challenges[12].getChallengeDepths[5] || 0  
		let c6depth = tmp.l.challenges[12].getChallengeDepths[6] || 0
		let c7depth = tmp.l.challenges[12].getChallengeDepths[7] || 0

		let c6Layers = (86 + c2depth) * c6depth ** (1/(player.extremeMode ? 10 : 8))
		let c6Base = player.extremeMode ? (hasUpgrade("sci", 451) ? .952 : .951) : .96
		let c7Base = player.extremeMode ? .0188 : .023
		c7Base -= layers.l.grid.getGemEffect(706).toNumber()
		c6Base -= c7Base * c7depth ** .56

		let portion = decimalOne
		let challId = player.l.activeChallengeID
		portion = portion.times(Decimal.pow(player.extremeMode ? .713 : .665, Math.sqrt(c5depth)))
		portion = portion.times(Decimal.pow(c6Base, c6Layers))
		if (challId > 801 && !player.extremeMode) {
			portion = portion.div(Decimal.pow(200, Math.pow(challId-801, .57)))
		}
		if (challId > 801 && player.extremeMode) {
			portion = portion.div(Decimal.pow(406, Math.pow(challId-801, .55)))
		}
		if (challId > 803) {
			let sub = player.extremeMode && challId > 804 ? .058 : 0
			portion = portion.div(Decimal.pow(2.2 - sub, nCk(challId-802, 2)))
		}
		if (challId > 805 && player.extremeMode) portion = portion.times(1.53)
		if (challId > 806 && player.extremeMode) portion = portion.div(4.47)
		if (challId > 807 && player.extremeMode) portion = portion.div(1.55)

		if (hasMilestone("d", 24)) portion = portion.pow(.94)
		if (hasMilestone("d", 25) && player.extremeMode) portion = portion.pow(.973)
		
		let c58exp = Math.max(0, tmp.l.getNonZeroGemCount - 53)
		let c58base = layers.l.grid.getGemEffect(508)
		
		portion = portion.pow(c58base.pow(c58exp))
					exp = exp.times(portion)
	}
	if (!hasMilestone("ch", 15)) {
		if (hasUpgrade("cells", 11)) exp = exp.times(tmp.cells.upgrades[11].effect)
		if (hasUpgrade("cells", 43)) exp = exp.times(Decimal.pow(13, player.tokens.tokens2.total))
	}
	if (hasUpgrade("cells", 315) && !hasUpgrade("ch", 25)) {
					exp = exp.times(player.tokens.total.max(1))
	}
	if (hasMilestone("cells", 56) && !hasMilestone("ch", 13)) {
					exp = exp.times(tmp.cells.milestones[56].effect)
	}
	if (!hasMilestone("an", 30)) {
		if (hasMilestone("t", 4))       exp = exp.times(tmp.t.milestones[4].effect)
		if (hasMilestone("t", 21))      exp = exp.times(player.t.milestones.length)
	}
	if (!hasMilestone("ch", 14)) {
		if (hasUpgrade("t", 114))       exp = exp.times(player.t.upgrades.length)
		if (hasUpgrade("t", 124))       exp = exp.times(Math.max(1, player.cells.challenges[11]) ** 2.5)
	}
	if (hasUpgrade("cells", 61) && !hasMilestone("ch", 15)) {
					exp = exp.times(Decimal.pow(1.1, player.cells.upgrades.length))
	}
	if (hasMilestone("or", 23))     exp = exp.times(player.or.energy.points.max(1).pow(.01 * player.or.milestones.length))
	if (hasUpgrade("an", 25))       exp = exp.times(player.or.air.points.max(1).pow(.01 * player.an.upgrades.length))

	return exp
}

function getDilationExponent(){
        return getPointDilationExponent()
}

function sortStrings(l){
        l.sort(function(a,b){return Number(a)-Number(b)})
}

var br = "<br>"
var br2= br + br

function dilate(x, exponent, base = 10){
        if (x.lt(base)) return x
        return Decimal.pow(base, x.log(base).pow(exponent))
}

var TAXONOMY_EFFECTS = {
        202:() => hasUpgrade("sp", 35) ? "to Bottom Quark base per .1" : "nothing (currently)",
        203:() => hasUpgrade("nu", 24) ? "Organ gain per Chromosomes" : "nothing (currently)",
        204:() => hasUpgrade("sp", 41) ? "in<u>tes</u>TINE gain per sqrt(Nucleuses)" : "nothing (currently)",
        205:() => hasUpgrade("sp", 42) ? "inTES<u>tine</u> gain per 8" : "nothing (currently)",
        206:() => hasUpgrade("sp", 43) ? "<u>in</u>tesTINE gain per sqrt(Token II)" : "nothing (currently)",
        207:() => hasUpgrade("sp", 44) ? "Contaminant gain per Nucleuses<sup>6</sup>" : "nothing (currently)",
        208:() => hasUpgrade("sp", 45) ? "DNA gain per Nucleuses<sup>9</sup>" : "nothing (currently)",

        303:() => hasUpgrade("ch", 41) ? "Organ gain per Nucleuses" : "nothing (currently)",
        304:() => hasUpgrade("ch", 35) ? "intes<u>TINE</u> gain" : "nothing (currently)",
        305:() => hasMilestone("ch", 21) ? "Contaminant gain per Chromosomes<sup>4</sup>" : "nothing (currently)",
        306:() => hasMilestone("an", 28) ? "Gene gain" : "nothing (currently)",
        307:() => hasMilestone("an", 39) ? "Tissue gain per Chromosomes<sup>3</sup>" : "nothing (currently)",
        308:() => player.an.achActive[13] && hasAchievement("an", 13) || hasAchievement("an", 23) ? "Organ gain per Chromosome/17" : "nothing (currently)",

        404:() => hasMilestone("an", 23) ? "Energy gain per Chromosomes" : "nothing (currently)",
        405:() => hasUpgrade("ch", 21) ? "in<u>TES</u>tine gain per Chromosome upgrades" : "nothing (currently)",
        406:() => hasUpgrade("an", 41) ? "Cell gain per Carnivora II<sup>3</sup>" : "nothing (currently)",
        407:() => hasUpgrade("ch", 13) ? "<u>IN</u>testine gain per 7" : "nothing (currently)",
        408:() => hasUpgrade("ch", 11) ? "INtes<u>tine</u> gain" : "nothing (currently)",

        505:() => hasUpgrade("an", 22) ? "Air gain per Psittaciformes" : "nothing (currently)",
        506:() => hasUpgrade("an", 23) ? "Organ gain" : "nothing (currently)",
        507:() => hasUpgrade("an", 31) ? "<u>in</u>TEStine gain" : "nothing (currently)",
        508:() => hasMilestone("an", 22) ? "Animal gain per .01" : "nothing (currently)",

        606:() => hasUpgrade("an", 14) ? "Tissue gain per milestones<sup>2</sup>" : "nothing (currently)",
        607:() => hasUpgrade("an", 15) ? "Energy gain" : "nothing (currently)",
        608:() => hasUpgrade("an", 21) ? "Contaminant gain per Taxonomy levels" : "nothing (currently)",

        707:() => hasMilestone("an", 17) ? makeBlue("DB") + " gain" : "nothing (currently)",
        708:() => hasMilestone("an", 18) ? makePurple("OB") + " gain" : "nothing (currently)",

        808:() => hasMilestone("an", 16) ? "Air gain" : "nothing (currently)",
}

var TAXONOMY_NAMES = {
        101: "Eukaryote I",
        202: "Animalia I",
        303: "Chordata I",
        404: "Mammalia I",
        505: "Primates",
        606: "Hominidae",
        707: "Homo",
        808: "Sapien",
        102: "Eukaryote II",
        203: "Animalia II",
        304: "Chordata II",
        405: "Mammalia II",
        506: "Carnivora I",
        607: "Canidae",
        708: "Canis",
        103: "Eukaryote III",
        204: "Animalia III",
        305: "Chordata III",
        406: "Mammalia III",
        507: "Carnivora II",
        608: "Felidae",
        104: "Eukaryote IV",
        205: "Animalia IV",
        306: "Chordata IV",
        407: "Aves",
        508: "Psittaciformes",
        105: "Bacteria I",
        206: "Eubacteria I",
        307: "Proteobacteria I",
        408: "Gammaproteobacteria",
        106: "Bacteria II",
        207: "Eubacteria II",
        308: "Proteobacteria II",
        107: "Prokaryota I",
        208: "Archaebacteria",
        108: "Prokaryota II ",
}

var TAXONOMY_COSTS = {
        // [a,b,c] means the cost is a*b^(x^c)
        202: [new Decimal("1e106090"), new Decimal(1e143), new Decimal(1.1)],
        203: [new Decimal("1e42884"), new Decimal(1e193), new Decimal(1.2)],
        204: [new Decimal("1e78004"), new Decimal(1e109), new Decimal(1.4)],
        205: [new Decimal("2e55367"), new Decimal(1e105), new Decimal(1.4)],
        206: [new Decimal("9e95030"), new Decimal(1e141), new Decimal(1.3)],
        207: [new Decimal("1e55504"), new Decimal(6e25), new Decimal(1.3)],
        208: [new Decimal("1e114301"), new Decimal("1e350"), new Decimal(1.1)],

        303: [new Decimal("1.2e2027"), new Decimal(1.5e10), new Decimal(1.1)],
        304: [new Decimal("1e2315"), new Decimal(1e20), new Decimal(1.3)],
        305: [new Decimal("1.7e4318"), new Decimal("7e335"), new Decimal(1.4)],
        306: [new Decimal("5.9e2513"), new Decimal(1e156), new Decimal(1.2)],
        307: [new Decimal("3.2e8292"), new Decimal(1.2e11), new Decimal(1.3)],
        308: [new Decimal("9.8e5766"), new Decimal(5e11), new Decimal(1.3)],

        404: [new Decimal("5e638"), new Decimal(1e15), new Decimal(1.1)],
        405: [new Decimal("5e799"), new Decimal(1e11), new Decimal(1.3)],
        406: [new Decimal("8e1068"), new Decimal(6e40), new Decimal(1.4)],
        407: [new Decimal("2.4e958"), new Decimal(2.5e11), new Decimal(1.3)],
        408: [new Decimal("1e1257"), new Decimal(90), new Decimal(1.1)],

        505: [new Decimal(1e108), new Decimal(300), new Decimal(1.1)],
        506: [new Decimal(1e123), new Decimal(2e4), new Decimal(1.2)],
        507: [new Decimal("6e467"), new Decimal(2.5e5), new Decimal(1.2)],
        508: [new Decimal(1e292), new Decimal(400), new Decimal(1.1)],

        606: [new Decimal(5e17), new Decimal(100), new Decimal(1.1)],
        607: [new Decimal(1e28), new Decimal(600), new Decimal(1.1)],
        608: [new Decimal(1e53), new Decimal(250), new Decimal(1.1)],

        707: [new Decimal(1e4), new Decimal(20), new Decimal(1.1)],
        708: [new Decimal(5e8), new Decimal(50), new Decimal(1.1)],
        
        808: [new Decimal(10), new Decimal(5), new Decimal(1.1)],
        
}

var TOKEN_COSTS = [   6390,    7587,    7630,    8160,    8350, 
                      9350,   10000,   10860,   11230,   12600,
                     14460,   15170,   15430,   19780,   24000,
                     30710,   33260,   33444,   42900,   45420,
                     45800,   50600,   60000,   80308,   88020,
                     94500,  101570,  113575,  135666,  136290,
                    139530,  140140,  140750,  176444,  177720,
                    205125,  226800,  259560,  296740,  297910,
                    335080,  336363,  357900,  398888,  405900,
                    433950,  445000,  462700,  467500,  542000,
                    692000,  774000,  793000,  1084e3,  1366e3,
                    1810e3, 18697e2,  1996e3,  2044e3, 23519e2,
                    3805e3,  4666e3,  5338e3,  9499e3,  9859e3,
                   11518e3, 13127e3, 13539e3, 14553e3, 15542e3,
                   16455e3, 20892e3, 23072e3, 28491e3, 34256e3,
                   60576e3, 91049e3, 11858e4, 12317e4, 13287e4,
                   13793e4, 18750e4, 40300e4, 91919e4, 10000e5,
                   24380e5, 29250e5]

var TOKEN_COSTS_EXTREME = [        6395,   7600,   7650,   8735,   9060,
                                  10850,  12390,  13231,  13500,  14190,
                                  15260,  16000,  16280,  18000,  20740,
                                  21650,  28375,  32975,  35000,  35150,
                                  35600,  38500,  45678,  49494,  60125,
                                  61616,  69030,  77177,  77550,  77940,
                                  83680,  87040,  87420, 107270, 120066,
                                 120630, 132275, 149300, 151925, 153460,
                                 194050, 220254, 225947, 260888, 265010,
                                 267200, 275375, 276940, 359037, 599599,
                                 761000, 782287, 1166e3, 1367e3, 1852e3,
                                 2823e3, 2914e3, 3027e3, 3366e3, 5199e3,
                                 5622e3, 6263e3, 6487e3, 9936e3, 1695e4,
                                 1885e4,19324e3,38092e3,46173e3,47211e3,
                                61738e3,82413e3,17889e4,18704e4, 2624e5,
                                 3068e5,37352e4,  675e6]

function resetPreLifeCurrencies(){
        let data1 = player.mu
        let data2 = player.p
        let data3 = player.n
        let data4 = player.o
        let data5 = player.c
        let data6 = player.mini
        let data8 = player.h

        data1.points = decimalZero
        data1.best = decimalZero
        data1.total = decimalZero

        data2.currentGainPerSec = decimalZero
        data2.points = decimalZero
        data2.best = decimalZero
        data2.total = decimalZero

        data3.points = decimalZero
        data3.best = decimalZero
        data3.total = decimalZero
        
        data4.points = decimalZero
        data4.best = decimalZero
        data4.total = decimalZero

        data5.points = decimalZero
        data5.best = decimalZero
        data5.total = decimalZero

        let resetBuyableIds = [11, 12, 13, 21, 23, 
                                61, 62, 63, 31, 32, 
                                33, 41, 42, 43, 51, 
                                52, 53, 71, 72, 73, 
                                81, 82, 83, 91, 92, 
                                93, 101, 102, 103, 
                                111, 112, 113, 121, 
                                122, 123, 131, 132, 
                                133, 151, 152, 153, 
                                161, 162, 163, 171, 
                                172, 173, 181, 182, 
                                183, 201, 202, 203, 
                                211, 212, 213, 221, 
                                222, 223, 231, 232, 
                                233, 241]

        for (i in resetBuyableIds){
                x = resetBuyableIds[i]
                data6.buyables[x] = decimalZero
        }
        
        data6.a_points.points = decimalZero
        data6.a_points.best = decimalZero
        data6.b_points.points = decimalZero
        data6.b_points.best = decimalZero
        data6.c_points.points = decimalZero
        data6.c_points.best = decimalZero
        data6.c_points.lastRoll = []
        data6.d_points.points = decimalZero
        data6.d_points.best = decimalZero
        data6.d_points.fuel = hasMilestone("l", 5) ? decimalOne : decimalZero
        data6.e_points.points = decimalZero
        data6.e_points.best = decimalZero

        data8.points = decimalZero
        data8.best = decimalZero
        data8.total = decimalZero
        data8.atomic_hydrogen.points = decimalZero
        data8.atomic_hydrogen.best = decimalZero
        data8.deuterium.points = decimalZero
        data8.deuterium.best = decimalZero
}

function resetPreOrganCurrencies(){
        let data5 = player.a
        let data4 = player.t 
        let data6 = player.cells
        let data7 = player.d

        data5.points = decimalZero
        data5.best = decimalZero
        data5.total = decimalZero
        data5.protein.points = decimalZero
        data5.protein.best = decimalZero
        data5.protein.total = decimalZero
        data5.buyables[11] = decimalZero
        data5.buyables[12] = decimalZero
        data5.buyables[13] = decimalZero
        data5.buyables[21] = decimalZero
        data5.buyables[22] = decimalZero
        data5.buyables[23] = decimalZero
        data5.buyables[31] = decimalZero
        data5.buyables[32] = decimalZero
        data5.buyables[33] = decimalZero
        
        // 6. Tissue content
        data4.points = decimalZero
        data4.best = decimalZero
        data4.total = decimalZero
        data4.bestOnReset = decimalZero
        
        // 7. cell content
        
        // Mu:
        data6.mu.points = decimalZero
        data6.mu.best = decimalZero
        data6.buyables[111] = decimalZero
        data6.buyables[112] = decimalZero
        data6.total11 = decimalZero

        // Lambda:
        data6.lambda.points = decimalZero
        data6.lambda.best = decimalZero
        data6.lambda.sacrificed = decimalZero
        data6.total12 = decimalZero

        // Kappa: 
        data6.kappa.points = decimalZero
        data6.kappa.best = decimalZero
        data6.kappa.currentBarValue = decimalOne
        data6.kappa.currentTime = 0
        data6.total13 = decimalZero

        // Iota:
        data6.iota.points = decimalZero
        data6.iota.best = decimalZero
        data6.buyables[411] = decimalZero
        data6.buyables[412] = decimalZero
        data6.buyables[413] = decimalZero
        data6.total14 = decimalZero
        
        data6.buyables[11] = decimalZero
        data6.buyables[12] = decimalZero
        data6.buyables[13] = decimalZero
        data6.buyables[21] = decimalZero
        data6.buyables[22] = decimalZero
        data6.stem_cells.points = decimalZero
        data6.stem_cells.best = decimalZero
        data6.points = decimalZero
        data6.best = decimalZero
        data6.total = decimalZero
        data6.timeInMinigame = 0
        data6.currentMinigame = undefined

        // 8. DNA content
        data7.points = decimalZero
        data7.best = decimalZero
        data7.total = decimalZero
        
        resetPreLifeCurrencies()
}

/*
All option+character:
¡™£¢∞§¶•ªº–≠
œ∑´®¥¨ˆøπ“‘«
åß∂ƒ©˙∆˚¬…æ
Ω≈ç√∫˜µ≤≥÷

All option+shift+character:
⁄€‹›ﬁﬂ‡°·‚—±
Œ„´‰ˇÁ¨Ø∏”’»
ÍÎÏ˝ÓÔÒÚÆ
¸˛Ç◊ı˜Â¯˘¿

Made 
𝞀
*/

function makeRed(c){
        return "<bdi style='color:#CC0033'>" + c + "</bdi>"
}

function makeBlue(c){
        return "<bdi style='color:#3379E3'>" + c + "</bdi>"
}

function makeGreen(c){
        return "<bdi style='color:#66E000'>" + c + "</bdi>"
}

function makePurple(c){
        return "<bdi style='color:#66297D'>" + c + "</bdi>"
}
                                                                                                                                                                                                                                                                        
function filter(list, keep){
        return list.filter(x => keep.includes(x) || keep.includes(Number(x)))
}

function filterOut(list, out){
        return list.filter(x => !out.includes(x) && !out.includes(Number(x)))
}

/*

CODE FOR TOKEN COSTS

function sumValsExpFloorM1(exp){
        a = decimalZero
        b = 0
        let formula = function(b){return Decimal.pow(b, exp).sub(1).max(0).floor()}
        while (a.lte(player.tokens.total) && b < 1000){
                a = a.plus(formula(b))
                b += 1
        }
        return [b - 1, a.sub(formula(b-1)).toNumber()]
}

function sumValsExpFloor(exp){
        a = decimalZero
        b = 0
        let formula = function(b){return Decimal.pow(b, exp).floor()}
        while (a.lte(player.tokens.total) && b < 1000){
                a = a.plus(formula(b))
                b += 1
        }
        return [b - 1, a.sub(formula(b-1)).toNumber()]
}

function sumValsExpRound(exp){
        a = decimalZero
        b = 0
        let formula = function(b){return Decimal.pow(b, exp).round()}
        while (a.lte(player.tokens.total) && b < 1000){
                a = a.plus(formula(b))
                b += 1
        }
        return [b - 1, a.sub(formula(b-1)).toNumber()]
}

*/

addLayer("h", {
        name: "Hydrogen", // This is optional, only used in a few places, If absent it just uses the layer id.
        symbol: "H", // This appears on the layer's node. Default is the id with the first letter capitalized
        position: 0, // Horizontal position within a row. By default it uses the layer id and sorts in alphabetical order
        startData(){ return {
                unlocked: false,
		points: decimalZero,
                best: decimalZero,
                abtime: 0,
                time: 0,
                times: 0,
                autotimes: 0,
                deuterium: {
                        points: decimalZero,
                        best: decimalZero,
                },
                atomic_hydrogen: {
                        points: decimalZero,
                        best: decimalZero,
                },
        }},
        color: "#646400",
        branches: [],
        requires: decimalZero, // Can be a function that takes requirement increases into account
        resource: "Hydrogen", // Name of prestige currency
        baseResource: "Life Points", // Name of resource prestige is based on
        baseAmount(){return player.points.floor()}, // Get the current amount of baseResource
        type: "custom", // normal: cost to gain currency depends on amount gained. static: cost depends on how much you already have
        getResetGain(){
                let base = player.points.ln().min(tmp.h.getDefaultMaximum)
                if (base.lt(0)) return decimalZero
                let mult = tmp.h.getGainMult

                let ret = base.times(mult)

                                                ret = ret.pow(tmp.tokens.buyables[42].effect)
                if (hasUpgrade("n", 11))        ret = ret.pow(1.001)
                if (hasMilestone("l", 1))       ret = ret.pow(tmp.l.milestones[1].effect)
                if (player.extremeMode)         ret = ret.pow(.75)

                if (inChallenge("l", 11))       ret = dilate(ret, tmp.l.challenges[11].challengeEffect)

                return ret
        },
        getNextAt(){
                return decimalZero
        },
        getLossRate(){
                let ret = new Decimal(.01)
                if (hasUpgrade("h", 21)) ret = ret.plus(.0002)
                if (hasUpgrade("h", 31)) ret = ret.plus(.001)
                if (hasUpgrade("h", 35)) ret = ret.sub( .0012)

                if (hasUpgrade("n", 32)) ret = ret.times(100)

                return ret
        },
        getGainMult(){ //hydrogen gain h gain hgain
                let ret = decimalOne

                if (hasUpgrade("h", 13))        ret = ret.times(tmp.h.upgrades[13].effect)
                if (hasUpgrade("h", 22))        ret = ret.times(tmp.h.upgrades[22].effect)
                                                ret = ret.times(tmp.mini.buyables[42].effect)
                                                ret = ret.times(tmp.mini.buyables[63].effect)
                                                ret = ret.times(tmp.tokens.buyables[12].effect)
                if (hasUpgrade("o", 21))        ret = ret.times(player.o.points.max(1).min("e2.2e11"))
                                                ret = ret.times(tmp.n.effect)
                                                ret = ret.times(tmp.l.effect)
                if (player.easyMode)            ret = ret.times(2)
                if (hasUpgrade("sci", 11))      ret = ret.times(tmp.sci.effect)
                                                ret = ret.times(tmp.sci.buyables[12].effect)
                if (hasUpgrade("sci", 305))     ret = ret.times(tmp.sci.upgrades[305].effect)
                if (!inChallenge("l", 52) && !hasChallenge("l", 52)) {
                                                ret = ret.times(player.p.points.plus(1))
                }

                if (player.easyMode)            ret = ret.pow(1.001)

                return ret
        },
        getDefaultMaximum(){
                let ret = new Decimal(4)
                if (hasUpgrade("h", 12)) ret = ret.plus(tmp.h.upgrades[12].effect)
                if (hasUpgrade("sci", 13)) ret = ret.plus(tmp.sci.upgrades[13].effect)
                return ret
        },
        update(diff){
                let data = player.h
                let deut = data.deuterium
                let atmc = data.atomic_hydrogen
                if (data.best.gt(0)) data.unlocked = true
                data.best = data.best.max(data.points)
                deut.best = deut.best.max(deut.points)
                atmc.best = atmc.best.max(atmc.points)
                
                if (hasMilestone("mu", 2)) {
                        data.points = data.points.plus(tmp.h.getResetGain.times(diff))
                        if (hasUpgrade("h", 21)) deut.points = deut.points.plus(tmp.h.deuterium.getResetGain.times(diff))
                        if (hasUpgrade("h", 31)) atmc.points = atmc.points.plus(tmp.h.atomic_hydrogen.getResetGain.times(diff))
                } else {
                        data.points = getLogisticAmount(data.points, tmp.h.getResetGain, tmp.h.getLossRate, diff)
                        if (hasUpgrade("h", 21)) deut.points = getLogisticAmount(deut.points, 
                                                                                tmp.h.deuterium.getResetGain, 
                                                                                tmp.h.deuterium.getLossRate, 
                                                                                diff)
                        if (hasUpgrade("h", 31)) atmc.points = getLogisticAmount(atmc.points, 
                                                                                tmp.h.atomic_hydrogen.getResetGain, 
                                                                                tmp.h.atomic_hydrogen.getLossRate, 
                                                                                diff)
                }
                data.time += diff
        },
        row: 0, // Row the layer is in on the tree (0 is the first row)
        layerShown(){
                return !tmp.h.deactivated
        },
        prestigeButtonText(){
                return "hello"
        },
        canReset(){
                return false
        },
        deuterium: {
                getResetGain(){
                        let base = player.h.points.times(.0002)
                        let mult = tmp.h.deuterium.getGainMult

                        let ret = base.times(mult)

                                                        ret = ret.pow(tmp.tokens.buyables[51].effect)
                        if (hasMilestone("l", 1))       ret = ret.pow(tmp.l.milestones[1].effect)
                        if (player.extremeMode)         ret = ret.pow(.75)

                        if (inChallenge("l", 11))       ret = dilate(ret, tmp.l.challenges[11].challengeEffect)

                        return ret.max(0)
                },
                getLossRate(){
                        return new Decimal(.01)
                },
                getGainMult(){
                        let ret = decimalOne

                        if (hasUpgrade("h", 23))        ret = ret.times(tmp.h.upgrades[23].effect)
                        if (hasUpgrade("h", 41))        ret = ret.times(player.h.atomic_hydrogen.points.max(3).ln().pow(tmp.h.upgrades[41].effect))
                                                        ret = ret.times(tmp.mini.buyables[13].effect)
                                                        ret = ret.times(tmp.tokens.buyables[21].effect)
                                                        ret = ret.times(tmp.l.effect)
                        if (hasUpgrade("sci", 12))      ret = ret.times(2)

                        return ret
                },
        },
        atomic_hydrogen: {
                getResetGain(){
                        let base = player.h.points.times(.001)
                        let mult = tmp.h.atomic_hydrogen.getGainMult

                        let ret = base.times(mult)

                                                        ret = ret.pow(tmp.tokens.buyables[43].effect)
                        if (hasMilestone("l", 1))       ret = ret.pow(tmp.l.milestones[1].effect)
                        if (player.extremeMode)         ret = ret.pow(.75)

                        if (inChallenge("l", 11))       ret = dilate(ret, tmp.l.challenges[11].challengeEffect)

                        return ret.max(0)
                },
                getLossRate(){
                        return new Decimal(.01)
                },
                getGainMult(){
                        let ret = decimalOne

                        if (hasUpgrade("h", 42))        ret = ret.times(player.h.deuterium.points.max(3).ln().pow(tmp.h.upgrades[42].effect))
                                                        ret = ret.times(tmp.mini.buyables[11].effect)
                                                        ret = ret.times(tmp.tokens.buyables[13].effect)
                                                        ret = ret.times(tmp.l.effect)
                        if (hasUpgrade("sci", 12))      ret = ret.times(2)

                        return ret
                },
        },
        upgrades: {
                rows: 10,
                cols: 5,
                11: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Hydrogen I"
                        },
                        description(){
                                if (!player.shiftAlias) {
                                        if (player.extremeMode && player.hardMode) return "ln([best Hydrogen]) multiplies Life Point gain and unlock the Labratory"
                                        return "ln([best Hydrogen]) multiplies Life Point gain"
                                }
                                a = "ln([best Hydrogen])"
                                if (hasUpgrade("h", 14)) a = "(ln([best Hydrogen]))^[Hydrogen IV effect]"
                                if (hasUpgrade("h", 33)) a = a.replace("ln", "log2")
                                if (hasUpgrade("h", 11)) return a
                                return a + br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[11].cost, player.h.points, tmp.h.getResetGain, tmp.h.getLossRate)
                        },
                        cost:() => player.hardMode ? new Decimal(125) : new Decimal(20),
                        effect(){
                                let ret = player.h.best.max(1).log(hasUpgrade("h", 33) ? 2 : 2.718281828459045).max(1)
                                // Math.E = 2.718281828459045
                                if (hasUpgrade("h", 14))        ret = ret.pow(tmp.h.upgrades[14].effect)

                                return ret
                        },
                        effectDisplay(){
                                return format(tmp.h.upgrades[11].effect)
                        },
                        unlocked(){
                                return player.h.best.gt(0) || hasMilestone("tokens", 2)
                        }, // hasUpgrade("h", 11)
                },
                12: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Hydrogen II"
                        },
                        description(){
                                if (!player.shiftAlias) return "Each upgrade adds 1 to the Hydrogen gain formula maximum"
                                a = "[Hydrogen upgrades]"
                                if (hasUpgrade("h", 43)) a += "*2"
                                if (hasUpgrade("h", 12)) return a
                                return a + br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[12].cost, player.h.points, tmp.h.getResetGain, tmp.h.getLossRate)
                        },
                        cost:() => player.hardMode ? new Decimal(300) : new Decimal(50),
                        effect(){
                                let ret = new Decimal(player.h.upgrades.length)

                                if (hasUpgrade("h", 43)) ret = ret.times(2)

                                return ret
                        },
                        effectDisplay(){
                                return format(tmp.h.upgrades[12].effect)
                        },
                        unlocked(){
                                return hasUpgrade("h", 11) || hasMilestone("tokens", 2)
                        }, // hasUpgrade("h", 12)
                },
                13: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Hydrogen III"
                        },
                        description(){
                                if (!player.shiftAlias) return "1+Achievements multiplies Hydrogen gain"
                                a = "1+[Achievements]"
                                if (hasUpgrade("h", 32)) a = "(" + a + ")^" + format(tmp.h.upgrades[32].effect)
                                if (hasUpgrade("h", 13)) return a
                                return a + br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[13].cost, player.h.points, tmp.h.getResetGain, tmp.h.getLossRate)
                        },
                        cost:() => player.hardMode ? new Decimal(450) : new Decimal(100),
                        effect(){
                                let ret = new Decimal(player.ach.achievements.length).plus(1)

                                if (hasUpgrade("sci", 13)) ret = ret.plus(tmp.sci.upgrades[13].effect)

                                if (hasUpgrade("h", 32)) ret = ret.pow(tmp.h.upgrades[32].effect)

                                return ret
                        },
                        effectDisplay(){
                                return format(tmp.h.upgrades[13].effect)
                        },
                        unlocked(){
                                return hasUpgrade("h", 12) || hasMilestone("tokens", 2)
                        }, // hasUpgrade("h", 13)
                },
                14: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Hydrogen IV"
                        },
                        description(){
                                if (!player.shiftAlias) return "Raise Hydrogen I to ln([Hydrogen upgrades]" + (player.extremeMode && !player.hardMode ? " and unlock the Laboratory":"")
                                a = "ln([Hydrogen upgrades]"
                                if (hasUpgrade("h", 43)) a = a.replace("ln", "log2")
                                if (hasUpgrade("h", 14)) return a
                                return a + br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[14].cost, player.h.points, tmp.h.getResetGain, tmp.h.getLossRate)
                        },
                        cost:() => player.hardMode ? new Decimal(1700) : new Decimal(500),
                        effect(){
                                let a1 = new Decimal(player.h.upgrades.length).max(1)
                                if (hasUpgrade("h", 43)) return a1.log2().max(1)
                                return a1.ln().max(1)
                        },
                        effectDisplay(){
                                return format(tmp.h.upgrades[14].effect)
                        },
                        unlocked(){
                                return hasUpgrade("h", 13) || hasMilestone("tokens", 2)
                        }, // hasUpgrade("h", 14)
                },
                15: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Hydrogen V"
                        },
                        description(){
                                if (!player.shiftAlias) return "<bdi style='font-size: 80%'>Unlock Deuterium (<sup>2</sup>H) and Atomic Hydrogen (H<sub>2</sub>) upgrades, but buying one vastly increases the price of and hides the other</bdi>"
                                if (hasUpgrade("h", 15)) return ""
                                return br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[15].cost, player.h.points, tmp.h.getResetGain, tmp.h.getLossRate)
                        },
                        cost:() => player.hardMode ? new Decimal(1750) : new Decimal(1000),
                        unlocked(){
                                return hasUpgrade("h", 14) || hasMilestone("tokens", 2)
                        }, // hasUpgrade("h", 15)
                },
                21: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Deuterium I"
                        },
                        description(){
                                if (!player.shiftAlias) return "Search through your Hydrogen to find the special .02% -- Deuterium"
                                if (hasUpgrade("h", 21)) return ""
                                return br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[21].cost, player.h.points, tmp.h.getResetGain, tmp.h.getLossRate)
                        },
                        cost(){
                                if (!player.hardMode) return hasUpgrade("h", 31) ? new Decimal(5e5) : decimalOne
                                return hasUpgrade("h", 31) ? new Decimal(15e5) : decimalOne
                        },
                        unlocked(){
                                return  hasMilestone("tokens", 2) || hasUpgrade("h", 15) && (!hasUpgrade("h", 31) || hasUpgrade("h", 35) || hasUpgrade("h", 25))
                        }, // hasUpgrade("h", 21)
                },
                22: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Deuterium II"
                        },
                        description(){
                                if (!player.shiftAlias) return "<bdi style='font-size: 80%'>ln(ln(10+[best Deuterium])) multiplies Life Point and Hydrogen gain</bdi>"
                                a = "ln(ln(10+[best Deuterium]))"
                                if (hasUpgrade("h", 24)) a = "(ln(ln(10+[best Deuterium])))^[this row upgrades]"
                                if (hasUpgrade("h", 22)) return a
                                return a + br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[22].cost, player.h.deuterium.points, tmp.h.deuterium.getResetGain, tmp.h.deuterium.getLossRate)
                        },
                        cost(){
                                if (!player.hardMode) return hasUpgrade("h", 31) ? new Decimal(5e3) : new Decimal(5)
                                return hasUpgrade("h", 31) ? new Decimal(123456) : new Decimal(30)
                        },
                        currencyLocation:() => player.h.deuterium,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Deuterium",
                        effect(){
                                let ret = player.h.deuterium.best.plus(10).ln().ln()

                                if (hasUpgrade("h", 24)) ret = ret.pow(tmp.h.upgrades[24].effect)

                                return ret
                        },
                        effectDisplay(){
                                return "<bdi style='font-size: 80%'>" + format(tmp.h.upgrades[22].effect) + "</bdi>"
                        },
                        unlocked(){
                                return hasMilestone("tokens", 2) || hasUpgrade("h", 21)
                        }, // hasUpgrade("h", 22)
                },
                23: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Deuterium III"
                        },
                        description(){
                                if (!player.shiftAlias) return "ln([best Deuterium]) multiplies Deuterium gain"
                                a = "ln(best Deuterium])"
                                if (hasUpgrade("h", 23)) return a
                                return a + br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[23].cost, player.h.deuterium.points, tmp.h.deuterium.getResetGain, tmp.h.deuterium.getLossRate)
                        },
                        cost(){
                                if (!player.hardMode) return hasUpgrade("h", 31) ? new Decimal(20e3) : new Decimal(20)
                                return hasUpgrade("h", 31) ? new Decimal(444444) : new Decimal(80)
                        },
                        currencyLocation:() => player.h.deuterium,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Deuterium",
                        effect(){
                                return player.h.deuterium.best.max(1).ln().max(1)
                        },
                        effectDisplay(){
                                return format(tmp.h.upgrades[23].effect)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 2) || hasUpgrade("h", 22)
                        }, // hasUpgrade("h", 23)
                },
                24: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Deuterium IV"
                        },
                        description(){
                                if (!player.shiftAlias) return "Raise Deuterium II to the number of upgrades in this row"
                                if (hasUpgrade("h", 24)) return ""
                                return br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[24].cost, player.h.deuterium.points, tmp.h.deuterium.getResetGain, tmp.h.deuterium.getLossRate)
                        },
                        cost(){
                                if (!player.hardMode) return hasUpgrade("h", 31) ? new Decimal(200e3) : new Decimal(200)
                                return hasUpgrade("h", 31) ? new Decimal(12e6) : new Decimal(1000)
                        },
                        currencyLocation:() => player.h.deuterium,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Deuterium",
                        effect(){
                                let a = 1
                                if (hasUpgrade("h", 21)) a ++
                                if (hasUpgrade("h", 22)) a ++
                                if (hasUpgrade("h", 23)) a ++
                                if (hasUpgrade("h", 25)) a ++
                                return a
                        },
                        effectDisplay(){
                                return format(tmp.h.upgrades[24].effect)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 2) || hasUpgrade("h", 23)
                        }, // hasUpgrade("h", 24)
                },
                25: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Deuterium V"
                        },
                        description(){
                                if (!player.shiftAlias) return "Each upgrade raises Life Point gain ^1.01"
                                a = "1.01^[upgrades]"
                                if (hasUpgrade("h", 25)) return a
                                return a + br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[25].cost, player.h.deuterium.points, tmp.h.deuterium.getResetGain, tmp.h.deuterium.getLossRate)
                        },
                        cost(){
                                if (!player.hardMode) return hasUpgrade("h", 31) ? new Decimal(2000e3) : new Decimal(2000)
                                return hasUpgrade("h", 31) ? new Decimal(5e8) : new Decimal(5e4)
                        },
                        currencyLocation:() => player.h.deuterium,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Deuterium",
                        effect(){
                                return Decimal.pow(1.01, player.h.upgrades.length)
                        },
                        effectDisplay(){
                                return format(tmp.h.upgrades[25].effect, 4)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 2) || hasUpgrade("h", 24)
                        }, // hasUpgrade("h", 25)
                },
                31: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Atomic Hydrogen I"
                        },
                        description(){
                                if (!player.shiftAlias) return "Wait for your Hydrogen to cool and bond at a brisk .1% rate"
                                if (hasUpgrade("h", 31)) return ""
                                return br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[31].cost, player.h.points, tmp.h.getResetGain, tmp.h.getLossRate)
                        },
                        cost(){
                                if (!player.hardMode) return hasUpgrade("h", 21) ? new Decimal(3e5) : decimalOne
                                return hasUpgrade("h", 21) ? new Decimal(950e3) : decimalOne
                        },
                        unlocked(){
                                return hasMilestone("tokens", 2) || hasUpgrade("h", 15) && (!hasUpgrade("h", 21) || hasUpgrade("h", 25) || hasUpgrade("h", 35))
                        }, // hasUpgrade("h", 31)
                },
                32: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Atomic Hydrogen II"
                        },
                        description(){
                                if (!player.shiftAlias) return "Upgrades in this row ^ .8 raise Hydrogen III effect"
                                a = "[this row upgrades] ^ .8"
                                if (hasUpgrade("h", 32)) return a
                                return a + br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[32].cost, player.h.atomic_hydrogen.points, tmp.h.atomic_hydrogen.getResetGain, tmp.h.atomic_hydrogen.getLossRate)
                        },
                        cost(){
                                if (!player.hardMode) return hasUpgrade("h", 21) ? new Decimal(20e3) : new Decimal(20)
                                return hasUpgrade("h", 21) ? new Decimal(120e3) : new Decimal(250)
                        },
                        currencyLocation:() => player.h.atomic_hydrogen,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Atomic Hydrogen",
                        effect(){
                                let a = 1
                                if (hasUpgrade("h", 31)) a ++
                                if (hasUpgrade("h", 33)) a ++
                                if (hasUpgrade("h", 34)) a ++
                                if (hasUpgrade("h", 35)) a ++
                                return Decimal.pow(a, .8)
                        },
                        effectDisplay(){
                                return format(tmp.h.upgrades[32].effect)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 2) || hasUpgrade("h", 31) 
                        }, // hasUpgrade("h", 32)
                },
                33: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Atomic Hydrogen III"
                        },
                        description(){
                                if (!player.shiftAlias) return "Make the ln in Hydrogen I a log2"
                                if (hasUpgrade("h", 33)) return ""
                                return br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[33].cost, player.h.atomic_hydrogen.points, tmp.h.atomic_hydrogen.getResetGain, tmp.h.atomic_hydrogen.getLossRate)
                        },
                        cost(){
                                if (!player.hardMode) return hasUpgrade("h", 21) ? new Decimal(100e3) : new Decimal(100)
                                return hasUpgrade("h", 21) ? new Decimal(120e4) : new Decimal(1600)
                        },
                        currencyLocation:() => player.h.atomic_hydrogen,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Atomic Hydrogen",
                        unlocked(){
                                return hasMilestone("tokens", 2) || hasUpgrade("h", 32) 
                        }, // hasUpgrade("h", 33)
                },
                34: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Atomic Hydrogen IV"
                        },
                        description(){
                                if (!player.shiftAlias) return "Hydrogen III affects Life Points"
                                if (hasUpgrade("h", 34)) return ""
                                return br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[34].cost, player.h.atomic_hydrogen.points, tmp.h.atomic_hydrogen.getResetGain, tmp.h.atomic_hydrogen.getLossRate)
                        },
                        cost(){
                                if (!player.hardMode) return hasUpgrade("h", 21) ? new Decimal(1000e3) : new Decimal(1000)
                                return hasUpgrade("h", 21) ? new Decimal(120e5) : new Decimal(6e3)
                        },
                        currencyLocation:() => player.h.atomic_hydrogen,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Atomic Hydrogen",
                        unlocked(){
                                return hasMilestone("tokens", 2) || hasUpgrade("h", 33) 
                        }, // hasUpgrade("h", 34)
                },
                35: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Atomic Hydrogen V"
                        },
                        description(){
                                if (!player.shiftAlias) return "You lose .12% less Hydrogen per second"
                                if (hasUpgrade("h", 35)) return ""
                                return br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[35].cost, player.h.atomic_hydrogen.points, tmp.h.atomic_hydrogen.getResetGain, tmp.h.atomic_hydrogen.getLossRate)
                        },
                        cost(){
                                if (!player.hardMode) return hasUpgrade("h", 21) ? new Decimal(4000e3) : new Decimal(4000)
                                return hasUpgrade("h", 21) ? new Decimal(85e6) : new Decimal(25e3)
                        },
                        currencyLocation:() => player.h.atomic_hydrogen,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Atomic Hydrogen",
                        unlocked(){
                                return hasMilestone("tokens", 2) || hasUpgrade("h", 34) 
                        }, // hasUpgrade("h", 35)
                },
                41: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Hydrogen VI"
                        },
                        description(){
                                if (!player.shiftAlias) return "ln(3+[Atomic Hydrogen])^<bdi style='color:#CC0033'>A</bdi> multiplies Deuterium gain"
                                eff = format(tmp.h.upgrades[41].effect)
                                a = "ln(3+[Atomic Hydrogen])^" + eff
                                if (hasUpgrade("h", 41)) {
                                        return a + br + format(player.h.atomic_hydrogen.points.max(3).ln()) + "^" + eff
                                } // red a 
                                return a + br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[41].cost, player.h.points, tmp.h.getResetGain, tmp.h.getLossRate)
                        },
                        cost(){
                                return player.hardMode ? new Decimal(5.5e9) : new Decimal(2e9)
                        },
                        effect(){
                                return decimalOne.plus(tmp.mini.buyables[21].effect)
                        },
                        effectDisplay(){
                                return "<bdi style='color:#CC0033'>A</bdi>=" + format(tmp.h.upgrades[41].effect)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 2) || hasUpgrade("h", 35) && hasUpgrade("h", 25) 
                        }, // hasUpgrade("h", 41)
                },
                42: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Hydrogen VII"
                        },
                        description(){
                                if (!player.shiftAlias) return "ln(3+[Deuterium])^<bdi style='color:#CC0033'>B</bdi> multiplies Atomic Hydrogen gain"
                                eff = format(tmp.h.upgrades[42].effect)
                                a = "ln(3+[Deuterium])^" + eff
                                if (hasUpgrade("h", 42)) {
                                        return a + br + format(player.h.deuterium.points.max(3).ln()) + "^" + eff
                                } //red b
                                return a + br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[42].cost, player.h.points, tmp.h.getResetGain, tmp.h.getLossRate)
                        },
                        cost(){
                                return player.hardMode ? new Decimal(7e9) : new Decimal(3e9)
                        },
                        effect(){
                                let b = new Decimal(2)

                                b = b.plus(tmp.mini.buyables[33].effect)
                                b = b.plus(tmp.mini.buyables[43].effect)
                                b = b.plus(tmp.mini.buyables[53].effect)
                                
                                return b
                        },
                        effectDisplay(){
                                return "<bdi style='color:#CC0033'>B</bdi>=" + format(tmp.h.upgrades[42].effect)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 2) || hasUpgrade("h", 41)
                        }, // hasUpgrade("h", 42)
                },
                43: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Hydrogen VIII"
                        },
                        description(){
                                if (!player.shiftAlias) return "Double Hydrogen II and make the ln in Hydrogen IV a log2"
                                if (hasUpgrade("h", 43)) return ""
                                return br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[43].cost, player.h.points, tmp.h.getResetGain, tmp.h.getLossRate)
                        },
                        cost(){
                                return player.hardMode ? new Decimal(8e9) : new Decimal(4e9)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 2) || hasUpgrade("h", 42)
                        }, // hasUpgrade("h", 43)
                },
                44: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Hydrogen IX"
                        },
                        description(){
                                if (!player.shiftAlias) return "Unlock a minigame to increase <bdi style='color:#CC0033'>A</bdi>, but square Hydrogen X cost"
                                if (hasUpgrade("h", 44)) return ""
                                return br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[44].cost, player.h.points, tmp.h.getResetGain, tmp.h.getLossRate)
                        },
                        cost(){
                                a = player.hardMode ? new Decimal(13e9) : new Decimal(6e9)
                                return a.pow(hasUpgrade("h", 45) ? 2 : 1)
                        },
                        onPurchase(){
                                if (tmp.n.layerShown || player.p.unlocked) return
                                if (player.tokens.total.lt(7)) player.subtabs.mini.mainTabs = "A"
                                if (player.tokens.total.gt(0)) return
 return
                                player.tab = "mini"
                        },
                        unlocked(){
                                return hasMilestone("tokens", 2) || hasUpgrade("h", 43)
                        }, // hasUpgrade("h", 44)
                },
                45: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Hydrogen X"
                        },
                        description(){
                                if (!player.shiftAlias) return "Unlock a minigame to increase <bdi style='color:#CC0033'>B</bdi>, but square Hydrogen IX cost"
                                if (hasUpgrade("h", 45)) return ""
                                return br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[45].cost, player.h.points, tmp.h.getResetGain, tmp.h.getLossRate)
                        },
                        cost(){
                                a = player.hardMode ? new Decimal(13e9) : new Decimal(6e9)
                                return a.pow(hasUpgrade("h", 44) ? 2 : 1)
                        },
                        onPurchase(){
                                if (tmp.n.layerShown || player.p.unlocked) return
                                if (player.tokens.total.lt(7)) player.subtabs.mini.mainTabs = "B"
                                if (player.tokens.total.gt(0)) return
                                player.tab = "mini"
                        },
                        unlocked(){
                                return hasMilestone("tokens", 2) || hasUpgrade("h", 43)
                        }, // hasUpgrade("h", 45)
                },
                51: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Hydrogen XI"
                        },
                        description(){
                                if (!player.shiftAlias) return "Both minigames always tick, autobuy a B buyable once per second, and gain 1e5x A Points"
                                if (hasUpgrade("h", 51)) return ""
                                return br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[51].cost, player.h.points, tmp.h.getResetGain, tmp.h.getLossRate)
                        },
                        cost(){
                                return player.hardMode ? new Decimal(1e36) : new Decimal(1e39)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 2) || hasUpgrade("h", 44) && hasUpgrade("h", 45)
                        }, // hasUpgrade("h", 51)
                },
                52: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Hydrogen XII"
                        },
                        description(){
                                if (!player.shiftAlias) {
                                        if (player.extremeMode) return "Autobuy A buyables and autobuy 10x as fast, add 1 to Violet base, and unlock a Hydrogen Science buyable"
                                        return "Autobuy A buyables and autobuy 10x as fast, remove the softcap for B buyables, and add 1 to Violet base"
                                }
                                if (hasUpgrade("h", 52)) return ""
                                return br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[52].cost, player.h.points, tmp.h.getResetGain, tmp.h.getLossRate)
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal(1e60)
                                return player.hardMode ? new Decimal(1e98) : new Decimal(1e80)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 2) || hasUpgrade("h", 51) 
                        }, // hasUpgrade("h", 52)
                },
                53: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Hydrogen XIII"
                        },
                        description(){
                                if (!player.shiftAlias) return "ln(White) multiplies White effect"
                                if (hasUpgrade("h", 53)) return ""
                                return br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[53].cost, player.h.points, tmp.h.getResetGain, tmp.h.getLossRate)
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal(1e293)
                                return player.hardMode ? new Decimal("1e360") : new Decimal("1e321")
                        },
                        unlocked(){
                                return hasMilestone("tokens", 2) || hasUpgrade("h", 52) 
                        }, // hasUpgrade("h", 53)
                },
                54: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Hydrogen XIV"
                        },
                        description(){
                                if (!player.shiftAlias) {
                                        if (player.extremeMode) return "^.5 in the color production formula becomes ^.52 and remove 6 D" + "ec" + "aseconds' base cost"
                                        return "^.5 in the color production formula becomes ^.52"
                                }
                                if (hasUpgrade("h", 54)) return ""
                                return br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[54].cost, player.h.points, tmp.h.getResetGain, tmp.h.getLossRate)
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal("1e318")
                                return player.hardMode ? new Decimal("1e364") : new Decimal("1e360")
                        },
                        unlocked(){
                                return hasMilestone("tokens", 2) || hasUpgrade("h", 53) 
                        }, // hasUpgrade("h", 54)
                },
                55: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Hydrogen XV"
                        },
                        description(){
                                if (!player.shiftAlias) {
                                        if (player.extremeMode) return "^.52 in the A production formula becomes ^.57 and unlock Carbon (C) and Oxygen (O)"
                                        return "^.52 in the A production formula becomes ^.524 and unlock Carbon (C) and Oxygen (O)"
                                }
                                if (hasUpgrade("h", 55)) return ""
                                return br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[55].cost, player.h.points, tmp.h.getResetGain, tmp.h.getLossRate)
                        },
                        cost(){
                                return player.hardMode ? new Decimal("1e385") : new Decimal("1e380")
                        },
                        unlocked(){
                                return hasMilestone("tokens", 2) || hasUpgrade("h", 54) 
                        }, // hasUpgrade("h", 55)
                },
                61: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Hydrogen XVI"
                        },
                        description(){
                                if (!player.shiftAlias) return "Per upgrade multiply Life Points by Carbon"
                                a = "Carbon^[upgrades]"
                                if (hasMilestone("tokens", 19)) a = a.replace("[upgrades]", "(1.5*[upgrades])")
                                if (hasUpgrade("h", 61)) return a
                                return a + br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[61].cost, player.h.points, tmp.h.getResetGain, tmp.h.getLossRate)
                        },
                        cost(){
                                if (player.extremeMode) return Decimal.pow(2, 3072)
                                return player.hardMode ? Decimal.pow(2, 2100) : Decimal.pow(2, 2048)
                        },
                        effect(){
                                let ret = player.c.points.max(1).pow(player.h.upgrades.length)

                                if (hasMilestone("tokens", 19)) ret = ret.pow(1.5)
                                
                                return ret
                        },
                        effectDisplay(){
                                return format(tmp.h.upgrades[61].effect)
                        },
                        unlocked(){
                                return hasUpgrade("h", 61) || hasMilestone("tokens", 2) || hasUpgrade("o", 15) && hasUpgrade("c", 15) 
                        }, // hasUpgrade("h", 61)
                },
                62: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Hydrogen XVII"
                        },
                        description(){
                                if (!player.shiftAlias) return "Oxygen IV affects Carbon gain and double autobuyer speed"
                                if (hasUpgrade("h", 62)) return ""
                                return br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[62].cost, player.h.points, tmp.h.getResetGain, tmp.h.getLossRate)
                        },
                        cost(){
                                if (player.extremeMode) return Decimal.pow(2, 3240)
                                return player.hardMode ? Decimal.pow(2, 2250) : Decimal.pow(2, 2200)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 2) || hasUpgrade("h", 61)
                        }, // hasUpgrade("h", 62)
                },
                63: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Hydrogen XVIII"
                        },
                        description(){
                                if (!player.shiftAlias) return "sqrt(log10(Life Points)) multiplies Carbon and Oxygen gain"
                                a = "sqrt(log10(Life Points))"
                                if (hasUpgrade("h", 63)) return a
                                return a + br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[63].cost, player.h.points, tmp.h.getResetGain, tmp.h.getLossRate)
                        },
                        cost(){
                                if (player.extremeMode) return Decimal.pow(2, 3372)
                                return player.hardMode ? Decimal.pow(2, 3250) : Decimal.pow(2, 3072)
                        },
                        effect(){
                                return player.points.max(10).log10().sqrt()
                        },
                        effectDisplay(){
                                return format(tmp.h.upgrades[63].effect)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 2) || hasUpgrade("h", 62)
                        }, // hasUpgrade("h", 63)
                },
                64: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Hydrogen XIX"
                        },
                        description(){
                                if (!player.shiftAlias) return "Square the ln(x) term in White and add a log10(x) term to Green"
                                if (hasUpgrade("h", 64)) return ''
                                return br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[64].cost, player.h.points, tmp.h.getResetGain, tmp.h.getLossRate)
                        },
                        cost(){
                                return player.hardMode ? Decimal.pow(10, 1034) : Decimal.pow(10, 1024)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 2) || hasUpgrade("h", 63)
                        }, // hasUpgrade("h", 64)
                },
                65: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Hydrogen XX"
                        },
                        description(){
                                if (!player.shiftAlias) {
                                        if (player.extremeMode) return "Unlock tokens and a Oxygen Science upgrade"
                                        return "Unlock tokens"
                                }
                                if (hasUpgrade("h", 65)) return ""
                                return br + "Estimated time: " + logisticTimeUntil(tmp.h.upgrades[65].cost, player.h.points, tmp.h.getResetGain, tmp.h.getLossRate)
                        },
                        cost(){
                                if (player.extremeMode) return Decimal.pow(10, 1432)
                                return player.hardMode ? Decimal.pow(10, 1310) : Decimal.pow(10, 1304)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 2) || hasUpgrade("h", 64)
                        }, // hasUpgrade("h", 65)
                },
                71: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Deuterium VI"
                        },
                        canAfford(){
                                if (player.h.deuterium.points.lt(tmp.h.upgrades[71].cost)) return false
                                return hasUpgrade("tokens", 71)
                        },
                        description(){
                                if (!hasUpgrade("tokens", 71) && !player.shiftAlias && !hasUpgrade("h", 71)) return "Requires token Upgrade 71<br>Hold shift for effect"
                                if (player.shiftAlias ^ hasUpgrade("tokens", 71)) return "Gain 10x coins and max(5, log10(coins)) multiplies Oxygen per upgrade"
                                a = "min(5, log10(coins))"
                                return a
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal("1e4467e3")
                                return Decimal.pow(10, 2100e3)
                        },
                        currencyLocation:() => player.h.deuterium,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Deuterium",
                        unlocked(){
                                return player.tokens.total.gte(23) || hasMilestone("n", 3)
                        }, // hasUpgrade("h", 71)
                },
                72: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Deuterium VII"
                        },
                        canAfford(){
                                if (player.h.deuterium.points.lt(tmp.h.upgrades[72].cost)) return false
                                return hasUpgrade("tokens", 71)
                        },
                        description(){
                                if (!hasUpgrade("tokens", 71) && !player.shiftAlias && !hasUpgrade("h", 72)) return "Requires token Upgrade 71<br>Hold shift for effect"
                                if (player.shiftAlias ^ hasUpgrade("tokens", 71)) return "ln(Carbon) multiplies Near-ultraviolet base"
                                a = "ln(Carbon + 10)"
                                return a
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal("1e4575e3")
                                return Decimal.pow(10, 2444e3)
                        },
                        currencyLocation:() => player.h.deuterium,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Deuterium",
                        effect(){
                                return player.c.points.plus(10).ln()
                        },
                        effectDisplay(){
                                return format(tmp.h.upgrades[72].effect)
                        },
                        unlocked(){
                                return player.tokens.total.gte(26) || hasMilestone("n", 3)
                        }, // hasUpgrade("h", 72)
                },
                73: {
                        title(){
                                let end = player.shiftAlias ? "Jacorb!" : "Deuterium VIII"
                                return "<bdi style='color: #" + getUndulatingColor() + "'>" + end
                        },
                        canAfford(){
                                if (player.h.deuterium.points.lt(tmp.h.upgrades[73].cost)) return false
                                return hasUpgrade("tokens", 71)
                        },
                        description(){
                                if (!hasUpgrade("tokens", 71) && !player.shiftAlias && !hasUpgrade("h", 73)) return "Requires token Upgrade 71<br>Hold shift for effect"
                                return "Add .01 to Constant base and you can buy all 3 row 7 coin upgrades"
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal("1e5070e3")
                                return Decimal.pow(10, 4516e3)
                        },
                        currencyLocation:() => player.h.deuterium,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Deuterium",
                        unlocked(){
                                return player.tokens.total.gte(34) || hasMilestone("n", 3)
                        }, // hasUpgrade("h", 73)
                },
                74: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Deuterium IX"
                        },
                        canAfford(){
                                if (player.h.deuterium.points.lt(tmp.h.upgrades[74].cost)) return false
                                return hasUpgrade("tokens", 71)
                        },
                        description(){
                                if (!hasUpgrade("tokens", 71) && !player.shiftAlias && !hasUpgrade("h", 74)) return "Requires token Upgrade 71<br>Hold shift for effect"
                                return "Square Oxygen I and remove the -9"
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal("1e5203e3")
                                return Decimal.pow(10, 7111e3)
                        },
                        currencyLocation:() => player.h.deuterium,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Deuterium",
                        unlocked(){
                                return player.tokens.total.gte(37) || hasMilestone("n", 3)
                        }, // hasUpgrade("h", 74)
                },
                75: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Deuterium X"
                        },
                        canAfford(){
                                if (player.h.deuterium.points.lt(tmp.h.upgrades[75].cost)) return false
                                return hasUpgrade("tokens", 71)
                        },
                        description(){
                                if (!hasUpgrade("tokens", 71) && !player.shiftAlias && !hasUpgrade("h", 75)) return "Requires token Upgrade 71<br>Hold shift for effect"
                                return "Change token buyable costs from ceiling to rounding"
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal("1e5817e3")
                                return Decimal.pow(10, 7686e3)
                        },
                        currencyLocation:() => player.h.deuterium,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Deuterium",
                        unlocked(){
                                return player.tokens.total.gte(39) || hasMilestone("n", 3)
                        }, // hasUpgrade("h", 75)
                },
                81: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Atomic Hydrogen VI"
                        },
                        canAfford(){
                                if (player.h.atomic_hydrogen.points.lt(tmp.h.upgrades[81].cost)) return false
                                return hasUpgrade("tokens", 72)
                        },
                        description(){
                                if (!hasUpgrade("tokens", 72) && !player.shiftAlias && !hasUpgrade("h", 81)) return "Requires token Upgrade 72<br>Hold shift for effect"
                                return "Square Oxygen IV but you lose 50 times more Carbon and Oxygen per second"
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal("1e4117e3")
                                return Decimal.pow(10, 5960e3)
                        },
                        currencyLocation:() => player.h.atomic_hydrogen,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Atomic Hydrogen",
                        unlocked(){
                                return hasUpgrade("h", 71) || hasMilestone("n", 3)
                        }, // hasUpgrade("h", 81)
                },
                82: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Atomic Hydrogen VII"
                        },
                        canAfford(){
                                if (player.h.atomic_hydrogen.points.lt(tmp.h.upgrades[82].cost)) return false
                                return hasUpgrade("tokens", 72)
                        },
                        description(){
                                if (!hasUpgrade("tokens", 72) && !player.shiftAlias && !hasUpgrade("h", 82)) return "Requires token Upgrade 72<br>Hold shift for effect"
                                return "Per token per upgrade multiply Microwave base by 1.01"
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal("1e4523e3")
                                return Decimal.pow(10, 6750e3)
                        },
                        currencyLocation:() => player.h.atomic_hydrogen,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Atomic Hydrogen",
                        unlocked(){
                                return hasUpgrade("h", 81) || hasMilestone("n", 3)
                        }, // hasUpgrade("h", 82)
                },
                83: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Atomic Hydrogen VIII"
                        },
                        canAfford(){
                                if (player.h.atomic_hydrogen.points.lt(tmp.h.upgrades[83].cost)) return false
                                return hasUpgrade("tokens", 72)
                        },
                        description(){
                                if (!hasUpgrade("tokens", 72) && !player.shiftAlias && !hasUpgrade("h", 83)) return "Requires token Upgrade 72<br>Hold shift for effect"
                                return "Raise token buyable costs ^.9 (ceilinged)"
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal("1e5440e3")
                                return Decimal.pow(10, 7070e3)
                        },
                        currencyLocation:() => player.h.atomic_hydrogen,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Atomic Hydrogen",
                        unlocked(){
                                return hasUpgrade("h", 82) || hasMilestone("n", 3)
                        }, // hasUpgrade("h", 83)
                },
                84: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Atomic Hydrogen IX"
                        },
                        canAfford(){
                                if (player.h.atomic_hydrogen.points.lt(tmp.h.upgrades[84].cost)) return false
                                return hasUpgrade("tokens", 72)
                        },
                        description(){
                                if (!hasUpgrade("tokens", 72) && !player.shiftAlias && !hasUpgrade("h", 84)) return "Requires token Upgrade 72<br>Hold shift for effect"
                                return "Change token buyable exponent to .8"
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal("1e5965e3")
                                return Decimal.pow(10, 7913e3)
                        },
                        currencyLocation:() => player.h.atomic_hydrogen,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Atomic Hydrogen",
                        unlocked(){
                                return hasUpgrade("h", 83) || hasMilestone("n", 3)
                        }, // hasUpgrade("h", 84)
                },
                85: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Atomic Hydrogen X"
                        },
                        canAfford(){
                                if (player.h.atomic_hydrogen.points.lt(tmp.h.upgrades[85].cost)) return false
                                return hasUpgrade("tokens", 72)
                        },
                        description(){
                                if (!hasUpgrade("tokens", 72) && !player.shiftAlias && !hasUpgrade("h", 85)) return "Requires token Upgrade 72<br>Hold shift for effect"
                                return "Change token buyable exponent to .7"
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal("1e6362e3")
                                return Decimal.pow(10, 8362e3)
                        },
                        currencyLocation:() => player.h.atomic_hydrogen,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Atomic Hydrogen",
                        unlocked(){
                                return hasUpgrade("h", 84) || hasMilestone("n", 3)
                        }, // hasUpgrade("h", 85)
                },
        },
        infoboxes: {
                introBox: {
                        title: "Introduction",
                        body(){
                                let a = "<h1>" + makeRed("Welcome to TREE OF LIFE!") + "</h1>"
                                let b = "There are six pieces of information you should be aware of:"
                                let c = "First, this game has (currently) three modes, Easy, Hard, and Extr" + "eme, each having a different effect."
                                let d = "To access and select modes go to the info tab (the blue i in the top left corner) and click \"Show mod selection tab\", though it is recommended to play normal mode first."
                                let e = "Second, the game is balanced around 60 to 250 second waits (at most), so if you find yourself "
                                e += "waiting longer than that for seemingly no reward, try something else!"
                                let f = "Third, there is a save bank. View it by going to the info tab and clicking \"Show built in saves\" and scrolling down."
                                let g = "Fourth, this game is designed to be played on a computer on Google Chrome. If this does not apply to you there might be some bugs or other issues you run into." 
                                let h = "Fifth, there are ways to force toggle shift and control for seeing various details in the info tab."
                                let i = "Finally, you can click and drag to buy lots of upgrades at once!"

                                return a + br2 + b + br2 + c + " " + d + br2 + e + br2 + f + br2 + g + br2 + h + br2 + i
                        },
                },
        },
        tabFormat: {
                "Upgrades": {
                        content: [
                                "main-display",
                                ["display-text",
                                        function(){
                                                if (hasMilestone("mu", 2)) return ""
                                                if (player.shiftAlias) return "Your best Hydrogen is " + format(player.h.best) + " and you are netting " + format(tmp.h.getResetGain.sub(tmp.h.getLossRate.times(player.h.points))) + " Hydrogen per second"
                                                return "You are gaining " + format(tmp.h.getResetGain) + " Hydrogen per second"
                                        }
                                ],
                                ["display-text",
                                        function(){
                                                if (hasMilestone("mu", 2)) return ""
                                                if (player.shiftAlias) return "Formula: min(" + formatWhole(tmp.h.getDefaultMaximum) + ",ln(points))*[multipliers]"
                                                return "You are losing " + format(tmp.h.getLossRate.times(100)) + "% of your Hydrogen per second"
                                        },
                                ],
                                "blank", 
                                ["upgrades", [1,2,3,4,5,6,7,8,9]],
                                "blank",
                                ["infobox", "introBox"],
                        ],
                        unlocked(){
                                return true
                        },
                },
                "Deuterium": {
                        content: [
                                ["secondary-display", "deuterium"],
                                ["display-text",
                                        function(){
                                                if (hasMilestone("mu", 2)) return ""
                                                if (player.shiftAlias) {
                                                        t1 = tmp.h.deuterium
                                                        return "Your best Deuterium is " + format(player.h.deuterium.best) + " and you are netting " + format(t1.getResetGain.sub(t1.getLossRate.times(player.h.deuterium.points))) + " Deuterium per second"
                                                }
                                                return "You are gaining " + format(tmp.h.deuterium.getResetGain) + " Deuterium per second"
                                        }
                                ],
                                ["display-text",
                                        function(){
                                                if (hasMilestone("mu", 2)) return ""
                                                if (player.shiftAlias) return "Formula: .0002 * Hydrogen * [multipliers]"
                                                return "You are losing " + format(tmp.h.deuterium.getLossRate.times(100)) + "% of your Deuterium per second"
                                        },
                                ],
                                "blank", 
                                ["upgrades", [2,7]]
                        ],
                        unlocked(){
                                return hasUpgrade("h", 21)
                        },
                },
                "Atomic Hydrogen": {
                        content: [
                                ["secondary-display", "atomic_hydrogen"],
                                ["display-text",
                                        function(){
                                                if (hasMilestone("mu", 2)) return "" 
                                                if (player.shiftAlias) {
                                                        t1 = tmp.h.atomic_hydrogen
                                                        return "Your best Atomic Hydrogen is " + format(player.h.atomic_hydrogen.best) + " and you are netting " + format(t1.getResetGain.sub(t1.getLossRate.times(player.h.atomic_hydrogen.points))) + " Atomic Hydrogen per second"
                                                }
                                                return "You are gaining " + format(tmp.h.atomic_hydrogen.getResetGain) + " Atomic Hydrogen per second"
                                        }
                                ],
                                ["display-text",
                                        function(){
                                                if (hasMilestone("mu", 2)) return ""
                                                if (player.shiftAlias) return "Formula: .001 * Hydrogen * [multipliers]"
                                                return "You are losing " + format(tmp.h.atomic_hydrogen.getLossRate.times(100)) + "% of your Atomic Hydrogen per second"
                                        },
                                ],
                                "blank", 
                                ["upgrades", [3,8]]
                        ],
                        unlocked(){
                                return hasUpgrade("h", 31)
                        },
                },
        },
        doReset(layer){},
        deactivated(){
                if (hasUpgrade("or", 135)) return true
                return inChallenge("l", 21) || hasChallenge("l", 21)
        },
})

addLayer("sci", {
        name: "Science", 
        symbol: "S",
        position: 1,
        startData(){ return {
                unlocked: false,
		points: decimalZero,
                best: decimalZero,
                abtime: 0,
                time: 0,
                times: 0,
                hydrogen_science: {
                        points: decimalZero,
                        best: decimalZero,
                        total: decimalZero,
                },
                oxygen_science: {
                        points: decimalZero,
                        best: decimalZero,
                        total: decimalZero,
                },
                carbon_science: {
                        points: decimalZero,
                        best: decimalZero,
                        total: decimalZero,
                },
                nitrogen_science: {
                        points: decimalZero,
                        best: decimalZero,
                        total: decimalZero,
                },
                protein_science: {
                        points: decimalZero,
                        best: decimalZero,
                        total: decimalZero,
                },
                dna_science: {
                        points: decimalZero,
                        best: decimalZero,
                        total: decimalZero,
                },
                everhasnsci2: false,
                everUpgrade412: false,
        }},
        color: "#B54153",
        branches: [],
        requires: decimalZero,
        resource: "Science",
        baseResource: "points",
        baseAmount(){
                return player.points.max(10)
        },
        type: "custom", 
        tooltip(){
                let t = player.subtabs.sci.mainTabs
                if (t == "DNA Research")        return format(player.sci.dna_science.points) + " DNA Science"
                if (t == "Protein Research")    return format(player.sci.protein_science.points) + " Protein Science"
                if (t == "N Research")          return format(player.sci.nitrogen_science.points) + " Nitrogen Science"
                if (t == "C Research")          return format(player.sci.carbon_science.points) + " Carbon Science"
                if (t == "O Research")          return format(player.sci.oxygen_science.points) + " Oxygen Science"
                if (t == "H Research")          return format(player.sci.hydrogen_science.points) + " Hydrogen Science"
                if (t == "Info")                return format(player.sci.points) + " Science"
        },
        getBaseGain(){
                let amt = tmp.sci.baseAmount

                if (amt.gt(10))         amt = amt.log10().times(10)
                if (amt.gt(1e3))        amt = amt.log10().plus(7).pow(3)
                if (amt.gt(1e10))       amt = amt.log10().pow(10)

                return amt
        },
        getResetGain(){
                let ret = tmp.sci.getBaseGain.times(tmp.sci.getGainMult)

                ret = ret.pow(.75)

                if (inChallenge("l", 11)) ret = dilate(ret, tmp.l.challenges[11].challengeEffect)

                return ret
        },
        getNextAt(){
                return decimalZero
        },
        getGainMult(){ // science gain sci gain scigain sgain
                let ret = decimalOne

                if (player.easyMode)            ret = ret.times(2)
                                                ret = ret.times(tmp.tokens.effect)
                if (hasUpgrade("sci", 215))     ret = ret.times(player.tokens.total.max(1).pow(2))
                if (!inChallenge("l", 52) && !hasChallenge("l", 52)) {
                                                ret = ret.times(player.p.points.plus(1).min(1e10))
                }
                                                ret = ret.times(tmp.l.effect.min(1e10))

                if (player.easyMode)            ret = ret.pow(1.001)
                if (hasUpgrade("n", 11))        ret = ret.pow(1.001)

                return ret
        },
        prestigeNotify(){
                if (!player.p.unlocked) {
                        let buyIds = [  11,  12,  13,
                                        21,  22,  23,
                                        101, 102, 103,
                                        111, 112, 113]
                        for (i in buyIds){
                                let id = buyIds[i]
                                if (!tmp.sci.buyables[id].unlocked) continue
                                if (tmp.sci.buyables[id].canAfford) return true
                        }
                }
        },
        update(diff){
                let data = player.sci

                if (!data.unlocked) {
                        data.unlocked = hasUpgrade("h", 14) || (player.hardMode && hasUpgrade("h", 11))
                        return
                }
                data.best = data.best.max(data.points)

                let gain = tmp.sci.getResetGain
                let g = gain.times(diff)
                if (!hasUpgrade("sci", 215)) {
                        data.points = data.points.plus(g)
                        data.total = data.total.plus(g)
                } else if (data.points.div(gain.max(1)).lt(20)) {
                        data.points = data.points.plus(gain.times(diff)).min(gain.times(20))
                        data.total = data.total.plus(gain.times(diff))
                }
                
                data.time += diff

                let force1 = player.n.unlocked
                let force2 = player.t.unlocked
                if (force1 || hasUpgrade("sci", 11))    layers.sci.hydrogen_science.update(diff)
                if (force1 || hasUpgrade("o", 13))      layers.sci.oxygen_science.update(diff)
                if (force1 || hasUpgrade("sci", 125))   layers.sci.carbon_science.update(diff)
                if (hasMilestone("n", 14))              layers.sci.nitrogen_science.update(diff)
                if (hasUpgrade("a", 23) || force2)      layers.sci.protein_science.update(diff)
                if (layers.l.grid.getGemEffect(705))    layers.sci.dna_science.update(diff)

                let lsb = layers.sci.buyables
                let tsb = tmp.sci.buyables
                if (data.autobuysci12 && hasMilestone("tokens", 1) || hasMilestone("n", 1)) {
                        if (tsb[12].unlocked) lsb[12].buy()
                }
                if (data.autobuysci11 && hasMilestone("tokens", 2) || hasMilestone("n", 1)) {
                        if (tsb[11].unlocked) lsb[11].buy()
                }
                if (data.autobuysci13 && hasMilestone("tokens", 3) || hasMilestone("n", 1)) {
                        if (tsb[13].unlocked) lsb[13].buy()
                }
                if (data.autobuysci22 && hasMilestone("tokens", 4) || hasMilestone("n", 1)) {
                        if (tsb[22].unlocked) lsb[22].buy()
                }
                if (data.autobuysci21 && hasMilestone("tokens", 5) || hasMilestone("n", 1)) {
                        if (tsb[21].unlocked) lsb[21].buy()
                }
                if (data.autobuysci23 && hasMilestone("tokens", 6) || hasMilestone("n", 1)) {
                        if (tsb[23].unlocked) lsb[23].buy()
                }
                if (data.autobuysci101 && hasMilestone("tokens", 7) || hasMilestone("n", 2)) {
                        if (tsb[101].unlocked) lsb[101].buy()
                }
                if (data.autobuysci102 && hasMilestone("tokens", 8) || hasMilestone("n", 2)) {
                        if (tsb[102].unlocked) lsb[102].buy()
                }
                if (data.autobuysci103 && hasMilestone("tokens", 9) || hasMilestone("n", 2)) {
                        if (tsb[103].unlocked) lsb[103].buy()
                }
                if (data.autobuysci111 && hasMilestone("tokens", 10) || hasMilestone("n", 2)) {
                        if (tsb[111].unlocked) lsb[111].buy()
                }
                if (data.autobuysci112 && hasMilestone("tokens", 11) || hasMilestone("n", 2)) {
                        if (tsb[112].unlocked) lsb[112].buy()
                }
                if (data.autobuysci113 && hasMilestone("tokens", 12) || hasMilestone("n", 2)) {
                        if (tsb[113].unlocked) lsb[113].buy()
                }
                if (hasUpgrade("t", 11)) {
                        if (tsb[501].unlocked) lsb[501].buy()
                }
                if (hasUpgrade("t", 13)) {
                        if (tsb[502].unlocked) lsb[502].buy()
                }
                if (hasUpgrade("t", 14)) {
                        if (tsb[503].unlocked) lsb[503].buy()
                }
                if (hasUpgrade("t", 21)) {
                        if (tsb[511].unlocked) lsb[511].buy()
                }
                if (hasUpgrade("t", 25)) {
                        if (tsb[512].unlocked) lsb[512].buy()
                }
                if (hasUpgrade("t", 31)) {
                        if (tsb[513].unlocked) lsb[513].buy()
                }
                if (hasUpgrade("t", 32)) {
                        if (tsb[521].unlocked) lsb[521].buy()
                }
                if (hasUpgrade("t", 41)) {
                        if (tsb[522].unlocked) lsb[522].buy()
                }
                if (hasUpgrade("t", 42)) {
                        if (tsb[523].unlocked) lsb[523].buy()
                }

                if (data.autobuyhsciupg && hasMilestone("n", 3)) {
                        let boughtYet = false
                        let hSciKeys = ["11", "12", "13", "14", "15", 
                                        "21", "22", "23", "24", "25"]
                        for (i in hSciKeys) {
                                if (boughtYet) break
                                id = hSciKeys[i]
                                boughtYet = buyUpg("sci", id) 
                        }
                }
                if (data.autobuyosciupg && hasMilestone("n", 5)) {
                        let boughtYet = false
                        let oSciKeys = ["101", "102", "103", "104", "105", 
                                        "111", "112", "113", "114", "115",
                                        "121", "122", "123", "124", "125"]
                        for (i in oSciKeys) {
                                if (boughtYet) break
                                id = oSciKeys[i]
                                boughtYet = buyUpg("sci", id) 
                        }
                }
                if (data.autobuycsciupg && hasMilestone("n", 6)) {
                        let boughtYet = false
                        let cSciKeys = ["201", "202", "203", "204", "205", 
                                        "211", "212", "213", "214", "215",
                                        "221", "222", "223", "224", "225",
                                        "231", "232", "233", "234", "235",
                                        "241", "242", "243", "244", "245",]
                        for (i in cSciKeys) {
                                if (boughtYet) break
                                id = cSciKeys[i]
                                boughtYet = buyUpg("sci", id) 
                        }
                }
                if (data.autobuynsciupg && hasMilestone("p", 5)) {
                        let boughtYet = false
                        let nSciKeys = ["301", "302", "303", "304", "305", 
                                        "311", "312", "313", "314", "315",
                                        "321", "322", "323", "324", "325",
                                        "331", "332", "333", "334", "335",
                                        "341", "342", "343", "344", "345",
                                        "351", "352", "353", "354", "355",
                                        "361", "362", "363", "364", "365",]
                        for (i in nSciKeys) {
                                if (boughtYet) break
                                id = nSciKeys[i]
                                boughtYet = buyUpg("sci", id) 
                        }
                }
                if (data.autobuyreuse && hasMilestone("l", 3)) {
                        if (tsb[302].unlocked) lsb[302].buy()
                }
                if (data.autobuyrecycle && hasMilestone("l", 5)) {
                        if (tsb[303].unlocked) lsb[303].buy()
                }
        },
        effect(){
                if (!player.extremeMode) return decimalOne
                return player.sci.points.plus(10).log10()
        },
        effectDescription(){
                return " multiplying Point gain by " + format(tmp.sci.effect) + "."
        },
        row: 0,
        layerShown(){
                return !tmp.sci.deactivated && player.extremeMode && player.sci.unlocked
        },
        prestigeButtonText(){
                return "doesnt display"
        },
        canReset(){
                return false
        },
        hydrogen_science: {
                getResetGain(){ // hscigain hsci gain h sci hydrogenscience hydrogensci hscience
                        let ret = player.h.points.plus(10).log10()

                        ret = ret.times(player.h.deuterium.points.plus(10).log10())
                        ret = ret.times(player.h.atomic_hydrogen.points.plus(10).log10())
                        ret = ret.times(tmp.sci.hydrogen_science.getGainMult)

                        if (hasMilestone("l", 1)) ret = ret.pow(tmp.l.milestones[1].effect)

                        ret = ret.pow(.75) // extreme

                        if (inChallenge("l", 11)) ret = dilate(ret, tmp.l.challenges[11].challengeEffect)

                        return ret
                },
                getGainMult(){
                        let ret = decimalOne

                                                        ret = ret.times(tmp.sci.buyables[11].effect)
                                                        ret = ret.times(tmp.sci.buyables[12].effect)
                                                        ret = ret.times(tmp.sci.buyables[13].effect)
                                                        ret = ret.times(tmp.sci.buyables[21].effect)
                                                        ret = ret.times(tmp.sci.buyables[22].effect)
                        if (hasMilestone("mini", 5)) {
                                let a = 5
                                if (hasMilestone("mini", 6)) a ++
                                if (hasMilestone("mini", 7)) a ++
                                                        ret = ret.times(Decimal.pow(2, a))
                        }
                        if (hasUpgrade("sci", 15))      ret = ret.times(tmp.sci.upgrades[15].effect)
                        if (hasMilestone("mini", 8))    ret = ret.times(Decimal.pow(2, player.mini.buyables[63]))
                        if (hasMilestone("mini", 9))    ret = ret.times(Decimal.pow(2, player.mini.buyables[13]))
                        if (hasMilestone("mini", 10))   ret = ret.times(Decimal.pow(2, player.mini.buyables[61]))
                        if (hasMilestone("mini", 11))   ret = ret.times(Decimal.pow(2, player.mini.buyables[23]))
                        if (hasUpgrade("sci", 22))      ret = ret.times(Decimal.pow(2, player.mini.buyables[12]))
                        if (hasUpgrade("sci", 23))      ret = ret.times(Decimal.pow(2, player.mini.buyables[62]))
                        if (hasUpgrade("sci", 24))      ret = ret.times(Decimal.pow(2, player.mini.buyables[21]))
                        if (hasUpgrade("sci", 25))      ret = ret.times(Decimal.pow(2, player.mini.buyables[11]))
                                                        ret = ret.times(tmp.tokens.effect)
                                                        ret = ret.times(tmp.l.effect)

                        return ret
                },
                update(diff){
                        if (hasUpgrade("sci", 305)) return
                        let data = player.sci.hydrogen_science
                        data.best = data.best.max(data.points)
                        let gainThisTick = tmp.sci.hydrogen_science.getResetGain.times(diff)
                        data.points = data.points.plus(gainThisTick)
                        data.total = data.total.plus(gainThisTick)
                },
        },
        oxygen_science: {
                getResetGain(){ // oscigain osci gain o sci oxygenscience oxygensci oscience
                        let ret = player.o.points.plus(10).log10()

                        ret = ret.times(player.sci.hydrogen_science.points.plus(10).log10())
                        ret = ret.times(player.c.points.plus(10).log10().pow(tmp.sci.buyables[111].effect.plus(1)))
                        ret = ret.times(tmp.sci.oxygen_science.getGainMult)

                        if (hasMilestone("l", 1)) ret = ret.pow(tmp.l.milestones[1].effect)

                        ret = ret.pow(.75) // extreme

                        if (inChallenge("l", 11)) ret = dilate(ret, tmp.l.challenges[11].challengeEffect)

                        return ret
                },
                getGainMult(){
                        let ret = decimalOne

                                                        ret = ret.times(tmp.sci.buyables[101].effect)
                                                        ret = ret.times(tmp.sci.buyables[102].effect)
                                                        ret = ret.times(tmp.sci.buyables[103].effect)
                                                        ret = ret.times(tmp.sci.buyables[112].effect)
                                                        ret = ret.times(tmp.sci.buyables[113].effect)
                        if (hasUpgrade("sci", 104))     ret = ret.times(4)
                                                        ret = ret.times(tmp.tokens.effect)
                        if (hasUpgrade("sci", 114))     ret = ret.times(tmp.sci.upgrades[114].effect)
                        if (hasUpgrade("sci", 122))     ret = ret.times(tmp.sci.upgrades[122].effect)
                        if (hasUpgrade("sci", 125))     ret = ret.times(tmp.sci.upgrades[125].effect)
                                                        ret = ret.times(tmp.n.effect.min("1ee30"))
                        if (hasUpgrade("sci", 304))     ret = ret.times(tmp.sci.upgrades[304].effect)
                        if (hasMilestone("p", 2))       ret = ret.times(tmp.p.milestones[2].effect)
                                                        ret = ret.times(tmp.l.effect)

                        return ret
                },
                update(diff){
                        if (hasUpgrade("sci", 402)) return
                        let data = player.sci.oxygen_science
                        data.best = data.best.max(data.points)
                        let gainThisTick = tmp.sci.oxygen_science.getResetGain.times(diff)
                        data.points = data.points.plus(gainThisTick)
                        data.total = data.total.plus(gainThisTick)
                },
        },
        carbon_science: {
                getResetGain(){ // cscigain csci gain c sci carbonscience carbonsci cscience
                        let ret = player.mini.c_points.points.plus(10).log10()

                        ret = ret.times(player.sci.oxygen_science.points.plus(10).log10())
                        ret = ret.times(Decimal.pow(10, player.tokens.total.sub(50)))
                        ret = ret.times(Decimal.pow(10, tmp.mini.clickables.unlockedSlots))
                        ret = ret.times(tmp.sci.carbon_science.getGainMult)

                        if (hasMilestone("l", 1)) ret = ret.pow(tmp.l.milestones[1].effect)

                        ret = ret.pow(.75) // extreme

                        if (inChallenge("l", 11)) ret = dilate(ret, tmp.l.challenges[11].challengeEffect)

                        return ret
                },
                getGainMult(){
                        let ret = decimalOne

                        if (hasUpgrade("sci", 205))     ret = ret.times(Decimal.pow(3, tmp.sci.upgrades.carbonUpgradesLength))
                        if (hasUpgrade("sci", 214))     ret = ret.times(Decimal.pow(2, tmp.sci.upgrades.carbonUpgradesLength))
                        if (hasUpgrade("sci", 222))     ret = ret.times(Decimal.pow(2, tmp.sci.upgrades.carbonUpgradesLength))
                                                        ret = ret.times(tmp.n.effect.min("1e500"))
                                                        ret = ret.times(tmp.l.effect)

                        return ret
                },
                update(diff){
                        if (hasUpgrade("sci", 415)) return
                        let data = player.sci.carbon_science
                        data.best = data.best.max(data.points)
                        let gain = tmp.sci.carbon_science.getResetGain
                        let gainThisTick = gain.times(diff)
                        if (!hasUpgrade("sci", 214)) {
                                data.points = data.points.plus(gainThisTick)
                        } else if (data.points.div(gain.max(1)).lt(10)) {
                                data.points = data.points.plus(gainThisTick).min(gain.times(10))
                        }
                        data.total = data.total.plus(gainThisTick)
                },
        },
        nitrogen_science: {
                getResetGain(){ // nscigain nsci gain n sci nitrogenscience nitrogensci nscience
                        let ret = player.n.points.plus(10).log10()

                        ret = ret.times(player.sci.carbon_science.points.plus(10).log10())
                        ret = ret.times(Decimal.pow(2, player.tokens.total.sub(90)))
                        ret = ret.times(Decimal.pow(16, layerChallengeCompletions("n")))
                        ret = ret.times(tmp.sci.nitrogen_science.getGainMult)

                        if (hasUpgrade("l", 11) && hasMilestone("l", 1)) {
                                ret = ret.pow(tmp.l.milestones[1].effect)
                        }

                        ret = ret.pow(.75) // extreme

                        if (inChallenge("l", 11)) ret = dilate(ret, tmp.l.challenges[11].challengeEffect)

                        return ret
                },
                getGainMult(){
                        let ret = decimalOne

                        if (hasUpgrade("sci", 313))     ret = ret.times(tmp.sci.upgrades[313].effect)
                        if (hasUpgrade("sci", 314))     ret = ret.times(player.mini.d_points.points.plus(10).log10().min(1e20))
                        if (hasUpgrade("sci", 323))     ret = ret.times(tmp.sci.upgrades[323].effect)
                        if (hasUpgrade("sci", 341))     ret = ret.times(player.n.points.max(10).log10().min(1e50))
                        if (hasUpgrade("p", 103))       ret = ret.times(player.p.points.plus(10).log10().min(1e30).pow(player.p.upgrades.length))
                                                        ret = ret.times(tmp.l.effect.min(1e10))
                        if (hasUpgrade("sci", 402))     ret = ret.times(player.a.points.max(1).pow(tmp.sci.upgrades.proteinUpgradesLength))
                        if (hasUpgrade("sci", 425))     ret = ret.times(player.l.points.max(1))

                        return ret
                },
                update(diff){
                        if (hasUpgrade("sci", 454)) return
                        let data = player.sci.nitrogen_science
                        data.best = data.best.max(data.points)
                        let gain = tmp.sci.nitrogen_science.getResetGain
                        let gainThisTick = gain.times(diff)
                        if (!hasUpgrade("sci", 323)) {
                                data.points = data.points.plus(gainThisTick)
                        } else if (data.points.div(gain).lt(10)) {
                                data.points = data.points.plus(gainThisTick).min(gain.times(10))
                        }
                        data.total = data.total.plus(gainThisTick)
                },
        },
        protein_science: {
                getResetGain(){ // proscigain prosci gain pro sci proteinscience proteinsci pscience
                        let ret = player.a.protein.points.plus(10).log10()

                        ret = ret.times(player.sci.nitrogen_science.points.plus(10).log10())
                        ret = ret.times(Decimal.pow(2, player.tokens.total.sub(400)))
                        ret = ret.times(Decimal.pow(16, tmp.l.getNonZeroGemCount))
                        ret = ret.times(tmp.sci.protein_science.getGainMult)

                        ret = ret.pow(.75) // extreme

                        return ret
                },
                getGainMult(){
                        let ret = decimalOne

                        if (hasUpgrade("sci", 401))     ret = ret.times(Decimal.pow(2, tmp.sci.upgrades.proteinUpgradesLength))
                        if (hasUpgrade("sci", 404))     ret = ret.times(player.a.points.plus(10).log10())
                        if (hasUpgrade("sci", 405))     ret = ret.times(player.tokens.total.max(1))
                                                        ret = ret.times(layers.l.grid.getGemEffect(305))
                        if (hasUpgrade("sci", 431))     ret = ret.times(Decimal.pow(2, tmp.l.getMaxedGemCount))
                        if (hasUpgrade("a", 43))        ret = ret.times(Decimal.pow(1.03, getBuyableAmount("a", 22)))
                                                        ret = ret.times(layers.l.grid.getGemEffect(703).pow(tmp.l.getNonZeroGemCount))
                                                        ret = ret.times(tmp.t.effect)

                        return ret
                },
                update(diff){
                        let data = player.sci.protein_science
                        data.best = data.best.max(data.points)
                        let gain = tmp.sci.protein_science.getResetGain
                        let gainThisTick = gain.times(diff)
                        if (!hasUpgrade("sci", 405)) {
                                data.points = data.points.plus(gainThisTick)
                        } else if (data.points.div(gain).lt(10)) {
                                data.points = data.points.plus(gainThisTick).min(gain.times(10))
                        }
                        data.total = data.total.plus(gainThisTick)
                },
        },
        dna_science: {
                getResetGain(){ // dnascigain dnasci gain dna sci gain dnascience dnasci pscience
                        let ret = player.d.points.plus(10).log10()

                        let data = player.l.challenges
                        let comps = 0
                        let keys = Object.keys(player.l.challenges)
                        for (i in keys){
                                id = keys[i]
                                if (id == 11 || id == 12) continue
                                comps += data[id]
                        }

                        ret = ret.times(player.sci.protein_science.points.plus(10).log10())
                        ret = ret.times(Decimal.pow(2, player.tokens.total.sub(600)))
                        ret = ret.times(Decimal.pow(32, comps))
                        ret = ret.times(Decimal.pow(4, tmp.l.getNonZeroGemCount))
                        ret = ret.times(tmp.sci.dna_science.getGainMult)

                        ret = ret.pow(.75) // extreme

                        return ret
                },
                getGainMult(){
                        let ret = decimalOne

                        if (hasUpgrade("sci", 502))     ret = ret.times(Decimal.tetrate(tmp.sci.upgrades.dnaUpgradesLength, 2))
                                                        ret = ret.times(player.sci.dna_science.points.plus(10).log10().pow(tmp.sci.buyables[502].effect))
                        if (hasUpgrade("sci", 503))     ret = ret.times(player.d.points.max(10).log10().log10().max(1).pow(tmp.sci.upgrades.dnaUpgradesLength))
                                                        ret = ret.times(player.points.max(100).log10().log10().log10().max(1).pow(tmp.sci.buyables[503].effect))
                                                        ret = ret.times(layers.l.grid.getGemEffect(108))
                                                        ret = ret.times(tmp.sci.buyables[511].dna_sci_effect)
                                                        ret = ret.times(tmp.sci.buyables[513].dna_sci_effect)
                                                        ret = ret.times(tmp.sci.buyables[521].dna_sci_effect)
                                                        ret = ret.times(tmp.sci.buyables[522].dna_sci_effect)
                                                        ret = ret.times(tmp.sci.buyables[523].dna_sci_effect)
                        if (true) {
                                let exp = Math.max(0, tmp.l.getNonZeroGemCount - 48)
                                                        ret = ret.times(layers.l.grid.getGemEffect(308).pow(exp))
                        }
                        if (hasUpgrade("sci", 505))     ret = ret.times(tmp.sci.buyables[511].effect.pow(2.3).plus(1))
                        if (layers.l.grid.getGemEffect(408)) {
                                                        ret = ret.times(8.315)
                        }
                        if (hasMilestone("d", 28))      ret = ret.times(20)
                        if (hasUpgrade("d", 32))        ret = ret.times(Decimal.pow(2, player.d.upgrades.length))
                                                        ret = ret.times(Decimal.pow(tmp.l.getNonZeroGemCount, tmp.sci.buyables[512].effect).max(1))
                        if (hasMilestone("cells", 4))   ret = ret.times(Decimal.pow(2, player.cells.milestones.length))
                        if (hasChallenge("l", 92))      ret = ret.times(tmp.l.challenges[92].reward)
                        if (hasUpgrade("cells", 313))   ret = ret.times(player.cells.kappa.best.max(10).log10())
                        if (hasMilestone("cells", 12))  ret = ret.times(player.cells.milestones.length ** 2.5)
                                                        ret = ret.times(tmp.cells.buyables[12].effect)
                        if (hasUpgrade("t", 85))        ret = ret.times(tmp.cells.buyables[13].effect)
                        if (hasUpgrade("sci", 514))     ret = ret.times(player.cells.stem_cells.points.plus(10).log10())
                        if (!hasUpgrade("an", 51))      ret = ret.times(tmp.cells.challenges[11].rewardEffect)
                        if (hasMilestone("cells", 17) && !hasMilestone("ch", 13))  {
                                let exp = player.cells.activeChallenge ? 2 : 1
                                                        ret = ret.times(Math.max(1, player.cells.upgrades.length) ** exp)
                        }
                        if (hasMilestone("cells", 31))  ret = ret.times(Decimal.pow(1.1, player.tokens.total))
                                                        ret = ret.times(tmp.t.effect)
                        if (hasUpgrade("sci", 545))     ret = ret.times(tmp.cells.buyables[111].effect)
                        if (hasUpgrade("cells", 42))    ret = ret.times(Decimal.pow("1e1000", player.tokens.tokens2.total))

                        return ret
                },
                update(diff){
                        let data = player.sci.dna_science
                        data.best = data.best.max(data.points)
                        let gain = tmp.sci.dna_science.getResetGain
                        let gainThisTick = gain.times(diff)
                        if (!false) {
                                data.points = data.points.plus(gainThisTick)
                        } else if (data.points.div(gain).lt(10)) {
                                data.points = data.points.plus(gainThisTick).min(gain.times(10))
                        }
                        data.total = data.total.plus(gainThisTick)
                },
        },
        upgrades: {
                rows: 10,
                cols: 5,
                carbonUpgradesLength(){
                        let a = 0
                        let ids = [201, 202, 203, 204, 205, 
                                   211, 212, 213, 214, 215, 
                                   221, 222, 223, 224, 225, 
                                   231, 232, 233, 234, 235,
                                   241, 242, 243, 244, 245,]

                        for (i in ids) {
                                a += hasUpgrade("sci", ids[i])
                        }

                        return a
                },
                nitrogenUpgradesLength(){
                        let a = 0
                        let ids = [301, 302, 303, 304, 305, 
                                   311, 312, 313, 314, 315, 
                                   321, 322, 323, 324, 325, 
                                   331, 332, 333, 334, 335,
                                   341, 342, 343, 344, 345,
                                   351, 352, 353, 354, 355,
                                   361, 362, 363, 364, 365,]

                        for (i in ids) {
                                a += hasUpgrade("sci", ids[i])
                        }

                        return a
                },
                proteinUpgradesLength(){
                        let a = 0
                        let ids = [401, 402, 403, 404, 405, 
                                   411, 412, 413, 414, 415, 
                                   421, 422, 423, 424, 425, 
                                   431, 432, 433, 434, 435,
                                   441, 442, 443, 444, 445,
                                   451, 452, 453, 454, 455,]

                        for (i in ids) {
                                a += hasUpgrade("sci", ids[i])
                        }

                        return a
                },
                dnaUpgradesLength(){
                        let a = 0
                        let ids = [501, 502, 503, 504, 505, 
                                   511, 512, 513, 514, 515, 
                                   521, 522, 523, 524, 525, 
                                   531, 532, 533, 534, 535,
                                   541, 542, 543, 544, 545,
                                   551, 552, 553, 554, 555,
                                   561, 562, 563, 564, 565,
                                   571, 572, 573, 574, 575,]

                        for (i in ids) {
                                a += hasUpgrade("sci", ids[i])
                        }

                        return a
                },
                11: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>H Sci I"
                        },
                        description(){
                                return "Begin production of Hydrogen Science and Science effect affects Hydrogen gain"
                        },
                        cost:() => new Decimal(500),
                        unlocked(){
                                return !hasUpgrade("sci", 305)
                        }, // hasUpgrade("sci", 11)
                },
                12: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>H Sci II"
                        },
                        description(){
                                return "Unlock three buyables and double Deuterium and Atomic Hydrogen gain"
                        },
                        cost:() => new Decimal(500),
                        currencyLocation:() => player.sci.hydrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Hydrogen Science",
                        unlocked(){
                                return hasUpgrade("sci", 11) || player.n.unlocked
                        }, // hasUpgrade("sci", 12)
                },
                13: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>H Sci III"
                        },
                        description(){
                                return "<bdi style='font-size: 80%'>Per buyable(<sup>*</sup>) add 1 to Hydrogen gain formula maximum and effective achievements for Hydrogen III</bdi>"
                        },
                        cost:() => new Decimal(1e9),
                        effect(){
                                let a = new Decimal(getBuyableAmount("sci", 11)).plus(getBuyableAmount("sci", 12))
                                a = a.plus(getBuyableAmount("sci", 13)).plus(getBuyableAmount("sci", 21))

                                if (hasMilestone("mini", 3)) a = a.times(2)

                                return a
                        },
                        currencyLocation:() => player.sci.hydrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Hydrogen Science",
                        unlocked(){
                                return hasUpgrade("sci", 12) || player.n.unlocked
                        }, // hasUpgrade("sci", 13)
                },
                14: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>H Sci IV"
                        },
                        description(){
                                if (hasUpgrade("h", 44) && player.mini.b_points.points.lt(5e11)) return "You need 5e11 B Points to unlock" 
                                let a = "<bdi style='font-size: 80%'>Unlock another buyable and each buyable multiplies B Point gain by 1+amount<sup>2</sup>"
                                if (hasUpgrade("h", 44)) a = a.slice(0,103)
                                return a + "<br>Currently: " + formatWhole(tmp.sci.upgrades[14].effect) + "</bdi>"
                        },
                        canAfford(){
                                return !hasUpgrade("h", 44) || player.mini.b_points.points.gte(5e11)
                        },
                        cost:() => new Decimal(hasUpgrade("h", 44) ? 5e71 : 1e16),
                        currencyLocation:() => player.sci.hydrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Hydrogen Science",
                        effect(){
                                let ids = [11,12,13,21,22,23]
                                let ret = decimalOne
                                let exp = 1 + !hasUpgrade("h", 44)
                                for (i in ids){
                                        id = ids[i]
                                        ret = ret.times(player.sci.buyables[id].pow(exp).plus(1))
                                }
                                return ret
                        },
                        unlocked(){
                                return hasUpgrade("h", 45) || hasUpgrade("sci", 14) || player.n.unlocked
                        }, // hasUpgrade("sci", 14)
                },
                15: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>H Sci V"
                        },
                        description(){
                                let a = "<bdi style='font-size: 80%'>Per A buyable, multiply Hydrogen Science and A Point gain by 1.1 and unlock another buyable</bdi>"
                                return a + "<br>Currently: " + formatWhole(tmp.sci.upgrades[15].effect) + "</bdi>"
                        },
                        cost:() => new Decimal(hasUpgrade("h", 45) ? 1e62 : 1e18),
                        currencyLocation:() => player.sci.hydrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Hydrogen Science",
                        effect(){
                                let ids = [11,12,13,21,23,61,62,63]
                                let amt = decimalZero
                                for (i in ids){
                                        id = ids[i]
                                        amt = amt.plus(player.mini.buyables[id])
                                }
                                return Decimal.pow(1.1, amt)
                        },
                        unlocked(){
                                return hasUpgrade("h", 44) || hasUpgrade("sci", 15) || player.n.unlocked
                        }, // hasUpgrade("sci", 15)
                },
                21: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>H Sci VI"
                        },
                        description(){
                                return "Remove 60 Seconds' base cost"
                        },
                        cost:() => new Decimal(1e152),
                        currencyLocation:() => player.sci.hydrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Hydrogen Science",
                        unlocked(){
                                return hasUpgrade("h", 44) && hasUpgrade("h", 45) || player.n.unlocked
                        }, // hasUpgrade("sci", 21)
                },
                22: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>H Sci VII"
                        },
                        description(){
                                return "Remove Orange's base cost and each Orange doubles Hydrogen Science gain"
                        },
                        cost:() => new Decimal(1e168),
                        currencyLocation:() => player.sci.hydrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Hydrogen Science",
                        unlocked(){
                                return hasUpgrade("sci", 21) || player.n.unlocked
                        }, // hasUpgrade("sci", 22)
                },
                23: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>H Sci VIII"
                        },
                        description(){
                                return "Remove Indigo's base cost and each Indigo doubles Hydrogen Science gain"
                        },
                        cost:() => new Decimal(1e198),
                        currencyLocation:() => player.sci.hydrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Hydrogen Science",
                        unlocked(){
                                return hasUpgrade("sci", 22) || player.n.unlocked
                        }, // hasUpgrade("sci", 23)
                },
                24: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>H Sci IX"
                        },
                        description(){
                                return "Remove White's base cost and each White doubles Hydrogen Science gain"
                        },
                        cost:() => new Decimal(1e240),
                        currencyLocation:() => player.sci.hydrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Hydrogen Science",
                        unlocked(){
                                return hasUpgrade("sci", 23) || player.n.unlocked
                        }, // hasUpgrade("sci", 24)
                },
                25: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>H Sci X"
                        },
                        description(){
                                return "Remove Red's base cost and each Red doubles Hydrogen Science gain"
                        },
                        cost:() => new Decimal(1e269),
                        currencyLocation:() => player.sci.hydrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Hydrogen Science",
                        unlocked(){
                                return hasUpgrade("sci", 24) || player.n.unlocked
                        }, // hasUpgrade("sci", 25)
                },
                101: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>O Sci I"
                        },
                        description(){
                                return "Science effects Oxygen gain and remove B21's base cost"
                        },
                        cost:() => new Decimal(1e5),
                        currencyLocation:() => player.sci.oxygen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Oxygen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 402)) return false
                                return hasUpgrade("o", 13) || player.n.unlocked
                        }, // hasUpgrade("sci", 101)
                },
                102: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>O Sci II"
                        },
                        description(){
                                return "Unlock three buyables and remove B31's base cost"
                        },
                        cost:() => new Decimal(1e5),
                        currencyLocation:() => player.sci.oxygen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Oxygen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 402)) return false
                                return hasUpgrade("sci", 101) || player.n.unlocked
                        }, // hasUpgrade("sci", 102)
                },
                103: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>O Sci III"
                        },
                        description(){
                                return "Unlock a buyable and remove B32's base cost"
                        },
                        cost:() => new Decimal(1e19),
                        currencyLocation:() => player.sci.oxygen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Oxygen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 402)) return false
                                return hasUpgrade("h", 65) || player.n.unlocked
                        }, // hasUpgrade("sci", 103)
                },
                104: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>O Sci IV"
                        },
                        description(){
                                return "Oxygen Science multiplies B Point and color gain, quadruple Oxygen Science gain, and remove 21%'s base cost"
                        },
                        cost:() => new Decimal(1e30),
                        currencyLocation:() => player.sci.oxygen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Oxygen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 402)) return false
                                return hasUpgrade("sci", 103) || player.n.unlocked
                        }, // hasUpgrade("sci", 104)
                },
                105: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>O Sci V"
                        },
                        description(){
                                return "Remove Artificial's base cost"
                        },
                        cost:() => new Decimal(1e36),
                        currencyLocation:() => player.sci.oxygen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Oxygen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 402)) return false
                                return hasUpgrade("sci", 104) || player.n.unlocked
                        }, // hasUpgrade("sci", 105)
                },
                111: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>O Sci VI"
                        },
                        description(){
                                return "Remove Cyclic's base cost"
                        },
                        cost:() => new Decimal(5e74),
                        currencyLocation:() => player.sci.oxygen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Oxygen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 402)) return false
                                return (player.tokens.total.gt(0) && hasUpgrade("sci", 105)) || player.n.unlocked
                        }, // hasUpgrade("sci", 111)
                },
                112: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>O Sci VII"
                        },
                        description(){
                                return "Remove Atomic and B33's base cost"
                        },
                        cost:() => new Decimal(5e94),
                        currencyLocation:() => player.sci.oxygen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Oxygen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 402)) return false
                                return (hasUpgrade("sci", 111) && player.tokens.total.gt(8)) || player.n.unlocked
                        }, // hasUpgrade("sci", 112)
                },
                113: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>O Sci VIII"
                        },
                        description(){
                                return "Remove Chemistry's base cost"
                        },
                        cost:() => new Decimal(5e97),
                        currencyLocation:() => player.sci.oxygen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Oxygen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 402)) return false
                                return (hasUpgrade("sci", 112) && player.tokens.total.gt(11)) || player.n.unlocked
                        }, // hasUpgrade("sci", 113)
                },
                114: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>O Sci IX"
                        },
                        description(){
                                return "<bdi style='font-size: 80%'>Remove Natural's base cost and per token squared multiply Oxygen Science gain by 1.05</bdi>"
                        },
                        effect(){
                                return Decimal.pow(1.05, player.tokens.total.pow(2))
                        },
                        effectDisplay(){
                                return format(tmp.sci.upgrades[114].effect)
                        },
                        cost:() => new Decimal(1e136),
                        currencyLocation:() => player.sci.oxygen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Oxygen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 402)) return false
                                return hasUpgrade("tokens", 61) || hasUpgrade("sci", 114) || player.n.unlocked
                        }, // hasUpgrade("sci", 114)
                },
                115: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>O Sci X"
                        },
                        description(){
                                return "21%'s log10s become ln and triple coin gain but lose 20x Oxygen"
                        },
                        cost:() => new Decimal(2e157),
                        currencyLocation:() => player.sci.oxygen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Oxygen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 402)) return false
                                return hasUpgrade("sci", 114) || player.n.unlocked
                        }, // hasUpgrade("sci", 115)
                },
                121: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>O Sci XI"
                        },
                        description(){
                                return "All Hydrogen Science buyable's log10s become ln and add 1 to Artificial base"
                        },
                        cost:() => new Decimal(5e196),
                        currencyLocation:() => player.sci.oxygen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Oxygen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 402)) return false
                                return hasMilestone("tokens", 20) || player.n.unlocked
                        }, // hasUpgrade("sci", 121)
                },
                122: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>O Sci XII"
                        },
                        description(){
                                return "Per token multiply Oxygen Science gain by tokens"
                        },
                        cost:() => new Decimal(1e281),
                        currencyLocation:() => player.sci.oxygen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Oxygen Science",
                        effect(){
                                let t = player.tokens.total.max(1)
                                return t.pow(t)
                        },
                        effectDisplay(){
                                return format(tmp.sci.upgrades[122].effect)
                        },
                        unlocked(){
                                if (hasUpgrade("sci", 402)) return false
                                return hasMilestone("tokens", 22) || player.n.unlocked
                        }, // hasUpgrade("sci", 122)
                },
                123: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>O Sci XIII"
                        },
                        description(){
                                return "Per upgrade add .01 to 6 D" + "e" + "caseconds' base"
                        },
                        cost:() => new Decimal("5e345"),
                        currencyLocation:() => player.sci.oxygen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Oxygen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 402)) return false
                                return hasUpgrade("sci", 122) || player.n.unlocked
                        }, // hasUpgrade("sci", 123)
                },
                124: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>O Sci XIV"
                        },
                        description(){
                                return "Per fifth token add 1 to all Oxygen and Hydrogen buyables' exponential dividers"
                        },
                        effect(){
                                return player.tokens.total.div(5).floor()
                        },
                        effectDisplay(){
                                return formatWhole(tmp.sci.upgrades[124].effect)
                        },
                        cost:() => new Decimal("1e363"),
                        currencyLocation:() => player.sci.oxygen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Oxygen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 402)) return false
                                return hasUpgrade("sci", 123) || player.n.unlocked
                        }, // hasUpgrade("sci", 124)
                },
                125: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>O Sci XV"
                        },
                        description(){
                                return "<bdi style='font-size: 80%'>Science effect affects C point gain, total C buyables multiplies Oxygen science gain, and unlock Carbon Research</bdi>"
                        },
                        effect(){
                                let ids = [71, 72, 73,
                                           81, 82, 83,
                                           91, 92, 93,
                                           101,102,103,
                                           111,112,113,]
                                let a = decimalZero
                                for (i in ids) {
                                        a = a.plus(getBuyableAmount("mini", ids[i]))
                                }
                                return a.max(1)
                        },
                        cost:() => new Decimal("3e412"),
                        currencyLocation:() => player.sci.oxygen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Oxygen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 402)) return false
                                return tmp.mini.tabFormat.C.unlocked || player.n.unlocked
                        }, // hasUpgrade("sci", 125)
                },
                201: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>C Sci I"
                        },
                        description(){
                                return "Per upgrade multiply C Point gain by log10(Carbon)"
                        },
                        effect(){
                                return player.c.points.plus(10).log10().pow(tmp.sci.upgrades.carbonUpgradesLength)
                        },
                        effectDisplay(){
                                return format(tmp.sci.upgrades[201].effect)
                        },
                        cost:() => new Decimal(1e3),
                        currencyLocation:() => player.sci.carbon_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Carbon Science",
                        unlocked(){
                                if (hasUpgrade("sci", 415)) return false
                                return hasUpgrade("sci", 125) || player.n.unlocked
                        }, // hasUpgrade("sci", 201)
                },
                202: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>C Sci II"
                        },
                        description(){
                                if (!hasUpgrade("sci", 202) && !hasMilestone("n", 3) && !player.shiftAlias) return "Requires: 1e15 C Points<br>Shift for effect"
                                return "Per upgrade multiply Point gain by C Points"
                        },
                        effect(){
                                return player.mini.c_points.points.max(1).pow(tmp.sci.upgrades.carbonUpgradesLength)
                        },
                        canAfford(){
                                return player.mini.c_points.points.gte(1e15) || hasMilestone("n", 3)
                        },
                        cost:() => new Decimal(6e3),
                        currencyLocation:() => player.sci.carbon_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Carbon Science",
                        unlocked(){
                                if (hasUpgrade("sci", 415)) return false
                                return hasUpgrade("sci", 201) || player.n.unlocked
                        }, // hasUpgrade("sci", 202)
                },
                203: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>C Sci III"
                        },
                        description(){
                                if (!hasUpgrade("sci", 203) && !hasMilestone("n", 3) && !player.shiftAlias) return "Requires: 1e31 C Points<br>Shift for effect"
                                return "You have one less token for prestige purposes"
                        },
                        effect(){
                                return player.mini.c_points.points.max(1).pow(tmp.sci.upgrades.carbonUpgradesLength)
                        },
                        canAfford(){
                                return player.mini.c_points.points.gte(1e31) || hasMilestone("n", 3)
                        },
                        cost:() => new Decimal(1e5),
                        currencyLocation:() => player.sci.carbon_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Carbon Science",
                        unlocked(){
                                if (hasUpgrade("sci", 415)) return false
                                return hasUpgrade("sci", 202) || player.n.unlocked
                        }, // hasUpgrade("sci", 203)
                },
                204: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>C Sci IV"
                        },
                        description(){
                                if (!hasUpgrade("sci", 204) && !hasMilestone("n", 3) && !player.shiftAlias) return "Requires: 1e41 C Points<br>Shift for effect"
                                return "Remove C Point Gain 1's base cost"
                        },
                        effect(){
                                return player.mini.c_points.points.max(1).pow(tmp.sci.upgrades.carbonUpgradesLength)
                        },
                        canAfford(){
                                return player.mini.c_points.points.gte(1e41) || hasMilestone("n", 3)
                        },
                        cost:() => new Decimal(2e6),
                        currencyLocation:() => player.sci.carbon_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Carbon Science",
                        unlocked(){
                                if (hasUpgrade("sci", 415)) return false
                                return hasUpgrade("sci", 203) || player.n.unlocked
                        }, // hasUpgrade("sci", 204)
                },
                205: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>C Sci V"
                        },
                        description(){
                                if (!hasUpgrade("sci", 205) && !hasMilestone("n", 3) && !player.shiftAlias) return "Requires: 1e48 C Points<br>Shift for effect"
                                return "Per upgrade triple Carbon Science gain"
                        },
                        canAfford(){
                                return player.mini.c_points.points.gte(1e48) || hasMilestone("n", 3)
                        },
                        cost:() => new Decimal(2e6),
                        currencyLocation:() => player.sci.carbon_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Carbon Science",
                        unlocked(){
                                if (hasUpgrade("sci", 415)) return false
                                return hasUpgrade("sci", 204) || player.n.unlocked
                        }, // hasUpgrade("sci", 205)
                },
                211: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>C Sci VI"
                        },
                        description(){
                                if (!hasUpgrade("sci", 211) && !hasMilestone("n", 3) && !player.shiftAlias) return "Requires: 1e54 C Points<br>Shift for effect"
                                return "Remove C Point Gain 2's base cost"
                        },
                        canAfford(){
                                return player.mini.c_points.points.gte(1e54) || hasMilestone("n", 3)
                        },
                        cost:() => new Decimal(5e7),
                        currencyLocation:() => player.sci.carbon_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Carbon Science",
                        unlocked(){
                                if (hasUpgrade("sci", 415)) return false
                                return hasUpgrade("sci", 205) || player.n.unlocked
                        }, // hasUpgrade("sci", 211)
                },
                212: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>C Sci VII"
                        },
                        description(){
                                if (!hasUpgrade("sci", 212) && !hasMilestone("n", 3) && !player.shiftAlias) return "Requires: 2e71 C Points<br>Shift for effect"
                                return "Carbon Science multiplies C Point gain"
                        },
                        canAfford(){
                                return player.mini.c_points.points.gte(2e71) || hasMilestone("n", 3)
                        },
                        cost:() => new Decimal(3e8),
                        currencyLocation:() => player.sci.carbon_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Carbon Science",
                        unlocked(){
                                if (hasUpgrade("sci", 415)) return false
                                return hasUpgrade("sci", 211) || player.n.unlocked
                        }, // hasUpgrade("sci", 212)
                },
                213: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>C Sci VIII"
                        },
                        description(){
                                if (!hasUpgrade("sci", 213) && !hasMilestone("n", 3) && !player.shiftAlias) return "Requires: 3e116 C Points<br>Shift for effect"
                                return "Per upgrade log10(Carbon Science) multiplies C Point gain"
                        },
                        effect(){
                                return player.sci.carbon_science.points.plus(10).log10().pow(tmp.sci.upgrades.carbonUpgradesLength)
                        },
                        effectDisplay(){
                                return format(tmp.sci.upgrades[213].effect)
                        },
                        canAfford(){
                                return player.mini.c_points.points.gte(3e116) || hasMilestone("n", 3)
                        },
                        cost:() => new Decimal(5e9),
                        currencyLocation:() => player.sci.carbon_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Carbon Science",
                        unlocked(){
                                if (hasUpgrade("sci", 415)) return false
                                return hasUpgrade("sci", 212) || player.n.unlocked
                        }, // hasUpgrade("sci", 213)
                },
                214: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>C Sci IX"
                        },
                        description(){
                                if (!hasUpgrade("sci", 214) && !hasMilestone("n", 3) && !player.shiftAlias) return "Requires: 1e151 C Points<br>Shift for effect"
                                return "Per upgrade double Carbon Science gain but you can only gain 10 seconds of Carbon Science production"
                        },
                        canAfford(){
                                return player.mini.c_points.points.gte(1e151) || hasMilestone("n", 3)
                        },
                        cost:() => new Decimal(2e10),
                        currencyLocation:() => player.sci.carbon_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Carbon Science",
                        unlocked(){
                                if (hasUpgrade("sci", 415)) return false
                                return hasUpgrade("sci", 213) || player.n.unlocked
                        }, // hasUpgrade("sci", 214)
                },
                215: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>C Sci X"
                        },
                        description(){
                                if (!hasUpgrade("sci", 215) && !hasMilestone("n", 3) && !player.shiftAlias) return "Requires: 1e173 C Points<br>Shift for effect"
                                return "Tokens<sup>2</sup> multiply Science gain but you can only gain 20 seconds of Science production"
                        },
                        canAfford(){
                                return player.mini.c_points.points.gte(1e173) || hasMilestone("n", 3)
                        },
                        cost:() => new Decimal(7.79e12),
                        currencyLocation:() => player.sci.carbon_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Carbon Science",
                        unlocked(){
                                if (hasUpgrade("sci", 415)) return false
                                return hasUpgrade("sci", 214) || player.n.unlocked
                        }, // hasUpgrade("sci", 215)
                },
                221: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>C Sci XI"
                        },
                        description(){
                                if (!hasUpgrade("sci", 221) && !hasMilestone("n", 3) && !player.shiftAlias) return "Requires: 2e187 C Points<br>Shift for effect"
                                return "Remove <bdi style='color:#CC0033'>C</bdi> Increase 1's base cost"
                        },
                        canAfford(){
                                return player.mini.c_points.points.gte(2e187) || hasMilestone("n", 3)
                        },
                        cost:() => new Decimal(1.77e14),
                        currencyLocation:() => player.sci.carbon_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Carbon Science",
                        unlocked(){
                                if (hasUpgrade("sci", 415)) return false
                                return hasUpgrade("sci", 215) || player.n.unlocked
                        }, // hasUpgrade("sci", 221)
                },
                222: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>C Sci XII"
                        },
                        description(){
                                if (!hasUpgrade("sci", 222) && !hasMilestone("n", 3) && !player.shiftAlias) return "Requires: 1e201 C Points<br>Shift for effect"
                                return "Per upgrade double Carbon Science gain"
                        },
                        canAfford(){
                                return player.mini.c_points.points.gte(1e201) || hasMilestone("n", 3)
                        },
                        cost:() => new Decimal(7.17e14),
                        currencyLocation:() => player.sci.carbon_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Carbon Science",
                        unlocked(){
                                if (hasUpgrade("sci", 415)) return false
                                return hasUpgrade("sci", 221) || player.n.unlocked
                        }, // hasUpgrade("sci", 222)
                },
                223: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>C Sci XIII"
                        },
                        description(){
                                if (!hasUpgrade("sci", 223) && !hasMilestone("n", 3) && !player.shiftAlias) return "Requires: 1e230 C Points<br>Shift for effect"
                                return "Remove the C Point Gain 3's base cost but square root the character effect on C point gain"
                        },
                        canAfford(){
                                return player.mini.c_points.points.gte(1e230) || hasMilestone("n", 3)
                        },
                        cost:() => new Decimal(1.5e18),
                        currencyLocation:() => player.sci.carbon_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Carbon Science",
                        unlocked(){
                                if (hasUpgrade("sci", 415)) return false
                                return hasUpgrade("sci", 222) || player.n.unlocked
                        }, // hasUpgrade("sci", 223)
                },
                224: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>C Sci XIV"
                        },
                        description(){
                                if (!hasUpgrade("sci", 224) && !hasMilestone("n", 3) && !player.shiftAlias) return "Requires: 1.80e308 C Points<br>Shift for effect"
                                return "C Point Gain 1 cost exponent is 1.21"
                        },
                        canAfford(){
                                return player.mini.c_points.points.gte("1.8e308") || hasMilestone("n", 3)
                        },
                        cost:() => new Decimal(3.89e20),
                        currencyLocation:() => player.sci.carbon_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Carbon Science",
                        unlocked(){
                                if (hasUpgrade("sci", 415)) return false
                                return hasUpgrade("sci", 223) || player.n.unlocked
                        }, // hasUpgrade("sci", 224)
                },
                225: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>C Sci XV"
                        },
                        description(){
                                if (!hasUpgrade("sci", 225) && !hasMilestone("n", 3) && !player.shiftAlias) return "Requires: 1e653 C Points<br>Shift for effect"
                                return "C Point Gain 1 cost exponent is 1.2"
                        },
                        canAfford(){
                                return player.mini.c_points.points.gte("1e653") || hasMilestone("n", 3)
                        },
                        cost:() => new Decimal(4.37e21),
                        currencyLocation:() => player.sci.carbon_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Carbon Science",
                        unlocked(){
                                if (hasUpgrade("sci", 415)) return false
                                return hasUpgrade("sci", 224) || player.n.unlocked
                        }, // hasUpgrade("sci", 225)
                },
                231: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>C Sci XVI"
                        },
                        description(){
                                if (!hasUpgrade("sci", 231) && !hasMilestone("n", 3) && !player.shiftAlias) return "Requires: 1e815 C Points<br>Shift for effect"
                                return "Per upgrade add .005 to <bdi style='color:#CC0033'>C</bdi> Increase 1 base"
                        },
                        canAfford(){
                                return player.mini.c_points.points.gte("1e815") || hasMilestone("n", 3)
                        },
                        cost:() => new Decimal(3.30e22),
                        currencyLocation:() => player.sci.carbon_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Carbon Science",
                        unlocked(){
                                if (hasUpgrade("sci", 415)) return false
                                return hasUpgrade("sci", 225) || player.n.unlocked
                        }, // hasUpgrade("sci", 231)
                },
                232: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>C Sci XVII"
                        },
                        description(){
                                if (!hasUpgrade("sci", 232) && !hasMilestone("n", 3) && !player.shiftAlias) return "Requires: 1e1355 C Points<br>Shift for effect"
                                return "Reduce corn interval to 4 and you can gamble every 4 seconds"
                        },
                        canAfford(){
                                return player.mini.c_points.points.gte("1e1355") || hasMilestone("n", 3)
                        },
                        cost:() => new Decimal(9.74e24),
                        currencyLocation:() => player.sci.carbon_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Carbon Science",
                        unlocked(){
                                if (hasUpgrade("sci", 415)) return false
                                return hasUpgrade("sci", 231) || player.n.unlocked
                        }, // hasUpgrade("sci", 232)
                },
                233: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>C Sci XVIII"
                        },
                        description(){
                                if (!hasUpgrade("sci", 233) && !hasMilestone("n", 3) && !player.shiftAlias) return "Requires: 1e1425 C Points<br>Shift for effect"
                                return "Remove <bdi style='color:#CC0033'>C</bdi> Increase 2's base cost"
                        },
                        canAfford(){
                                return player.mini.c_points.points.gte("1e1425") || hasMilestone("n", 3)
                        },
                        cost:() => new Decimal(6.47e25),
                        currencyLocation:() => player.sci.carbon_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Carbon Science",
                        unlocked(){
                                if (hasUpgrade("sci", 415)) return false
                                return hasUpgrade("sci", 232) || player.n.unlocked
                        }, // hasUpgrade("sci", 233)
                },
                234: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>C Sci XIX"
                        },
                        description(){
                                if (!hasUpgrade("sci", 234) && !hasMilestone("n", 3) && !player.shiftAlias) return "Requires: 1e2180 C Points<br>Shift for effect"
                                return "Per upgrade C Points^.001 multiplies C Point gain"
                        },
                        canAfford(){
                                return player.mini.c_points.points.gte("1e2180") || hasMilestone("n", 3)
                        },
                        cost:() => new Decimal(1.79e28),
                        currencyLocation:() => player.sci.carbon_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Carbon Science",
                        unlocked(){
                                if (hasUpgrade("sci", 415)) return false
                                return hasUpgrade("sci", 233) || player.n.unlocked
                        }, // hasUpgrade("sci", 234)
                },
                235: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>C Sci XX"
                        },
                        description(){
                                if (!hasUpgrade("sci", 235) && !hasMilestone("n", 3) && !player.shiftAlias) return "Requires: 1e9561 C Points<br>Shift for effect"
                                return "C Point Gain 1's ln becomes log2"
                        },
                        canAfford(){
                                return player.mini.c_points.points.gte("1e9561") || hasMilestone("n", 3)
                        },
                        cost:() => new Decimal(2e33),
                        currencyLocation:() => player.sci.carbon_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Carbon Science",
                        unlocked(){
                                if (hasUpgrade("sci", 415)) return false
                                return hasUpgrade("sci", 234) || player.n.unlocked
                        }, // hasUpgrade("sci", 235)
                },
                241: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>C Sci XXI"
                        },
                        description(){
                                if (!hasUpgrade("sci", 241) && !hasMilestone("n", 3) && !player.shiftAlias) return "Requires: 1e42,540 C Points<br>Shift for effect"
                                return "Remove C Point Gain 5's base cost"
                        },
                        canAfford(){
                                return player.mini.c_points.points.gte("1e42540") || hasMilestone("n", 3)
                        },
                        cost:() => new Decimal(1.36e42),
                        currencyLocation:() => player.sci.carbon_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Carbon Science",
                        unlocked(){
                                if (hasUpgrade("sci", 415)) return false
                                return player.tokens.total.gte(66) || player.n.unlocked
                        }, // hasUpgrade("sci", 241)
                },
                242: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>C Sci XXII"
                        },
                        description(){
                                return "Remove C Point Gain 6's base cost"
                        },
                        cost:() => new Decimal(9.28e42),
                        currencyLocation:() => player.sci.carbon_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Carbon Science",
                        unlocked(){
                                if (hasUpgrade("sci", 415)) return false
                                return hasUpgrade("sci", 241) || player.n.unlocked
                        }, // hasUpgrade("sci", 242)
                },
                243: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>C Sci XXIII"
                        },
                        description(){
                                return "Remove Carbon Increase's base cost"
                        },
                        cost:() => new Decimal(2.31e45),
                        currencyLocation:() => player.sci.carbon_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Carbon Science",
                        unlocked(){
                                if (hasUpgrade("sci", 415)) return false
                                return hasUpgrade("sci", 242) || player.n.unlocked
                        }, // hasUpgrade("sci", 243)
                },
                244: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>C Sci XXIV"
                        },
                        description(){
                                return "Per fifth upgrade you have one less effective token for prestige purposes"
                        },
                        cost:() => new Decimal(4.92e47),
                        currencyLocation:() => player.sci.carbon_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Carbon Science",
                        unlocked(){
                                if (hasUpgrade("sci", 415)) return false
                                return hasUpgrade("sci", 243) || player.n.unlocked
                        }, // hasUpgrade("sci", 244)
                },
                245: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>C Sci XXV"
                        },
                        description(){
                                return "Remove C Point gain 7's base cost"
                        },
                        cost:() => new Decimal(3.49e51),
                        currencyLocation:() => player.sci.carbon_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Carbon Science",
                        unlocked(){
                                if (hasUpgrade("sci", 415)) return false
                                return hasUpgrade("sci", 244) || player.n.unlocked
                        }, // hasUpgrade("sci", 245)
                },
                301: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci I"
                        },
                        description(){
                                return "Remove C Point gain 9's base cost and per upgrade multiply A Point gain by 1e5,000"
                        },
                        cost:() => new Decimal(100),
                        effect(){
                                let upgs = tmp.sci.upgrades.nitrogenUpgradesLength

                                return Decimal.pow(10, upgs * 5000)
                        },
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasMilestone("n", 14) || player.p.unlocked
                        }, // hasUpgrade("sci", 301)
                },
                302: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci II"
                        },
                        description(){
                                return "<bdi style='font-size: 80%'>Permanently remove all A, B, and C minigame buyable's base costs and per upgrade multiply Point gain by 1e10,000</bdi>"
                        },
                        onPurchase(){
                                player.sci.everhasnsci2 = true
                        },
                        cost:() => new Decimal(400),
                        effect(){
                                let upgs = tmp.sci.upgrades.nitrogenUpgradesLength

                                return Decimal.pow(10, upgs * 1e4)
                        },
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 301) || player.p.unlocked
                        }, // hasUpgrade("sci", 302)
                },
                303: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci III"
                        },
                        description(){
                                return "You have one less effective token for prestige purposes and per upgrade add 100 to Blue base"
                        },
                        cost:() => new Decimal(1000),
                        effect(){
                                let upgs = tmp.sci.upgrades.nitrogenUpgradesLength

                                return Decimal.times(100, upgs)
                        },
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 301) || player.p.unlocked
                        }, // hasUpgrade("sci", 303)
                },
                304: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci IV"
                        },
                        description(){
                                return "Per upgrade Nitrogen multiplies Oxygen Science gain"
                        },
                        cost:() => new Decimal(500),
                        effect(){
                                let upgs = tmp.sci.upgrades.nitrogenUpgradesLength

                                return Decimal.pow(player.n.points.max(1), upgs)
                        },
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 301) || player.p.unlocked
                        }, // hasUpgrade("sci", 304)
                },
                305: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci V"
                        },
                        description(){
                                return "<bdi style='font-size: 80%'>Per upgrade multiply Hydrogen gain by 1e1,500 and 21%'s base is log10(Science) but remove Hydrogen Science</bdi>" 
                        },
                        cost:() => new Decimal(5e5),
                        effect(){
                                let upgs = tmp.sci.upgrades.nitrogenUpgradesLength

                                return Decimal.pow(10, upgs * 1500)
                        },
                        onPurchase(){
                                let data = player.sci.hydrogen_science
                                data.points = decimalZero
                                data.best = decimalZero
                                data.total = decimalZero
                                player.sci.upgrades = filterOut(player.sci.upgrades, [11, 12, 13, 14, 15, 21, 22, 23, 24, 25])
                                player.sci.buyables[11] = decimalZero
                                player.sci.buyables[12] = decimalZero
                                player.sci.buyables[13] = decimalZero
                                player.sci.buyables[21] = decimalZero
                                player.sci.buyables[22] = decimalZero
                                player.sci.buyables[23] = decimalZero
                        },
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 302) && hasUpgrade("sci", 303) && hasUpgrade("sci", 304) || player.p.unlocked
                        }, // hasUpgrade("sci", 305)
                },
                311: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci VI"
                        },
                        description(){
                                return "Square base Nitrogen gain"
                        },
                        cost:() => new Decimal(1e6),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 305) || player.p.unlocked
                        }, // hasUpgrade("sci", 311)
                },
                312: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci VII"
                        },
                        description(){
                                if (!hasUpgrade("sci", 312) && !player.shiftAlias) return "Requires: 1e8 D Points<br>Shift for effect"
                                return "Per upgrade squared multiply D Point gain by 1.01 and remove Linear Increase 1's base cost"
                        },
                        canAfford(){
                                return player.mini.d_points.points.gte(1e8) || false
                        },
                        effect(){
                                return Decimal.pow(1.01, (tmp.sci.upgrades.nitrogenUpgradesLength || 0) ** 2)
                        },
                        cost:() => new Decimal(2e9),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 311) || player.p.unlocked
                        }, // hasUpgrade("sci", 312)
                },
                313: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci VIII"
                        },
                        description(){
                                if (!hasUpgrade("sci", 313) && !player.shiftAlias) return "Requires: 3e10 D Points<br>Shift for effect"
                                return "Per upgrade multiply Nitrogen Science gain by 1.4 and remove Gas Pedal's base cost"
                        },
                        canAfford(){
                                return player.mini.d_points.points.gte(3e10) || false
                        },
                        effect(){
                                return Decimal.pow(1.4, tmp.sci.upgrades.nitrogenUpgradesLength)
                        },
                        cost:() => new Decimal(2e9),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 312) || player.p.unlocked
                        }, // hasUpgrade("sci", 313)
                },
                314: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci IX"
                        },
                        description(){
                                if (!hasUpgrade("sci", 314) && !player.shiftAlias) return "Requires: 3e15 D Points<br>Shift for effect"
                                return "<bdi style='font-size: 90%'>log10(Nitrogen Science) multiplies D Point gain and log10(D Points) multiplies Nitrogen Science gain</bdi>"
                        },
                        canAfford(){
                                return player.mini.d_points.points.gte(3e15) || false
                        },
                        cost:() => new Decimal(3e10),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 313) || player.p.unlocked
                        }, // hasUpgrade("sci", 314)
                },
                315: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci X"
                        },
                        description(){
                                if (!hasUpgrade("sci", 315) && !player.shiftAlias) return "Requires: 1e21 D Points<br>Shift for effect"
                                return "Gas Pedal cost exponent is 1.2"
                        },
                        canAfford(){
                                return player.mini.d_points.points.gte(1e21) || false
                        },
                        cost:() => new Decimal(4e11),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 314) || player.p.unlocked
                        }, // hasUpgrade("sci", 315)
                },
                321: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci XI"
                        },
                        description(){
                                if (!hasUpgrade("sci", 321) && !player.shiftAlias) return "Requires: 1e105 D Points<br>Shift for effect"
                                return "Remove Fuel Increase 1's base cost, Linear Increase 1 does not cost anything, and per upgrade double D Point gain"
                        },
                        canAfford(){
                                return player.mini.d_points.points.gte(1e105) || false
                        },
                        effect(){
                                return Decimal.pow(2, tmp.sci.upgrades.nitrogenUpgradesLength)
                        },
                        cost:() => new Decimal(2e12),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 315) || player.p.unlocked
                        }, // hasUpgrade("sci", 321)
                },
                322: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci XII"
                        },
                        description(){
                                if (!hasUpgrade("sci", 322) && !player.shiftAlias) return "Requires: 1e194 D Points<br>Shift for effect"
                                return "Remove Engine's base cost"
                        },
                        canAfford(){
                                return player.mini.d_points.points.gte(1e194) || false
                        },
                        effect(){
                                return Decimal.pow(2, tmp.sci.upgrades.nitrogenUpgradesLength)
                        },
                        cost:() => new Decimal(7e12),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 321) || player.p.unlocked
                        }, // hasUpgrade("sci", 322)
                },
                323: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci XIII"
                        },
                        description(){
                                if (!hasUpgrade("sci", 323) && !player.shiftAlias) return "Requires: 1e4046 D Points<br>Shift for effect"
                                if (player.shiftAlias && hasUpgrade("sci", 323)) return "Note: Formula softcaps at a 1e100 multiplier x -> log10(x)<sup>50</sup>" + br + "Hardcapped at 1e800"
                                return "<bdi style='font-size: 70%'>Remove Fuel Gauage's base cost, D Points<sup>.001</sup> multiplies Nitrogen Science gain, but you can only get ten seconds of Nitrogen Science production</bdi>"
                        },
                        canAfford(){
                                return player.mini.d_points.points.gte("1e4046") || false
                        },
                        effect(){
                                let ret = player.mini.d_points.points.max(1).pow(.001)
                                if (ret.gt(1e100)) ret = ret.log10().pow(50)
                                return ret.min("1e800")
                        },
                        cost:() => new Decimal(1e14),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 322) || player.p.unlocked
                        }, // hasUpgrade("sci", 323)
                },
                324: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci XIV"
                        },
                        description(){
                                return "Remove Accelerometer's base cost"
                        },
                        cost:() => new Decimal(7.33e53),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 323) || player.p.unlocked
                        }, // hasUpgrade("sci", 324)
                },
                325: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci XV"
                        },
                        description(){
                                return "Remove Steering Wheel's base cost"
                        },
                        cost:() => new Decimal(3.52e54),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 324) || player.p.unlocked
                        }, // hasUpgrade("sci", 325)
                },
                331: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci XVI"
                        },
                        description(){
                                return "Remove Exponential Increase's base cost"
                        },
                        cost:() => new Decimal(7.87e55),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 325) || player.p.unlocked
                        }, // hasUpgrade("sci", 331)
                },
                332: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci XVII"
                        },
                        description(){
                                return "Remove Quadratic Increase and Fuel Increase 2's base cost"
                        },
                        cost:() => new Decimal(8.48e69),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 331) || player.p.unlocked
                        }, // hasUpgrade("sci", 332)
                },
                333: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci XVIII"
                        },
                        description(){
                                return "Remove Air Conditioning and Fuel Efficiency's base cost"
                        },
                        cost:() => new Decimal(1.3e70),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 332) || player.p.unlocked
                        }, // hasUpgrade("sci", 333)
                },
                334: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci XIX"
                        },
                        description(){
                                return "Remove Brake Pedal's base cost and Sixteen becomes .03 per challenge"
                        },
                        cost:() => new Decimal(1.3e79),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 333) || player.p.unlocked
                        }, // hasUpgrade("sci", 334)
                },
                335: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci XX"
                        },
                        description(){
                                return "Remove Gas Gauge's base cost and Quadratic Increase base is multiplied by upgrades"
                        },
                        cost:() => new Decimal(2.43e81),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 334) || player.p.unlocked
                        }, // hasUpgrade("sci", 335)
                },
                341: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci XXI"
                        },
                        description(){
                                if (player.shiftAlias) return "Hardcapped at 1e50"
                                return "<bdi style='font-size: 80%'>Remove Seat Belt's base cost and log10(Nitrogen) multiplies Nitrogen Science gain and log10(Nitrogen Science) multiplies Nitrogen gain</bdi>"
                        },
                        cost:() => new Decimal(4.84e91),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 335) || player.p.unlocked
                        }, // hasUpgrade("sci", 341)
                },
                342: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci XXII"
                        },
                        description(){
                                return "Accelerometer cost exponent is 1.1"
                        },
                        cost:() => new Decimal(2.02e93),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 341) || player.p.unlocked
                        }, // hasUpgrade("sci", 342)
                },
                343: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci XXIII"
                        },
                        description(){
                                return "Remove Parking Brake's base cost and its cost exponent is 1.2"
                        },
                        cost:() => new Decimal(1.17e100),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 342) || player.p.unlocked
                        }, // hasUpgrade("sci", 343)
                },
                344: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci XXIV"
                        },
                        description(){
                                if (!hasUpgrade("sci", 344) && !player.shiftAlias) return "Requires: 400 E Points<br>Shift for effect"
                                return "Remove Constant's base cost and ln(ln(ln(D Points))) multiplies E Point gain"
                        },
                        canAfford(){
                                return player.mini.e_points.points.gte(400) || false
                        },
                        cost:() => new Decimal(7.8e102),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 343) || player.p.unlocked
                        }, // hasUpgrade("sci", 344)
                },
                345: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci XXV"
                        },
                        description(){
                                if (!hasUpgrade("sci", 345) && !player.shiftAlias) return "Requires: 25 Constant levels<br>Shift for effect"
                                return "Remove Linear's base cost and Constant costs nothing"
                        },
                        canAfford(){
                                return player.mini.buyables[202].gte(25) || false
                        },
                        cost:() => new Decimal(1e103),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 344) || player.p.unlocked
                        }, // hasUpgrade("sci", 345)
                },
                351: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci XXVI"
                        },
                        description(){
                                if (!hasUpgrade("sci", 351) && !player.shiftAlias) return "Requires: 31 Constant levels<br>Shift for effect"
                                return "Remove Quadratic's base cost and Linear cost exponent is 1.15"
                        },
                        canAfford(){
                                return player.mini.buyables[202].gte(31) || false
                        },
                        cost:() => new Decimal(1.3e103),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 345) || player.p.unlocked
                        }, // hasUpgrade("sci", 351)
                },
                352: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci XXVII"
                        },
                        description(){
                                if (!hasUpgrade("sci", 352) && !player.shiftAlias) return "Requires: 42 Constant levels<br>Shift for effect"
                                return "Add .05 to Quadratic base and per upgrade in this row triple E Point gain"
                        },
                        canAfford(){
                                return player.mini.buyables[202].gte(42) || false
                        },
                        levels(){
                                let a = 1
                                a += hasUpgrade("sci", 351)
                                a += hasUpgrade("sci", 353)
                                a += hasUpgrade("sci", 354)
                                a += hasUpgrade("sci", 355)
                                return a
                        },
                        cost:() => new Decimal(1.7e103),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 351) || player.p.unlocked
                        }, // hasUpgrade("sci", 352)
                },
                353: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci XXVIII"
                        },
                        description(){ 
                                if (!hasUpgrade("sci", 353) && !player.shiftAlias) return "Requires: 26 Linear levels<br>Shift for effect"
                                return "Per upgrade in this row add .1 to Constant base"
                        },
                        canAfford(){
                                return player.mini.buyables[203].gte(26) || false
                        },
                        cost:() => new Decimal(2.1e103),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 352) || player.p.unlocked
                        }, // hasUpgrade("sci", 353)
                },
                354: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci XXIX"
                        },
                        description(){
                                if (!hasUpgrade("sci", 354) && !player.shiftAlias) return "Requires: 29 Linear levels<br>Shift for effect"
                                return "Remove respecting scalar multiplication's base cost and double Nitrogen gain"
                        },
                        canAfford(){
                                return player.mini.buyables[203].gte(29) || false
                        },
                        cost:() => new Decimal(2.8e103),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 353) || player.p.unlocked
                        }, // hasUpgrade("sci", 354)
                },
                355: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci XXX"
                        },
                        description(){
                                if (!hasUpgrade("sci", 355) && !player.shiftAlias) return "Requires: 71 Constant levels<br>Shift for effect"
                                if (player.p.unlocked) return "Remove respecting addition's base cost"
                                return "Remove respecting addition's base cost but gain 20x less E Points"
                        },
                        canAfford(){
                                return player.mini.buyables[202].gte(71) || false
                        },
                        cost:() => new Decimal(4.8e103),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 354) || player.p.unlocked
                        }, // hasUpgrade("sci", 355)
                },
                361: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci XXXI"
                        },
                        description(){
                                if (!hasUpgrade("sci", 361) && !player.shiftAlias) return "Requires: 182 Constant levels<br>Shift for effect"
                                return "Each Linear multiplies E Point gain by 1.33 and triple Nitrogen gain"
                        },
                        canAfford(){
                                return player.mini.buyables[202].gte(182) || false
                        },
                        effect(){
                                return Decimal.pow(1.33, player.mini.buyables[203])
                        },
                        cost:() => new Decimal(6.7e103),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 355) || player.p.unlocked
                        }, // hasUpgrade("sci", 361)
                },
                362: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci XXXII"
                        },
                        description(){
                                if (!hasUpgrade("sci", 362) && !player.shiftAlias) return "Requires: 397 Constant levels<br>Shift for effect"
                                return "Linear cost exponent is 1.1"
                        },
                        canAfford(){
                                return player.mini.buyables[202].gte(397) || false
                        },
                        cost:() => new Decimal(1e104),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 361) || player.p.unlocked
                        }, // hasUpgrade("sci", 362)
                },
                363: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci XXXIII"
                        },
                        description(){
                                if (!hasUpgrade("sci", 363) && !player.shiftAlias) return "Requires: 564 Constant levels<br>Shift for effect"
                                return "Each Quadratic multiplies E Point gain by 1.1 and double Nitrogen gain"
                        },
                        canAfford(){
                                return player.mini.buyables[202].gte(564) || false
                        },
                        effect(){
                                return Decimal.pow(1.1, player.mini.buyables[211])
                        },
                        cost:() => new Decimal(1.41e104),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 362) || player.p.unlocked
                        }, // hasUpgrade("sci", 363)
                },
                364: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci XXXIV"
                        },
                        description(){
                                if (!hasUpgrade("sci", 364) && !player.shiftAlias) return "Requires: 4300 Constant levels<br>Shift for effect"
                                return "Unlock three buyables, bulk 2x E Point buyables"
                        },
                        canAfford(){
                                return player.mini.buyables[202].gte(4300) || false
                        },
                        cost:() => new Decimal(4.25e104),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 363) || player.p.unlocked
                        }, // hasUpgrade("sci", 364)
                },
                365: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>N Sci XXXV"
                        },
                        description(){
                                if (!hasUpgrade("sci", 365) && !player.shiftAlias) return "Requires: 33,080 Constant levels<br>Shift for effect"
                                return "Gain an iteration"
                        },
                        canAfford(){
                                return player.mini.buyables[202].gte(33080) || false
                        },
                        cost:() => new Decimal(1.5e114),
                        currencyLocation:() => player.sci.nitrogen_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen Science",
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 364) || player.p.unlocked
                        }, // hasUpgrade("sci", 365)
                },
                401: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci I"
                        },
                        description(){
                                if (!hasUpgrade("sci", 401) && !player.shiftAlias) return "Requires: 1.00e1200 Protein<br>Shift for effect"
                                return "Per upgrade double Protein and Protein Science gain"
                        },
                        canAfford(){
                                return player.a.protein.points.gte("1e1200") || false
                        },
                        cost:() => new Decimal(5000),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return hasUpgrade("a", 23) || player.d.unlocked
                        }, // hasUpgrade("sci", 401)
                },
                402: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci II"
                        },
                        description(){
                                if (!hasUpgrade("sci", 402) && !player.shiftAlias) return "Requires: 1.00e1260 Protein<br>Shift for effect"
                                return "Per upgrade Amino Acid muliplies Nitrogen Science gain but remove Oxygen Science"
                        },
                        canAfford(){
                                return player.a.protein.points.gte("1e1260") || false
                        },
                        onPurchase(){
                                let data = player.sci.oxygen_science
                                data.points = decimalZero
                                data.best = decimalZero
                                data.total = decimalZero
                                player.sci.upgrades = filterOut(player.sci.upgrades, [111, 112, 113, 114, 115, 101, 102, 103, 104, 105])
                                player.sci.buyables[101] = decimalZero
                                player.sci.buyables[102] = decimalZero
                                player.sci.buyables[103] = decimalZero
                                player.sci.buyables[111] = decimalZero
                                player.sci.buyables[112] = decimalZero
                                player.sci.buyables[113] = decimalZero
                        },
                        cost:() => new Decimal(10000),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return hasUpgrade("sci", 401) || player.d.unlocked
                        }, // hasUpgrade("sci", 402)
                },
                403: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci III"
                        },
                        description(){
                                if (!hasUpgrade("sci", 403) && !player.shiftAlias) return "Requires: 1.00e1337 Protein<br>Shift for effect"
                                return "Each upgrade doubles Amino Acid gain"
                        },
                        canAfford(){
                                return player.a.protein.points.gte("1e1337") || false
                        },
                        cost:() => new Decimal(20000),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return hasUpgrade("sci", 402) || player.d.unlocked
                        }, // hasUpgrade("sci", 403)
                },
                404: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci IV"
                        },
                        description(){
                                if (!hasUpgrade("sci", 404) && !player.shiftAlias) return "Requires: 1.00e2500 Protein<br>Shift for effect"
                                return "<bdi style='font-size: 80%'>log10(Amino Acid) multiplies Protein Science gain and per upgrade log10(Protein Science) multiplies Protein gain</bdi>"
                        },
                        canAfford(){
                                return player.a.protein.points.gte("1e2500") || false
                        },
                        cost:() => new Decimal(4e4),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return hasUpgrade("sci", 403) || player.d.unlocked
                        }, // hasUpgrade("sci", 404)
                },
                405: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci V"
                        },
                        description(){
                                if (!hasUpgrade("sci", 405) && !player.shiftAlias) return "Requires: 3.33e3333 Protein<br>Shift for effect"
                                return "Tokens multiply Protein Science gain but you can only get 10 seconds worth of Protein Science"
                        },
                        canAfford(){
                                return player.a.protein.points.gte("3.33e3333") || false
                        },
                        cost:() => new Decimal(1e6),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return hasUpgrade("sci", 404) || player.d.unlocked
                        }, // hasUpgrade("sci", 405)
                },
                411: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci VI"
                        },
                        description(){
                                if (!hasUpgrade("sci", 411) && !player.shiftAlias) return "Requires: 1.00e7654 Protein<br>Shift for effect"
                                return "Remove miRNA's base cost and Protein Science exponentiates point gain"
                        },
                        canAfford(){
                                return player.a.protein.points.gte("1e7654") || false
                        },
                        cost:() => new Decimal(1.82e9),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return hasUpgrade("sci", 405) || player.d.unlocked
                        }, // hasUpgrade("sci", 411)
                },
                412: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci VII"
                        },
                        description(){
                                if (!hasUpgrade("sci", 412) && !player.shiftAlias) return "Requires: 1.00e14441 Protein<br>Shift for effect"
                                return "Protein Science multiplies Protein gain and permanently keep Nitrogen Science content"
                        },
                        canAfford(){
                                return player.a.protein.points.gte("1e14441") || false
                        },
                        onPurchase(){
                                player.sci.everUpgrade412 = true
                        },
                        cost:() => new Decimal(5e9),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return hasUpgrade("sci", 411) || player.d.unlocked
                        }, // hasUpgrade("sci", 412)
                },
                413: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci VIII"
                        },
                        description(){
                                if (!hasUpgrade("sci", 413) && !player.shiftAlias) return "Requires: 1.00e20402 Protein<br>Shift for effect"
                                return "Reuse post-100 cost scaling exponent is 7/3 and Reuse base multiplies Protein gain"
                        },
                        canAfford(){
                                return player.a.protein.points.gte("1e20402") || false
                        },
                        cost:() => new Decimal(1.1e10),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return hasUpgrade("sci", 412) || player.d.unlocked
                        }, // hasUpgrade("sci", 413)
                },
                414: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci IX"
                        },
                        description(){
                                if (!hasUpgrade("sci", 414) && !player.shiftAlias) return "Requires: 1.00e22822 Protein<br>Shift for effect"
                                return "Reuse post-100 cost scaling exponent is 2"
                        },
                        canAfford(){
                                return player.a.protein.points.gte("1e22822") || false
                        },
                        cost:() => new Decimal(1.91e12),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return hasUpgrade("sci", 413) || player.d.unlocked
                        }, // hasUpgrade("sci", 414)
                },
                415: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci X"
                        },
                        description(){
                                if (!hasUpgrade("sci", 415) && !player.shiftAlias) return "Requires: 1.00e29092 Protein<br>Shift for effect"
                                return "Per upgrade you have one less token for prestige purposes but remove Carbon Science"
                        },
                        canAfford(){
                                return player.a.protein.points.gte("1e29092") || false
                        },
                        onPurchase(){
                                let data = player.sci.carbon_science
                                data.points = decimalZero
                                data.best = decimalZero
                                data.total = decimalZero
                                let upgs = [201, 202, 203, 204, 205,
                                            211, 212, 213, 214, 215, 
                                            221, 222, 223, 224, 225,
                                            231, 232, 233, 234, 235, 
                                            241, 242, 243, 244, 245,]
                                player.sci.upgrades = filterOut(player.sci.upgrades, upgs)
                        },
                        cost:() => new Decimal(8e12),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return hasUpgrade("sci", 414) || player.d.unlocked
                        }, // hasUpgrade("sci", 415)
                },
                421: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci XI"
                        },
                        description(){
                                if (!hasUpgrade("sci", 421) && !player.shiftAlias) return "Requires: 1.00e30003 Protein<br>Shift for effect"
                                return "Per upgrade add .025 to 𝛾 → ∂𝛾 base"
                        },
                        canAfford(){
                                return player.a.protein.points.gte("1e30003") || false
                        },
                        cost:() => new Decimal(1.1e14),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return hasUpgrade("sci", 415) || player.d.unlocked
                        }, // hasUpgrade("sci", 421)
                },
                422: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci XII"
                        },
                        description(){
                                if (!hasUpgrade("sci", 422) && !player.shiftAlias) return "Requires: 1.00e51515 Protein<br>Shift for effect"
                                return "Remove rRNA's base cost"
                        },
                        canAfford(){
                                return player.a.protein.points.gte("1e51515") || false
                        },
                        cost:() => new Decimal(2.2e19),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return hasUpgrade("sci", 421) || player.d.unlocked
                        }, // hasUpgrade("sci", 422)
                },
                423: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci XIII"
                        },
                        description(){
                                if (!hasUpgrade("sci", 423) && !player.shiftAlias) return "Requires: 1.00e63036 Protein<br>Shift for effect"
                                return "Reuse post-100 cost scaling exponent is 1.5"
                        },
                        canAfford(){
                                return player.a.protein.points.gte("1e63036") || false
                        },
                        cost:() => new Decimal(1.78e21),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return hasUpgrade("sci", 422) || player.d.unlocked
                        }, // hasUpgrade("sci", 423)
                },
                424: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci XIV"
                        },
                        description(){
                                if (!hasUpgrade("sci", 424) && !player.shiftAlias) return "Requires: 1.00e70607 Protein<br>Shift for effect"
                                return "Double Gem gain"
                        },
                        canAfford(){
                                return player.a.protein.points.gte("1e70607") || false
                        },
                        cost:() => new Decimal(7.63e22),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return hasUpgrade("sci", 423) || player.d.unlocked
                        }, // hasUpgrade("sci", 424)
                },
                425: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci XV"
                        },
                        description(){
                                if (!hasUpgrade("sci", 425) && !player.shiftAlias) return "Requires: 1.00e73037 Protein<br>Shift for effect"
                                return "Remove siRNA's base cost and Lives multiply Nitrogen Science gain"
                        },
                        canAfford(){
                                return player.a.protein.points.gte("1e73037") || false
                        },
                        cost:() => new Decimal(2.25e23),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return hasUpgrade("sci", 424) || player.d.unlocked
                        }, // hasUpgrade("sci", 425)
                },
                431: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci XVI"
                        },
                        description(){
                                if (!hasUpgrade("sci", 431) && !player.shiftAlias) return "Requires: 1.00e75057 Protein<br>Shift for effect"
                                return "Per maxed gem amount (10,000) double Protein Science gain"
                        },
                        canAfford(){
                                return player.a.protein.points.gte("1e75057") || false
                        },
                        cost:() => new Decimal(2.4e25),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return hasUpgrade("sci", 425) || player.d.unlocked
                        }, // hasUpgrade("sci", 431)
                },
                432: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci XVII"
                        },
                        description(){
                                if (!hasUpgrade("sci", 432) && !player.shiftAlias) return "Requires: 1.00e105,501 Protein<br>Shift for effect"
                                return "miRNA cost exponent is 1.9"
                        },
                        canAfford(){
                                return player.a.protein.points.gte("1e105501") || false
                        },
                        cost:() => new Decimal(4.5e31),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return hasUpgrade("sci", 431) || player.d.unlocked
                        }, // hasUpgrade("sci", 432)
                },
                433: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci XVIII"
                        },
                        description(){
                                if (!hasUpgrade("sci", 433) && !player.shiftAlias) return "Requires: 1.00e113,311 Protein<br>Shift for effect"
                                return "miRNA cost exponent is 1.8"
                        },
                        canAfford(){
                                return player.a.protein.points.gte("1e113311") || false
                        },
                        cost:() => new Decimal(1.38e32),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return hasUpgrade("sci", 432) || player.d.unlocked
                        }, // hasUpgrade("sci", 433)
                },
                434: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci XIX"
                        },
                        description(){
                                if (!hasUpgrade("sci", 434) && !player.shiftAlias) return "Requires: 1.00e159,300 Protein<br>Shift for effect"
                                return "Per upgrade double Amino Acid gain"
                        },
                        canAfford(){
                                return player.a.protein.points.gte("1e159300") || false
                        },
                        cost:() => new Decimal(5.2e32),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return hasUpgrade("sci", 433) || player.d.unlocked
                        }, // hasUpgrade("sci", 434)
                },
                435: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci XX"
                        },
                        description(){
                                if (player.shiftAlias) return "Softcapped at 1e10 (x -> log10(x)<sup>10</sup>)"
                                return "log10(log10(Points)) multiplies Protein gain<br>Currently: " + format(tmp.sci.upgrades[435].effect)
                        },
                        cost:() => new Decimal(1.81e33),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        effect(){
                                let ret = player.points.max(10).log10().max(10).log10()
                                if (ret.gt(1e10)) ret = ret.log10().pow(10)
                                return ret
                        },
                        unlocked(){
                                return hasUpgrade("sci", 434) || player.d.unlocked
                        }, // hasUpgrade("sci", 435)
                },
                441: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci XXI"
                        },
                        description(){
                                return "Per upgrade log10(log10(Protein)) multiplies Protein gain"
                        },
                        cost:() => new Decimal(6.52e38),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return hasUpgrade("sci", 435) || player.d.unlocked
                        }, // hasUpgrade("sci", 441)
                },
                442: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci XXII"
                        },
                        description(){
                                return "miRNA cost exponent is 1.7"
                        },
                        cost:() => new Decimal(3.8e39),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return hasUpgrade("sci", 441) || player.d.unlocked
                        }, // hasUpgrade("sci", 442)
                },
                443: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci XXIII"
                        },
                        description(){
                                return "Per upgrade add 1 to Life Milestone 1 limit"
                        },
                        cost:() => new Decimal(1.67e42),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return hasUpgrade("sci", 442) || player.d.unlocked
                        }, // hasUpgrade("sci", 443)
                },
                444: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci XXIV"
                        },
                        description(){
                                return "miRNA cost exponent is 1.6"
                        },
                        cost:() => new Decimal(1.04e44),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return hasUpgrade("sci", 443) || player.d.unlocked
                        }, // hasUpgrade("sci", 444)
                },
                445: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci XXV"
                        },
                        description(){
                                return "Remove crRNA's base cost"
                        },
                        cost:() => new Decimal("9.73e379"),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return player.d.best.gt(0)
                        }, // hasUpgrade("sci", 445)
                },
                451: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci XXVI"
                        },
                        description(){
                                return "Challenge 6 dilation base becomes .952"
                        },
                        cost:() => new Decimal("1.4e481"),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return hasMilestone("d", 12)
                        }, // hasUpgrade("sci", 451)
                },
                452: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci XXVII"
                        },
                        description(){
                                return "<bdi style='font-size: 80%'>Per upgrade log10(DNA)<sup>2</sup> multiplies Protein gain but disable Protein Sci VIII's effect on Protein gain</bdi>"
                        },
                        cost:() => new Decimal("1.2e504"),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return hasUpgrade("sci", 451)
                        }, // hasUpgrade("sci", 452)
                },
                453: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci XXVIII"
                        },
                        description(){
                                return "Life IV base becomes 1.6^upgrades<sup>2</sup>"
                        },
                        cost:() => new Decimal("7e594"),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return hasUpgrade("sci", 452)
                        }, // hasUpgrade("sci", 453)
                },
                454: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci XXIX"
                        },
                        description(){
                                return "Per upgrade you have 3.5 less tokens for prestige purposes but disable Nitrogen Science"
                        },
                        onPurchase(){
                                let data = player.sci.nitrogen_science
                                data.points = decimalZero
                                data.best = decimalZero
                                data.total = decimalZero
                                let upgs = [301, 302, 303, 304, //305,
                                            311, 312, 313, 314, 315, 
                                            321, 322, 323, 324, 325,
                                            331, 332, 333, 334, 335, 
                                            341, 342, 343, 344, 345, 
                                            351, 352, 353, 354, 355, 
                                            361, 362, 363, 364, 365,] // dont remove 305 as it remove Hydrogen Science
                                player.sci.upgrades = filterOut(player.sci.upgrades, upgs)
                                player.sci.buyables[301] = decimalZero
                                player.sci.buyables[302] = decimalZero
                                player.sci.buyables[303] = decimalZero
                        },
                        cost:() => new Decimal("1e619"),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return hasUpgrade("sci", 453)
                        }, // hasUpgrade("sci", 454)
                },
                455: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Protein Sci XXX"
                        },
                        description(){
                                return "Remove shRNA's base cost and DNA III's effect exponent is multiplied by the number of DNA upgrades"
                        },
                        cost:() => new Decimal("3e686"),
                        currencyLocation:() => player.sci.protein_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein Science",
                        unlocked(){
                                return hasUpgrade("sci", 454)
                        }, // hasUpgrade("sci", 455)
                },
                501: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci I"
                        },
                        description(){
                                return "Each of the first nine upgrades unlocks a buyable"
                        },
                        cost:() => new Decimal(1000),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return layers.l.grid.getGemEffect(705)
                        }, // hasUpgrade("sci", 501)
                },
                502: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci II"
                        },
                        description(){
                                return "<bdi style='font-size: 80%'>Per upgrade multiply DNA Science gain by the number of upgrades and each ncRNA and each miRNA exponentiates point gain ^DNA</bdi>"
                        },
                        cost:() => new Decimal(2000),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 501)
                        }, // hasUpgrade("sci", 502)
                },
                503: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci III"
                        },
                        description(){
                                return "Per upgrade multiply DNA Science gain by log10(log10(DNA))"
                        },
                        cost:() => new Decimal(3e5),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 502)
                        }, // hasUpgrade("sci", 503)
                },
                504: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci IV"
                        },
                        description(){
                                let a = "DNA Science<sup>" + makePurple("ABC") + "</sup> exponentiates point gain and multiplies Life gain"
                                return a + br + "Currently: " + format(tmp.sci.upgrades[504].effect)
                        },
                        effect(){
                                let exp = tmp.sci.buyables[501].effect
                                exp = exp.times(tmp.sci.buyables[502].effect)
                                exp = exp.times(tmp.sci.buyables[503].effect)
                                if (hasUpgrade("sci", 505)) exp = exp.times(tmp.sci.buyables[511].effect.pow(2.3).plus(1))
                                return player.sci.dna_science.points.max(1).pow(exp)
                        },
                        cost:() => new Decimal(3e17),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 503)
                        }, // hasUpgrade("sci", 504)
                },
                505: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci V"
                        },
                        description(){
                                return "DNA Sci IV exponent and DNA Science gain is multiplied by 1+" + makePurple("D") + "<sup>2.3</sup>"
                        },
                        cost:() => new Decimal(2e32),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 504)
                        }, // hasUpgrade("sci", 505)
                },
                511: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci VI"
                        },
                        description(){
                                return "Per upgrade in this row double all minigame and Cell gain"
                        },
                        lvls(){
                                if (hasMilestone("cells", 10)) return tmp.sci.upgrades.dnaUpgradesLength
                                let a = 1 
                                if (hasUpgrade("sci", 512)) a ++ 
                                if (hasUpgrade("sci", 513)) a ++ 
                                if (hasUpgrade("sci", 514)) a ++ 
                                if (hasUpgrade("sci", 515)) a ++ 
                                return a
                        },
                        cost:() => new Decimal(2.12e121),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasMilestone("cells", 9)
                        }, // hasUpgrade("sci", 511)
                },
                512: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci VII"
                        },
                        description(){
                                return "Raise all minigame gain ^1.28"
                        },
                        cost:() => new Decimal(1e125),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 511)
                        }, // hasUpgrade("sci", 512)
                },
                513: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci VIII"
                        },
                        description(){
                                return "Per upgrade (up to 13) raise Stem Cell gain ^1.02 and add .035 to DNA Ligase base"
                        },
                        effect(){
                                return Decimal.pow(1.02, Math.min(13, tmp.sci.upgrades.dnaUpgradesLength))
                        },
                        cost:() => new Decimal(5e167),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 512)
                        }, // hasUpgrade("sci", 513)
                },
                514: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci IX"
                        },
                        description(){
                                return "log10(Stem Cells) multiplies Cells and DNA Science gain"
                        },
                        cost:() => new Decimal(1e230),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 513)
                        }, // hasUpgrade("sci", 514)
                },
                515: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci X"
                        },
                        description(){
                                return "log10(DNA Science) multiplies Kappa gain"
                        },
                        cost:() => new Decimal(1e239),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 514)
                        }, // hasUpgrade("sci", 515)
                },
                521: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci XI"
                        },
                        description(){
                                return "log10(DNA Science) multiplies Mu gain"
                        },
                        cost:() => new Decimal(5e298),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 515)
                        }, // hasUpgrade("sci", 521)
                },
                522: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci XII"
                        },
                        description(){
                                return "log10(DNA Science) multiplies Lambda gain"
                        },
                        cost:() => new Decimal("5e362"),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 521)
                        }, // hasUpgrade("sci", 522)
                },
                523: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci XIII"
                        },
                        description(){
                                return "log10(DNA Science) multiplies Kappa gain"
                        },
                        cost:() => new Decimal("2e447"),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 522)
                        }, // hasUpgrade("sci", 523)
                },
                524: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci XIV"
                        },
                        description(){
                                return "Per upgrade add .03 to DNA Polymerase base and " + makePurple("A") + " multiplies Stem Cell gain"
                        },
                        cost:() => new Decimal("3e711"),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 523)
                        }, // hasUpgrade("sci", 524)
                },
                525: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci XV"
                        },
                        description(){
                                return "Raise Stem Cell gain ^1.01 and " + makePurple("B") + " multiplies Stem Cell gain"
                        },
                        cost:() => new Decimal("5e799"),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 524)
                        }, // hasUpgrade("sci", 525)
                },
                531: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci XVI"
                        },
                        description(){
                                return "Per upgrade add .01 to Omnipotent base and " + makePurple("D") + " multiplies Stem Cell gain"
                        },
                        cost:() => new Decimal("2e864"),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 525)
                        }, // hasUpgrade("sci", 531)
                },
                532: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci XVII"
                        },
                        description(){
                                if (player.shiftAlias) return "Softcapped at 1e20<br>x -> (log10(x)/2)<sup>20</sup>"
                                return "DNA Science<sup>.001</sup> multiplies Stem Cell gain and " + makePurple("E") + " multiplies Stem Cell gain"
                        },
                        effect(){
                                let ret = player.sci.dna_science.points.max(1).pow(.001)

                                if (ret.gt(1e20)) ret = ret.log10().div(2).pow(20)

                                return ret
                        },
                        cost:() => new Decimal("1e904"),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 531)
                        }, // hasUpgrade("sci", 532)
                },
                533: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci XVIII"
                        },
                        description(){
                                return "Each Secondary completion (up to 5) adds .04 to S-S DNA-binding protein and " + makePurple("G") + " multiplies Stem Cell gain"
                        },
                        cost:() => new Decimal("3e1020"),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 532)
                        }, // hasUpgrade("sci", 533)
                },
                534: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci XIX"
                        },
                        description(){
                                return "Bulk 100x N → Δµ and " + makePurple("H") + " multiplies Stem Cell gain"
                        },
                        cost:() => new Decimal("1e1121"),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 533)
                        }, // hasUpgrade("sci", 534)
                },
                535: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci XX"
                        },
                        description(){
                                return "Per DNA Science buyable multiply Stem Cell gain by 1.01 and " + makePurple("I") + " multiplies Stem Cell gain"
                        },
                        cost:() => new Decimal("1e1259"),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 534)
                        }, // hasUpgrade("sci", 535)
                },
                541: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci XXI"
                        },
                        description(){
                                return "Squeeze cost exponent is 1.09"
                        },
                        cost:() => new Decimal("3e1330"),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 535)
                        }, // hasUpgrade("sci", 541)
                },
                542: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci XXII"
                        },
                        description(){
                                if (player.shiftAlias) return "Softcapped at 1e100 in challenges<br>x -> log10(x)<sup>50</sup>"
                                return "Each DNA Science buyable after 650 doubles Stem Cell gain<br>Currently: " + format(tmp.sci.upgrades[542].effect)
                        },
                        effect(){
                                let exp = tmp.sci.buyables.dnaBuyablesTotal.sub(650).max(0)
                                let ret = Decimal.pow(2, exp)
                                if (ret.gt(1e100) && player.cells.activeChallenge) ret = ret.log10().pow(50)
                                return ret
                        },
                        cost:() => new Decimal("1e3796"),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 541)
                        }, // hasUpgrade("sci", 542)
                },
                543: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci XXIII"
                        },
                        description(){
                                return "Uncap DNA Sci XVIII and the number of upgrades multiplies Stem Cell gain"
                        },
                        cost:() => new Decimal("1e3944"),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 542)
                        }, // hasUpgrade("sci", 543)
                },
                544: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci XXIV"
                        },
                        description(){
                                return "Tokens exponentiate Infrared base and miRNA base is µ"
                        },
                        cost:() => new Decimal("1e7794"),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasMilestone("t", 5)
                        }, // hasUpgrade("sci", 544)
                },
                545: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci XXV"
                        },
                        description(){
                                return "Sinusoidal effects DNA Science gain and Squeeze effect is log2(DNA)^x"
                        },
                        cost:() => new Decimal("1e7890"),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 544)
                        }, // hasUpgrade("sci", 545)
                },
                551: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci XXVI"
                        },
                        description(){
                                return "Per upgrade in this tab log10(DNA Science) multiplies Cell gain and Secondary is 1e9x easier"
                        },
                        lvls(){
                                let ids = [551, 552, 553, 554, 555, 
                                           561, 562, 563, 564, 565,
                                           571, 572, 573, 574, 575,]
                                let a = 0
                                for (i in ids) {
                                        if (hasUpg("sci", ids[i])) a ++
                                }
                                return a
                        },
                        cost:() => new Decimal("1e8674"),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 545)
                        }, // hasUpgrade("sci", 551)
                },
                552: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci XXVII"
                        },
                        description(){
                                return "Per upgrade in this row double Tissue and Stem Cell gain"
                        },
                        lvls(){
                                if (hasUpgrade("cells", 22)) return tmp.sci.upgrades[551].lvls
                                let a = 1
                                if (hasUpgrade("sci", 551)) a ++ 
                                if (hasUpgrade("sci", 553)) a ++ 
                                if (hasUpgrade("sci", 554)) a ++ 
                                if (hasUpgrade("sci", 555)) a ++ 
                                return a
                        },
                        cost:() => new Decimal("1e8846"),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 551)
                        }, // hasUpgrade("sci", 552)
                },
                553: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci XXVIII"
                        },
                        description(){
                                return "Pluripotent affects DNA gain and tokens multiply Stem Cell gain"
                        },
                        cost:() => new Decimal("1e10534"),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 552)
                        }, // hasUpgrade("sci", 553)
                },
                554: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci XXIX"
                        },
                        description(){
                                return "DNA Science buyables cost nothing and Primary is 5e6x easier per upgrade"
                        },
                        cost:() => new Decimal("1e13070"),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 553)
                        }, // hasUpgrade("sci", 554)
                },
                555: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci XXX"
                        },
                        description(){
                                return makePurple("A") + " multiplies Cell gain"
                        },
                        cost:() => new Decimal("1e16917"),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 554)
                        }, // hasUpgrade("sci", 555)
                },
                561: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci XXXI"
                        },
                        description(){
                                return makePurple("B") + " multiplies Cell gain and per upgrade add .01 to DNA helicase base and double Stem Cell gain"
                        },
                        cost:() => new Decimal("1e27196"),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 555)
                        }, // hasUpgrade("sci", 561)
                },
                562: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci XXXII"
                        },
                        description(){
                                return "Token cost exponent is .25 and per this tab upgrade " + makePurple("G") + " multiplies Stem Cell gain"
                        },
                        cost:() => new Decimal("1e29301"),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 561)
                        }, // hasUpgrade("sci", 562)
                },
                563: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci XXXIII"
                        },
                        description(){
                                return "Per this tab upgrade " + makePurple("E") + " multiplies Stem Cell gain and double Tissue gain"
                        },
                        cost:() => new Decimal("1e35503"),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 562)
                        }, // hasUpgrade("sci", 563)
                },
                564: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci XXXIV"
                        },
                        description(){
                                return "Per this tab upgrade " + makePurple("H") + " multiplies Stem Cell gain"
                        },
                        cost:() => new Decimal("1e54391"),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 563)
                        }, // hasUpgrade("sci", 564)
                },
                565: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci XXXV"
                        },
                        description(){
                                return "Secondary is 1e5x harder"
                        },
                        cost:() => new Decimal("1e82915"),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 564)
                        }, // hasUpgrade("sci", 565)
                },
                571: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA Sci XXXVI"
                        },
                        description(){
                                return "Token II via Token's 25 becomes 24 and Secondary is 1e15x easier per Tissue milestone - 15" 
                        },
                        cost:() => new Decimal("1e249680"),
                        currencyLocation:() => player.sci.dna_science,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "DNA Science",
                        unlocked(){
                                return hasUpgrade("sci", 565)
                        }, // hasUpgrade("sci", 571)
                },
        },
        buyables: {
                rows: 5,
                cols: 3,
                11: {
                        title: "α ~ 1/147",
                        cost(){
                                let amt = getBuyableAmount("sci", 11)
                                let exp = amt.div(tmp.sci.buyables[11].expDiv).plus(1)
                                return amt.pow(exp).pow10()
                        },
                        expDiv(){
                                let ret = new Decimal(20)

                                if (hasMilestone("mini", 4))    ret = ret.plus(player.mini.milestones.length)
                                                                ret = ret.plus(tmp.sci.buyables[23].effect)
                                                                ret = ret.plus(tmp.sci.buyables[111].effect)
                                if (hasUpgrade("sci", 124))     ret = ret.plus(tmp.sci.upgrades[124].effect)
                                
                                return ret
                        },
                        unlocked(){
                                return hasUpgrade("sci", 12) && !hasUpgrade("sci", 305)
                        },
                        canAfford() {
                                return player.sci.hydrogen_science.points.gte(tmp.sci.buyables[11].cost)
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.sci
                                data.buyables[11] = data.buyables[11].plus(1)
                                data.hydrogen_science.points = data.hydrogen_science.points.sub(tmp.sci.buyables[11].cost)
                        },
                        base(){
                                let ret = player.points.plus(10).log10()

                                if (hasUpgrade("sci", 121)) ret = ret.times(Math.log(10))
                                
                                return ret
                        },
                        effect(){
                                return tmp.sci.buyables[11].base.pow(player.sci.buyables[11])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.sci.buyables[11]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.sci.buyables[11].effect) + " to Hydrogen Science and Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("sci", 11)) + " Hydrogen Science</b><br>"
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(Points)^x<br>" + format(tmp.sci.buyables[11].base) + "^x"
                                if (hasUpgrade("sci", 121)) eformula = eformula.replace("log10", "ln")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "10^(x<sup>1+x/" + formatWhole(tmp.sci.buyables[11].expDiv) + "</sup>)" 
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                12: {
                        title: "13.6 eV",
                        cost(){
                                let amt = getBuyableAmount("sci", 12)
                                let exp = amt.div(tmp.sci.buyables[12].expDiv).plus(1)
                                let init = hasMilestone("mini", 2) ? 1 : 1e6
                                return amt.pow(exp).pow10().pow(2).times(init)
                        },
                        expDiv(){
                                let ret = new Decimal(20)

                                if (hasMilestone("mini", 4))    ret = ret.plus(player.mini.milestones.length)
                                                                ret = ret.plus(tmp.sci.buyables[23].effect)
                                                                ret = ret.plus(tmp.sci.buyables[111].effect)
                                if (hasUpgrade("sci", 124))     ret = ret.plus(tmp.sci.upgrades[124].effect)
                                
                                return ret
                        },
                        unlocked(){
                                return hasUpgrade("sci", 12) && !hasUpgrade("sci", 305)
                        },
                        canAfford() {
                                return player.sci.hydrogen_science.points.gte(tmp.sci.buyables[12].cost)
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.sci
                                data.buyables[12] = data.buyables[12].plus(1)
                                data.hydrogen_science.points = data.hydrogen_science.points.sub(tmp.sci.buyables[12].cost)
                        },
                        base(){
                                return player.sci.hydrogen_science.points.max(10).ln().ln().max(1)
                        },
                        effect(){
                                return tmp.sci.buyables[12].base.pow(player.sci.buyables[12])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.sci.buyables[12]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.sci.buyables[12].effect) + " to Hydrogen Science and Hydrogen gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("sci", 12)) + " Hydrogen Science</b><br>"
                                        
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "ln(ln(Hydrogen Science))^x<br>" + format(tmp.sci.buyables[12].base) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e6*100^(x<sup>1+x/" + formatWhole(tmp.sci.buyables[12].expDiv) + "</sup>)" 
                                if (hasMilestone("mini", 2)) cost2 = cost2.slice(4,)
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                13: {
                        title: "1/n^2",
                        cost(){
                                let amt = getBuyableAmount("sci", 13)
                                let exp = amt.div(tmp.sci.buyables[13].expDiv).plus(1)
                                let init = hasMilestone("mini", 1) ? 1 : 2e9
                                return amt.pow(exp).pow10().pow(3).times(init)
                        },
                        expDiv(){
                                let ret = new Decimal(20)

                                if (hasMilestone("mini", 4))    ret = ret.plus(player.mini.milestones.length)
                                                                ret = ret.plus(tmp.sci.buyables[23].effect)
                                                                ret = ret.plus(tmp.sci.buyables[111].effect)
                                if (hasUpgrade("sci", 124))     ret = ret.plus(tmp.sci.upgrades[124].effect)
                                
                                return ret
                        },
                        unlocked(){
                                return hasUpgrade("sci", 12) && !hasUpgrade("sci", 305)
                        },
                        canAfford() {
                                return player.sci.hydrogen_science.points.gte(tmp.sci.buyables[13].cost)
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.sci
                                data.buyables[13] = data.buyables[13].plus(1)
                                data.hydrogen_science.points = data.hydrogen_science.points.sub(tmp.sci.buyables[13].cost)
                        },
                        base(){
                                let ret = player.h.points.max(10).log10()

                                if (hasUpgrade("sci", 121)) ret = ret.times(Math.log(10))
                                
                                return ret
                        },
                        effect(){
                                return tmp.sci.buyables[13].base.pow(player.sci.buyables[13])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.sci.buyables[13]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.sci.buyables[13].effect) + " to Hydrogen Science gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("sci", 13)) + " Hydrogen Science</b><br>"
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(Hydrogen)^x<br>" + format(tmp.sci.buyables[13].base) + "^x"
                                if (hasUpgrade("sci", 121)) eformula = eformula.replace("log10", "ln")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "2e9*1,000^(x<sup>1+x/" + formatWhole(tmp.sci.buyables[13].expDiv) + "</sup>)" 
                                if (hasMilestone("mini", 1)) cost2 = cost2.slice(4,)
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                21: {
                        title: "60 Seconds",
                        cost(){
                                let amt = getBuyableAmount("sci", 21)
                                let exp = amt.div(tmp.sci.buyables[21].expDiv).plus(1)
                                let init = hasUpgrade("h", 44) && !hasMilestone("mini", 7) ? 1e72 : 1e17
                                // cheap when we have a not unlocked
                                // but if we do b first then we want expensive until hasMilestone("mini", 12)
                                if (hasUpgrade("sci", 21)) init = 1
                                return amt.pow(exp).pow10().pow(2.3010299956639813).times(init) 
                                // Math.log10(200) = 2.3010299956639813
                        },
                        expDiv(){
                                let ret = new Decimal(20)

                                if (hasMilestone("mini", 4))    ret = ret.plus(player.mini.milestones.length)
                                                                ret = ret.plus(tmp.sci.buyables[23].effect)
                                                                ret = ret.plus(tmp.sci.buyables[111].effect)
                                if (hasUpgrade("sci", 124))     ret = ret.plus(tmp.sci.upgrades[124].effect)
                                
                                return ret
                        },
                        unlocked(){
                                return hasUpgrade("sci", 14) && !hasUpgrade("sci", 305)
                        },
                        canAfford() {
                                return player.sci.hydrogen_science.points.gte(tmp.sci.buyables[21].cost)
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.sci
                                data.buyables[21] = data.buyables[21].plus(1)
                                data.hydrogen_science.points = data.hydrogen_science.points.sub(tmp.sci.buyables[21].cost)
                        },
                        base(){
                                let ret = player.mini.b_points.points.max(10).log10()

                                if (hasUpgrade("sci", 121)) ret = ret.times(Math.log(10))
                                
                                return ret
                        },
                        effect(){
                                return tmp.sci.buyables[21].base.pow(player.sci.buyables[21])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.sci.buyables[21]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.sci.buyables[21].effect) + " to Hydrogen Science and Life Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("sci", 21)) + " Hydrogen Science</b><br>"
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(B Points)^x<br>" + format(tmp.sci.buyables[21].base) + "^x"
                                if (hasUpgrade("sci", 121)) eformula = eformula.replace("log10", "ln")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e17*200^(x<sup>1+x/" + formatWhole(tmp.sci.buyables[21].expDiv) + "</sup>)" 
                                if (hasUpgrade("h", 44) && !hasMilestone("mini", 7)) {
                                        cost2 = cost2.replace("17", "72")
                                }
                                if (hasUpgrade("sci", 21)) cost2 = cost2.slice(5,)
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                22: {
                        title: "1 Minute",
                        cost(){
                                let amt = getBuyableAmount("sci", 22)
                                let exp = amt.div(tmp.sci.buyables[22].expDiv).plus(1)
                                let init = hasUpgrade("h", 45) ? 2e61 : 1e19
                                if (hasMilestone("mini", 12)) init = 1
                                return amt.pow(exp).pow10().pow(2.6989700043360187).times(init) 
                                // 2.6989700043360187 = Math.log10(500)
                        },
                        expDiv(){
                                let ret = new Decimal(20)

                                if (hasMilestone("mini", 4))    ret = ret.plus(player.mini.milestones.length)
                                                                ret = ret.plus(tmp.sci.buyables[23].effect)
                                                                ret = ret.plus(tmp.sci.buyables[111].effect)
                                if (hasUpgrade("sci", 124))     ret = ret.plus(tmp.sci.upgrades[124].effect)
                                
                                return ret
                        },
                        unlocked(){
                                return hasUpgrade("sci", 15) && !hasUpgrade("sci", 305)
                        },
                        canAfford() {
                                return player.sci.hydrogen_science.points.gte(tmp.sci.buyables[22].cost)
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.sci
                                data.buyables[22] = data.buyables[22].plus(1)
                                data.hydrogen_science.points = data.hydrogen_science.points.sub(tmp.sci.buyables[22].cost)
                        },
                        base(){
                                let ret = player.mini.a_points.points.max(10).log10()

                                if (hasUpgrade("sci", 121)) ret = ret.times(Math.log(10))
                                
                                return ret
                        },
                        effect(){
                                return tmp.sci.buyables[22].base.pow(player.sci.buyables[22])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.sci.buyables[22]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.sci.buyables[22].effect) + " to Hydrogen Science and A Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("sci", 22)) + " Hydrogen Science</b><br>"
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(A Points)^x<br>" + format(tmp.sci.buyables[22].base) + "^x"
                                if (hasUpgrade("sci", 121)) eformula = eformula.replace("log10", "ln")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e19*500^(x<sup>1+x/" + formatWhole(tmp.sci.buyables[22].expDiv) + "</sup>)"
                                if (hasUpgrade("h", 45)) cost2 = cost2.replace("1e19", "2e61") 
                                if (hasMilestone("mini", 12)) cost2 = cost2.slice(5,)
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                23: {
                        title: "6 " + "D" + "e" + "caseconds", // decaseconds
                        cost(){
                                let amt = getBuyableAmount("sci", 23)
                                let exp = amt.div(tmp.sci.buyables[23].expDiv).plus(1)
                                let init = 2e291
                                if (hasUpgrade("h", 54)) init = 1
                                return amt.pow(exp).pow10().pow(10).times(init) 
                        },
                        expDiv(){
                                let ret = new Decimal(20)

                                if (hasMilestone("mini", 4))    ret = ret.plus(player.mini.milestones.length)
                                                                ret = ret.plus(tmp.sci.buyables[111].effect)
                                if (hasUpgrade("sci", 124))     ret = ret.plus(tmp.sci.upgrades[124].effect)
                                
                                return ret
                        },
                        unlocked(){
                                return hasUpgrade("h", 52)  && !hasUpgrade("sci", 305)
                        },
                        canAfford() {
                                return player.sci.hydrogen_science.points.gte(tmp.sci.buyables[23].cost)
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.sci
                                data.buyables[23] = data.buyables[23].plus(1)
                                data.hydrogen_science.points = data.hydrogen_science.points.sub(tmp.sci.buyables[23].cost)
                        },
                        base(){
                                let ret = decimalOne

                                if (hasUpgrade("sci", 123)) ret = ret.plus(player.sci.upgrades.length / 100)
                                
                                return ret
                        },
                        effect(){
                                return tmp.sci.buyables[23].base.times(player.sci.buyables[23]).times(player.sci.buyables[23].plus(1).log(2))
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.sci.buyables[23]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.sci.buyables[23].effect) + " to Blue base and prior exp dividers</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("sci", 23)) + " Hydrogen Science</b><br>"
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.sci.buyables[23].base) + "*x*log2(1+x)"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "2e291*1e10^(x<sup>1+x/" + formatWhole(tmp.sci.buyables[23].expDiv) + "</sup>)"
                                if (hasUpgrade("h", 54)) cost2 = cost2.slice(6,)
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                101: {
                        title: "21%",
                        cost(){
                                let amt = getBuyableAmount("sci", 101)
                                let exp = amt.div(tmp.sci.buyables[101].expDiv).plus(1)
                                let init = 1e4
                                if (hasUpgrade("sci", 104)) init = 1
                                return amt.pow(exp).pow10().times(init) 
                        },
                        expDiv(){
                                let ret = new Decimal(30)

                                                                ret = ret.plus(tmp.sci.buyables[111].effect)
                                if (hasUpgrade("sci", 124))     ret = ret.plus(tmp.sci.upgrades[124].effect)
                                
                                return ret
                        },
                        unlocked(){
                                return hasUpgrade("sci", 102) && !hasUpgrade("sci", 402)
                        },
                        canAfford() {
                                return player.sci.oxygen_science.points.gte(tmp.sci.buyables[101].cost)
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.sci
                                data.buyables[101] = data.buyables[101].plus(1)
                                if (!player.a.unlocked) {
                                        let c = tmp.sci.buyables[101].cost
                                        data.oxygen_science.points = data.oxygen_science.points.sub(c)
                                }
                        },
                        base(){
                                if (hasUpgrade("sci", 305)) return player.sci.points.plus(10).log(10)
                                let logBase = 10
                                if (hasUpgrade("sci", 115)) logBase = Math.E
                                return player.sci.hydrogen_science.points.max(10).log(logBase).log(logBase).max(1)
                        },
                        effect(){
                                return tmp.sci.buyables[101].base.pow(player.sci.buyables[101])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.sci.buyables[101]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.sci.buyables[101].effect) + " to Oxygen Science and Oxygen gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("sci", 101)) + " Oxygen Science</b><br>"
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(log10(H Sci))^x<br>" + format(tmp.sci.buyables[101].base) + "^x"
                                if (hasUpgrade("sci", 115)) eformula = eformula.replaceAll("log10", "ln")
                                if (hasUpgrade("sci", 305)) eformula = eformula.replace("ln(ln(H Sci))^x", "log10(Science)^x")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e4*10^(x<sup>1+x/" + formatWhole(tmp.sci.buyables[101].expDiv) + "</sup>)"
                                if (hasUpgrade("sci", 104)) cost2 = cost2.slice(4,)
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                102: {
                        title: "Atomic",
                        cost(){
                                let amt = getBuyableAmount("sci", 102)
                                let exp = amt.div(tmp.sci.buyables[102].expDiv).plus(1)
                                let init = 5e5
                                if (hasUpgrade("sci", 112)) init = 1
                                return amt.pow(exp).pow10().pow(0.3010299956639812).times(init) 
                                // 0.3010299956639812 = Math.log10(2)
                        },
                        expDiv(){
                                let ret = new Decimal(30)

                                                                ret = ret.plus(tmp.sci.buyables[111].effect)
                                if (hasUpgrade("sci", 124))     ret = ret.plus(tmp.sci.upgrades[124].effect)
                                
                                return ret
                        },
                        unlocked(){
                                return hasUpgrade("sci", 102) && !hasUpgrade("sci", 402)
                        },
                        canAfford() {
                                return player.sci.oxygen_science.points.gte(tmp.sci.buyables[102].cost)
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.sci
                                data.buyables[102] = data.buyables[102].plus(1)
                                if (!player.a.unlocked) {
                                        let c = tmp.sci.buyables[102].cost
                                        data.oxygen_science.points = data.oxygen_science.points.sub(c)
                                }
                        },
                        base(){
                                return player.h.points.max(10).log10().log10().max(1)
                        },
                        effect(){
                                return tmp.sci.buyables[102].base.pow(player.sci.buyables[102])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.sci.buyables[102]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.sci.buyables[102].effect) + " to Oxygen Science and color gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("sci", 102)) + " Oxygen Science</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(log10(Hydrogen))^x<br>" + format(tmp.sci.buyables[102].base) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "5e5*2^(x<sup>1+x/" + formatWhole(tmp.sci.buyables[102].expDiv) + "</sup>)"
                                if (hasUpgrade("sci", 112)) cost2 = cost2.slice(4,)
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                103: {
                        title: "Cyclic",
                        cost(){
                                let amt = getBuyableAmount("sci", 103)
                                let exp = amt.div(tmp.sci.buyables[103].expDiv).plus(1)
                                let init = 5e9
                                if (hasUpgrade("sci", 111)) init = 1
                                return amt.pow(exp).pow10().pow(0.47712125471966244).times(init) 
                                // 0.47712125471966244 = Math.log10(3)
                        },
                        expDiv(){
                                let ret = new Decimal(30)

                                                                ret = ret.plus(tmp.sci.buyables[111].effect)
                                if (hasUpgrade("sci", 124))     ret = ret.plus(tmp.sci.upgrades[124].effect)
                                
                                return ret
                        },
                        unlocked(){
                                return hasUpgrade("sci", 102) && !hasUpgrade("sci", 402)
                        },
                        canAfford() {
                                return player.sci.oxygen_science.points.gte(tmp.sci.buyables[103].cost)
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.sci
                                data.buyables[103] = data.buyables[103].plus(1)
                                if (!player.a.unlocked) {
                                        let c = tmp.sci.buyables[103].cost
                                        data.oxygen_science.points = data.oxygen_science.points.sub(c)
                                }
                        },
                        base(){
                                return player.o.points.max(10).ln().ln().max(1)
                        },
                        effect(){
                                return tmp.sci.buyables[103].base.pow(player.sci.buyables[103])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.sci.buyables[103]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.sci.buyables[103].effect) + " to Oxygen Science and Carbon gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("sci", 103)) + " Oxygen Science</b><br>"
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "ln(ln(Oxygen))^x<br>" + format(tmp.sci.buyables[103].base) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "5e9*3^(x<sup>1+x/" + formatWhole(tmp.sci.buyables[103].expDiv) + "</sup>)"
                                if (hasUpgrade("sci", 111)) cost2 = cost2.slice(4,)
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                111: {
                        title: "Artificial",
                        cost(){
                                let amt = getBuyableAmount("sci", 111)
                                let exp = amt.div(tmp.sci.buyables[111].expDiv).plus(1)
                                let init = 2e19
                                if (hasUpgrade("sci", 105)) init = 1
                                return amt.pow(exp).pow10().pow(3.6989700043360187).times(init) 
                                // 3.6989700043360187 = Math.log10(5000)
                        },
                        expDiv(){
                                let ret = new Decimal(30)

                                if (hasUpgrade("sci", 124))     ret = ret.plus(tmp.sci.upgrades[124].effect)
                                
                                return ret
                        },
                        unlocked(){
                                return hasUpgrade("sci", 103) && !hasUpgrade("sci", 402)
                        },
                        canAfford() {
                                return player.sci.oxygen_science.points.gte(tmp.sci.buyables[111].cost)
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.sci
                                data.buyables[111] = data.buyables[111].plus(1)
                                if (!player.a.unlocked) {
                                        let c = tmp.sci.buyables[111].cost
                                        data.oxygen_science.points = data.oxygen_science.points.sub(c)
                                }
                        },
                        base(){
                                let ret = new Decimal(2)

                                if (hasUpgrade("sci", 121)) ret = ret.plus(1)
                                
                                return ret
                        },
                        effect(){
                                return tmp.sci.buyables[111].base.times(player.sci.buyables[111])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.sci.buyables[111]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.sci.buyables[111].effect) + " to prior exponential dividers and C -> O science exponent</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("sci", 111)) + " Oxygen Science</b><br>"
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.sci.buyables[111].base) + "*x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "2e19*5e3^(x<sup>1+x/" + formatWhole(tmp.sci.buyables[111].expDiv) + "</sup>)"
                                if (hasUpgrade("sci", 105)) cost2 = cost2.slice(5,)
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                112: {
                        title: "Natural",
                        cost(){
                                let amt = getBuyableAmount("sci", 112)
                                let exp = amt.div(tmp.sci.buyables[112].expDiv).plus(1)
                                let init = 5e49
                                if (hasUpgrade("sci", 114)) init = 1
                                return amt.pow(exp).pow10().pow(5.3010299956639812).times(init) 
                                // 5.3010299956639812 = Math.log10(2e5)
                        },
                        expDiv(){
                                let ret = new Decimal(30)

                                if (hasUpgrade("sci", 124))     ret = ret.plus(tmp.sci.upgrades[124].effect)
                                
                                return ret
                        },
                        unlocked(){
                                return player.sci.buyables[111].gte(8) && !hasUpgrade("sci", 402)
                        },
                        canAfford() {
                                return player.sci.oxygen_science.points.gte(tmp.sci.buyables[112].cost)
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.sci
                                data.buyables[112] = data.buyables[112].plus(1)
                                if (!player.a.unlocked) {
                                        let c = tmp.sci.buyables[112].cost
                                        data.oxygen_science.points = data.oxygen_science.points.sub(c)
                                }
                        },
                        base(){
                                return player.sci.oxygen_science.points.max(10).log10()
                        },
                        effect(){
                                return tmp.sci.buyables[112].base.pow(player.sci.buyables[112])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.sci.buyables[112]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.sci.buyables[112].effect) + " to Oxygen Science and B point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("sci", 112)) + " Oxygen Science</b><br>"
                                        
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(Oxygen Science)^x<br>" + format(tmp.sci.buyables[112].base) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "4e49*2e5^(x<sup>1+x/" + formatWhole(tmp.sci.buyables[112].expDiv) + "</sup>)"
                                if (hasUpgrade("sci", 114)) cost2 = cost2.slice(5,)
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                113: {
                        title: "Chemistry",
                        cost(){
                                let amt = getBuyableAmount("sci", 113)
                                let exp = amt.div(tmp.sci.buyables[113].expDiv).plus(1)
                                let init = 1e57
                                if (hasUpgrade("sci", 113)) init = 1
                                return amt.pow(exp).pow10().pow(1.4771212547196624).times(init) 
                                // 1.4771212547196624 = Math.log10(30)
                        },
                        expDiv(){
                                let ret = new Decimal(20)

                                if (hasUpgrade("sci", 124))     ret = ret.plus(tmp.sci.upgrades[124].effect)
                                
                                return ret
                        },
                        unlocked(){
                                return player.sci.buyables[111].gte(9) && !hasUpgrade("sci", 402)
                        },
                        canAfford() {
                                return player.sci.oxygen_science.points.gte(tmp.sci.buyables[113].cost)
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.sci
                                data.buyables[113] = data.buyables[113].plus(1)
                                if (!player.a.unlocked) {
                                        let c = tmp.sci.buyables[113].cost
                                        data.oxygen_science.points = data.oxygen_science.points.sub(c)
                                }
                        },
                        base(){
                                return player.c.points.max(10).log10()
                        },
                        effect(){
                                return tmp.sci.buyables[113].base.pow(player.sci.buyables[113])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.sci.buyables[113]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.sci.buyables[113].effect) + " to Oxygen Science gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("sci", 113)) + " Oxygen Science</b><br>"
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(Carbon)^x<br>" + format(tmp.sci.buyables[113].base) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e57*30^(x<sup>1+x/" + formatWhole(tmp.sci.buyables[113].expDiv) + "</sup>)"
                                if (hasUpgrade("sci", 113)) cost2 = cost2.slice(5,)
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                301: {
                        title: "Reduce",
                        cost(){
                                let amt = getBuyableAmount("sci", 301).toNumber()
                                if (amt == 0) return new Decimal("5e104")
                                if (amt == 1) return new Decimal("1.318e107")
                                if (amt == 2) return new Decimal("1.553e107")
                                if (amt == 3) return new Decimal("1.130e246")
                                if (amt == 4) return new Decimal("7.250e351")
                                if (amt == 5) return new Decimal("3.680e368")

                                return Decimal.tetrate(10, 10)
                        },
                        unlocked(){
                                return hasUpgrade("sci", 364)
                        },
                        canAfford() {
                                if (player.sci.buyables[301].gte(6)) return false
                                return player.sci.nitrogen_science.points.gte(tmp.sci.buyables[301].cost)
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.sci
                                data.buyables[301] = data.buyables[301].plus(1)
                                if (!player.a.unlocked) {
                                        let c = tmp.sci.buyables[301].cost
                                        data.nitrogen_science.points = data.nitrogen_science.points.sub(c)
                                }
                        },
                        display(){
                                let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.sci.buyables[301]) + "</b><br>"
                                let eff1 = "<b><h2>Effect</h2>: Remove "
                                let eff2 = formatWhole(player.sci.buyables[301]) + " E Point buyable base costs</b><br>"
                                if (player.sci.buyables[301].eq(6)) return br + lvl + eff1 + eff2 + br2 + "<h2>MAXED!</h2>"
                                let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("sci", 301), 3) + " Nitrogen Science</b><br>"

                                return br + lvl + eff1 + eff2 + cost
                        },
                },
                302: {
                        title: "Reuse",
                        cost(){
                                let amt = getBuyableAmount("sci", 302)
                                if (amt.gte(100)) {
                                        if (hasUpgrade("sci", 423))     amt = amt.div(100).pow(1.5).times(100)
                                        else if (hasUpgrade("sci", 414))amt = amt.div(100).pow(2).times(100)
                                        else if (hasUpgrade("sci", 413))amt = amt.div(100).pow(7/3).times(100)
                                        else if (hasMilestone("a", 15)) amt = amt.div(100).pow(2.65).times(100)
                                        else amt = amt.div(50).pow10()
                                }
                                if (hasUpgrade("p", 112)) amt = amt.div(2)
                                if (amt.lte(0)) return new Decimal("1.105e107")
                                if (amt.lte(1)) return new Decimal("1.194e107")
                                if (amt.lte(2)) return new Decimal("1.352e107")
                                return Decimal.tetrate(10, amt.div(300).plus(2.33))
                        },
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 364)
                        },
                        canAfford() {
                                return player.sci.nitrogen_science.points.gte(tmp.sci.buyables[302].cost)
                        },
                        buy(){
                                if (!this.canAfford() || hasUpgrade("sci", 454)) return
                                let data = player.sci
                                data.buyables[302] = data.buyables[302].plus(1)
                                if (!player.a.unlocked) {
                                        let c = tmp.sci.buyables[302].cost
                                        data.nitrogen_science.points = data.nitrogen_science.points.sub(c)
                                }
                        },
                        base(){
                                if (hasUpgrade("p", 104)) return Decimal.pow(1.05, player.sci.buyables[302])
                                return player.sci.buyables[302].times(.05).plus(1)
                        },
                        effect(){
                                return tmp.sci.buyables[302].base.pow(player.mini.buyables[222])
                        },
                        display(){
                                let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.sci.buyables[302]) + "<br>"
                                let eff1 = "<h2>Effect</h2>: *"
                                let eff2 = format(tmp.sci.buyables[302].base,3) + " to E Point gain per existence of 1<br>"
                                let eff3 = "In total, " + format(tmp.sci.buyables[302].effect) + " to E Point gain<br>"
                                let cost = "<h2>Cost</h2>: " + formatWhole(getBuyableCost("sci", 302), 3) + " Nitrogen Science<br>"
                                let end = hasUpgrade("p", 104) ? "Effect Formula: 1.05<sup>x</sup>" : "Effect Formula: 1+.05*x"

                                return br + lvl + eff1 + eff2 + eff3 + cost + br + end
                        },
                },
                303: {
                        title: "Recycle",
                        cost(){
                                let amt = getBuyableAmount("sci", 303)
                                if (hasMilestone("mu", 19)) amt = amt.div(2)
                                if (amt.lte(0)) return new Decimal("5.99e104")
                                if (amt.lte(1)) return new Decimal("1.01e105")
                                if (amt.lte(2)) return new Decimal("3.71e106")
                                if (amt.lte(3)) return new Decimal("6.25e106")
                                return Decimal.tetrate(9, amt.pow(2).times(3).div(1e4).plus(2.3704))
                        },
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasUpgrade("sci", 364)
                        },
                        canAfford() {
                                return player.sci.nitrogen_science.points.gte(tmp.sci.buyables[303].cost)
                        },
                        buy(){
                                if (!this.canAfford() || hasUpgrade("sci", 454)) return
                                let data = player.sci
                                data.buyables[303] = data.buyables[303].plus(1)
                                if (!player.a.unlocked) {
                                        let c = tmp.sci.buyables[303].cost
                                        data.nitrogen_science.points = data.nitrogen_science.points.sub(c)
                                }
                        },
                        effect(){
                                return player.sci.buyables[303]
                        },
                        display(){
                                let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.sci.buyables[303]) + "</b><br>"
                                let eff1 = "<b><h2>Effect</h2>: -"
                                let eff2 = formatWhole(tmp.sci.buyables[303].effect) + " effective tokens for prestige purposes</b><br>"
                                let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("sci", 303), 3) + " Nitrogen Science</b><br>"

                                return br + lvl + eff1 + eff2 + cost
                        },
                },
                dnaBuyablesTotal(){
                        let ids = [501, 502, 503, 511, 512, 513, 521, 522, 523]
                        let a = decimalZero
                        for (i in ids) {
                                a = a.plus(player.sci.buyables[ids[i]])
                        }
                        return a
                },
                501: {
                        title: "Topoisomerase",
                        cost(){
                                let amt = getBuyableAmount("sci", 501)
                                let init = 300
                                let base = 2
                                return Decimal.times(init, Decimal.pow(base, amt.pow(2)))
                        },
                        unlocked(){
                                return hasUpgrade("sci", 501) && hasUpgrade("sci", 501)
                        },
                        canAfford() {
                                return player.sci.dna_science.points.gte(tmp.sci.buyables[501].cost)
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.sci
                                data.buyables[501] = data.buyables[501].plus(1)
                                if (!hasUpgrade("sci", 554)) {
                                        let c = tmp.sci.buyables[501].cost
                                        data.dna_science.points = data.dna_science.points.sub(c)
                                }
                        },
                        base(){
                                let ret = decimalOne

                                                                ret = ret.plus(tmp.sci.buyables[521].green_a_effect)
                                if (hasUpgrade("t", 95)) {
                                        let upgs = player.t.upgrades.length
                                        let mile = player.t.milestones.length
                                                                ret = ret.plus(.08 * upgs * mile)
                                }
                                
                                return ret
                        },
                        effect(){
                                return tmp.sci.buyables[501].base.times(player.sci.buyables[501])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.sci.buyables[501]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: " + makePurple("A") + "="
                                        let eff2 = format(tmp.sci.buyables[501].effect) + "</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("sci", 501)) + " DNA Science</b><br>"
                                        
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let ef = "DNA Science<sup>" + makePurple("A") + "</sup> multiples Amino Acid gain"
                                let eformula = makePurple("A") + "=" + format(tmp.sci.buyables[501].base) + "*x"
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>" + ef + br

                                let costmid = "300*2^x<sup>2</sup>"
                                let allCost = "<b><h2>Cost formula</h2>:<br>" + costmid + "</b><br>"

                                return br + allEff + allCost
                        },
                },
                502: {
                        title: "DNA helicase",
                        cost(){
                                let amt = getBuyableAmount("sci", 502)
                                let init = 25e3
                                let base = 3
                                return Decimal.times(init, Decimal.pow(base, amt.pow(2)))
                        },
                        unlocked(){
                                return hasUpgrade("sci", 502) && hasUpgrade("sci", 501)
                        },
                        canAfford() {
                                return player.sci.dna_science.points.gte(tmp.sci.buyables[502].cost)
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.sci
                                data.buyables[502] = data.buyables[502].plus(1)
                                if (!hasUpgrade("sci", 554)) {
                                        let c = tmp.sci.buyables[502].cost
                                        data.dna_science.points = data.dna_science.points.sub(c)
                                }
                        },
                        base(){
                                let ret = decimalOne

                                if (hasUpgrade("cells", 13))    ret = ret.plus(.1)
                                if (hasUpgrade("sci", 561))     ret = ret.plus(.01 * tmp.sci.upgrades.dnaUpgradesLength)

                                return ret
                        },
                        effect(){
                                return tmp.sci.buyables[502].base.times(player.sci.buyables[502])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.sci.buyables[502]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: " + makePurple("B") + "="
                                        let eff2 = format(tmp.sci.buyables[502].effect) + "</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("sci", 502)) + " DNA Science</b><br>"
                                        
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let ef = "log10(DNA Science)<sup>" + makePurple("B") + "</sup> multiples DNA Science gain"
                                let eformula = makePurple("B") + "=" + format(tmp.sci.buyables[502].base) + "*x"
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>" + ef + br

                                let costmid = "25,000*3^x<sup>2</sup>"
                                let allCost = "<b><h2>Cost formula</h2>:<br>" + costmid + "</b><br>"

                                return br + allEff + allCost
                        },
                },
                503: {
                        title: "DNA polymerase",
                        cost(){
                                let amt = getBuyableAmount("sci", 503)
                                let init = 1e9
                                let base = 4
                                return Decimal.times(init, Decimal.pow(base, amt.pow(2)))
                        },
                        unlocked(){
                                return hasUpgrade("sci", 503) && hasUpgrade("sci", 501)
                        },
                        canAfford() {
                                return player.sci.dna_science.points.gte(tmp.sci.buyables[503].cost)
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.sci
                                data.buyables[503] = data.buyables[503].plus(1)
                                if (!hasUpgrade("sci", 554)) {
                                        let c = tmp.sci.buyables[503].cost
                                        data.dna_science.points = data.dna_science.points.sub(c)
                                }
                        },
                        base(){
                                let ret = decimalOne

                                if (hasUpgrade("sci", 524)) ret = ret.plus(.03 * tmp.sci.upgrades.dnaUpgradesLength)

                                return ret
                        },
                        effect(){
                                return tmp.sci.buyables[503].base.times(player.sci.buyables[503])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.sci.buyables[503]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: " + makePurple("C") + "="
                                        let eff2 = format(tmp.sci.buyables[503].effect) + "</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("sci", 503)) + " DNA Science</b><br>"
                                        
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let ef = "µ^" + makePurple("C") + "<sup>2</sup> multiples Protein gain and<br>"
                                ef += "log10(log10(log10(Points)))<sup>" + makePurple("C") + "</sup> multiplies DNA Science and DNA gain"
                                let eformula = makePurple("C") + "=" + format(tmp.sci.buyables[503].base) + "*x"
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>" + ef + br

                                let costmid = "1e9*4^x<sup>2</sup>"
                                let allCost = "<b><h2>Cost formula</h2>:<br>" + costmid + "</b><br>"

                                return br + allEff + allCost
                        },
                },
                511: {
                        title: "DNA clamp",
                        cost(){
                                let amt = getBuyableAmount("sci", 511)
                                let init = 2e19
                                let base = 5
                                return Decimal.times(init, Decimal.pow(base, amt.pow(2)))
                        },
                        unlocked(){
                                return hasUpgrade("sci", 504) && hasUpgrade("sci", 501)
                        },
                        canAfford() {
                                return player.sci.dna_science.points.gte(tmp.sci.buyables[511].cost)
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.sci
                                data.buyables[511] = data.buyables[511].plus(1)
                                if (!hasUpgrade("sci", 554)) {
                                        let c = tmp.sci.buyables[511].cost
                                        data.dna_science.points = data.dna_science.points.sub(c)
                                }
                        },
                        base(){
                                let ret = decimalOne

                                if (hasChallenge("l", 91))      ret = ret.plus(tmp.l.challenges[91].reward)

                                return ret
                        },
                        effect(){
                                return tmp.sci.buyables[511].base.times(player.sci.buyables[511])
                        },
                        dna_sci_effect(){
                                let data = tmp.sci.buyables
                                return data[501].effect.plus(data[502].effect).plus(data[503].effect).pow(data[511].effect)
                        },
                        protein_effect(){
                                let data = tmp.sci.buyables
                                return data[501].effect.pow(2).plus(data[502].effect.pow(2)).plus(data[503].effect.pow(2)).pow(data[511].effect.pow(2).times(100))
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.sci.buyables[511]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: " + makePurple("D") + "="
                                        let eff2 = format(tmp.sci.buyables[511].effect) + "</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("sci", 511)) + " DNA Science</b><br>"
                                        
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let ef = "(" + makePurple("A") + "+" + makePurple("B") + "+" + makePurple("C") + ")<sup>" + makePurple("D") + "</sup> multiples DNA Science gain and ("
                                ef += makePurple("A") + "<sup>2</sup>+" + makePurple("B") + "<sup>2</sup>+" + makePurple("C") + "<sup>2</sup>)^100" + makePurple("D") + "<sup>2</sup> multiplies Protein gain"
                                let eformula = makePurple("D") + "=" + format(tmp.sci.buyables[511].base) + "*x"
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>" + ef + br

                                let costmid = "2e19*5^x<sup>2</sup>"
                                let allCost = "<b><h2>Cost formula</h2>:<br>" + costmid + "</b><br>"

                                return br + allEff + allCost
                        },
                },
                512: {
                        title: "DNA ligase",
                        cost(){
                                let amt = getBuyableAmount("sci", 512)
                                let init = 2e40
                                let base = 6
                                return Decimal.times(init, Decimal.pow(base, amt.pow(2)))
                        },
                        unlocked(){
                                return hasUpgrade("sci", 505) && hasUpgrade("sci", 501)
                        },
                        canAfford() {
                                return player.sci.dna_science.points.gte(tmp.sci.buyables[512].cost)
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.sci
                                data.buyables[512] = data.buyables[512].plus(1)
                                if (!hasUpgrade("sci", 554)) {
                                        let c = tmp.sci.buyables[512].cost
                                        data.dna_science.points = data.dna_science.points.sub(c)
                                }
                        },
                        base(){
                                let ret = decimalOne

                                if (hasUpgrade("sci", 513)) ret = ret.plus(.035 * Math.min(13, tmp.sci.upgrades.dnaUpgradesLength))

                                return ret
                        },
                        effect(){
                                return tmp.sci.buyables[512].base.times(player.sci.buyables[512])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.sci.buyables[512]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: " + makePurple("E") + "="
                                        let eff2 = format(tmp.sci.buyables[512].effect) + "</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("sci", 512)) + " DNA Science</b><br>"
                                        
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let ef = "(Non-0 gem challenges)<sup>" + makePurple("E") + "</sup> multiples DNA Science gain and (1+"
                                ef += makePurple("E") + ")^Non-0 gem challenges<sup>2</sup> multiplies Protein gain"
                                let eformula = makePurple("E") + "=" + format(tmp.sci.buyables[512].base) + "*x"
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>" + ef + br

                                let costmid = "2e40*6^x<sup>2</sup>"
                                let allCost = "<b><h2>Cost formula</h2>:<br>" + costmid + "</b><br>"

                                return br + allEff + allCost
                        },
                },
                513: {
                        title: "Primase",
                        cost(){
                                let amt = getBuyableAmount("sci", 513)
                                let init = 1e123
                                let base = 7
                                return Decimal.times(init, Decimal.pow(base, amt.pow(2)))
                        },
                        unlocked(){
                                return hasUpgrade("sci", 511) && hasUpgrade("sci", 501)
                        },
                        canAfford() {
                                return player.sci.dna_science.points.gte(tmp.sci.buyables[513].cost)
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.sci
                                data.buyables[513] = data.buyables[513].plus(1)
                                if (!hasUpgrade("sci", 554)) {
                                        let c = tmp.sci.buyables[513].cost
                                        data.dna_science.points = data.dna_science.points.sub(c)
                                }
                        },
                        base(){
                                let ret = decimalOne

                                if (hasMilestone("cells", 13)) ret = ret.plus(.1)

                                return ret
                        },
                        effect(){
                                return tmp.sci.buyables[513].base.times(player.sci.buyables[513])
                        },
                        dna_sci_effect(){
                                return player.cells.points.plus(10).log10().pow(tmp.sci.buyables[513].effect.times(2))
                        },
                        minigame_effect(){
                                return tmp.sci.buyables[513].effect.pow(2).plus(1)
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.sci.buyables[513]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: " + makePurple("F") + "="
                                        let eff2 = format(tmp.sci.buyables[513].effect) + "</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("sci", 513)) + " DNA Science</b><br>"
                                        
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let ef = "log10(Cells)<sup>2" + makePurple("F") + "</sup> multiples DNA Science gain and 1+"
                                ef += makePurple("F") + "<sup>2</sup> multiplies minigame gain"
                                let eformula = makePurple("F") + "=" + format(tmp.sci.buyables[513].base) + "*x"
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>" + ef + br

                                let costmid = "1e123*7^x<sup>2</sup>"
                                let allCost = "<b><h2>Cost formula</h2>:<br>" + costmid + "</b><br>"

                                return br + allEff + allCost
                        },
                },
                521: {
                        title: "DNA gyrase",
                        cost(){
                                let amt = getBuyableAmount("sci", 521)
                                let init = 2e132
                                let base = 8
                                return Decimal.times(init, Decimal.pow(base, amt.pow(2)))
                        },
                        unlocked(){
                                return hasUpgrade("sci", 512) && hasUpgrade("sci", 501)
                        },
                        canAfford() {
                                return player.sci.dna_science.points.gte(tmp.sci.buyables[521].cost)
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.sci
                                data.buyables[521] = data.buyables[521].plus(1)
                                if (!hasUpgrade("sci", 554)) {
                                        let c = tmp.sci.buyables[521].cost
                                        data.dna_science.points = data.dna_science.points.sub(c)
                                }
                        },
                        base(){
                                return new Decimal(1.5)
                        },
                        effect(){
                                return tmp.sci.buyables[521].base.times(player.sci.buyables[521])
                        },
                        dna_sci_effect(){
                                return tmp.sci.buyables[501].effect.sub(17).max(1).pow(tmp.sci.buyables[521].effect)
                        },
                        green_a_effect(){
                                return tmp.sci.buyables[521].effect.div(50)
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.sci.buyables[521]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: " + makePurple("G") + "="
                                        let eff2 = format(tmp.sci.buyables[521].effect) + "</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("sci", 521)) + " DNA Science</b><br>"
                                        
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let ef = "(" + makePurple("A") + "-17)<sup>" + makePurple("G") + "</sup> multiples DNA Science gain and add "
                                ef += makePurple("G") + "/50 to " + makePurple("A") + " base"
                                let eformula = makePurple("G") + "=" + format(tmp.sci.buyables[521].base) + "*x"
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>" + ef + br

                                let costmid = "2e132*8^x<sup>2</sup>"
                                let allCost = "<b><h2>Cost formula</h2>:<br>" + costmid + "</b><br>"

                                return br + allEff + allCost
                        },
                },
                522: {
                        title: "Telomerase",
                        cost(){
                                let amt = getBuyableAmount("sci", 522)
                                let init = 3e184
                                let base = 9
                                return Decimal.times(init, Decimal.pow(base, amt.pow(2)))
                        },
                        unlocked(){
                                return hasUpgrade("sci", 513) && hasUpgrade("sci", 501)
                        },
                        canAfford() {
                                return player.sci.dna_science.points.gte(tmp.sci.buyables[522].cost)
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.sci
                                data.buyables[522] = data.buyables[522].plus(1)
                                if (!hasUpgrade("sci", 554)) {
                                        let c = tmp.sci.buyables[522].cost
                                        data.dna_science.points = data.dna_science.points.sub(c)
                                }
                        },
                        base(){
                                return new Decimal(1.5)
                        },
                        effect(){
                                return tmp.sci.buyables[522].base.times(player.sci.buyables[522])
                        },
                        dna_sci_effect(){
                                return tmp.sci.buyables[511].effect.plus(tmp.sci.buyables[512].effect).plus(tmp.sci.buyables[513].effect).pow(tmp.sci.buyables[522].effect)
                        },
                        stem_cell_effect(){
                                return tmp.sci.buyables[522].effect.pow(2).plus(1)
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.sci.buyables[522]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: " + makePurple("H") + "="
                                        let eff2 = format(tmp.sci.buyables[522].effect) + "</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("sci", 522)) + " DNA Science</b><br>"
                                        
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let ef = "(" + makePurple("D") + "+" + makePurple("E") + "+" + makePurple("F") + ")<sup>" + makePurple("H")
                                ef += "</sup> multiples DNA Science gain and multiply Stem Cell gain by 1+"
                                ef += makePurple("H") + "<sup>2</sup>"
                                let eformula = makePurple("H") + "=" + format(tmp.sci.buyables[522].base) + "*x"
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>" + ef + br

                                let costmid = "3e184*9^x<sup>2</sup>"
                                let allCost = "<b><h2>Cost formula</h2>:<br>" + costmid + "</b><br>"

                                return br + allEff + allCost
                        },
                },
                523: {
                        title: "Single-strand DNA-binding protein",
                        cost(){
                                let amt = getBuyableAmount("sci", 523)
                                let init = 1e254
                                let base = 10
                                return Decimal.times(init, Decimal.pow(base, amt.pow(2)))
                        },
                        unlocked(){
                                return hasUpgrade("sci", 514) && hasUpgrade("sci", 501)
                        },
                        canAfford() {
                                return player.sci.dna_science.points.gte(tmp.sci.buyables[523].cost)
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.sci
                                data.buyables[523] = data.buyables[523].plus(1)
                                if (!hasUpgrade("sci", 554)) {
                                        let c = tmp.sci.buyables[523].cost
                                        data.dna_science.points = data.dna_science.points.sub(c)
                                }
                        },
                        base(){
                                let ret = decimalOne

                                if (hasUpgrade("sci", 533)) {
                                        let lvls = player.cells.challenges[12]
                                        if (!hasUpgrade("sci", 543)) lvls = Math.min(5, lvls)
                                        ret = ret.plus(.04 * lvls)
                                }

                                return ret
                        },
                        effect(){
                                return tmp.sci.buyables[523].base.times(player.sci.buyables[523])
                        },
                        dna_sci_effect(){
                                return player.cells.stem_cells.points.max(10).log10().pow(tmp.sci.buyables[523].effect)
                        },
                        stem_cell_effect(){
                                return Decimal.pow(3, tmp.sci.buyables[523].effect)
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.sci.buyables[523]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: " + makePurple("I") + "="
                                        let eff2 = format(tmp.sci.buyables[523].effect) + "</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("sci", 523)) + " DNA Science</b><br>"
                                        
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let ef = "log10(Stem Cells)<sup>" + makePurple("I") + "</sup> multiplies DNA Science gain and 3<sup>" + makePurple("I") + "</sup> multiplies Stem Cell gain"
                                let eformula = makePurple("I") + "=" + format(tmp.sci.buyables[523].base) + "*x"
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>" + ef + br

                                let costmid = "1e254*10^x<sup>2</sup>"
                                let allCost = "<b><h2>Cost formula</h2>:<br>" + costmid + "</b><br>"

                                return br + allEff + allCost
                        },
                },
        },
        microtabs: {
                dna_content: {
                        "Upgrades": {
                                content: [
                                        ["upgrades", [50,51,52,53,54]],
                                ]
                        },
                        "Upgrades II": {
                                content: [
                                        ["upgrades", [55,56,57,58,59]],
                                ],
                                unlocked(){
                                        return tmp.sci.upgrades[551].unlocked
                                },
                        },
                        "Buyables": {
                                content: [
                                        ["display-text", function(){
                                                return "You have a total of " + formatWhole(tmp.sci.buyables.dnaBuyablesTotal) + " DNA Science buyables"
                                        }],
                                        ["display-text", function(){
                                                let data = tmp.sci.buyables
                                                let minCost = data[501].cost
                                                let ids = [502, 503, 511, 512, 513, 521, 522, 523]
                                                let idMin = 501
                                                for (i in ids) {
                                                        if (data[ids[i]].unlocked) minCost = minCost.min(data[ids[i]].cost)
                                                        if (minCost.eq(data[ids[i]].cost)) idMin = ids[i]
                                                }
                                                return "The cheapest buyable (" + (idMin-490) + ") costs " + formatWhole(minCost)
                                        }],
                                        ["buyables", [50,51,52]]
                                ]
                        }
                },      
        },
        tabFormat: {
                "H Research": {
                        content: [
                                "main-display",
                                ["secondary-display3", "hydrogen_science"],
                                "blank", 
                                ["display-text", function(){
                                        return "Hydrogen Science gain is currently " + format(tmp.sci.hydrogen_science.getResetGain) + "/s "
                                }],
                                ["upgrades", [1,2]],
                                ["buyables", [1,2]]
                        ],
                        unlocked(){
                                return !hasUpgrade("sci", 305)
                        },
                },
                "O Research": {
                        content: [
                                "main-display",
                                ["secondary-display3", "oxygen_science"],
                                "blank", 
                                ["display-text", function(){
                                        return "Oxygen Science gain is currently " + format(tmp.sci.oxygen_science.getResetGain) + "/s "
                                }],
                                ["upgrades", [10,11,12]],
                                ["buyables", [10,11]]
                        ],
                        unlocked(){
                                if (hasUpgrade("sci", 402)) return false
                                return hasUpgrade("o", 13) || player.n.unlocked
                        },
                },
                "C Research": {
                        content: [
                                "main-display",
                                ["secondary-display3", "carbon_science"],
                                "blank", 
                                ["display-text", function(){
                                        return "Carbon Science gain is currently " + format(tmp.sci.carbon_science.getResetGain) + "/s "
                                }],
                                ["upgrades", [20,21,22,23,24]],
                        ],
                        unlocked(){
                                if (hasUpgrade("sci", 415)) return false
                                return hasUpgrade("sci", 125) || player.n.unlocked
                        },
                },
                "N Research": {
                        content: [
                                "main-display",
                                ["secondary-display3", "nitrogen_science"],
                                "blank", 
                                ["display-text", function(){
                                        return "Nitrogen Science gain is currently " + format(tmp.sci.nitrogen_science.getResetGain, 3) + "/s "
                                }],
                                ["upgrades", [30,31,32,33,34,35,36]],
                                ["buyables", [30]]
                        ],
                        unlocked(){
                                if (hasUpgrade("sci", 454)) return false
                                return hasMilestone("n", 14) || player.p.unlocked
                        },
                        shouldNotify(){
                                if (hasUpgrade("sci", 454)) return false
                                let data = tmp.sci.buyables
                                if (!hasUpgrade("sci", 364) || hasMilestone("a", 5)) return false
                                return data[301].canAfford || data[302].canAfford || data[303].canAfford
                        },
                },
                "Protein Research": {
                        content: [
                                "main-display",
                                ["secondary-display3", "protein_science"],
                                "blank", 
                                ["display-text", function(){
                                        return "Protein Science gain is currently " + format(tmp.sci.protein_science.getResetGain, 3) + "/s "
                                }],
                                ["upgrades", [40,41,42,43,44,45]]
                        ],
                        unlocked(){
                                return hasUpgrade("a", 23) || player.d.unlocked
                        },
                        shouldNotify(){
                                return false
                        },
                },
                "DNA Research": {
                        content: [
                                "main-display",
                                ["secondary-display3", "dna_science"],
                                "blank", 
                                ["display-text", function(){
                                        return "DNA Science gain is currently " + format(tmp.sci.dna_science.getResetGain, 3) + "/s "
                                }],
                                ["microtabs", "dna_content"]
                        ],
                        unlocked(){
                                return layers.l.grid.getGemEffect(705) || player.cells.unlocked
                        },
                        shouldNotify(){
                                return false
                        },
                },
                "Info": {
                        content: [
                                "main-display",
                                ["display-text", "Every reset other than this resets science"],
                                ["display-text", function(){
                                        return "You are currently getting " + format(tmp.sci.getResetGain) + " science per second"
                                }],
                                ["display-text", function(){
                                        let a = "<br>Hydrogen Science base gain formula is <br>log10(10+Hydrogen)*"
                                        a += "log10(10+Deuterium)*log10(10+Atomic Hydrogen)"

                                        if (!hasUpgrade("sci", 13) && !player.n.unlocked) return a
                                        let b = "H Sci III only counts the first three buyables and \"60 Seconds\""

                                        if (player.o.best.eq(0) && player.c.best.eq(0) && !player.n.unlocked) return a + br2 + b

                                        let ret0 = a + br2 + b + br2
                                        if (hasUpgrade("sci", 305)) ret0 = ""
                                        let c = "Oxygen Science base gain is log10(Hydrogen Science)*log10(Oxygen)*log10(Carbon)"
                                        
                                        if (!hasUpgrade("sci", 125) && !player.n.unlocked) return ret0 + c

                                        let d = "Carbon Science base gain is log10(Oxygen Science)*log10(C Points)*10<sup>tokens+slots-50</sup>"
                                        let ret1 = ret0 + c + br2 + d
                                        if (hasUpgrade("sci", 402)) ret1 = d

                                        if (!player.n.unlocked) return ret1

                                        let e = "Nitrogen to Carbon Science multiplier is hardcapped at 1e500"

                                        if (!hasMilestone("n", 14) && !player.p.unlocked) return ret1 + br + e

                                        let f = "Nitrogen Science base gain is<br>log10(Carbon Science)*log10(Nitrogen)*2<sup>tokens+4*[Nitrogen challenge completions]-90</sup>"
                                        let ret2 = ret1 + br + e + br2 + f
                                        if (hasUpgrade("sci", 454)) ret2 = ""
                                        else if (hasUpgrade("sci", 415)) ret2 = f
                                        
                                        if (!hasUpgrade("a", 23) && !player.d.unlocked) return ret2

                                        let g = "Protein Science base gain is<br>log10(Nitrogen Science)*log10(Protein)*2<sup>tokens+4*[Non-0 gem challenges]-400</sup>"

                                        if (!layers.l.grid.getGemEffect(705) && !player.cells.unlocked) return ret2 + br2 + g

                                        let h = "DNA Science base gain is<br>log10(DNA)*log10(Protein Science)<br>*2<sup>"
                                        h += "tokens+5*[Anti- challenge completions]+2*[Non-0 gem challenges]-600"

                                        return ret2 + br2 + g + br2 + h
                                }],
                        ]
                },
        },
        doReset(layer){
                // reset sci stuffs

                // do sci reset do science reset doscireset do scireset

                let data = player.sci
                let buyData = data.buyables

                data.points = decimalZero
                data.total = decimalZero
                data.best = decimalZero

                doNotDoHSciReset = layer == "tokens" && hasMilestone("tokens", 14)
                doNotDoOSciReset = layer == "tokens" && hasMilestone("tokens", 25)
                if (!doNotDoHSciReset && !player.cells.unlocked) { // Hydrogen Science
                        buyData[11] = decimalZero
                        buyData[12] = decimalZero
                        buyData[13] = decimalZero
                        buyData[21] = decimalZero
                        buyData[22] = decimalZero
                        buyData[23] = decimalZero
                        
                        if (!hasMilestone("tokens", 7)) data.upgrades = filterOut(data.upgrades, [11,12,13,14,15,21,22,23,24,25])
                }
                data.hydrogen_science.total = decimalZero
                data.hydrogen_science.best = decimalZero
                data.hydrogen_science.points = decimalZero

                if (!doNotDoOSciReset && !player.cells.unlocked) { // Oxygen Science
                        buyData[101] = decimalZero
                        buyData[102] = decimalZero
                        buyData[103] = decimalZero
                        buyData[111] = decimalZero
                        buyData[112] = decimalZero
                        buyData[113] = decimalZero
                        
                        if (!hasMilestone("tokens", 11)) data.upgrades = filterOut(data.upgrades, [101,102,103,104,105,111,112,113,114,115])
                        if (layer != "tokens" && !hasUpgrade("p", 115))  data.upgrades = filterOut(data.upgrades, [121, 122, 123, 124, 125])
                }
                data.oxygen_science.total = decimalZero
                data.oxygen_science.best = decimalZero
                data.oxygen_science.points = decimalZero

                if (!player.cells.unlocked) { // Carbon Science
                        let remUpgs = [201, 202, 203, 204, 205, 
                                       211, 212, 213, 214, 215, 
                                       221, 222, 223, 224, 225, 
                                       231, 232, 233, 234, 235,
                                       241, 242, 243, 244, 245,]
                        if (!hasMilestone("mu", 5)) data.upgrades = filterOut(data.upgrades, remUpgs)
                }
                data.carbon_science.total = decimalZero
                data.carbon_science.best = decimalZero
                data.carbon_science.points = decimalZero

                if (!hasMilestone("tokens", 9)) player.mini.milestones = filterOut(
                                                                        player.mini.milestones, 
                                                                        ["1", "2", "3", "4", "5", 
                                                                        "6", "7", "8", "9", "10", 
                                                                        "11", "12"])
                
                let resetNitrogen = true
                if (layer == "tokens") resetNitrogen = false
                if (layer == "p" && hasUpgrade("p", 104)) resetNitrogen = false
                if (resetNitrogen && !player.sci.everUpgrade412) { // nitrogen science
                        let subdata = data.nitrogen_science
                        subdata.total = decimalZero
                        subdata.best = decimalZero
                        subdata.points = decimalZero

                        
                        let ids = [301, 302, 303, 304, 305, 
                                   311, 312, 313, 314, 315, 
                                   321, 322, 323, 324, 325, 
                                   331, 332, 333, 334, 335,
                                   341, 342, 343, 344, 345,
                                   351, 352, 353, 354, 355,
                                   361, 362, 363, 364, 365,]

                        if (!hasUpgrade("p", 114)) data.upgrades = filterOut(data.upgrades, ids)

                        if (!hasMilestone("p", 7)) {
                                data.buyables[301] = decimalZero
                                data.buyables[302] = decimalZero
                                data.buyables[303] = decimalZero
                        }
                }

                let resetProtein = true 
                if (["tokens", "p", "l", "a"].includes(layer)) resetProtein = false
                if (resetProtein && !player.cells.everMilestone60) {
                        let subdata = data.protein_science
                        subdata.total = decimalZero
                        subdata.best = decimalZero
                        subdata.points = decimalZero
                        
                        let ids = [401, 402, 403, 404, 405, 
                                   411, 412, 413, 414, 415, 
                                   421, 422, 423, 424, 425, 
                                   431, 432, 433, 434, 435,
                                   441, 442, 443, 444, 445]
                        if (hasMilestone("d", 4)) ids = ids.slice(player.d.times, )
                        if (!player.cells.unlocked) data.upgrades = filterOut(data.upgrades, ids)
                }

                let resetDNA = true 
                if (["tokens", "p", "l", "a", "d"].includes(layer)) resetDNA = false
                if (resetDNA && !hasMilestone("cells", 48)) {
                        let subdata = data.dna_science
                        subdata.total = decimalZero
                        subdata.best = decimalZero
                        subdata.points = decimalZero
                        
                        let ids = [501, 502, 503, 504, 505, 
                                   511, 512, 513, 514, 515, 
                                   521, 522, 523, 524, 525, 
                                   531, 532, 533, 534, 535,
                                   541, 542, 543, 544, 545]
                        let resetContent = true 
                        if (layer == "cells" && hasMilestone("cells", 5)) resetContent = false
                        if (hasMilestone("cells", 33)) resetContent = false
                        if (resetContent) data.upgrades = filterOut(data.upgrades, ids)

                        let buyIds = [501, 502, 503,
                                      511, 512, 513, 
                                      521, 522, 523,]
                        for (i in buyIds) {
                                if (!resetContent) break
                                data.buyables[buyIds[i]] = decimalZero
                        }
                }
        },
        deactivated(){
                return false
        },
})

addLayer("c", {
        name: "Carbon", 
        symbol: "C", 
        position: 0, 
        startData(){ return {
                unlocked: false,
		points: decimalZero,
                best: decimalZero,
                abtime: 0,
                time: 0,
                times: 0,
                autotimes: 0,
                methane: {
                        points: decimalZero,
                        best: decimalZero,
                },
                graphite: {
                        points: decimalZero,
                        best: decimalZero,
                },
        }},
        color: "#3C9009",
        branches: [],
        requires(){
                if (!player.extremeMode) return hasUpgrade("o", 11) ? Decimal.pow(2, 2460) : Decimal.pow(2, 1024)
                return hasUpgrade("o", 11) ? Decimal.pow(2, 3072) : Decimal.pow(2, 2048)
        },
        resource: "Carbon", 
        baseResource: "Life Points", 
        baseAmount(){return player.points.floor()},
        type: "custom", 
        getResetGain(){
                if (!hasUpgrade("c", 11)) return decimalZero
                let base = tmp.c.getBaseGain

                let mult = tmp.c.getGainMult

                let ret = base.times(mult)

                if (hasMilestone("mu", 8) && hasUpgrade("tokens", 51)) {
                                                ret = ret.times(player.o.points.max(1).pow(.1).min(tmp.l.milestones[10].effect))
                }

                if (hasUpgrade("c", 15))        ret = ret.pow(tmp.h.upgrades[25].effect)
                                                ret = ret.pow(tmp.tokens.buyables[52].effect)
                if (hasUpgrade("n", 11))        ret = ret.pow(1.001)
                if (hasMilestone("l", 1))       ret = ret.pow(tmp.l.milestones[1].effect)

                if (!hasMilestone("mu", 8) && hasUpgrade("tokens", 51)) {
                                                ret = ret.times(player.o.points.max(1).pow(.1).min(tmp.l.milestones[10].effect))
                }

                if (player.extremeMode)         ret = ret.pow(.75)
                
                if (inChallenge("l", 11))       ret = dilate(ret, tmp.l.challenges[11].challengeEffect)
                if (inChallenge("l", 12)) {
                        let depth = tmp.l.challenges[12].getChallengeDepths[3] || 0
                        let exp = nCk(depth + 1, 2)
                        let base = player.extremeMode ? .985 - depth/200 : .99
                                                ret = dilate(ret, Decimal.pow(player.extremeMode ? base : .99, exp))
                }

                return ret
        },
        getBaseGain(){
                let pts = player.points
                if (player.points.lt(2)) return decimalZero
                let initialLogBase = 2 + 2 * player.extremeMode
                let base = player.points.log(initialLogBase).div(256).sub(3).max(0)
                
                if (hasUpgrade("tokens", 22)) base = base.pow(2)

                if (base.lt(1)) base = decimalZero

                return base
        },
        getNextAt(){
                return decimalZero 
        },
        getLossRate(){ 
                let ret = new Decimal(.01)

                if (hasUpgrade("h", 81)) ret = ret.times(50)
                if (hasUpgrade("n", 32)) ret = ret.times(100)

                return ret.max(.00001)
        },
        getGainMult(){ // carbon gain mult carbongain cgain c gain
                let ret = decimalOne

                if (hasUpgrade("c", 14))        ret = ret.times(tmp.c.upgrades[14].effect)
                if (hasUpgrade("c", 15))        ret = ret.times(tmp.h.upgrades[25].effect)
                if (hasUpgrade("h", 62))        ret = ret.times(tmp.o.upgrades[14].effect)
                if (hasUpgrade("h", 63))        ret = ret.times(tmp.h.upgrades[63].effect)
                                                ret = ret.times(tmp.tokens.buyables[22].effect)
                if (hasMilestone("tokens", 3))  ret = ret.times(player.ach.achievements.length)
                if (hasUpgrade("c", 21))        ret = ret.times(tmp.c.upgrades[21].effect)
                                                ret = ret.times(tmp.mini.buyables[101].effect)
                                                ret = ret.times(tmp.n.effect)
                if (hasUpgrade("n", 23))        ret = ret.times(tmp.n.upgrades[23].effect)
                if (hasChallenge("n", 32)) {
                        let exp = tmp.n.challenges[32].rewardEffect
                        let base = player.o.points.max(10).log10()
                                                ret = ret.times(base.pow(exp))
                }
                if (hasUpgrade("mini", 64))     ret = ret.times(player.mini.d_points.fuel.max(1))
                                                ret = ret.times(tmp.l.effect)
                if (player.easyMode)            ret = ret.times(2)
                                                ret = ret.times(tmp.sci.buyables[103].effect)
                if (hasUpgrade("c", 13) && player.extremeMode) {
                                                ret = ret.times(2)
                }
                if (!inChallenge("l", 52) && !hasChallenge("l", 52)) {
                                                ret = ret.times(player.p.points.plus(1))
                }

                if (player.easyMode)            ret = ret.pow(1.001)

                return ret
        },
        update(diff){
                let data = player.c
                
                if (data.best.gt(0) || player.n.unlocked) data.unlocked = true
                else {
                        let v = player.points.max(2).log(2)
                        if (player.extremeMode) {
                                data.unlocked = v.gte(3072) || (v.gte(2048) && player.o.best.eq(0))
                        } else {
                                data.unlocked = v.gte(2460) || (v.gte(1024) && player.o.best.eq(0))
                        }
                }
                data.best = data.best.max(data.points)
                
                if (hasMilestone("mu", 1)) data.points = data.points.plus(tmp.c.getResetGain.times(diff))
                else data.points = getLogisticAmount(data.points, tmp.c.getResetGain, tmp.c.getLossRate, diff)

                data.time += diff
        },
        row: 1,
        layerShown(){
                if (tmp.c.deactivated) return false
                return hasUpgrade("h", 55) || player.n.unlocked
        },
        prestigeButtonText(){
                return "hello"
        },
        canReset(){
                return false
        },
        upgrades: {
                rows: 10,
                cols: 5,
                11: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Carbon I"
                        },
                        description(){
                                if (!player.shiftAlias) return "Begin Production of Carbon, but vastly increase the cost of Oxygen I"
                                a = "(log2(Life Points)/256-3)*multipliers"
                                if (hasUpgrade("tokens", 22)) a = a.replace("3)", "3)^2")
                                return a
                        },
                        cost(){
                                if (player.extremeMode) return Decimal.pow(2, hasUpgrade("o", 11) ? 3072 : 2048)
                                return Decimal.pow(2, hasUpgrade("o", 11) ? 2460 : 1024)
                        },
                        currencyLocation:() => player,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Life Points",
                        unlocked(){
                                return true
                        }, // hasUpgrade("c", 11)
                },
                12: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Carbon II"
                        },
                        description(){
                                if (!player.shiftAlias) return "Add to the A point exponent .126-.126/<br>(1+cbrt([Carbon])/50)"
                                a = ".126-.126/<br>(1+cbrt([Carbon])/50)"
                                if (hasUpgrade("c", 12)) return a
                                return a + br + "Estimated time: " + logisticTimeUntil(tmp.c.upgrades[12].cost, player.c.points, tmp.c.getResetGain, tmp.c.getLossRate)
                        },
                        cost(){
                                if (hasUpgrade("o", 11)) return player.hardMode ? new Decimal(600) : new Decimal(150)
                                return player.hardMode ? new Decimal(130) : new Decimal(30)
                        },
                        effect(){
                                return new Decimal(-.126).times(player.c.points.cbrt().div(50).plus(1).pow(-1).sub(1))
                        },
                        effectDisplay(){
                                return format(tmp.c.upgrades[12].effect, 4)
                        },
                        unlocked(){
                                return hasMilestone("n", 6) || hasUpgrade("c", 11)
                        }, // hasUpgrade("c", 12)
                },
                13: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Carbon III"
                        },
                        description(){
                                if (!player.shiftAlias) {
                                        if (player.extremeMode) return "Add a ln(e+sqrt(x)/10) term to B32, double Carbon gain, and remove B22 and B23's base cost"
                                        return "Add a ln(e+sqrt(x)/10) term to B32"
                                }
                                a = "ln(e+sqrt(x)/10)"
                                if (hasUpgrade("c", 13)) return a
                                return a + br + "Estimated time: " + logisticTimeUntil(tmp.c.upgrades[13].cost, player.c.points, tmp.c.getResetGain, tmp.c.getLossRate)
                        },
                        cost(){
                                if (hasUpgrade("o", 11)) return player.hardMode ? new Decimal(700) : new Decimal(300)
                                return player.hardMode ? new Decimal(190) : new Decimal(40)
                        },
                        unlocked(){
                                return hasMilestone("n", 6) || hasUpgrade("c", 12)
                        }, // hasUpgrade("c", 13)
                },
                14: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Carbon IV"
                        },
                        description(){
                                if (!player.shiftAlias) return "ln(Deuterium)/1000 multiplies Carbon and Indigo's ln becomes log2"
                                a = "max(1, ln(Deuterium)/1000)"
                                if (hasUpgrade("c", 14)) return a
                                return a + br + "Estimated time: " + logisticTimeUntil(tmp.c.upgrades[14].cost, player.c.points, tmp.c.getResetGain, tmp.c.getLossRate)
                        },
                        cost(){
                                if (hasUpgrade("o", 11)) return player.hardMode ? new Decimal(950) : new Decimal(500)
                                return player.hardMode ? new Decimal(270) : new Decimal(100)
                        },
                        effect(){
                                return player.h.deuterium.points.max(3).ln().div(1000).max(1)
                        },
                        effectDisplay(){
                                return format(tmp.c.upgrades[14].effect)
                        },
                        unlocked(){
                                return hasMilestone("n", 6) || hasUpgrade("c", 13)
                        }, // hasUpgrade("c", 14)
                },
                15: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Carbon V"
                        },
                        description(){
                                if (!player.shiftAlias) return "Deuterium V multiplies and then exponentiates Carbon gain"
                                if (hasUpgrade("c", 15)) return ""
                                return br + "Estimated time: " + logisticTimeUntil(tmp.c.upgrades[15].cost, player.c.points, tmp.c.getResetGain, tmp.c.getLossRate)
                        },
                        cost(){
                                if (hasUpgrade("o", 11)) return player.hardMode ? new Decimal(6000) : new Decimal(3000)
                                return player.hardMode ? new Decimal(3000) : new Decimal(1000)
                        },
                        unlocked(){
                                return hasMilestone("n", 6) || hasUpgrade("c", 14)
                        }, // hasUpgrade("c", 15)
                },
                21: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Carbon VI"
                        },
                        description(){
                                if (!player.shiftAlias) return "<bdi style='color:#CC0033'>A</bdi> multiplies Carbon gain and X-Rays base and unlock coins"
                                a = "<bdi style='color:#CC0033'>A</bdi>"
                                if (hasUpgrade("c", 21)) return a
                                return a + br + "Estimated time: " + logisticTimeUntil(tmp.c.upgrades[21].cost, player.c.points, tmp.c.getResetGain, tmp.c.getLossRate)
                        },
                        effect(){
                                return tmp.h.upgrades[41].effect.max(1)
                        },
                        effectDisplay(){
                                return format(tmp.c.upgrades[21].effect)
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal(5e44)
                                return player.hardMode ? new Decimal(6e20) : new Decimal(3e20)
                        },
                        unlocked(){
                                return hasMilestone("n", 6) || hasUpgrade("o", 21)
                        }, // hasUpgrade("c", 21)
                },
                22: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Carbon VII"
                        },
                        description(){
                                if (!player.shiftAlias) {
                                        if (player.extremeMode) return "Add .01 to Polynomial base and multiply Ultraviolet base by 17"
                                        return "cbrt(max(10h, seconds played)) multiplies Ultraviolet base and add .01 to Polynomial base<br>Currently: " + format(tmp.c.upgrades[22].effect)
                                }
                                a = "cbrt(max(36000, seconds played))"
                                if (hasUpgrade("c", 24)) a += "+1000"
                                if (hasUpgrade("c", 22)) return a
                                if (player.extremeMode) a = ""
                                return a + br + "Estimated time: " + logisticTimeUntil(tmp.c.upgrades[22].cost, player.c.points, tmp.c.getResetGain, tmp.c.getLossRate)
                        },
                        effect(){
                                if (player.extremeMode) return new Decimal(17)
                                let ret = new Decimal(player.timePlayed).max(36000).root(3)

                                if (hasUpgrade("c", 24)) ret = ret.plus(1000)

                                return ret
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal(3e55)
                                return player.hardMode ? new Decimal(1.4e37) : new Decimal(5e36)
                        },
                        unlocked(){
                                return hasMilestone("n", 6) || hasUpgrade("o", 22)
                        }, // hasUpgrade("c", 22)
                },
                23: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Carbon VIII"
                        },
                        description(){
                                if (!player.shiftAlias) return "Change token buyable cost scaling from exponential to linear"
                                if (hasUpgrade("c", 23)) return ""
                                return br + "Estimated time: " + logisticTimeUntil(tmp.c.upgrades[23].cost, player.c.points, tmp.c.getResetGain, tmp.c.getLossRate)
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal(1e78)
                                return player.hardMode ? new Decimal(4e80) : new Decimal(2e80)
                        },
                        unlocked(){
                                return hasMilestone("n", 6) || hasUpgrade("o", 23)
                        }, // hasUpgrade("c", 23)
                },
                24: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Carbon IX"
                        },
                        description(){
                                if (!player.shiftAlias) {
                                        if (player.extremeMode) return "Halve the Double-exponential divider"
                                        return "Add 1000 to Carbon VII and halve the Double-exponential divider"
                                }
                                if (hasUpgrade("c", 24)) return ""
                                return br + "Estimated time: " + logisticTimeUntil(tmp.c.upgrades[24].cost, player.c.points, tmp.c.getResetGain, tmp.c.getLossRate)
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal(player.hardMode ? 6e154 : 7e154)
                                return player.hardMode ? new Decimal(8.1e155) : new Decimal(4.6e155)
                        },
                        unlocked(){
                                return hasMilestone("n", 6) || hasUpgrade("o", 24)
                        }, // hasUpgrade("c", 24)
                },
                25: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Carbon X"
                        },
                        description(){
                                if (!player.shiftAlias) return "Halve the Double-exponential divider and add .01 to Polynomial base"
                                if (hasUpgrade("c", 25)) return ""
                                return br + "Estimated time: " + logisticTimeUntil(tmp.c.upgrades[25].cost, player.c.points, tmp.c.getResetGain, tmp.c.getLossRate)
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal(2e229)
                                return player.hardMode ? new Decimal(9e222) : new Decimal(8.5e222)
                        },
                        unlocked(){
                                if (player.extremeMode && player.tokens.total.gte(32)) return true 
                                return hasMilestone("n", 6) || hasUpgrade("o", 25)
                        }, // hasUpgrade("c", 25)
                },
                31: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Carbon XI"
                        },
                        description(){
                                return "Square base Nitrogen gain"
                        },
                        cost(){
                                return Decimal.pow(10, player.extremeMode ? 54500 : 69000)
                        },
                        unlocked(){
                                return (hasMilestone("n", 10) && player.p.unlocked) || hasUpgrade("o", 32)
                        }, // hasUpgrade("c", 31)
                },
                32: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Carbon XII"
                        },
                        description(){
                                return "Respecting addition log base is decreased by .2 for each upgrade in this row but it is initially 3"
                        },
                        effect(){
                                let a = 2.8
                                if (hasUpgrade("c", 31)) a -= .2
                                if (hasUpgrade("c", 33)) a -= .2
                                if (hasUpgrade("c", 34)) a -= .2
                                if (hasUpgrade("c", 35)) a -= .2
                                return a
                        },
                        cost(){
                                return Decimal.pow(10, player.extremeMode ? 6553e3 : 6296e3)
                        },
                        unlocked(){
                                return (hasMilestone("n", 10) && player.p.unlocked) || hasUpgrade("n", 55)
                        }, // hasUpgrade("c", 32)
                },
                33: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Carbon XIII"
                        },
                        description(){
                                return "Square addition is associative level effect and unlock a D buyable"
                                return a
                        },
                        cost(){
                                return Decimal.pow(10, player.extremeMode ? 6655e3 :6485e3)
                        },
                        unlocked(){
                                return (hasMilestone("n", 10) && player.p.unlocked) || hasUpgrade("c", 32)
                        }, // hasUpgrade("c", 33)
                },
                34: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Carbon XIV"
                        },
                        description(){
                                return "Square the ln(x) component in Quadratic"
                        },
                        cost(){
                                return Decimal.pow(10, player.extremeMode ? 7198e6 : (player.hardMode ? 10550e3 : 10530e3))
                        },
                        unlocked(){
                                return (hasMilestone("n", 10) && player.p.unlocked) || hasUpgrade("o", 34)
                        }, // hasUpgrade("c", 34)
                },
                35: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Carbon XV"
                        },
                        description(){
                                return "Add a ln(x) component to Constant"
                        },
                        cost(){
                                return Decimal.pow(10, player.extremeMode ? 8319e6 : 11840e3)
                        },
                        unlocked(){
                                return (hasMilestone("n", 10) && player.p.unlocked) || hasUpgrade("c", 34)
                        }, // hasUpgrade("c", 35)
                },
                
        },
        tabFormat: {
                "Upgrades": {
                        content: [
                                "main-display",
                                ["display-text",
                                        function(){
                                                if (player.shiftAlias) return "Your best Carbon is " + format(player.c.best) + " and you are netting " + format(tmp.c.getResetGain.sub(tmp.c.getLossRate.times(player.c.points))) + " Carbon per second"
                                                return "You are gaining " + format(tmp.c.getResetGain) + " Carbon per second"
                                        }
                                ],
                                ["display-text",
                                        function(){
                                                if (hasMilestone("mu", 1)) return ""
                                                return "You are losing " + format(tmp.c.getLossRate.times(100)) + "% of your Carbon per second"
                                        },
                                ],
                                "blank", 
                                ["upgrades", [1,2,3,4,5,6,7]]
                        ],
                        unlocked(){
                                return true
                        },
                },
        },
        doReset(layer){},
        deactivated(){
                if (hasUpgrade("or", 135)) return true
                return inChallenge("l", 31) || hasChallenge("l", 31)
        },
})

addLayer("o", {
        name: "Oxygen",
        symbol: "O",
        position: 1,
        startData(){ return {
                unlocked: false,
		points: decimalZero,
                best: decimalZero,
                abtime: 0,
                time: 0,
                times: 0,
                autotimes: 0,
                atomic_oxygen: {
                        points: decimalZero,
                        best: decimalZero,
                },
                ozone: {
                        points: decimalZero,
                        best: decimalZero,
                },
        }},
        color: "#58E3F1",
        branches: [],
        requires(){
                if (player.extremeMode) return hasUpgrade("c", 11) ? Decimal.pow(2, 2500) : Decimal.pow(2, 2048)
                return hasUpgrade("c", 11) ? Decimal.pow(2, 2560) : Decimal.pow(2, 1024)
        },
        resource: "Oxygen", 
        baseResource: "Life Points", 
        baseAmount(){return player.points.floor()},
        type: "custom", 
        getResetGain(){
                if (!hasUpgrade("o", 11)) return decimalZero
                let base = tmp.o.getBaseGain

                let mult = tmp.o.getGainMult

                let ret = base.times(mult)

                if (hasMilestone("mu", 8) && hasUpgrade("tokens", 52)) {
                                                ret = ret.times(player.c.points.max(1).pow(.1).min(tmp.l.milestones[10].effect))
                }

                                                ret = ret.pow(tmp.tokens.buyables[53].effect)
                if (hasUpgrade("n", 11))        ret = ret.pow(1.001)
                if (hasMilestone("l", 1))       ret = ret.pow(tmp.l.milestones[1].effect)

                if (!hasMilestone("mu", 8) && hasUpgrade("tokens", 52)) {
                                                ret = ret.times(player.c.points.max(1).pow(.1).min(tmp.l.milestones[10].effect))
                }

                if (player.extremeMode)         ret = ret.pow(.75)
                if (inChallenge("n", 12))       ret = ret.root(2)
                if (inChallenge("l", 11))       ret = dilate(ret, tmp.l.challenges[11].challengeEffect)
                if (inChallenge("l", 12)) {
                        let depth = tmp.l.challenges[12].getChallengeDepths[3] || 0
                        let exp = nCk(depth + 1, 2)
                        let base = player.extremeMode ? .985 - depth/200 : .99
                                                ret = dilate(ret, Decimal.pow(player.extremeMode ? base : .99, exp))
                }

                return ret
        },
        getBaseGain(){
                let pts = player.points
                if (player.points.lt(2)) return decimalZero
                let initialLogBase = 2 + 2 * player.extremeMode
                let init = player.points.max(4).log(initialLogBase).log(2)
                let base 
                if (hasUpgrade("h", 74)){
                        base = init.max(0).pow(2)
                } else {
                        base = init.sub(9).max(0).pow(2)
                }

                if (hasUpgrade("tokens", 21))   base = base.pow(3)
                if (hasMilestone("tokens", 17)) base = base.pow(3)
                if (hasUpgrade("h", 74))        base = base.pow(2)

                if (base.lt(1)) base = decimalZero

                return base
        },
        getNextAt(){
                return decimalZero 
        },
        getLossRate(){ // oxygen loss
                let ret = new Decimal(.01)

                if (hasUpgrade("h", 81))        ret = ret.times(50)
                if (hasUpgrade("n", 32))        ret = ret.times(100)
                if (hasUpgrade("sci", 115))     ret = ret.times(20)

                return ret
        },
        getGainMult(){ // oxygen gain o gain ogain oxygengain 
                if (inChallenge("n", 42)) return decimalOne
                let ret = decimalOne

                if (hasUpgrade("o", 12))        ret = ret.times(tmp.o.upgrades[12].effect)
                if (hasUpgrade("o", 14))        ret = ret.times(tmp.o.upgrades[14].effect)
                if (hasUpgrade("h", 63))        ret = ret.times(tmp.h.upgrades[63].effect)
                                                ret = ret.times(tmp.tokens.buyables[23].effect)
                if (hasMilestone("tokens", 3))  ret = ret.times(player.ach.achievements.length)
                if (hasUpgrade("h", 71))        ret = ret.times(Decimal.pow(player.tokens.coins.points.max(10).log10().min(5), player.h.upgrades.length))
                if (hasUpgrade("tokens", 81))   ret = ret.times(81)
                if (hasMilestone("tokens", 23)) {
                        let c = tmp.tokens.milestones[23].effect
                        let base = player.c.points.max(10).log10()
                                                ret = ret.times(base.pow(c))
                }
                                                ret = ret.times(tmp.n.effect)
                                                ret = ret.times(tmp.l.effect)
                if (player.easyMode)            ret = ret.times(2)
                if (hasUpgrade("sci", 101))     ret = ret.times(tmp.sci.effect)
                                                ret = ret.times(tmp.sci.buyables[101].effect)
                if (!inChallenge("l", 52) && !hasChallenge("l", 52)) {
                                                ret = ret.times(player.p.points.plus(1))
                }

                if (player.easyMode)            ret = ret.pow(1.001)

                return ret
        },
        update(diff){
                let data = player.o
                
                if (data.best.gt(0) || player.n.unlocked) data.unlocked = true
                else if (player.points.max(2).log(2).gte(1024)) {
                        if (player.extremeMode) data.unlocked = (!player.c.best.gt(0) || player.points.max(2).log(2).gte(2500)) && player.points.max(2).log(2).gt(2048)
                        else data.unlocked = (!player.c.best.gt(0) || player.points.max(2).log(2).gte(2560))
                }
                data.best = data.best.max(data.points)
                
                // do oxygen gain
                if (hasMilestone("mu", 1)) data.points = data.points.plus(tmp.o.getResetGain.times(diff))
                else data.points = getLogisticAmount(data.points, tmp.o.getResetGain, tmp.o.getLossRate, diff)

                data.time += diff
        },
        row: 1,
        layerShown(){
                if (tmp.o.deactivated) return false
                return hasUpgrade("h", 55) || player.n.unlocked
        },
        prestigeButtonText(){
                return "hello"
        },
        canReset(){
                return false
        },
        upgrades: {
                rows: 10,
                cols: 5,
                11: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Oxygen I"
                        },
                        description(){
                                if (!player.shiftAlias) return "Begin Production of Oxygen, but vastly increase the cost of Carbon I"
                                a = "(log2(log2(Life Points))-9)^2<br>*multipliers"
                                if (hasUpgrade("tokens", 21))   a = a.replace("^2", "^6")
                                if (hasMilestone("tokens", 17)) a = a.replace("^6", "^18")
                                if (hasUpgrade("h", 74))        a = "(log2(log2(Life Points)))^36<br>*multipliers"
                                return a
                        },
                        cost(){
                                if (player.extremeMode) return Decimal.pow(2, hasUpgrade("c", 11) ? 2500 : 2048)
                                return Decimal.pow(2, hasUpgrade("c", 11) ? 2560 : 1024)
                        },
                        currencyLocation:() => player,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Life Points",
                        unlocked(){
                                return true
                        }, // hasUpgrade("o", 11)
                },
                12: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Oxygen II"
                        },
                        description(){
                                if (!player.shiftAlias) return "Multiply oxygen gain by log10(Atomic Hydrogen)*<br>log10(Deuterium)/10^7"
                                a = "log10(Atomic Hydrogen)*<br>log10(Deuterium)/10^7"
                                if (hasUpgrade("o", 12)) return a
                                return a + br + "Estimated time: " + logisticTimeUntil(tmp.o.upgrades[12].cost, player.o.points, tmp.o.getResetGain, tmp.o.getLossRate)
                        },
                        cost:() => new Decimal(30),
                        effect(){
                                let a = player.h.atomic_hydrogen.points.max(10).log10()
                                let b = player.h.deuterium.points.max(10).log10()

                                return a.times(b).div(10**7).max(1)
                        },
                        effectDisplay(){
                                return format(tmp.o.upgrades[12].effect)
                        },
                        unlocked(){
                                return hasMilestone("n", 6) || hasUpgrade("o", 11)
                        }, // hasUpgrade("o", 12)
                },
                13: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Oxygen III"
                        },
                        description(){
                                if (!player.shiftAlias) {
                                        if (player.extremeMode) return "Each upgrade raises B Point and Life Point gain ^1.02 and unlock Oxygen Science"
                                        return "Each upgrade raises B Point and Life Point gain ^1.02"
                                }
                                a = "1.02^upgrades"
                                if (hasUpgrade("o", 13)) return a
                                return a + br + "Estimated time: " + logisticTimeUntil(tmp.o.upgrades[13].cost, player.o.points, tmp.o.getResetGain, tmp.o.getLossRate)
                        },
                        cost:() => new Decimal(player.extremeMode ? 100 : 200),
                        effect(){
                                return Decimal.pow(1.02, player.o.upgrades.length)
                        },
                        effectDisplay(){
                                return format(tmp.o.upgrades[13].effect)
                        },
                        unlocked(){
                                return hasMilestone("n", 6) || hasUpgrade("o", 12)
                        }, // hasUpgrade("o", 13)
                },
                14: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Oxygen IV"
                        },
                        description(){
                                if (!player.shiftAlias) return "ln(Oxygen) multiplies Oxygen gain"
                                a = "ln(Oxygen)"
                                if (hasUpgrade("o", 15))        a = "(ln(Oxygen))^2"
                                if (hasMilestone("tokens", 13)) a = a.replace("^2", "^4")
                                if (hasUpgrade("h", 81))        a = a.replace("^4", "^8")
                                if (hasUpgrade("o", 14)) return a
                                return a + br + "Estimated time: " + logisticTimeUntil(tmp.o.upgrades[14].cost, player.o.points, tmp.o.getResetGain, tmp.o.getLossRate)
                        },
                        cost:() => new Decimal(1500),
                        effect(){
                                let ret = player.o.points.max(1).ln().max(1)

                                if (hasUpgrade("o", 15))        ret = ret.pow(2)
                                if (hasMilestone("tokens", 13)) ret = ret.pow(2)
                                if (hasUpgrade("h", 81))        ret = ret.pow(2)

                                return ret
                        },
                        effectDisplay(){
                                return format(tmp.o.upgrades[14].effect)
                        },
                        unlocked(){
                                return hasMilestone("n", 6) || hasUpgrade("o", 13)
                        }, // hasUpgrade("o", 14)
                },
                15: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Oxygen V"
                        },
                        description(){
                                if (!player.shiftAlias) return "Oxygen^upgrades multiplies Life Point gain and square Oxygen IV"
                                a = "min(1ee6, Oxygen) ^[upgrades]"
                                if (hasMilestone("tokens", 10)) a = "min(1ee6, Oxygen) ^[upgrades]<sup>2</sup>"
                                if (hasUpgrade("tokens", 11)) a = a.replace("[upgrades]","([upgrades]+3)")
                                if (hasUpgrade("o", 15)) return a
                                return a + br + "Estimated time: " + logisticTimeUntil(tmp.o.upgrades[15].cost, player.o.points, tmp.o.getResetGain, tmp.o.getLossRate)
                        },
                        cost:() => new Decimal(5e4),
                        effect(){
                                let base = player.o.points.max(1).min(Decimal.pow(10, 1e6))
                                
                                let exp = new Decimal(player.o.upgrades.length)
                                if (hasUpgrade("tokens", 11))   exp = exp.plus(3)
                                if (hasMilestone("tokens", 10)) exp = exp.pow(2)

                                let ret = base.pow(exp)

                                return ret
                        },
                        effectDisplay(){
                                return format(tmp.o.upgrades[15].effect)
                        },
                        unlocked(){
                                return hasMilestone("n", 6) || hasUpgrade("o", 14)
                        }, // hasUpgrade("o", 15)
                },
                21: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Oxygen VI"
                        },
                        description(){
                                if (!player.shiftAlias) return "Oxygen multiplies Hydrogen gain and Hydrogen multiplies B Point gain"
                                if (hasUpgrade("o", 21)) return ""
                                return "Estimated time: " + logisticTimeUntil(tmp.o.upgrades[21].cost, player.o.points, tmp.o.getResetGain, tmp.o.getLossRate)
                        },
                        cost:() => new Decimal(player.extremeMode ? 1e30 : 3e22),
                        unlocked(){
                                return hasMilestone("n", 6) || hasMilestone("tokens", 12)
                        }, // hasUpgrade("o", 21)
                },
                22: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Oxygen VII"
                        },
                        description(){
                                if (!player.shiftAlias) return "Multiply Gamma Ray base by log10(Life Points) and double coin gain"
                                if (hasUpgrade("o", 22)) return ""
                                return "Estimated time: " + logisticTimeUntil(tmp.o.upgrades[22].cost, player.o.points, tmp.o.getResetGain, tmp.o.getLossRate)
                        },
                        cost:() => new Decimal(player.extremeMode ? (player.tokens.total.gt(15) ? 3e38 : 1e40) : 2e30),
                        unlocked(){
                                return hasMilestone("n", 6) || hasUpgrade("c", 21)
                        }, // hasUpgrade("o", 22)
                },
                23: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Oxygen VIII"
                        },
                        description(){
                                if (!player.shiftAlias) return "<bdi style='font-size: 80%'>Multiply Near-ultraviolet base by log10(Life Points) and Infrared and Visible effects are raised to [tokens]^3"
                                if (hasUpgrade("o", 23)) return "log10(Life Points)"
                                return "log10(Life Points)<br>Estimated time: " + logisticTimeUntil(tmp.o.upgrades[23].cost, player.o.points, tmp.o.getResetGain, tmp.o.getLossRate)
                        },
                        cost(){
                                return new Decimal(2e48)
                        },
                        effect(){
                                return player.points.max(1).log10().max(1)
                        },
                        effectDisplay(){
                                return format(tmp.o.upgrades[23].effect)
                        },
                        unlocked(){
                                return hasMilestone("n", 6) || hasUpgrade("c", 22)
                        }, // hasUpgrade("o", 23)
                },
                24: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Oxygen IX"
                        },
                        description(){
                                if (!player.shiftAlias) return "Multiply Radio Wave base by log10(Life Points) and square it"
                                if (hasUpgrade("o", 24)) return "log10(Life Points)"
                                return "log10(Life Points)<br>Estimated time: " + logisticTimeUntil(tmp.o.upgrades[24].cost, player.o.points, tmp.o.getResetGain, tmp.o.getLossRate)
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal(2e140)
                                return new Decimal(5e155)
                        },
                        effect(){
                                return player.points.max(1).log10().max(1)
                        },
                        effectDisplay(){
                                return format(tmp.o.upgrades[24].effect)
                        },
                        unlocked(){
                                return hasMilestone("n", 6) || hasUpgrade("h", 81)
                        }, // hasUpgrade("o", 24)
                },
                25: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Oxygen X"
                        },
                        description(){
                                if (!player.shiftAlias) return "Multiply and then exponentiate X-Ray base by the number of upgrades*pi"
                                if (hasUpgrade("o", 25)) return ""
                                return "Estimated time: " + logisticTimeUntil(tmp.o.upgrades[25].cost, player.o.points, tmp.o.getResetGain, tmp.o.getLossRate)
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal(6.66e199)
                                return new Decimal(7e209)
                        },
                        effect(){
                                return new Decimal(player.o.upgrades.length).times(Math.PI)
                        },
                        effectDisplay(){
                                return format(tmp.o.upgrades[25].effect)
                        },
                        unlocked(){
                                return hasMilestone("n", 6) || hasUpgrade("c", 24)
                        }, // hasUpgrade("o", 25)
                },
                31: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Oxygen XI"
                        },
                        description(){
                                return "You can bulk 10x A, B, and C buyables"
                        },
                        cost:() => new Decimal(2048),
                        currencyLocation:() => player.n,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Nitrogen",
                        unlocked(){
                                return (hasMilestone("n", 10) && player.p.unlocked) || hasUpgrade("n", 25)
                        }, // hasUpgrade("o", 31)
                },
                32: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Oxygen XII"
                        },
                        description(){
                                return "Add .08 to color gain exponent and apply the prior upgrade again"
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 372e3 : 314e3),
                        unlocked(){
                                return (hasMilestone("n", 10) && player.p.unlocked) || hasUpgrade("o", 31)
                        }, // hasUpgrade("o", 32)
                },
                33: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Oxygen XIII"
                        },
                        description(){
                                return "Square " + makeBlue("a") + " and you bulk 2x E buyables per upgrade in this row"
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 23511e3 : 28274e3),
                        unlocked(){
                                return (hasMilestone("n", 10) && player.p.unlocked) || hasUpgrade("c", 33)
                        }, // hasUpgrade("o", 33)
                },
                34: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Oxygen XIV"
                        },
                        description(){
                                return "Commutativity of addition outer log10 becomes ln" 
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 52118e3 : 29185e3),
                        unlocked(){
                                return (hasMilestone("n", 10) && player.p.unlocked) || hasUpgrade("o", 33)
                        }, // hasUpgrade("o", 34)
                },
                35: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Oxygen XV"
                        },
                        description(){
                                return "Nitrogen<sup>.26</sup> multiplies E Point gain and you bulk 5x E buyables"
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 1.31e11 : (player.hardMode ? 404e6 : 403e6)),
                        unlocked(){
                                return (hasMilestone("n", 10) && player.p.unlocked) || hasUpgrade("c", 35)
                        }, // hasUpgrade("o", 35)
                },
        },
        tabFormat: {
                "Upgrades": {
                        content: [
                                "main-display",
                                ["display-text",
                                        function(){
                                                if (player.shiftAlias) return "Your best Oxygen is " + format(player.o.best) + " and you are netting " + format(tmp.o.getResetGain.sub(tmp.o.getLossRate.times(player.o.points))) + " Oxygen per second"
                                                return "You are gaining " + format(tmp.o.getResetGain) + " Oxygen per second"
                                        }
                                ],
                                ["display-text",
                                        function(){
                                                if (hasMilestone("mu", 1)) return ""
                                                return "You are losing " + format(tmp.o.getLossRate.times(100)) + "% of your Oxygen per second"
                                        },
                                ],
                                "blank", 
                                ["upgrades", [1,2,3,4,5,6,7]]
                        ],
                        unlocked(){
                                return true
                        },
                },
        },
        doReset(layer){},
        deactivated(){
                if (hasUpgrade("or", 135)) return true
                return inChallenge("l", 32) || hasChallenge("l", 32)
        },
})

addLayer("n", {
        name: "Nitrogen", 
        symbol: "N", 
        position: 0, 
        startData(){ return {
                unlocked: false,
		points: decimalZero,
                best: decimalZero,
                total: decimalZero,
                abtime: 0,
                time: 0,
                times: 0,
                autotimes: 0,
                passiveTime: 0,
        }},
        color: "#99582E",
        branches: [],
        requires:() => Decimal.pow(10, Decimal.pow(2, 20).times(player.extremeMode ? 125 : 105)), 
        resource: "Nitrogen", 
        baseResource: "Life Points", 
        baseAmount(){return player.points.floor()},
        type: "custom", 
        getResetGain(){
                let base = tmp.n.getBaseGain
                let mult = tmp.n.getGainMult

                let ret = base.times(mult)

                if (hasMilestone("l", 1))       ret = ret.pow(tmp.l.milestones[1].effect)
                if (player.extremeMode)         ret = ret.pow(.75)

                if (inChallenge("l", 11))       ret = dilate(ret, tmp.l.challenges[11].challengeEffect)

                return ret.floor()
        },
        getGainExp(){
                let ret = new Decimal(3)

                if (hasUpgrade("c", 31))        ret = ret.times(2)
                if (hasUpgrade("mini", 82))     ret = ret.times(2)
                if (hasUpgrade("sci", 311))     ret = ret.times(2)

                return ret
        },
        getBaseGain(){
                let pts = player.points
                if (player.points.lt(10)) return decimalZero

                let init = pts.log10().div(player.extremeMode ? 125 : 105)
                let exp = tmp.n.getGainExp

                if (init.lt(1)) return decimalZero

                let base = init.log(2).sub(19).max(0).pow(exp)

                if (base.lt(1)) base = decimalZero

                return base
        },
        getNextAt(){
                let curr = tmp.n.getResetGain.plus(1)
                if (player.extremeMode) curr = curr.root(.75)
                let v1 = curr.div(tmp.n.getGainMult).max(1)
                if (hasMilestone("l", 1)) v1 = v1.root(tmp.l.milestones[1].effect)
                let v2 = v1.root(tmp.n.getGainExp).plus(19)
                return Decimal.pow(2, v2).times(player.extremeMode ? 125 : 105).pow10()
        },
        getGainMult(){ // nitrogen gain ngain nitrogengain n gain
                let ret = decimalOne

                if (hasUpgrade("n", 24))        ret = ret.times(tmp.n.upgrades[24].effect)
                if (hasUpgrade("mini", 73))     ret = ret.times(tmp.mini.d_points.getEffectiveFuelAux.max(1))
                if (hasUpgrade("mini", 81))     ret = ret.times(tmp.mini.d_points.getUpgrades)
                if (hasUpgrade("n", 35)) {
                        let rede = tmp.n.upgrades[35].effect
                                                ret = ret.times(player.points.max(10).log10().log10().max(1).pow(rede))
                }
                if (hasUpgrade("n", 41))        ret = ret.times(player.mini.e_points.points.max(10).log10())
                if (hasUpgrade("n", 53))        ret = ret.times(Decimal.pow(1.01, player.mini.buyables[211]))
                if (!inChallenge("l", 52) && !hasChallenge("l", 52)) {
                                                ret = ret.times(player.p.points.plus(1))
                }
                if (hasUpgrade("p", 14))        ret = ret.times(tmp.p.upgrades[14].effect)
                                                ret = ret.times(tmp.l.effect)
                if (player.easyMode)            ret = ret.times(2)
                if (hasUpgrade("sci", 341))     ret = ret.times(player.sci.nitrogen_science.points.max(10).log10())
                if (hasUpgrade("sci", 354))     ret = ret.times(2)
                if (hasUpgrade("sci", 361))     ret = ret.times(3)
                if (hasUpgrade("sci", 363))     ret = ret.times(2)

                if (player.easyMode)            ret = ret.pow(1.001)

                return ret
        },
        effect(){
                let amt = player.n.total

                let base = amt.sqrt().times(2).plus(1)
                let exp = amt.plus(7).log2()

                if (hasUpgrade("n", 25)) exp = exp.times(player.n.upgrades.length)

                return base.pow(exp)

        },
        effectDescription(){
                if (player.shiftAlias) return "effect formula: (sqrt(x)*2+1)^log2(x+7)"
                let effstr = format(tmp.n.effect)
                let start = " multiplying Point, Hydrogen, Oxygen, Carbon, C Point, and color production gain by "
                if (player.extremeMode) start = " multiplying Point, Hydrogen, Oxygen, Carbon, C Point, Carbon Science, Oxygen Science and color production gain by "
                return start + effstr + "."
        },
        update(diff){
                let data = player.n
                
                if (tmp.n.layerShown) data.unlocked = true
                data.best = data.best.max(data.points)
                
                // do nitrogen gain
                if (hasMilestone("n", 13)) {
                        let g = tmp.n.getResetGain
                        if (hasUpgrade("mini", 75) && g.times(1e4).gt(data.points)) {
                                let div = player.hardMode ? 100 : 1000
                                let rem = data.points.div(g).sub(1e4).times(-1).div(div) 
                                // number of seconds left of fast gain
                                if (rem.lt(diff)) {
                                        let prodTime = rem.times(div).plus(diff).sub(rem)
                                        let prod = g.times(prodTime)
                                        // do rem worth of fast and the rest worth of slow
                                        data.points = data.points.plus(prod)
                                        //                   [normal speed]  [1e4 of fast]

                                        data.total = data.total.plus(prod)
                                } else {
                                        data.points = data.points.plus(g.times(diff).times(div))
                                        data.total = data.total.plus(g.times(diff).times(div))
                                }
                        } else {
                                data.points = data.points.plus(tmp.n.getResetGain.times(diff))
                                data.total = data.total.plus(tmp.n.getResetGain.times(diff))
                        }
                        data.passiveTime += Math.min(1, diff)
                        if (data.passiveTime > 1) {
                                data.passiveTime += -1
                                data.times ++
                        }
                }

                if (hasUpgrade("p", 11) && !hasUpgrade("d", 21)) {
                        let m = .5
                        data.points = data.points.plus(diff * m)
                        data.total = data.total.plus(diff * m)
                }

                data.time += diff
        },
        row: 2,
        layerShown(){
                if (tmp.n.deactivated) return false
                return hasUpgrade("mini", 45) || player.n.best.gt(0) || player.p.unlocked
        },
        prestigeButtonText(){
                let gain = tmp.n.getResetGain
                let nextAt = tmp.n.getNextAt

                let amt = "You can reset for <br>" + formatWhole(gain) + " Nitrogen"
                let nxt = ""
                if (gain.lt(1000)) nxt = br + "You need " + format(nextAt) + br + "Life Points for the next"
                if (player.n.time > 1 && gain.lt(1e6) && gain.gt(1) && player.shiftAlias) nxt += br + format(gain.div(player.n.time)) + "/s"
                return amt + nxt
        },
        canReset(){
                return !hasMilestone("n", 13) && tmp.n.getResetGain.gt(0) && hasUpgrade("mini", 45)
        },
        upgrades: {
                rows: 10,
                cols: 5,
                11: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nitrogen I"
                        },
                        description(){
                                if (player.shiftAlias) {
                                        if (player.extremeMode) return "Life Points, Hydrogen, Oxygen, Carbon, A Points, B Points, C Points, Science, and Coins"
                                        return "Life Points, Hydrogen, Oxygen, Carbon, A Points, B Points, C Points, and Coins"
                                }
                                return "All previous primary currencies (hold shift to see) gain is raised ^ 1.001"
                        },
                        cost:() => decimalOne,
                        unlocked(){
                                return true
                        }, // hasUpgrade("n", 11)
                },
                12: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nitrogen II"
                        },
                        description(){
                                return "A Point gain is raised ^ 1.02"
                        },
                        cost:() => decimalOne,
                        unlocked(){
                                return true
                        }, // hasUpgrade("n", 12)
                },
                13: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nitrogen III"
                        },
                        description(){
                                return "B Point gain is raised ^ 1.02"
                        },
                        cost:() => decimalOne,
                        unlocked(){
                                return true
                        }, // hasUpgrade("n", 13)
                },
                14: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nitrogen IV"
                        },
                        description(){
                                return "Add .001 to Cubic base"
                        },
                        cost:() => decimalOne,
                        unlocked(){
                                return true
                        }, // hasUpgrade("n", 14)
                },
                15: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nitrogen V"
                        },
                        description(){
                                return "Add .001 to Polynomial base"
                        },
                        cost:() => decimalOne,
                        unlocked(){
                                return true
                        }, // hasUpgrade("n", 15)
                },
                21: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nitrogen VI"
                        },
                        description(){
                                return "Each upgrade adds .001 to Exponential base"
                        },
                        cost:() => new Decimal(2),
                        unlocked(){
                                return hasMilestone("p", 4) || player.l.unlocked || hasUpgrade("n", 11) && hasUpgrade("n", 12) && hasUpgrade("n", 13) && hasUpgrade("n", 14) && hasUpgrade("n", 15)
                        }, // hasUpgrade("n", 21)
                },
                22: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nitrogen VII"
                        },
                        description(){
                                return "Keep the first row of Oxygen and Carbon upgrades upon Nitrogen reset and each upgrade raises C point gain ^1.0002"
                        },
                        cost:() => new Decimal(3),
                        unlocked(){
                                return hasMilestone("p", 4) || hasUpgrade("n", 21) || player.l.unlocked
                        }, // hasUpgrade("n", 22)
                },
                23: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nitrogen VIII"
                        },
                        description(){ 
                                return "Per upgrade multiply C Point and Carbon gain by best Nitrogen<br>Currently: " + format(tmp.n.upgrades[23].effect)
                        },
                        cost:() => new Decimal(player.extremeMode ? 10 : 20),
                        effect(){
                                return player.n.best.max(1).pow(player.n.upgrades.length)
                        },
                        unlocked(){
                                return hasMilestone("p", 4) || hasMilestone("n", 11) || player.n.best.gt(19) || player.l.unlocked
                        }, // hasUpgrade("n", 23)
                },
                24: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nitrogen IX"
                        },
                        description(){
                                if (player.shiftAlias) {
                                        let a = "ln(Max(e,Nitrogen))"
                                        if (hasMilestone("n", 15)) a += " ^[challenges]"
                                        return a
                                }
                                return "Token cost exponent is .55 and ln(Nitrogen) multiplies Nitrogen gain" + br + "Currently: " + format(tmp.n.upgrades[24].effect)
                        },
                        cost:() => new Decimal(player.extremeMode ? 12 : 15),
                        effect(){
                                let ret = player.n.points.max(1).ln().max(1)

                                if (hasMilestone("n", 15)) ret = ret.pow(Math.max(1, layerChallengeCompletions("n")))

                                return ret
                        },
                        unlocked(){
                                return hasMilestone("p", 4) || hasUpgrade("n", 23) || player.l.unlocked
                        }, // hasUpgrade("n", 24)
                },
                25: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nitrogen X"
                        },
                        description(){
                                return "Double-exponential divider is 1 and raise Nitrogen effect to the number of upgrades"
                        },
                        cost:() => new Decimal(100),
                        unlocked(){
                                return hasMilestone("p", 4) || hasUpgrade("n", 24) || player.l.unlocked
                        }, // hasUpgrade("n", 25)
                },
                31: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nitrogen XI"
                        },
                        description(){
                                return "Token buyable exponent is .5"
                        },
                        cost:() => new Decimal(3e8),
                        unlocked(){
                                return hasMilestone("p", 4) || hasChallenge("n", 21) || player.l.unlocked
                        }, // hasUpgrade("n", 31)
                },
                32: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nitrogen XII"
                        },
                        description(){
                                return "You lose 100x Oxygen, Carbon, and Hydrogen"
                        },
                        cost:() => new Decimal(player.extremeMode ? 1e12 : 1e11),
                        unlocked(){
                                return hasMilestone("p", 4) || hasChallenge("n", 22) || player.l.unlocked
                        }, // hasUpgrade("n", 32)
                },
                33: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nitrogen XIII"
                        },
                        description(){
                                return "Fuel<sup>.001</sup> multiplies D Point gain"
                        },
                        cost:() => new Decimal(player.extremeMode ? 6.09e29 : 5.48e27),
                        unlocked(){
                                return hasMilestone("p", 4) || getBuyableAmount("mini", 181).gte(75) || player.l.unlocked
                        }, // hasUpgrade("n", 33)
                },
                34: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nitrogen XIV"
                        },
                        description(){
                                return "Per upgrade D Points<sup>.01</sup> multiplies maxmimum fuel"
                        },
                        cost:() => new Decimal(player.extremeMode ? 9.40e31 : 2.75e32),
                        unlocked(){
                                return hasMilestone("p", 4) || getBuyableAmount("mini", 181).gte(145) || player.l.unlocked
                        }, // hasUpgrade("n", 34)
                },
                35: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nitrogen XV"
                        },
                        description(){
                                return "log10(log10(Points))<sup>" + makeRed("E") + "</sup> multiplies Nitrogen gain" + br + "Currently: " + makeRed("E") + "=" + format(tmp.n.upgrades[35].effect)
                        },
                        effect(){ // red e rede
                                let ret = decimalOne

                                                                ret = ret.plus(tmp.mini.buyables[232].effect)
                                if (hasMilestone("mu", 3))      ret = ret.plus(getBuyableAmount("mini", 231).div(100))

                                return ret
                        },
                        cost:() => new Decimal(player.extremeMode ? 5.44e32 : 3e32),
                        unlocked(){
                                return hasMilestone("p", 4) || getBuyableAmount("mini", 181).gte(153) || player.l.unlocked
                        }, // hasUpgrade("n", 35)
                },
                41: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nitrogen XVI"
                        },
                        canAfford(){
                                if (player.n.points.lt(tmp.n.upgrades[41].cost)) return false
                                return player.mini.e_points.best.gte(1e16)
                        },
                        description(){
                                let b = "Req: 1e16 E Points"
                                let a = "log10(Nitrogen) multiplies E Point gain and log10(E Points) multiplies Nitrogen gain"
                                if (!hasUpgrade("n", 41)) return "<bdi style='font-size: 80%'>" + b + br + a + "</bdi>"
                                return a
                        },
                        cost:() => new Decimal(player.extremeMode ? 6.1e33 : 4.2e33),
                        unlocked(){
                                return hasMilestone("p", 4) || hasUpgrade("n", 35) || player.l.unlocked
                        }, // hasUpgrade("n", 41)
                },
                42: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nitrogen XVII"
                        },
                        canAfford(){
                                if (player.n.points.lt(tmp.n.upgrades[42].cost)) return false
                                return player.mini.e_points.best.gte(1e81)
                        },
                        description(){
                                let b = "Req: 1e81 E Points"
                                let a = "Add .1 to " + makeBlue("a")
                                if (!hasUpgrade("n", 42)) return b + br + a
                                return a
                        },
                        cost:() => new Decimal(5.6e35),
                        unlocked(){
                                return hasMilestone("p", 4) || hasUpgrade("n", 41) || player.l.unlocked
                        }, // hasUpgrade("n", 42)
                },
                43: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nitrogen XVIII"
                        },
                        canAfford(){
                                if (player.n.points.lt(tmp.n.upgrades[43].cost)) return false
                                if (player.extremeMode) return player.mini.e_points.best.gte(1e168)
                                return player.mini.e_points.best.gte(1e162)
                        },
                        description(){
                                let b = "Req: 1e162 E Points"
                                if (player.extremeMode) b = b.replace("162", "168")
                                let a = "Add .1 to " + makeBlue("a") + " and Quadratic gains a ln(x) term"
                                if (!hasUpgrade("n", 43)) return b + br + a
                                return a
                        },
                        cost:() => new Decimal(player.extremeMode ? 1.05e36 : 1.24e36),
                        unlocked(){
                                return hasMilestone("p", 4) || hasUpgrade("n", 42) || player.l.unlocked
                        }, // hasUpgrade("n", 43)
                },
                44: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nitrogen XIX"
                        },
                        canAfford(){
                                if (player.n.points.lt(tmp.n.upgrades[44].cost)) return false
                                return player.mini.e_points.best.gte(player.extremeMode ? 1e182 : 1e197)
                        },
                        description(){
                                let b = "Req: 1e197 E Points"
                                if (player.extremeMode) b = "Req: 1e182 E Points"
                                let a = "Per existence of 1 add .01 to " + makeBlue("a")
                                if (!hasUpgrade("n", 44)) return b + br + a
                                return a
                        },
                        cost:() => new Decimal(player.extremeMode ? 1.15e36 : 1.58e36),
                        unlocked(){
                                return hasMilestone("p", 4) || hasUpgrade("n", 43) || player.l.unlocked
                        }, // hasUpgrade("n", 44)
                },
                45: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nitrogen XX"
                        },
                        canAfford(){
                                if (player.n.points.lt(tmp.n.upgrades[45].cost)) return false
                                return player.mini.e_points.best.gte(1e213)
                        },
                        description(){
                                let b = "Req: 1e213 E Points"
                                let a = "log10(E Points) multiplies E Points and each existence of 0 past 21 multiplies E Point gain by 2"
                                if (!hasUpgrade("n", 45)) return b + br + a
                                return a
                        },
                        cost:() => new Decimal(1.80e36),
                        unlocked(){
                                return hasMilestone("p", 4) || hasUpgrade("n", 44) || player.l.unlocked
                        }, // hasUpgrade("n", 45)
                },
                51: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nitrogen XXI"
                        },
                        canAfford(){
                                if (player.n.points.lt(tmp.n.upgrades[51].cost)) return false
                                return player.mini.e_points.best.gte(player.extremeMode ? 1e245 : 1e234)
                        },
                        description(){
                                let b = "Req: 1e234 E Points"
                                if (player.extremeMode) b = b.replace("234" , "245")
                                let a = "Each upgrade in this row reapplies the second part of Nitrogen XX and doubles E Point gain"
                                if (!hasUpgrade("n", 51)) return b + br + a
                                return a
                        },
                        cost:() => new Decimal(2.10e36),
                        unlocked(){
                                return hasMilestone("p", 4) || hasUpgrade("n", 45) || player.l.unlocked
                        }, // hasUpgrade("n", 51)
                },
                52: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nitrogen XXII"
                        },
                        description(){
                                return "Autobuy E buyables"
                        },
                        cost:() => new Decimal(7e36),
                        unlocked(){
                                return hasMilestone("p", 4) || hasUpgrade("n", 51) || player.l.unlocked
                        }, // hasUpgrade("n", 52)
                },
                53: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nitrogen XXIII"
                        },
                        canAfford(){
                                if (player.n.points.lt(tmp.n.upgrades[53].cost)) return false
                                return player.mini.e_points.best.gte(player.extremeMode ? "1e1402" : "1e1604")
                        },
                        description(){
                                let b = "Req: 1e1604 E Points"
                                if (player.extremeMode) b = b.replace("1604", "1402")
                                let a = "Each Quadratic multiplies Nitrogen gain by 1.01"
                                if (!hasUpgrade("n", 53)) return b + br + a
                                return a
                        },
                        cost:() => new Decimal(player.extremeMode ? 1.18e37 : 1.83e37),
                        unlocked(){
                                return hasMilestone("p", 4) || hasUpgrade("n", 52) || player.l.unlocked
                        }, // hasUpgrade("n", 53)
                },
                54: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nitrogen XXIV"
                        },
                        description(){
                                return "Existence of 0 affects fuel square rooting factor and you can buy each buyable every tick"
                        },
                        cost:() => new Decimal(player.extremeMode ? 2.15e40 : 1.44e42),
                        unlocked(){
                                return hasMilestone("p", 4) || hasUpgrade("n", 53) || player.l.unlocked
                        }, // hasUpgrade("n", 54)
                },
                55: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nitrogen XXV"
                        },
                        description(){
                                return "E Points multiply D Points (up to 1e50000)"
                        },
                        cost:() => new Decimal(player.extremeMode ? 1.63e50 : 4.75e53),
                        unlocked(){
                                return hasMilestone("p", 4) || hasUpgrade("n", 54) || player.l.unlocked
                        }, // hasUpgrade("n", 55)
                },
        },
        milestones: {
                1: {
                        requirementDescription(){
                                return "1 Nitrogen reset"
                        },
                        done(){
                                return player.n.times >= 1
                        },
                        unlocked(){
                                return true
                        },
                        toggles(){
                                if (!player.extremeMode || hasUpgrade("sci", 305)) return
                                return [["sci", "autobuysci11"], ["sci", "autobuysci12"], ["sci", "autobuysci13"], ["sci", "autobuysci21"], ["sci", "autobuysci22"], ["sci", "autobuysci123"]]
                        },
                        effectDescription(){
                                let a = "Reward: Token resets keep Hydrogen upgrades, the A and B buyable autobuyer bulks 5x," 
                                if (player.extremeMode) a += " keep Hydrogen Science buyable autobuyers, "
                                return a + " and per milestone squared multiply C Point gain by 10."
                        },
                }, // hasMilestone("n", 1)
                2: {
                        requirementDescription(){
                                return "2 Nitrogen resets"
                        },
                        done(){
                                return player.n.times >= 2
                        },
                        unlocked(){
                                return hasMilestone("n", 1)
                        },
                        toggles(){
                                if (!player.extremeMode || hasUpgrade("sci", 402)) return
                                return [["sci", "autobuysci101"], ["sci", "autobuysci102"], ["sci", "autobuysci103"], ["sci", "autobuysci111"], ["sci", "autobuysci112"], ["sci", "autobuysci113"]]
                        },
                        effectDescription(){
                                let a = "Reward: You can bulk 5x C buyables, 4x A and B buyables, gain 10x coins, "
                                if (player.extremeMode) a += " keep Oxygen Science buyable autobuyers, "
                                return a + "and keep a token milestone per Nitrogen reset."
                        },
                }, // hasMilestone("n", 2)
                3: {
                        requirementDescription(){
                                return "3 Nitrogen resets"
                        },
                        done(){
                                return player.n.times >= 3
                        },
                        unlocked(){
                                return hasMilestone("n", 2)
                        },
                        toggles(){
                                if (!player.extremeMode || hasUpgrade("sci", 305)) return
                                return [["sci", "autobuyhsciupg"]]
                        },
                        effectDescription(){
                                let a = "Reward: Keep Corn and Deuterium VIII, Corn interval is at most 5, "
                                if (player.extremeMode) a += " autobuy Hydrogen Science upgrades, Carbon Science upgrades do not have C Point requirements, "
                                return a + "and gain 100x A, B, and C Points."
                        },
                }, // hasMilestone("n", 3)
                4: {
                        requirementDescription(){
                                return (player.hardMode ? 5 : 4) + " Nitrogen resets"
                        },
                        done(){
                                return player.n.times >= (player.hardMode ? 5 : 4)
                        },
                        unlocked(){
                                return hasMilestone("n", 3)
                        },
                        toggles:() => [["tokens", "autobuytokens"]],
                        effectDescription(){
                                return "Reward: Keep Coffee, autobuy tokens, and you can bulk 4x C buyables."
                        },
                }, // hasMilestone("n", 4)
                5: {
                        requirementDescription(){
                                return (player.hardMode ? 7 : 5) + " Nitrogen resets"
                        },
                        done(){
                                return player.n.times >= (player.hardMode ? 7 : 5)
                        },
                        unlocked(){
                                return hasMilestone("n", 4)
                        },
                        toggles(){
                                if (!player.extremeMode || hasUpgrade("sci", 402)) return
                                return [["sci", "autobuyosciupg"]]
                        },
                        effectDescription(){
                                let a = "Reward: Keep Cookie and here..., coin upgrades are always possible to buy,"
                                if (player.extremeMode) a += " autobuy Oxygen Science upgrades, "
                                return a + " and tokens do not reset Oxygen upgrades."
                        },
                }, // hasMilestone("n", 5)
                6: {
                        requirementDescription(){
                                return (player.hardMode ? 9 : 6) + " Nitrogen resets"
                        },
                        done(){
                                return player.n.times >= (player.hardMode ? 9 : 6)
                        },
                        unlocked(){
                                return hasMilestone("n", 5)
                        },
                        toggles(){
                                if (!player.extremeMode || hasUpgrade("sci", 415)) return
                                return [["sci", "autobuycsciupg"]]
                        },
                        effectDescription(){
                                let a = "Reward: Keep Carbon and Oxygen upgrades unlocked" 
                                if (player.extremeMode) a += ", autobuy Carbon Science upgrades,"
                                return a + " and tokens do not reset Carbon upgrades."
                        },
                }, // hasMilestone("n", 6)
                7: {
                        requirementDescription(){
                                return (player.hardMode ? 11 : 7) + " Nitrogen resets"
                        },
                        done(){
                                return player.n.times >= (player.hardMode ? 11 : 7)
                        },
                        unlocked(){
                                return hasMilestone("n", 6)
                        },
                        toggles:() => [["tokens", "autobuyradio"]],
                        effectDescription(){
                                return "Reward: Keep one C point upgrade per reset and unlock an autobuyer for Radio Waves."
                        },
                }, // hasMilestone("n", 7)
                8: {
                        requirementDescription(){
                                return (player.hardMode ? 14 : 9) + " Nitrogen resets"
                        },
                        done(){
                                return player.n.times >= (player.hardMode ? 14 : 9)
                        },
                        unlocked(){
                                return hasMilestone("n", 7)
                        },
                        effectDescription(){
                                return "Reward: Gain 20x coins, keep Egg is here., and you can autobuy the first level of C buyables."
                        },
                }, // hasMilestone("n", 8)
                9: {
                        requirementDescription(){
                                return (player.hardMode ? 17 : 12) + " Nitrogen resets"
                        },
                        done(){
                                return player.n.times >= (player.hardMode ? 17 : 12)
                        },
                        unlocked(){
                                return hasMilestone("n", 8)
                        },
                        effectDescription(){
                                return "Reward: Keep coin upgrades on Nitrogen reset."
                                return a
                        },
                }, // hasMilestone("n", 9)
                10: {
                        requirementDescription(){
                                return (player.hardMode ? 21 : 15) + " Nitrogen resets"
                        },
                        done(){
                                return player.n.times >= (player.hardMode ? 21 : 15)
                        },
                        unlocked(){
                                return hasMilestone("n", 9)
                        },
                        effectDescription(){
                                let a = "Reward: Keep the first ten Oxygen and Carbon upgrades upon Nitrogen reset."
                                if (player.p.times > 0) a = a.replace("Nitrogen reset", "Nitrogen or Phosphorus resets")
                                return a
                        },
                }, // hasMilestone("n", 10)
                11: {
                        requirementDescription(){
                                return (player.hardMode ? 25 : 20) + " Nitrogen resets"
                        },
                        done(){
                                return player.n.times >= (player.hardMode ? 25 : 20)
                        },
                        unlocked(){
                                return hasMilestone("n", 10)
                        },
                        effectDescription(){
                                return "Reward: Token resets don't reset anything."
                        },
                }, // hasMilestone("n", 11)
                12: {
                        requirementDescription(){
                                return (player.hardMode ? 640 : 128) + " Nitrogen"
                        },
                        done(){
                                if (player.n.times == 0) return false
                                return player.n.points.gte(128 * (player.hardMode ? 5 : 1))
                        },
                        unlocked(){
                                return hasMilestone("n", 11)
                        },
                        effectDescription(){
                                return "Reward: Start with 50 tokens."
                        },
                }, // hasMilestone("n", 12)
                13: {
                        requirementDescription(){
                                return (player.hardMode ? "2,560" : 256) + " Nitrogen"
                        },
                        done(){
                                if (player.n.times == 0) return false
                                return player.n.points.gte(256 * (player.hardMode ? 10 : 1))
                        },
                        unlocked(){
                                return hasMilestone("n", 12)
                        },
                        effectDescription(){
                                return "Reward: Remove the ability to reset for Nitrogen, but get 100% of Nitrogen gain per second."
                        },
                }, // hasMilestone("n", 13)
                14: {
                        requirementDescription(){
                                if (player.extremeMode) return "10,000 Nitrogen"
                                return (player.hardMode ? "1,310,720" : "131,072") + " Nitrogen"
                        },
                        done(){
                                if (player.extremeMode) return player.n.points.gte(1e4)
                                let m = player.hardMode ? 10 : 1
                                return player.n.points.div(m).gte(131072)
                        },
                        unlocked(){
                                return hasMilestone("n", 13)
                        },
                        effectDescription(){
                                let a = "Reward: Unlock Nitrogen challenges which only keep content from before tokens"
                                if (player.extremeMode) a += ", unlock Nitrogen Science,"
                                return a + " and C Point gain 5's log10 becomes ln."
                        },
                }, // hasMilestone("n", 14)
                15: {
                        requirementDescription(){
                                return (player.hardMode ? "10,485,760" : "1,048,576") + " Nitrogen and 3 Nitrogen challenges"
                        },
                        done(){
                                return player.n.points.div(player.hardMode ? 10 : 1).gte(1048576) && layerChallengeCompletions("n") >= 3
                        },
                        unlocked(){
                                return hasMilestone("n", 14)
                        },
                        effectDescription(){
                                return "Reward: Raise Nitrogen IX to the number of N challenge completions."
                        },
                }, // hasMilestone("n", 15)
                16: {
                        requirementDescription(){
                                return (player.hardMode ? "1.07e10" : "1.07e9") + " Nitrogen"
                        },
                        done(){
                                return player.n.points.div(player.hardMode ? 10 : 1).gte(Decimal.pow(2, 30))
                        },
                        unlocked(){
                                return hasMilestone("n", 15)
                        },
                        effectDescription(){
                                return "Reward: C Point gain 10 amount multiplies its base."
                        },
                }, // hasMilestone("n", 16)
                17: {
                        requirementDescription(){
                                return (player.hardMode ? "1.00e47" : "1.00e46") + " Nitrogen"
                        },
                        done(){
                                return player.n.points.div(player.hardMode ? 10 : 1).gte(Decimal.pow(10, 46))
                        },
                        unlocked(){
                                return hasMilestone("n", 16) && player.mini.e_points.best.gte(1e300)
                        },
                        effectDescription(){
                                return "Reward: You can bulk 5x E buyables."
                        },
                }, // hasMilestone("n", 17)
                18: {
                        requirementDescription(){
                                if (player.extremeMode) return "3e1887 Nitrogen"
                                return (player.hardMode ? "7.50e942" : "7.40e942") + " Nitrogen"
                        },
                        done(){
                                if (player.extremeMode) return player.n.points.gte("3e1887")
                                return player.n.points.div(player.hardMode ? 7.5 : 7.4).gte(Decimal.pow(10, 942))
                        },
                        unlocked(){
                                return hasMilestone("n", 17)
                        },
                        effectDescription(){
                                return "Reward: Add .01 to to left distributivity."
                        },
                }, // hasMilestone("n", 18)
        },
        challenges: {
                11: {
                        name: "Four",
                        challengeDescription: "A buyables and <bdi style='color:#CC0033'>C</bdi> increase 1 effects are nullified",
                        goalDescription(){
                                if (player.extremeMode) return "e312,700,000 Points"
                                if (player.hardMode) return "e291,590,000 Points"
                                return "e287,000,000 Points"
                        },
                        goal(){
                                if (player.extremeMode) return Decimal.pow(10, 312700e3)
                                return Decimal.pow(10, player.hardMode ? 291590e3 : 287e6)
                        },
                        canComplete: () => player.points.gte(tmp.n.challenges[11].goal),
                        rewardDescription(){
                                return "Per N challenge completion add .001 to Semi-exponential base" + br + "Currently: +" + format(tmp.n.challenges[11].rewardEffect, 3)
                        },
                        rewardEffect(){
                                return Decimal.times(layerChallengeCompletions("n"), .001)
                        },
                        unlocked(){
                                return true
                        },
                        countsAs: [],
                }, // inChallenge("n", 11)
                12: {
                        name: "Six",
                        challengeDescription: "Square root Oxygen gain",
                        goalDescription(){
                                if (player.extremeMode) return "e150,279,000 Points"
                                return "e109,300,000 Points"
                        },
                        goal: () => Decimal.pow(10, player.extremeMode ? 150279e3 : 109.3e6),
                        canComplete: () => player.points.gte(tmp.n.challenges[12].goal),
                        rewardDescription(){
                                return "C Point gain 9's log10 becomes ln"
                        },
                        unlocked(){
                                return hasChallenge("n", 11) || player.l.unlocked
                        },
                        countsAs: [],
                }, // inChallenge("n", 12)
                21: {
                        name: "Nine",
                        challengeDescription: "Four and C Point gain 6 is nullified",
                        goalDescription(){
                                if (player.extremeMode) return "e107,387,000 Points"
                                return "e7,400,000 Points"
                        },
                        goal: () => Decimal.pow(10, player.extremeMode ? 107387e3 : 74e5),
                        canComplete: () => player.points.gte(tmp.n.challenges[21].goal),
                        rewardDescription(){
                                return makeRed("C") + " increase 1 base is multiplied by the square root of the number of challenge completions" + br + "Currently: *" + format(tmp.n.challenges[21].rewardEffect, 3)
                        },
                        rewardEffect(){
                                return Decimal.sqrt(layerChallengeCompletions("n"))
                        },
                        unlocked(){
                                return hasChallenge("n", 12) || player.l.unlocked
                        },
                        countsAs: [11],
                }, // inChallenge("n", 21)
                22: {
                        name: "Ten",
                        challengeDescription: "Six and <bdi style='color:#CC0033'>C</bdi> increase 2 is nullified",
                        goalDescription(){
                                if (player.extremeMode) return "e143,250,000 Points"
                                return "e166,700,000 Points"
                        },
                        goal: () => Decimal.pow(10, player.extremeMode ? 14325e4 : 1667e5),
                        canComplete: () => player.points.gte(tmp.n.challenges[22].goal),
                        rewardDescription(){
                                return "C Point Gain 7's base is multiplied by log10(Nitrogen)" + br + "Currently: *" + format(tmp.n.challenges[22].rewardEffect)
                        },
                        rewardEffect(){
                                return player.n.points.max(10).log10()
                        },
                        unlocked(){
                                return hasUpgrade("n", 31) || player.l.unlocked
                        },
                        countsAs: [12],
                }, // inChallenge("n", 22)
                31: {
                        name: "Fourteen",
                        challengeDescription: "Nine and you cannot reset for more than fifty tokens",
                        goalDescription(){
                                if (player.extremeMode) return "e70,984,000 Points"
                                return "e16,950,000 Points" 
                        },
                        goal: () => Decimal.pow(10, player.extremeMode ? 70984e3 : 1695e4),
                        canComplete: () => player.points.gte(tmp.n.challenges[31].goal),
                        rewardDescription(){
                                return "Nitrogen multiplies Near-ultraviolet base and cube Near-ultraviolet base"
                        },
                        unlocked(){
                                return hasChallenge("n", 22) || player.l.unlocked
                        },
                        countsAs: [11, 21],
                }, // inChallenge("n", 31) hasChallenge("n", 31)
                32: {
                        name: "Fifteen",
                        challengeDescription: "Ten and C Point gain 5 is nullified",
                        goalDescription(){
                                if (player.extremeMode) return "e145,629,000 Points"
                                return "e165,800,000 Points"
                        },
                        goal(){
                                if (player.extremeMode) return Decimal.pow(10, 145629e3)
                                return Decimal.pow(10, 1658e5)
                        },
                        canComplete: () => player.points.gte(tmp.n.challenges[32].goal),
                        rewardDescription(){ //red d redd
                                let a = "log10(Oxygen)^<bdi style='color:#CC0033'>D</bdi> multiplies Carbon gain and unlock a minigame for <bdi style='color:#CC0033'>D</bdi>"
                                let b = "Currently: <bdi style='color:#CC0033'>D</bdi>=" + format(tmp.n.challenges[32].rewardEffect)
                                return a + br + b
                        },
                        rewardEffect(){
                                let ret = new Decimal(100)

                                if (hasUpgrade("mini", 55))     ret = ret.plus(getBuyableAmount("mini", 151))
                                if (hasUpgrade("mini", 65))     ret = ret.plus(getBuyableAmount("mini", 131))

                                return ret
                        },
                        unlocked(){
                                return hasChallenge("n", 31) || player.l.unlocked
                        },
                        countsAs: [12, 22],
                }, // inChallenge("n", 32) hasChallenge("n", 32)
                41: {
                        name: "Sixteen",
                        challengeDescription: "Fourteen and you can't gain A Points",
                        goalDescription(){
                                if (player.extremeMode) return "e332,560,000 Points"
                                return "e253,800,000 Points"
                        },
                        goal(){
                                if (player.extremeMode) return Decimal.pow(10, 332560e3)
                                return Decimal.pow(10, 2538e5)
                        },
                        canComplete: () => player.points.gte(tmp.n.challenges[41].goal),
                        rewardDescription(){ //red d redd
                                let a = "Per challenge completion add .03 to fuel square rooting factor"
                                if (player.extremeMode && !hasUpgrade("sci", 334)) a = a.replace(".03", ".01")
                                let b = "Currently: +" + format(tmp.n.challenges[41].rewardEffect)
                                return a + br + b
                        },
                        rewardEffect(){
                                let comps = layerChallengeCompletions("n")

                                let ret = new Decimal(layerChallengeCompletions("n")).times(.03)

                                if (player.extremeMode && !hasUpgrade("sci", 334)) ret = ret.div(3)

                                return ret
                        },
                        unlocked(){
                                return hasUpgrade("mini", 72) || player.l.unlocked
                        },
                        countsAs: [11, 21, 31],
                }, // inChallenge("n", 41) hasChallenge("n", 41)
                42: {
                        name: "Twenty-one",
                        challengeDescription: "Fifteen and Oxygen gain cannot be increased from base",
                        goalDescription(){
                                if (player.extremeMode) return "e137,490,000 Points"
                                if (player.hardMode) return "e169,000,000 Points"
                                return "e167,100,000 Points"
                        },
                        goal(){
                                if (player.extremeMode) return Decimal.pow(10, 137490e3)
                                return Decimal.pow(10, player.hardMode ? 169e6 : 167.1e6)
                        },
                        canComplete: () => player.points.gte(tmp.n.challenges[42].goal),
                        rewardDescription(){ //red d redd
                                return "Add .001 to Exponential Increase base"
                        },
                        unlocked(){
                                return hasUpgrade("mini", 73) || player.l.unlocked
                        },
                        countsAs: [12, 22, 32],
                }, // inChallenge("n", 42) hasChallenge("n", 42)
        },
        microtabs: {
                challenge_content: {
                        "All": {
                                content: [
                                        ["challenges", [1,2,3,4,5,6,7]],  
                                ],
                                unlocked(){
                                        return true
                                },
                        },
                        "1": {
                                content: [
                                       ["challenges", [1]] 
                                ],
                                unlocked(){
                                        return true
                                },
                        },
                        "2": {
                                content: [
                                       ["challenges", [2]] 
                                ],
                                unlocked(){
                                        return tmp.n.challenges[21].unlocked
                                },
                        },
                        "3": {
                                content: [
                                       ["challenges", [3]] 
                                ],
                                unlocked(){
                                        return tmp.n.challenges[31].unlocked
                                },
                        },
                        "4": {
                                content: [
                                       ["challenges", [4]] 
                                ],
                                unlocked(){
                                        return tmp.n.challenges[41].unlocked
                                },
                        },
                },
        },
        tabFormat: {
                "Upgrades": {
                        content: [
                                "main-display",
                                ["prestige-button", "", function (){ return hasMilestone("n", 13) ? {'display': 'none'} : {}}],
                                ["display-text",
                                        function(){
                                                if (player.shiftAlias) return "Your best Nitrogen is " + format(player.n.best)
                                                if (hasMilestone("n", 13)) return "You are gaining " + format(tmp.n.getResetGain, 3) + " Nitrogen per second"
                                        }
                                ],
                                "blank", 
                                ["upgrades", [1,2,3,4,5,6,7]]
                        ],
                        unlocked(){
                                return true
                        },
                },
                "Challenges": {
                        content: [
                                "main-display",
                                ["microtabs", "challenge_content"]
                        ],
                        unlocked(){
                                return hasMilestone("n", 14)
                        },
                },
                "Milestones": {
                        content: [
                                "main-display",
                                ["display-text", function(){
                                        return "You have done " + formatWhole(player.n.times) + " Nitrogen resets"
                                }],
                                "milestones",
                        ],
                        unlocked(){
                                return true
                        },
                },
        },
        resetsNothing(){
                return hasMilestone("l", 3) || player.a.unlocked
        },
        onPrestige(){
                let timesAdd = 1
                if (player.easyMode) timesAdd *= 2
                if (hasMilestone("l", 1)) timesAdd *= 3
                player.n.times += timesAdd
        },
        doReset(layer){
                /*
                Things to reset:
                1. A Point stuff
                1a. A buyables
                2. B Point stuff
                2a. B buyables
                3. C Point stuff
                3a. C buyables
                3b. upgrades
                4. Tokens
                4a. Token buyables
                4b. Coins
                5. Carbon stuff
                6. Oxygen stuff
                7. Hydorgen stuff
                */

                // 1: A point stuff
                if (layer != "n") return
                player.n.time = 0
                let inChallenge = hasMilestone("n", 13) && player.hardMode // cant reset otherwise once you have passive gain
                let data1 = player.mini
                let data2 = player.tokens
                
                if (!false) {
                        data1.a_points = {
                                points: decimalZero, // 1
                                best: decimalZero,
                                extras: {
                                        11: decimalOne,
                                        12: decimalZero,
                                        13: decimalZero,
                                        21: decimalZero,
                                        23: decimalZero,
                                        61: decimalZero,
                                        62: decimalZero,
                                        63: decimalZero,
                                }
                        }
                        let list1 = ["11", "12", "13", "21", 
                                     "22", "23", "61", 
                                     "62", "63"]
                        for (i = 0; i < list1.length; i++){
                                data1.buyables[list1[i]] = decimalZero
                        }// 1a
                }

                if (player.n.times < 24) player.subtabs.mini.mainTabs = "Spelling"
                
                // 2: B point stuff
                if (!false) {
                        data1.b_points = {
                                points: decimalZero,
                                best: decimalZero,
                        } // 2
                        let list2 = ["31", "32", 
                                     "33", "41", "42", "43", 
                                     "51", "52", "53"]
                        for (i = 0; i < list2.length; i++){
                                data1.buyables[list2[i]] = decimalZero
                        } //2a
                }

                // 3: C point stuff
                if (!false) {
                        data1.c_points = {
                                points: decimalZero,
                                best: decimalZero,
                                lastRoll: [],
                                lastRollTime: data1.c_points.lastRollTime,
                                displayCharacters: data1.c_points.displayCharacters,
                        } // 3
                        let list3 = ["71", "72", "73", "81", "82", 
                                     "83", "91", "92", "93", "101", 
                                     "102", "103", "111", "112", "113"]
                        for (i = 0; i < list3.length; i++){
                                data1.buyables[list3[i]] = decimalZero
                        } //3a
                        
                        let rem = [11, 12, 13, 14, 15, 
                                   21, 22, 23, 24, 25, 
                                   31, 32, 33, 34, 35,
                                   41, 42, 43, 44, 45, ]
                        if (hasMilestone("n", 7) && !inChallenge) rem = rem.slice(player.n.times)
                        if (hasMilestone("n", 3)) rem = filterOut(rem, [12])
                        if (hasMilestone("n", 4)) rem = filterOut(rem, [22])
                        if (hasMilestone("n", 5)) rem = filterOut(rem, [43])
                        data1.upgrades = filterOut(data1.upgrades, rem) // 3b
                }

                // 4: Tokens
                if (!false){
                        let starting = decimalZero
                        if (hasMilestone("n", 12) && !inChallenge) starting = new Decimal(50)
                        data2.total = starting
                        data2.points = starting
                        
                        let list4 = ["11", "12", "13", "21", "22", 
                                     "23", "31", "32", "33", "41", 
                                     "42", "43", "51", "52", "53", 
                                     "61", "62", "63"]
                        for (i = 0; i < list4.length; i++){
                                data2.buyables[list4[i]] = decimalZero
                                data2.best_buyables[list4[i]] = decimalZero
                        } //4a
                        
                        data2.coins.points = decimalZero
                        data2.coins.best = decimalZero
                        
                        let keep0 = []
                        if (hasMilestone("n", 5)) keep0.push(95)
                        if (hasMilestone("n", 8)) keep0.push(82)
                        if (!hasMilestone("n", 9)) data2.upgrades = filter(data2.upgrades, keep0)
                        
                        let tokenKeptMilestones = 0
                        if (hasMilestone("n", 2)) tokenKeptMilestones += player.n.times
                        sortStrings(data2.milestones)
                        data2.milestones = data2.milestones.slice(0, tokenKeptMilestones)
                }

                // 5: C
                if (!false) {
                        if (!hasMilestone("n", 10)) {
                                let rem = [11, 12, 13, 14, 15, 
                                           21, 22, 23, 24, 25]
                                if (hasUpgrade("n", 22)) rem = filterOut(rem, [11, 12, 13, 14, 15])
                                player.c.upgrades = filterOut(player.c.upgrades, rem)
                        }
                        player.c.points = decimalZero
                        player.c.best = decimalZero
                }

                // 6: O
                if (!false) {
                        if (!hasMilestone("n", 10)) {
                                let rem = [11, 12, 13, 14, 15, 
                                           21, 22, 23, 24, 25]
                                if (hasUpgrade("n", 22)) rem = filterOut(rem, [11, 12, 13, 14, 15])
                                player.o.upgrades = filterOut(player.o.upgrades, rem)
                        }
                        player.o.points = decimalZero
                        player.o.best = decimalZero
                }

                // 7: H
                if (!false) {
                        let remove = [11, 12, 13, 14, 15, 
                                      21, 22, 23, 24, 25, 
                                      31, 32, 33, 34, 35, 
                                      41, 42, 43, 44, 45, 
                                      51, 52, 53, 54, 55, 
                                      61, 62, 63, 64, 65,
                                      71, 72, 73, 74, 75,
                                      81, 82, 83, 84, 85,
                                      ]
                                      
                        if (hasMilestone("tokens", 5)) {
                                remove = remove.slice(player.tokens.milestones.length * 3)
                        }
                        if (hasMilestone("tokens", 2)) remove = filterOut(remove, [51, 52])
                        if (hasMilestone("n", 3)) remove = filterOut(remove, [73])

                        player.h.upgrades = filterOut(player.h.upgrades, remove)
                        player.h.points = decimalZero
                        player.h.best = decimalZero
                        player.h.atomic_hydrogen.points = decimalZero
                        player.h.atomic_hydrogen.best = decimalZero
                        player.h.deuterium.points = decimalZero
                        player.h.deuterium.best = decimalZero
                }

                player.tokens.lastRespecDisplayFormula = layers.tokens.buyables.costFormulaText()
                // make the display update
        },
        deactivated(){
                if (hasUpgrade("or", 135)) return true
                return inChallenge("l", 41) || hasChallenge("l", 41)
        },
})

addLayer("p", {
        name: "Phosphorus", 
        symbol: "P", 
        position: 1, 
        startData(){ return {
                unlocked: false,
		points: decimalZero,
                best: decimalZero,
                total: decimalZero,
                best_over_amino: decimalZero,
                abtime: 0,
                time: 0,
                times: 0,
                autotimes: 0,
                passiveTime: 0,
                currentGainPerSec: decimalZero,
        }},
        color: "#466BA2",
        branches: [],
        requires:() => player.extremeMode ? new Decimal("1e2348") : Decimal.pow(10, 2155).times(1.3), 
        resource: "Phosphorus", 
        baseResource: "Nitrogen", 
        baseAmount(){return player.n.points.floor()},
        type: "custom", 
        getResetGain(){
                let base = tmp.p.getBaseGain
                let mult = tmp.p.getGainMult

                let ret = base.times(mult)

                if (hasMilestone("l", 1))       ret = ret.pow(tmp.l.milestones[1].effect)
                if (hasMilestone("a", 1))       ret = ret.pow(2)
                if (player.extremeMode)         ret = ret.pow(.75)

                if (inChallenge("l", 11))       ret = dilate(ret, tmp.l.challenges[11].challengeEffect)

                return ret.floor()
        },
        getGainExp(){
                let ret = new Decimal(4)

                if (hasMilestone("p", 9))       ret = ret.times(2)
                if (hasMilestone("p", 10))      ret = ret.times(2)
                if (hasUpgrade("p", 31))        ret = ret.times(2)

                return ret
        },
        getBaseGain(){
                if (hasChallenge("l", 41) || inChallenge("l", 41)) return decimalOne
                let pts = player.n.points.div(player.extremeMode ? 1e193 : 1.3)
                if (pts.lt(10)) return decimalZero

                let init = pts.log10().sub(2027)
                let exp = tmp.p.getGainExp

                if (init.lt(0)) return decimalZero

                let base = init.root(7).sub(1)

                if (base.lt(1)) base = decimalZero

                return base.pow(exp)
        },
        getNextAt(){
                let curr = tmp.p.getResetGain.plus(1)
                let exp = tmp.p.getGainExp
                let mult = tmp.p.getGainMult

                if (player.extremeMode) curr = curr.root(.75)

                let v1 = curr.div(mult).max(1).root(exp)
                return v1.plus(1).pow(7).plus(2027).pow10().times(player.extremeMode ? 1e193 : 1.3)
        },
        getGainMult(){ // phosphorus gain pgain rusgain rus gain
                let ret = decimalOne

                if (hasUpgrade("p", 15))        ret = ret.times(tmp.p.upgrades[15].effect)
                if (hasUpgrade("p", 24))        ret = ret.times(tmp.p.upgrades[24].effect)
                if (hasMilestone("mu", 1))      ret = ret.times(player.tokens.total.max(1).pow(player.mu.milestones.length))
                                                ret = ret.times(tmp.l.effect)
                                                ret = ret.times(tmp.t.effect)
                                                ret = ret.times(tmp.or.effect)
                if (player.easyMode)            ret = ret.times(2)
                if (hasUpgrade("p", 101))       ret = ret.times(tmp.p.upgrades[101].effect)
                if (player.extremeMode)         ret = ret.times(tmp.mu.buyables[11].effect)
                if (player.extremeMode)         ret = ret.times(tmp.mu.buyables[12].effect)
                if (player.extremeMode)         ret = ret.times(tmp.mu.buyables[21].effect)
                if (player.extremeMode)         ret = ret.times(tmp.mu.buyables[31].effect)
                if (hasUpgrade("p", 111))       ret = ret.times(tmp.p.upgrades[111].effect)
                if (hasMilestone("mu", 6))      ret = ret.times(Decimal.pow(5, player.mu.milestones.length))
                if (hasMilestone("mu", 12))     ret = ret.times(Decimal.pow(2, player.mu.milestones.length))

                return ret
        },
        getPassiveGainMult(){
                let ret = decimalOne

                if (hasMilestone("p", 2))       ret = ret.times(tmp.p.milestones[2].effect)
                if (hasUpgrade("mu", 11))       ret = ret.times(tmp.n.upgrades[35].effect)
                let forceee150 = player.extremeMode && hasChallenge("l", 22) && !player.l.activeChallenge
                // in extreme, has anti-upsilon, and no active challenge
                if (hasUpgrade("mu", 12) && !forceee150) {
                        let mu12mult = player.mu.points.div(100).plus(1).pow(getBuyableAmount("mini", 241).sqrt())
                        if (!hasUpgrade("mu", 35)) mu12mult = mu12mult.min("1ee5")
                                                ret = ret.times(mu12mult.min("1ee150"))
                } else if (forceee150) {
                                                ret = ret.times("1ee150")
                }
                if (hasUpgrade("p", 33))        ret = ret.times(tmp.p.upgrades[33].effect)
                if (hasUpgrade("mu", 13))       ret = ret.times(tmp.mu.upgrades[13].effect)
                if (hasUpgrade("mu", 14))       ret = ret.times(player.extremeMode ? 5 ** player.mu.upgrades.length : 10)
                if (!player.extremeMode)        ret = ret.times(tmp.mu.buyables[11].effect)
                if (!player.extremeMode)        ret = ret.times(tmp.mu.buyables[12].effect)
                if (!player.extremeMode)        ret = ret.times(tmp.mu.buyables[21].effect)
                if (hasUpgrade("mu", 23))       ret = ret.times(Decimal.pow(2, player.mu.upgrades.length))
                if (hasUpgrade("mu", 32))       ret = ret.times(tmp.mu.upgrades[32].effect)
                if (!player.extremeMode)        ret = ret.times(tmp.mu.buyables[31].effect)
                                                ret = ret.pow(layers.l.grid.getGemEffect(403))
                if (hasChallenge("l", 71))      ret = ret.pow(tmp.l.challenges[71].reward)
                if (true) {
                        let base = layers.l.grid.getGemEffect(704)
                        let exp = getBuyableAmount("a", 13)
                        if (player.extremeMode) exp = exp.min(8e6)
                                                ret = ret.pow(base.pow(exp))
                }
                if (hasMilestone("d", 20)) {
                        let base = 2 + hasMilestone("d", 20)
                        let exp = player.d.milestones.length + !hasMilestone("d", 20)
                                                ret = ret.pow(Decimal.pow(base, exp))
                }
                                                ret = ret.pow(layers.l.grid.getGemEffect(805).pow(tmp.l.getNonZeroGemCount))
                                                ret = ret.pow(tmp.cells.effect)
                if (hasUpgrade("t", 25))        ret = ret.pow(tmp.t.upgrades[25].effect)

                                                ret = ret.times(player.p.points.max(1).pow(tmp.mu.effect))

                return ret
        },
        effect(){
                if (inChallenge("l", 52) || hasChallenge("l", 52)) return decimalOne
                let amt = player.p.total

                let exp2 = new Decimal(3)
                if (hasMilestone("p", 4)) exp2 = exp2.plus(.1)
                if (hasMilestone("p", 5)) exp2 = exp2.plus(.04)
                if (hasMilestone("p", 6)) exp2 = new Decimal(Math.PI)

                let exp = amt.plus(1).log10().pow(exp2)

                return Decimal.pow(10, exp)
        },
        effectDescription(){
                if (inChallenge("l", 52) || hasChallenge("l", 52)) return ""
                if (player.shiftAlias) {
                        let a = "effect formula: 10^(log10(x+1)^3)"
                        if (hasMilestone("p", 4)) a = a.replace("3", "3.1")
                        if (hasMilestone("p", 5)) a = a.replace("3.1", "3.14")
                        if (hasMilestone("p", 6)) a = a.replace("3.14", "π")
                        return a
                }
                let eff = tmp.p.effect
                let start = " multiplying all minigame point gain by " + format(eff)
                let end1 = " and Nitrogen gain by "
                if (player.extremeMode) end1 = " and prior prestige gain<sup>*</sup> by "
                let end2 = format(player.p.points.plus(1))
                return start + end1 + end2 + "."
        },
        deactivated(){
                return hasUpgrade("t", 151)
        },
        update(diff){
                if (hasUpgrade("t", 151)) return
                let data = player.p
                
                if (tmp.p.layerShown) data.unlocked = true
                data.best = data.best.max(data.points)
                data.best_over_amino = data.best_over_amino.max(data.points)
                
                // do phosphorus gain
                if (hasUpgrade("p", 13)) {
                        if (hasUpgrade("p", 34)) {
                                let cur = data.currentGainPerSec
                                let gain = tmp.p.getResetGain
                                if (cur.div(1e4).gte(gain)) {
                                        data.currentGainPerSec = data.currentGainPerSec.plus(gain.times(diff))
                                } else {
                                        let fastLeft = Decimal.sub(10, cur.div(gain).div(1e3))
                                        if (fastLeft.gt(diff)) {
                                                data.currentGainPerSec = data.currentGainPerSec.plus(gain.times(diff).times(1e3))
                                        } else {
                                                let time = fastLeft.times(999).plus(diff)
                                                data.currentGainPerSec = data.currentGainPerSec.plus(gain.times(time))
                                        }
                                }
                        } else {
                                data.currentGainPerSec = data.currentGainPerSec.plus(tmp.p.getResetGain.times(diff))
                        }
                        
                        data.passiveTime += Math.min(1, diff)
                        if (data.passiveTime > 1) {
                                data.passiveTime += -1
                                data.times ++
                        }
                }
                
                let x = tmp.p.getPassiveGainMult.times(diff)
                data.points = data.points.plus(data.currentGainPerSec.times(x))
                data.total = data.total.plus(data.currentGainPerSec.times(x))
                
                data.time += diff
        },
        row: 2, 
        layerShown(){
                if (tmp.p.deactivated) return false
                return player.n.best.div(1.3).max(10).log10().gt(2155) || player.p.best.gt(0) || player.l.unlocked
        },
        prestigeButtonText(){
                let gain = tmp.p.getResetGain
                let nextAt = tmp.p.getNextAt

                let amt = "You can reset for " + br + formatWhole(gain) + " base Phosphorus/s"
                let nxt = ""
                if (gain.lt(1000)) nxt = br + "You need " + format(nextAt) + br + "Nitrogen for the next"
                if (player.p.time > 1 && gain.lt(1e6) && gain.gt(1) && player.shiftAlias) nxt += br + format(gain.div(player.p.time)) + "/s"
                return amt + nxt
        },
        canReset(){
                return !hasUpgrade("p", 13) && tmp.p.getResetGain.gt(0)
        },
        upgrades: {
                rows: 10,
                cols: 5,
                11: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphorus I"
                        },
                        description(){
                                if (player.shiftAlias) return "What is the imaginary period of exponential speed on two? Dm me: pg132#7975"
                                return "Gain .5 Nitrogen per second and you have one less token for prestige purposes"
                        },
                        cost:() => new Decimal(25000),
                        unlocked(){
                                return true
                        }, // hasUpgrade("p", 11)
                },
                12: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphorus II"
                        },
                        description(){
                                if (player.shiftAlias) return "Hint: There are generally an even number, and you should depress your shift key."
                                return "Tire affects E Point gain"
                        },
                        cost:() => new Decimal(player.hardMode ? 5e8 : 1e8),
                        unlocked(){
                                return player.a.unlocked || hasUpgrade("p", 11) || hasMilestone("l", 6)
                        }, // hasUpgrade("p", 12)
                },
                13: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphorus III"
                        },
                        description(){
                                return "Remove the ability to prestige but gain 100% of Phosphorus/s per second"
                        },
                        cost:() => new Decimal(player.hardMode ? 5e10 : 1e10),
                        unlocked(){
                                return player.a.unlocked || hasUpgrade("p", 12) || hasMilestone("l", 6)
                        }, // hasUpgrade("p", 13)
                },
                14: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphorus IV"
                        },
                        description(){
                                return "Per Iteration Phosphorus multiplies Nitrogen" + br + "Currently: " + format(tmp.p.upgrades[14].effect)
                        },
                        effect(){
                                if (inChallenge("l", 92) || hasChallenge("l", 92)) return decimalOne
                                return player.p.points.max(1).pow(tmp.mini.e_points.getMaxInterations)
                        },
                        cost:() => new Decimal(player.hardMode ? 1e12 : 2e11),
                        unlocked(){
                                return player.a.unlocked || hasUpgrade("p", 13) || hasMilestone("l", 6)
                        }, // hasUpgrade("p", 14)
                },
                15: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphorus V"
                        },
                        description(){
                                let a = "<bdi style='font-size: 80%'> Log10(E Points) multiplies base Phosphorus gain and commutativity of addition's outer ln becomes log2"
                                let b = br + "Currently: " + format(tmp.p.upgrades[15].effect) + "</bdi>"
                                return a + b
                        },
                        effect(){
                                return player.mini.e_points.points.max(10).log10()
                        },
                        cost:() => new Decimal(player.hardMode ? 3e12 : 6e11),
                        unlocked(){
                                return player.a.unlocked || hasUpgrade("p", 14) || hasMilestone("l", 6)
                        }, // hasUpgrade("p", 15)
                },
                21: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphorus VI"
                        },
                        description(){
                                return "Each upgrade adds .01 to left distributivity base"
                        },
                        cost:() => new Decimal(player.hardMode ? 1e18 : 1e17),
                        unlocked(){
                                return player.a.unlocked || hasUpgrade("p", 15) || hasMilestone("l", 6)
                        }, // hasUpgrade("p", 21)
                },
                22: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphorus VII"
                        },
                        description(){
                                return "Each upgrade makes E Points<sup>.05</sup> multiply D Point gain"
                        },
                        cost:() => new Decimal(player.hardMode ? 1e19 : 1e18),
                        unlocked(){
                                return player.a.unlocked || hasUpgrade("p", 21) || hasMilestone("l", 6)
                        }, // hasUpgrade("p", 22)
                },
                23: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphorus VIII"
                        },
                        description(){
                                return "Each respect scalar multiples E Point gain by 1 + [upgrades]/10"
                        },
                        cost:() => new Decimal(player.hardMode ? 3e19 : 3e18),
                        unlocked(){
                                return player.a.unlocked || hasUpgrade("p", 22) || hasMilestone("l", 6)
                        }, // hasUpgrade("p", 23)
                },
                24: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphorus IX"
                        },
                        description(){
                                let a = "<bdi style='font-size: 80%'>Each upgrade multiplies base Phosphorus gain by log10(log10(E Points))"
                                let b = br + "Currently: " + format(tmp.p.upgrades[24].effect) + "</bdi>"
                                return a + b
                        },
                        effect(){
                                return player.mini.e_points.points.max(10).log10().max(10).log10().pow(player.p.upgrades.length)
                        },
                        cost:() => new Decimal(player.hardMode ? 1e20 : 1e19),
                        unlocked(){
                                return player.a.unlocked || hasUpgrade("p", 23) || hasMilestone("l", 6)
                        }, // hasUpgrade("p", 24)
                },
                25: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphorus X"
                        },
                        description(){
                                return "Inner ln of commutativity of addition becomes log2, square " + makeBlue("a") + " and unlock another layer"
                        },
                        effect(){
                                return player.mini.e_points.points.max(10).log10().max(10).log10().pow(player.p.upgrades.length)
                        },
                        cost:() => new Decimal(player.hardMode ? 1e26 : 1e25),
                        unlocked(){
                                return player.a.unlocked || hasUpgrade("p", 24) || hasMilestone("l", 6)
                        }, // hasUpgrade("p", 25)
                },
                31: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphorus XI"
                        },
                        description(){
                                return "Square initial Phosphorus gain and " + makeBlue("a")
                        },
                        cost:() => new Decimal(player.hardMode ? 1e38 : 1e37),
                        unlocked(){
                                return player.a.unlocked || hasMilestone("mu", 2) || hasMilestone("l", 6)
                        }, // hasUpgrade("p", 31)
                },
                32: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphorus XII"
                        },
                        description(){
                                return "You can bulk 100x more C Point buyables"
                        },
                        effect(){
                                return player.mini.e_points.points.max(10).log10().max(10).log10().pow(player.p.upgrades.length)
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal(1e60)
                                return new Decimal(player.hardMode ? 1e43 : 1e42)
                        },
                        unlocked(){
                                return player.a.unlocked || hasUpgrade("p", 31) || hasMilestone("l", 6)
                        }, // hasUpgrade("p", 32)
                },
                33: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphorus XIII"
                        },
                        description(){
                                return "Per µ iterations multiply Phosphorus gain" + br + "Currently: " + format(tmp.p.upgrades[33].effect)
                        },
                        effect(){
                                return Decimal.pow(tmp.mini.e_points.getMaxInterations, player.mu.points)
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal(5e61)
                                return new Decimal(player.hardMode ? 1e61 : 1e60)
                        },
                        unlocked(){
                                return player.a.unlocked || hasUpgrade("p", 32) || hasMilestone("l", 6)
                        }, // hasUpgrade("p", 33)
                },
                34: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphorus XIV"
                        },
                        description(){
                                return "If you have less than 10,000 seconds of base Phosphorus production gain 1000x base Phosphorus"
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal(1e160)
                                return new Decimal(player.hardMode ? 1e163 : 1e162)
                        },
                        unlocked(){
                                return player.a.unlocked || hasUpgrade("p", 33) || hasMilestone("l", 6)
                        }, // hasUpgrade("p", 34)
                },
                35: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphorus XV"
                        },
                        description(){
                                return "Add .05 to P → ΔP base"
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal("1e1099")
                                return new Decimal(player.hardMode ? "1e1065" : "1e1064")
                        },
                        unlocked(){
                                return player.a.unlocked || hasUpgrade("p", 34) || hasMilestone("l", 6)
                        }, // hasUpgrade("p", 35)
                },
                41: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphorus XVI"
                        },
                        description(){
                                let a = "You have three less token for prestige purposes and Universe becomes ee45"
                                if (player.extremeMode) a = a.replace("ee45", "e4e45")
                                return a
                        },
                        cost:() => new Decimal(player.extremeMode ? "e4e45" : "ee45"),
                        unlocked(){
                                if (player.extremeMode && hasUpgrade("mu", 55)) return true
                                return player.a.unlocked || player.l.challenges[11] >= 79
                        }, // hasUpgrade("p", 41)
                },
                42: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphorus XVII"
                        },
                        description(){
                                return "Add .01 to Constant base"
                        },
                        cost:() => new Decimal(player.extremeMode ? "e6e45" : "e2e45"),
                        unlocked(){
                                return player.a.unlocked || player.l.challenges[11] >= (player.extremeMode ? 79 : 83)
                        }, // hasUpgrade("p", 42)
                },
                43: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphorus XVIII"
                        },
                        description(){
                                let a = "N → ΔP cost base is 5.5"
                                if (player.extremeMode) a += " and each upgrade squares point gain"
                                return a
                        },
                        cost:() => new Decimal(player.extremeMode ? "e8e45" : "e2.5e45"),
                        unlocked(){
                                return player.a.unlocked || player.l.challenges[11] >= (player.extremeMode ? 83 : 84)
                        }, // hasUpgrade("p", 43)
                },
                44: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphorus XIX"
                        },
                        description(){
                                return "N → ΔP cost base is 5"
                        },
                        cost:() => new Decimal(player.extremeMode ? "ee46" : "e3e45"),
                        unlocked(){
                                return player.a.unlocked || player.l.challenges[11] >= (player.extremeMode ? 85 : 86)
                        }, // hasUpgrade("p", 44)
                },
                45: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphorus XX"
                        },
                        description(){
                                return "N → ΔP cost base is 4.5 and each N → ΔN adds .01 to its base"
                        },
                        cost:() => new Decimal(player.extremeMode ? "e1.2e46" : "e3e45"),
                        unlocked(){
                                return player.a.unlocked || player.l.challenges[11] >= 87
                        }, // hasUpgrade("p", 45)
                },
                51: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphorus XXI"
                        },
                        description(){
                                return "N → ΔP cost base is 4 and autobuy N → ΔN"
                        },
                        cost:() => new Decimal(player.extremeMode ? "e1.4e46" : "e3.5e45"),
                        unlocked(){
                                if (player.extremeMode) return player.a.unlocked || player.l.challenges[11] >= 89
                                return player.a.unlocked || player.l.challenges[11] >= 93 && player.l.best.gte(6e105)
                        }, // hasUpgrade("p", 51)
                },
                52: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphorus XXII"
                        },
                        description(){
                                let a = "Each Dilation completion after 90 doubles Life gain and keep token content upon Life reset"
                                if (player.extremeMode) a = a.replace("doubles", "quintuples")
                                return a
                        },
                        cost:() => new Decimal(player.extremeMode ? "e1.6e46" : "e3.5e45"),
                        unlocked(){
                                return player.a.unlocked || player.l.challenges[11] >= (player.extremeMode ? 91 : 94)
                        }, // hasUpgrade("p", 52)
                },
                53: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphorus XXIII"
                        },
                        description(){
                                return "Each Dilation completion after 90 doubles Life gain and token cost exponent is .44"
                        },
                        cost:() => new Decimal(player.extremeMode ? "e1.8e46" : "e13e45"),
                        unlocked(){
                                if (player.extremeMode) return player.a.unlocked || player.l.challenges[11] >= 93
                                return player.a.unlocked || player.l.challenges[11] >= 97 && player.l.best.gte(5e133)
                        }, // hasUpgrade("p", 53)
                },
                54: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphorus XXIV"
                        },
                        description(){
                                return "Universe is ee46 and add .01 to Constant base"
                        },
                        cost:() => new Decimal(player.extremeMode ? "e2e46" : "e15e45"),
                        unlocked(){
                                return player.l.challenges[11] >= (player.extremeMode ? 95 : 98) || player.a.unlocked
                        }, // hasUpgrade("p", 54)
                },
                55: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphorus XXV"
                        },
                        description(){
                                return "Universe is ee47 and add .01 to Constant base"
                        },
                        cost:() => new Decimal(player.extremeMode ? "ee47" : "e3e47"),
                        unlocked(){
                                return player.l.challenges[11] >= (player.extremeMode ? 98 : 102) || player.a.unlocked
                        }, // hasUpgrade("p", 55)
                },
                101: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphate I"
                        },
                        description(){
                                return "Per Phosphate upgrade log10(Phosphorus) multiplies Phosphorus/s gain"
                        },
                        cost:() => new Decimal(4e9),
                        effect(){
                                let base = player.p.points.plus(10).log10()
                                let a = 0
                                let ids = [101, 102, 103, 104, 105,
                                           111, 112, 113, 114, 115,]
                                for (i in ids) {
                                        a += hasUpgrade("p", ids[i])
                                }
                                return base.pow(a)
                        },
                        unlocked(){
                                return hasUpgrade("p", 12) && player.extremeMode
                        }, // hasUpgrade("p", 101)
                },
                102: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphate II"
                        },
                        description(){
                                return "Remove Gas Tank's base cost"
                        },
                        cost:() => new Decimal(5e34),
                        unlocked(){
                                return hasUpgrade("p", 101)
                        }, // hasUpgrade("p", 102)
                },
                103: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphate III"
                        },
                        description(){
                                return "Per upgrade multiply Nitrogen Science gain by min(1e30, log10(Phosphorus))"
                        },
                        cost:() => new Decimal(5e135),
                        unlocked(){
                                return hasUpgrade("p", 102)
                        }, // hasUpgrade("p", 103)
                },
                104: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphate IV"
                        },
                        description(){
                                return "Reuse is exponential and keep Nitrogen upgrades on Phosphorus reset"
                        },
                        cost:() => new Decimal(2e167),
                        unlocked(){
                                return hasUpgrade("p", 103)
                        }, // hasUpgrade("p", 104)
                },
                105: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphate V"
                        },
                        description(){
                                return "Remove µ → ΔP's base cost"
                        },
                        cost:() => new Decimal(1e185),
                        unlocked(){
                                return hasUpgrade("p", 104)
                        }, // hasUpgrade("p", 105)
                },
                111: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphate VI"
                        },
                        description(){
                                return "Per upgrade in this row gain 100x Phosphorus and subtract sqrt(min(4, this row upgrades)) from the µ cost base"
                        },
                        effect(){
                                let base = new Decimal(100)
                                let a = 0
                                let ids = [111, 112, 113, 114, 115,]
                                for (i in ids) {
                                        a += hasUpgrade("p", ids[i])
                                }
                                return base.pow(a)
                        },
                        cost:() => new Decimal(1e208),
                        unlocked(){
                                return hasUpgrade("p", 105)
                        }, // hasUpgrade("p", 111)
                },
                112: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphate VII"
                        },
                        description(){
                                return "Halve effective Reuse levels for cost purposes"
                        },
                        effect(){
                                let base = new Decimal(100)
                                let a = 0
                                let ids = [111, 112, 113, 114, 115,]
                                for (i in ids) {
                                        a += hasUpgrade("p", ids[i])
                                }
                                return base.pow(a)
                        },
                        cost:() => new Decimal(1e299),
                        unlocked(){
                                return hasUpgrade("p", 111)
                        }, // hasUpgrade("p", 112)
                },
                113: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphate VIII"
                        },
                        description(){
                                return "You have one less effective tokens for prestige purposes and µ's base cost is 1e5x less"
                        },
                        cost:() => new Decimal("5e672"),
                        unlocked(){
                                return hasUpgrade("p", 112)
                        }, // hasUpgrade("p", 113)
                },
                114: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphate IX"
                        },
                        description(){
                                return "Keep Nitrogen Science upgrades on reset"
                        },
                        cost:() => new Decimal("1e830"),
                        unlocked(){
                                return hasUpgrade("p", 113)
                        }, // hasUpgrade("p", 114)
                },
                115: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Phosphate X"
                        },
                        description(){
                                return "Keep Oxygen Science upgrades on reset"
                        },
                        cost:() => new Decimal("1e1041"),
                        unlocked(){
                                return hasUpgrade("p", 114)
                        }, // hasUpgrade("p", 115)
                },
        },
        milestones: {
                1: {
                        requirementDescription(){
                                return "1 Phosphorus reset"
                        },
                        done(){
                                return player.p.times >= 1
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let a = "Reward: Keep one Nitrogen milestone per reset, you have one less token for prestige purposes, and bulk 5x D buyables."
                                if (player.extremeMode) a = a.replace("D", "C and D")
                                return a
                        },
                }, // hasMilestone("p", 1)
                2: {
                        requirementDescription(){
                                return "2 Phosphorus resets"
                        },
                        done(){
                                return player.p.times >= 2
                        },
                        unlocked(){
                                return true
                        },
                        effect(){
                                return Decimal.pow(2, Math.min(20, player.p.times))
                        },
                        effectDescription(){
                                let a = "Reward: Each of the first twenty resets doubles Phosphorus gain and bulk 5x E buyables."
                                if (player.extremeMode) a = a.replace("gain", "and Oxygen Science gain")
                                return a
                        },
                }, // hasMilestone("p", 2)
                3: {
                        requirementDescription(){
                                return "4 Phosphorus resets"
                        },
                        done(){
                                return player.p.times >= 4
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let a = "Reward: Unlock a D buyable"
                                if (player.extremeMode) a += ", keep coin upgrades upon Phosphorus reset, "
                                return a + " and E Points<sup>.001</sup> multiply E Point gain."
                        },
                }, // hasMilestone("p", 3)
                4: {
                        requirementDescription(){
                                return (player.hardMode ? 7 : 6) + " Phosphorus resets"
                        },
                        done(){
                                return player.p.times >= (player.hardMode ? 7 : 6)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Keep a D Point upgrade per reset, keep Nitrogen XXII, and increase effect exponent to 3.1."
                        },
                }, // hasMilestone("p", 4)
                5: {
                        requirementDescription(){
                                return (player.hardMode ? 11 : 8) + " Phosphorus resets"
                        },
                        done(){
                                return player.p.times >= (player.hardMode ? 11 : 8) 
                        },
                        unlocked(){
                                return true
                        },
                        toggles(){
                                if (player.extremeMode || hasUpgrade("sci", 454)) return [["sci", "autobuynsciupg"]]
                                return []
                        },
                        effectDescription(){
                                let a = "Reward: Keep Nitrogen challenges and Nitrogen resets"
                                if (player.extremeMode) a += ", autobuy Nitrogen Science upgrades,"
                                return a + " and increase effect exponent to 3.14."
                        },
                }, // hasMilestone("p", 5)
                6: {
                        requirementDescription(){
                                return (player.hardMode ? 16 : 10) + " Phosphorus resets"
                        },
                        done(){
                                return player.p.times >= (player.hardMode ? 16 : 10)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let a = "Reward: Keep Carbon and Oxygen upgrades and increase effect exponent to π."
                                if (player.extremeMode) a = a.replace("Carbon and Oxygen", "Carbon, Oxygen, and Hydrogen")
                                return a
                        },
                }, // hasMilestone("p", 6)
                7: {
                        requirementDescription(){
                                return (player.hardMode ? 22 : 13) + " Phosphorus resets"
                        },
                        done(){
                                return player.p.times >= (player.hardMode ? 22 : 13)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let a = "Reward: Per reset keep a Nitrogen upgrade"
                                if (player.extremeMode) a += ", keep Reduce, Reuse, and Recycle levels,"
                                return a + " and you can buy the first level of D buyables."
                        },
                }, // hasMilestone("p", 7)
                8: {
                        requirementDescription(){
                                return (player.hardMode ? "5.00e9" : "1.00e9") + " Phosphorus"
                        },
                        done(){
                                return player.p.points.div(player.hardMode ? 5 : 1).gte(1e9)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: You can autobuy Iterations and the first levels of the first four rows of E buyables."
                        },
                }, // hasMilestone("p", 8)
                9: {
                        requirementDescription(){
                                return (player.hardMode ? "1.00e11" : "2.00e10") + " Phosphorus"
                        },
                        done(){
                                return player.p.points.div(player.hardMode ? 5 : 1).gte(2e10)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Square Phosphorus gain."
                        },
                }, // hasMilestone("p", 9)
                10: {
                        requirementDescription(){
                                return "5e10 Phosphorus"
                        },
                        done(){
                                return player.p.points.gte(5e10)
                        },
                        unlocked(){
                                return player.extremeMode
                        },
                        effectDescription(){
                                return "Reward: Square Phosphorus gain."
                        },
                }, // hasMilestone("p", 10)
        },
        tabFormat: {
                "Upgrades": {
                        content: [
                                "main-display",
                                ["prestige-button", "", function (){ return hasUpgrade("p", 13) ? {'display': 'none'} : {}}],
                                ["display-text",
                                        function(){
                                                if (player.shiftAlias) return "Your best Phosphorus is " + format(player.p.best) + " and your base Phosphorus/s is " + format(player.p.currentGainPerSec)
                                                let x = player.p.currentGainPerSec.times(tmp.p.getPassiveGainMult)
                                                if (!hasUpgrade("p", 13)) return "You are gaining " + format(x, 3) + " Phosphorus/s"
                                                return "You are gaining " + format(x, 3) + " Phosphorus/s and " + format(tmp.p.getResetGain) + " base Phosphorus/s<sup>2</sup>"
                                        }
                                ],
                                "blank", 
                                ["upgrades", [1,2,3,4,5,6,7,10,11]]
                        ],
                        unlocked(){
                                return true
                        },
                },
                "Milestones": {
                        content: [
                                "main-display",
                                ["display-text", function(){
                                        return "You have done " + formatWhole(player.p.times) + " Phosphorus resets"
                                }],
                                "milestones",
                        ],
                        unlocked(){
                                return true
                        },
                },
                "Info": {
                        content: [
                                ["display-text", function(){
                                        let a = "Resetting Phosphorus gives you phosphorus per second instead of flat gain"
                                        let b = "The base gain formula is (log10(Nitrogen/13)-2026)<sup>1/7</sup>-1"
                                        if (player.extremeMode) b = "The base gain formula is (log10(Nitrogen)-2220)<sup>1/7</sup>-1"

                                        let c = "Resetting resets all prior currencies, all prior minigame buyables, "
                                        let d = " all D and E point content, C Point upgrades, "
                                        let e = " Nitrogen content, and third row Oxygen and Carbon upgrades."
                                        let f = "The effect on D and E points is hardcapped at 1ee7 and 1ee6 respectively."

                                        let ret1 = a + br + b + br + c + br + d + br + e + br + f
                                        if (!player.extremeMode) return ret1

                                        let g = br2 + "<sup>*</sup>Capped at 1e10 for Science"

                                        return ret1 + g
                                }]
                        ],
                        unlocked(){
                                return true
                        }
                },
        },
        resetsNothing(){
                return player.a.unlocked
        },
        onPrestige(gain){
                let timesAdd = 1
                if (hasMilestone("l", 1)) timesAdd *= 3
                if (player.easyMode) timesAdd *= 2
                player.p.times += timesAdd
                player.p.currentGainPerSec = player.p.currentGainPerSec.plus(gain)
        },
        doReset(layer){
                /*
                Things to reset:
                1. A Point stuff
                1a. A buyables
                2. B Point stuff
                2a. B buyables
                3. C Point stuff
                3a. C buyables
                3b. upgrades
                4. Tokens
                4a. Token buyables
                4b. Coins
                5. Carbon stuff
                6. Oxygen stuff
                7. Hydorgen stuff
                */

                
                if (layer != "p") return
 
                player.p.time = 0
                let data1 = player.mini
                let data2 = player.tokens

                // 0: Nitrogen stuff
                if (!false) {
                        if (!hasMilestone("p", 5)) player.n.times = 0
                        player.n.time = 0
                        player.n.passiveTime = 0
                        player.n.best = decimalZero
                        player.n.points = decimalZero
                        player.n.total = decimalZero

                        let remupg = [11, 12, 13, 14, 15, 
                                      21, 22, 23, 24, 25, 
                                      31, 32, 33, 34, 35, 
                                      41, 42, 43, 44, 45, 
                                      51, 52, 53, 54, 55,]
                        if (hasMilestone("p", 7)) remupg = remupg.slice(player.p.times, )
                        if (hasMilestone("p", 4)) remupg = filterOut(remupg, [52])
                        player.n.upgrades = filterOut(player.n.upgrades, remupg)

                        if (hasMilestone("p", 1)) {
                                let nKeptMilestones = player.p.times
                                sortStrings(player.n.milestones)
                                player.n.milestones = player.n.milestones.slice(0, nKeptMilestones)
                        }
                        if (!hasMilestone("p", 5) && !hasMilestone("l", 4)) {
                                player.n.challenges = {
                                        11: 0,
                                        12: 0,
                                        21: 0,
                                        22: 0,
                                        31: 0,
                                        32: 0,
                                        41: 0,
                                        42: 0,
                                }
                        }
                }

                // 1: A point stuff
                if (!false) {
                        data1.a_points = {
                                points: decimalZero, 
                                best: decimalZero,
                                extras: {
                                        11: decimalOne,
                                        12: decimalZero,
                                        13: decimalZero,
                                        21: decimalZero,
                                        23: decimalZero,
                                        61: decimalZero,
                                        62: decimalZero,
                                        63: decimalZero,
                                }
                        }
                        let list1 = ["11", "12", "13", "21", 
                                     "22", "23", "61", 
                                     "62", "63"]
                        for (i = 0; i < list1.length; i++){
                                data1.buyables[list1[i]] = decimalZero
                        }// 1a
                }

                player.subtabs.mini.mainTabs = "A"
                
                // 2: B point stuff
                if (!false) {
                        data1.b_points = {
                                points: decimalZero,
                                best: decimalZero,
                        } // 2
                        let list2 = ["31", "32", 
                                     "33", "41", "42", "43", 
                                     "51", "52", "53"]
                        for (i = 0; i < list2.length; i++){
                                data1.buyables[list2[i]] = decimalZero
                        } //2a
                }

                // 3: C point stuff
                if (!false) {
                        data1.c_points = {
                                points: decimalZero,
                                best: decimalZero,
                                lastRoll: [],
                                lastRollTime: data1.c_points.lastRollTime,
                                displayCharacters: data1.c_points.displayCharacters,
                        } // 3
                        let list3 = ["71", "72", "73", "81", "82", 
                                     "83", "91", "92", "93", "101", 
                                     "102", "103", "111", "112", "113"]
                        for (i = 0; i < list3.length; i++){
                                data1.buyables[list3[i]] = decimalZero
                        } //3a
                        let rem = [11, 12, 13, 14, 15, 
                                   21, 22, 23, 24, 25, 
                                   31, 32, 33, 34, 35,
                                   41, 42, 43, 44, 45, ]
                        if (hasMilestone("n", 7)) rem = rem.slice(player.n.times)
                        if (hasMilestone("n", 3)) rem = filterOut(rem, [12])
                        if (hasMilestone("n", 4)) rem = filterOut(rem, [22])
                        if (hasMilestone("n", 5)) rem = filterOut(rem, [43])
                        data1.upgrades = filterOut(data1.upgrades, rem) // 3b
                }

                // 4: Tokens
                if (!false){
                        let starting = decimalZero
                        if (!player.hardMode && !player.extremeMode || hasMilestone("n", 12)) starting = new Decimal(50)
                        data2.total = starting
                        data2.points = starting
                        let list4 = ["11", "12", "13", "21", "22", 
                                     "23", "31", "32", "33", "41", 
                                     "42", "43", "51", "52", "53", 
                                     "61", "62", "63"]
                        for (i = 0; i < list4.length; i++){
                                data2.buyables[list4[i]] = decimalZero
                                data2.best_buyables[list4[i]] = decimalZero
                        } //4a

                        //4b
                        if (player.extremeMode) {
                                if (!hasMilestone("p", 3)) player.tokens.upgrades = [] 
                                let keepMilestones = 0
                                if (hasMilestone("n", 2)) keepMilestones = player.n.times
                                player.tokens.milestones = player.tokens.milestones.slice(0, keepMilestones)
                        }

                        data2.coins.points = decimalZero
                        data2.coins.best = decimalZero
                }

                // 5: C
                if (!false) {
                        player.c.points = decimalZero
                        player.c.best = decimalZero
                        if (!hasMilestone("p", 6)) {
                                let remC = [31, 32, 33, 34, 35]
                                if (player.extremeMode) remC = [11, 12, 13, 14, 15, 
                                                                21, 22, 23, 24, 25, 
                                                                31, 32, 33, 34, 35]
                                player.c.upgrades = filterOut(player.c.upgrades, remC)
                        }
                }

                // 6: O
                if (!false) {
                        player.o.points = decimalZero
                        player.o.best = decimalZero
                        if (!hasMilestone("p", 6)) {
                                let remO = [31, 32, 33, 34, 35]
                                if (player.extremeMode) remO = [11, 12, 13, 14, 15, 
                                                                21, 22, 23, 24, 25, 
                                                                31, 32, 33, 34, 35]
                                player.o.upgrades = filterOut(player.o.upgrades, remO)
                        }
                }

                // 7: H
                if (!false) {
                        player.h.points = decimalZero
                        player.h.best = decimalZero
                        player.h.atomic_hydrogen.points = decimalZero
                        player.h.atomic_hydrogen.best = decimalZero
                        player.h.deuterium.points = decimalZero
                        player.h.deuterium.best = decimalZero
                        if (player.extremeMode && !hasMilestone("p", 6)) {
                                let remH = [11, 12, 13, 14, 15, 
                                            21, 22, 23, 24, 25, 
                                            31, 32, 33, 34, 35, 
                                            41, 42, 43, 44, 45, 
                                            51, 52, 53, 54, 55, 
                                            61, 62, 63, 64, 65, 
                                            71, 72, 73, 74, 75, 
                                            81, 82, 83, 84, 85,]
                                player.h.upgrades = filterOut(player.h.upgrades, remH)
                        }
                }

                // 8: D Points
                if (!false) {
                        let remove = [51, 52, 53, 54, 55, 
                                      61, 62, 63, 64, 65, 
                                      71, 72, 73, 74, 75, 
                                      81, 82, 83, 84, 85]
                        if (hasMilestone("p", 4)) remove = remove.slice(player.p.times, )
                        data1.upgrades = filterOut(data1.upgrades, remove)
                        
                        data1.d_points = { 
                                points: decimalZero,
                                best: decimalZero,
                                fuel: decimalZero,
                                fuelTimer1: data1.d_points.fuelTimer1,
                                fuelTimer2: data1.d_points.fuelTimer2,
                        }
                        let list4 = ["121", "122", "123", "131", "132", "133",
                                     "151", "152", "153", "161", "162", 
                                     "163", "171", "172", "173", "181", 
                                     "182", "183", ]
                        for (i = 0; i < list4.length; i++){
                                data1.buyables[list4[i]] = decimalZero
                        } // reset buyables
                }

                // 9: E Points
                if (!false) {
                        data1.e_points = { 
                                points: decimalZero,
                                best: decimalZero,
                        }
                        let list4 = ["201", "202", "203", "211",
                                     "212", "213", "221", "222",
                                     "223", "231", "232", "233"]
                        for (i = 0; i < list4.length; i++){
                                data1.buyables[list4[i]] = decimalZero
                        } // reset buyables
                }

                if (player.extremeMode) layers.sci.doReset("p")

                player.tokens.lastRespecDisplayFormula = layers.tokens.buyables.costFormulaText()
                // make the display update
        },
})

addLayer("mu", {
        name: "µ", 
        symbol: "µ", 
        position: 2, 
        startData(){ return {
                unlocked: false,
		points: decimalZero,
                best: decimalZero,
                total: decimalZero,
                abtime: 0,
                time: 0,
                times: 0,
                autotimes: 0,
                passiveTime: 0,
                bestNdM: decimalZero,
                CCostFree: false,
        }},
        color: "#8200B0",
        branches: [],
        requires(){
                if (player.extremeMode) {
                        if (hasMilestone("mu", 16)) return decimalOne

                        let div = decimalOne
                        if (hasMilestone("mu", 7)) div = div.times(100)
                        if (hasMilestone("mu", 9)) div = div.times(100)
                        if (hasMilestone("mu", 11)) div = div.times(100)
                        if (hasUpgrade("p", 113)) div = div.times(1e5)

                        return new Decimal(1e26).div(div)
                }
                return Decimal.pow(10, 26).times(player.hardMode ? 10 : 2)    
        },
        resource: "µ", 
        baseResource: "Phosphorus", 
        baseAmount(){return player.p.points.floor()},
        type: "static",
        base(){
                if (hasUpgrade("l", 22)) return new Decimal(2)
                let ret = new Decimal(100)
                if (hasUpgrade("mu", 12)) ret = ret.sub(tmp.mu.upgrades[12].effect)
                if (hasUpgrade("p", 111)) {
                        let a = 1
                        if (hasUpgrade("p", 112)) a ++ 
                        if (hasUpgrade("p", 113)) a ++ 
                        if (hasUpgrade("p", 114)) a ++ 
                        ret = ret.sub(a**.5)
                }
                if (hasMilestone("mu", 17)) ret = ret.sub(1)
                if (hasMilestone("mu", 18)) ret = ret.sub(1)
                if (hasMilestone("mu", 19)) ret = ret.sub(1)
                if (hasUpgrade("mu", 35) && player.extremeMode) ret = ret.sub(1)
                if (hasMilestone("mu", 20)) ret = ret.sub(1)

                return ret
        },
        gainMult(){
                return decimalOne
        },
        exponent(){
                let rem = decimalZero
                                                rem = rem.plus(tmp.mu.buyables[32].effect)
                if (hasUpgrade("mu", 43))       rem = rem.plus(.01)
                if (inChallenge("l", 12)) {
                        let depth = tmp.l.challenges[12].getChallengeDepths[2] || 0
                                                rem = rem.sub(.01 * depth)
                }
                if (hasMilestone("d", 16) && (inChallenge("l", 12) || layers.l.grid.getGemEffect(608))) {
                                                rem = rem.plus(.05)
                }
                if (hasMilestone("a", 5))       rem = rem.plus(.01)
                if (hasMilestone("a", 7))       rem = rem.plus(.01)
                if (hasUpgrade("d", 11) && (!inChallenge("l", 12) || layers.l.grid.getGemEffect(608))) {
                                                rem = rem.plus(.05)
                }       
                if (hasMilestone("d", 15))      rem = rem.plus(.01)
                                                rem = rem.plus(layers.l.grid.getGemEffect(708))
                if (hasChallenge("l", 91))      rem = rem.plus(tmp.l.challenges[91].reward)
                if (hasUpgrade("t", 53))        rem = rem.plus(.01)
                
                if (hasMilestone("mu", 13))     return new Decimal(1.90).sub(rem)
                if (hasMilestone("mu", 11))     return new Decimal(1.91).sub(rem)
                if (hasMilestone("mu", 9))      return new Decimal(1.92).sub(rem)
                if (hasMilestone("mu", 7))      return new Decimal(1.93).sub(rem)
                if (hasMilestone("mu", 6))      return new Decimal(1.96).sub(rem)
                                                return new Decimal(2.00).sub(rem)
        },
        gainExp: decimalOne,
        effect(){
                if (inChallenge("l", 71) || hasChallenge("l", 71)) return decimalZero
                let amt = player.mu.points

                if (amt.gt(400)) amt = amt.sqrt().times(20)
                if (amt.gt(100)) amt = amt.log10().times(5).pow(2)

                let ret = amt.div(100)

                if (player.mu.points.gt(35)) {
                        ret = ret.times(100/60)
                        ret = Decimal.sub(1, ret.plus(.765).recip().times(7/8))
                }
                if (ret.gt(.45) && !hasUpgrade("mu", 33)) ret = ret.pow(2).times(.69).plus(.31)

                if (player.extremeMode && !hasUpgrade("l", 13) && ret.gte(.92)) {
                        ret = ret.sub(.92).div(.08).pow(1.22).times(.08).plus(.92)
                }

                return ret
        },
        effectDescription(){
                if (inChallenge("l", 71) || hasChallenge("l", 71)) return ""
                let eff = tmp.mu.effect
                if (player.shiftAlias) {
                        let a = "effect formula: .01*x"

                        if (player.mu.points.gt(35)) a += " (softcapped)"
                        if (eff.gt(.45) && !hasUpgrade("mu", 33)) a = a.replace(")", "<sup>2</sup>)")
                        else if (player.extremeMode && eff.gt(.92) && !hasUpgrade("l", 13)) {
                                a = a.replace(")", "<sup>2</sup>)")
                        } // should be 351/400 to be smooth but idc
                        
                        a += " resulting in ^" + format(tmp.mu.effect.sub(1).recip().times(-1), 3) 
                        return a + " the Phosphorus."
                }
                let effstr = player.mu.points.gt(35) ? format(eff, 4) : format(eff)
                return " multiplying Phosphorus gain by Phosphorus<sup>" + effstr + "</sup>."
        },
        autoPrestige(){
                return hasUpgrade("mu", 35) || player.or.unlocked
        },
        deactivated(){
                return hasUpgrade("t", 151)
        },
        update(diff){
                if (hasUpgrade("t", 151)) return
                let data = player.mu
                
                if (tmp.mu.layerShown) data.unlocked = true
                data.best = data.best.max(data.points)

                data.time += diff
                data.bestNdM = data.bestNdM.max(getBuyableAmount("mu", 31))

                if (hasUpgrade("d", 22) && (!hasMilestone("d", 15) || player.extremeMode) && !player.cells.unlocked) {
                        if (!inChallenge("l", 11) && player.l.time > 1) {
                                player.mu.buyables[31] = player.mu.buyables[31].max(data.bestNdM)
                        }
                }
        },
        row: 2, 
        prestigeButtonText(){
                if (player.shiftAlias) {
                        let p1 = "Formula:" + br + format(tmp.mu.requires, 0) + "*"
                        p1 += formatWhole(tmp.mu.base) + "^(x<sup>" + formatWhole(tmp.mu.exponent)
                        p1 += "</sup>)"
                        return p1.replace("1*", "")
                }

                let a = "Reset for <b>" + formatWhole(tmp.mu.resetGain) + "</b> " + tmp.mu.resource
                if (player.mu.points.gt(1e10)) return a
                let b = ""
                if (player.mu.points.lt(30)) {
                        let d = tmp.mu.canBuyMax
                        b = tmp.mu.baseAmount.gte(tmp.mu.nextAt) && (d !== undefined) && d ? "Next: " : "Req: "
                }
                let c = formatWhole(tmp.mu.baseAmount) + "/" + format(tmp.mu.nextAtDisp) + " " + tmp.mu.baseResource

                return a + br2 + b + c
        },
        canBuyMax(){
                return hasUpgrade("mu", 22) || hasMilestone("d", 1)
        },
        layerShown(){
                if (tmp.mu.deactivated) return false
                return hasUpgrade("p", 25) || player.l.unlocked
        },
        upgrades: {
                rows: 10,
                cols: 5,
                11: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>µ I"
                        },
                        description(){
                                return "Each constant multiplies E Point gain by log10(10+µ) and " + makeRed("E") + " multiplies Phosphorus gain"
                        },
                        cost:() => new Decimal(2),
                        unlocked(){
                                return true
                        }, // hasUpgrade("mu", 11)
                },
                12: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>µ II"
                        },
                        description(){
                                let a = "<bdi style='font-size: 80%'> Multiply Phosphorus gain by (1 + µ/100)^sqrt(associativity of *) and reduce the µ cost base by ceil(40*[this row upgrades]<sup>.5</sup>)"
                                let b = br + "Currently: -" + formatWhole(tmp.mu.upgrades[12].effect) + "</bdi>"
                                return a + b
                        },
                        cost:() => new Decimal(4),
                        effect(){
                                a = 1
                                if (hasUpgrade("mu", 11)) a += 1
                                if (hasUpgrade("mu", 13)) a += 1
                                if (hasUpgrade("mu", 14)) a += 1
                                if (hasUpgrade("mu", 15)) a += 1
                                return new Decimal(a).sqrt().times(40).ceil()
                        },
                        unlocked(){
                                return hasUpgrade("mu", 11) || hasMilestone("l", 3)
                        }, // hasUpgrade("mu", 12)
                },
                13: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>µ III"
                        },
                        description(){
                                let a = "Per µ multiply Phosphorus gain by log10(Phosphorus)"
                                let b = "Currently: " + formatWhole(tmp.mu.upgrades[13].effect)
                                if (hasUpgrade("mu", 22)) a = a.replace("log10", "log6")
                                if (hasUpgrade("mu", 25)) a = a.replace("log6", "log5")
                                if (hasUpgrade("mu", 31)) a = a.replace("log5", "log4")
                                if (player.extremeMode)   a = a.replace("log4", "log3")

                                if (hasChallenge("l", 91)) a = a.replace("µ", "µ<sup>.95</sup>")

                                return a + br + b
                        },
                        cost:() => new Decimal(6),
                        effect(){
                                if (inChallenge("l", 91) || hasMilestone("cells", 49)) return decimalOne
                                let base = player.p.points.max(100).log10()
                                if (hasUpgrade("mu", 22)) base = base.div(Math.log10(6))
                                if (hasUpgrade("mu", 25)) base = base.times(Math.log(6)/Math.log(5))
                                if (hasUpgrade("mu", 31)) base = base.times(Math.log(5)/Math.log(player.extremeMode ? 3 : 4))

                                let exp = decimalOne
                                if (hasChallenge("l", 91)) exp = new Decimal(.95)
                                
                                return base.pow(player.mu.points.pow(exp)).min(player.extremeMode ? "ee9" : "ee1e5")
                        },
                        unlocked(){
                                return hasUpgrade("mu", 12) || hasMilestone("l", 3)
                        }, // hasUpgrade("mu", 13)
                },
                14: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>µ IV"
                        },
                        description(){
                                let a = "Bulk 10x C, D, and E buyables and gain 10x Phosphorus"
                                if (player.extremeMode) a = a.replace("10x Phosphorus", "5x Phosphorus per upgrade")
                                return a
                        },
                        cost:() => new Decimal(player.extremeMode ? 5e105 : 1e108),
                        currencyLocation:() => player.p,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Phosphorus",
                        unlocked(){
                                return hasUpgrade("mu", 13) || hasMilestone("l", 3)
                        }, // hasUpgrade("mu", 14)
                },
                15: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>µ V"
                        },
                        description(){
                                return "Note: All future upgrades that cost Phosphorus set µ to 0 and do a µ reset"
                        },
                        cost:() => new Decimal(1e118),
                        currencyLocation:() => player.p,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Phosphorus",
                        onPurchase(){
                                player.mu.points = decimalZero
                                doReset("mu", true)
                        },
                        unlocked(){
                                return hasUpgrade("mu", 14) || hasMilestone("l", 3)
                        }, // hasUpgrade("mu", 15)
                },
                21: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>µ VI"
                        },
                        description(){
                                return "Unlock µ buyables. Buying any µ buyable forces a µ reset"
                        },
                        cost:() => new Decimal(player.hardMode ? 1e140 : 2e139),
                        currencyLocation:() => player.p,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Phosphorus",
                        onPurchase(){
                                player.mu.points = decimalZero
                                doReset("mu", true)
                        },
                        unlocked(){
                                return hasUpgrade("mu", 15) || hasMilestone("l", 3)
                        }, // hasUpgrade("mu", 21)
                },
                22: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>µ VII"
                        },
                        description(){
                                return "You can buy max µ, you have one less effective token for prestige purposes and µ III becomes log6"
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal("1e554")
                                return new Decimal(player.hardMode ? "1e491" : "1e490")
                        },
                        currencyLocation:() => player.p,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Phosphorus",
                        onPurchase(){
                                player.mu.points = decimalZero
                                doReset("mu", true)
                        },
                        unlocked(){
                                return getBuyableAmount("mu", 21).gt(0) || hasMilestone("l", 3)
                        }, // hasUpgrade("mu", 22)
                },
                23: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>µ VIII"
                        },
                        description(){
                                return "Per upgrade double Phosphorus gain"
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal("2e594")
                                return new Decimal(player.hardMode ? "1e529" : "1e528")
                        },
                        currencyLocation:() => player.p,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Phosphorus",
                        onPurchase(){
                                player.mu.points = decimalZero
                                doReset("mu", true)
                        },
                        unlocked(){
                                return hasUpgrade("mu", 22) || hasMilestone("l", 3)
                        }, // hasUpgrade("mu", 23)
                },
                24: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>µ IX"
                        },
                        description(){
                                return "You have one less effective token for prestige purposes"
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal("1e637")
                                return new Decimal(player.hardMode ? "2e775" : "1e775")
                        },
                        currencyLocation:() => player.p,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Phosphorus",
                        onPurchase(){
                                player.mu.points = decimalZero
                                doReset("mu", true)
                        },
                        unlocked(){
                                return hasUpgrade("mu", 23) || hasMilestone("l", 3)
                        }, // hasUpgrade("mu", 24)
                },
                25: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>µ X"
                        },
                        description(){
                                return "µ III log6 becomes log5"
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal("1e988")
                                return new Decimal(player.hardMode ? "1e963" : "5e961")
                        },
                        currencyLocation:() => player.p,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Phosphorus",
                        onPurchase(){
                                player.mu.points = decimalZero
                                doReset("mu", true)
                        },
                        unlocked(){
                                return hasUpgrade("mu", 24) || hasMilestone("l", 3)
                        }, // hasUpgrade("mu", 25)
                },
                31: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>µ XI"
                        },
                        description(){
                                let a = "µ III log5 becomes log4"
                                if (player.extremeMode) a = a.replace("4", "3")
                                return a
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal("1e1143")
                                return new Decimal(player.hardMode ? "1e1167" : "1e1166")
                        },
                        currencyLocation:() => player.p,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Phosphorus",
                        onPurchase(){
                                player.mu.points = decimalZero
                                doReset("mu", true)
                        },
                        unlocked(){
                                return hasUpgrade("mu", 25) || hasMilestone("l", 3)
                        }, // hasUpgrade("mu", 31)
                },
                32: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>µ XII"
                        },
                        description(){
                                let a = "Per upgrade in this row gain 3x Phosphorus gain"
                                if (player.extremeMode) a = a.replace("3", "10")
                                return a
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal("1e1199")
                                return new Decimal(player.hardMode ? "1e1402" : "1e1401")
                        },
                        currencyLocation:() => player.p,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Phosphorus",
                        onPurchase(){
                                player.mu.points = decimalZero
                                doReset("mu", true)
                        },
                        effect(){
                                let a = 1
                                if (hasUpgrade("mu", 31)) a ++
                                if (hasUpgrade("mu", 33)) a ++
                                if (hasUpgrade("mu", 34)) a ++
                                if (hasUpgrade("mu", 35)) a ++
                                return Decimal.pow(player.extremeMode ? 10 : 3, a)
                        },
                        unlocked(){
                                return hasUpgrade("mu", 31) || hasMilestone("l", 3)
                        }, // hasUpgrade("mu", 32)
                },
                33: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>µ XIII"
                        },
                        description(){
                                return "Buying µ buyables no longer costs µ or Phosphorus and remove the second µ effect softcap"
                        },
                        cost(){
                                if (player.extremeMode) return new Decimal("1e1885")
                                return new Decimal(player.hardMode ? "1e3316" : "1e3314")
                        },
                        currencyLocation:() => player.p,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Phosphorus",
                        onPurchase(){
                                player.mu.points = decimalZero
                                doReset("mu", true)
                        },
                        unlocked(){
                                return hasUpgrade("mu", 32) || hasMilestone("l", 3)
                        }, // hasUpgrade("mu", 33)
                },
                34: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>µ XIV"
                        },
                        description(){
                                let a = "µ resets no longer do anything"
                                if (player.extremeMode) a += ", remove P → ΔP and P → ΔN's base costs,"
                                return a + " and you bulk 100x minigame buyables"
                        },
                        cost:() => new Decimal(player.extremeMode ? 115 : 240),
                        unlocked(){
                                return hasUpgrade("mu", 33) || hasMilestone("l", 3)
                        }, // hasUpgrade("mu", 34)
                },
                35: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>µ XV"
                        },
                        description(){
                                let a = "Automatically reset for µ"
                                if (player.extremeMode) a += ", reduce µ cost base by 1,"
                                return a + " and you can bulk unlimited minigame buyables"
                        },
                        cost:() => new Decimal(player.extremeMode ? 478 : 1000),
                        unlocked(){
                                return hasUpgrade("mu", 34) || hasMilestone("l", 3)
                        }, // hasUpgrade("mu", 35)
                },
                41: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>µ XVI"
                        },
                        description(){
                                return "N → ΔP base is 9"
                        },
                        cost:() => new Decimal(player.extremeMode ? 2e24 : 5e25),
                        unlocked(){
                                return player.l.challenges[11] >= (player.extremeMode ? 38 : 33) || player.a.unlocked
                        }, // hasUpgrade("mu", 41)
                },
                42: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>µ XVII"
                        },
                        description(){
                                let a = "α → ∂α log10's become log8"
                                if (player.extremeMode) a += " and Universe becomes e7e41"
                                return a
                        },
                        cost:() => new Decimal(player.extremeMode ? 2e30 : 3e31),
                        unlocked(){
                                return player.l.challenges[11] >= (player.extremeMode ? 54 : 49) || player.a.unlocked
                        }, // hasUpgrade("mu", 42)
                },
                43: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>µ XVIII"
                        },
                        description(){
                                return "α → ∂α log8's become log7 and subtract .01 from the µ cost exponent"
                        },
                        cost:() => new Decimal(player.extremeMode ? 3e30 : 4e31),
                        unlocked(){
                                return player.l.challenges[11] >= (player.extremeMode ? 55 : 51) || player.a.unlocked
                        }, // hasUpgrade("mu", 43)
                },
                44: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>µ XIX"
                        },
                        description(){
                                let a = "Oxygen multiplies Point gain"
                                if (player.extremeMode) a += ", Universe is e2e42, "
                                return a + " and token cost exponent is .48"
                        },
                        cost:() => new Decimal(player.extremeMode ? 7e30 : 5e31),
                        unlocked(){
                                return player.l.challenges[11] >= (player.extremeMode ? 55 : 52) || player.a.unlocked
                        }, // hasUpgrade("mu", 44)
                },
                45: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>µ XX"
                        },
                        description(){
                                let a = "α → ∂α log7's become log6"
                                if (player.extremeMode) a += " and Universe is e3e42"
                                return a
                        },
                        cost:() => new Decimal(player.extremeMode ? 9e30 : 6e31),
                        unlocked(){
                                return player.l.challenges[11] >= (player.extremeMode ? 58 : 59) || player.a.unlocked
                        }, // hasUpgrade("mu", 45)
                },
                51: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>µ XXI"
                        },
                        description(){
                                let a = "α → ∂α log6's become log5"
                                if (player.extremeMode) a += ", Universe is e2e44," 
                                return a + " and log10(Lives) exponentiates point gain"
                        },
                        cost:() => new Decimal(player.extremeMode ? 2e32 : 7e31),
                        unlocked(){
                                if (player.extremeMode) return player.l.best.gte(1e37) || player.a.unlocked
                                return player.l.challenges[11] >= 69 || player.a.unlocked
                        }, // hasUpgrade("mu", 51)
                },
                52: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>µ XXII"
                        },
                        description(){
                                return "Every upgrade adds .001 to Constant base"
                        },
                        cost:() => new Decimal(player.extremeMode ? 3e32 : 8e31),
                        unlocked(){
                                return player.l.challenges[11] >= 71 || player.a.unlocked
                        }, // hasUpgrade("mu", 52)
                },
                53: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>µ XXIII"
                        },
                        description(){
                                let a = "N → ΔP cost base is 6"
                                if (player.extremeMode) a += " and Universe is ee45"
                                return a
                        },
                        cost:() => new Decimal(player.extremeMode ? 6e32 : 9e31),
                        unlocked(){
                                return player.l.challenges[11] >= 72 || player.a.unlocked
                        }, // hasUpgrade("mu", 53)
                },
                54: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>µ XXIV"
                        },
                        description(){
                                return "α → ∂α log5's become log4"
                        },
                        cost:() => new Decimal(player.extremeMode ? 9e32 : 1e32),
                        unlocked(){
                                return player.l.challenges[11] >= 75 || player.a.unlocked
                        }, // hasUpgrade("mu", 54)
                },
                55: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>µ XXV"
                        },
                        description(){
                                return "α → ∂α log4's become log3"
                        },
                        cost:() => new Decimal(player.extremeMode ? 1.2e33 : 1.1e32),
                        unlocked(){
                                return player.l.challenges[11] >= 76 || player.a.unlocked
                        }, // hasUpgrade("mu", 55)
                },
        },
        milestones: {
                1: {
                        requirementDescription(){
                                return "1 µ"
                        },
                        done(){
                                return player.mu.points.gte(1)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Per milestone multiply base Phosphorus gain by total tokens and you no longer lose Oxygen or Carbon."
                        },
                }, // hasMilestone("mu", 1)
                2: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e1,000,000 E Points"
                                return "1e1,200,000 E Points"
                        },
                        done(){
                                return player.mini.e_points.points.gte(Decimal.pow(10, player.extremeMode ? 1e6 : 12e5))
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Unlock a new E buyable, and you no longer lose any Hydrogen resources."
                        },
                }, // hasMilestone("mu", 2)
                3: {
                        requirementDescription(){
                                return "5 µ"
                        },
                        done(){
                                return player.mu.points.gte(5)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: E Points multiply D Points and each associativity of addition adds .01 to " + makeRed("E") + "."
                        },
                }, // hasMilestone("mu", 3)
                4: {
                        requirementDescription(){
                                return "7 µ"
                        },
                        done(){
                                return player.mu.points.gte(7)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Iterations cost exponent is now x<sup>x</sup>"
                        },
                }, // hasMilestone("mu", 4)
                5: {
                        requirementDescription(){
                                if (player.extremeMode) return "1.00e206 Phosphorus"
                                return "1.00e194 Phosphorus"
                        },
                        done(){
                                return player.p.points.gte(player.extremeMode ? 1e206 : 1e194)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let a = "µ^10 multiplies " + makeBlue("b")
                                if (player.extremeMode) a += " and Carbon Science upgrades are kept"
                                return a
                        },
                }, // hasMilestone("mu", 5)
                6: {
                        requirementDescription(){
                                if (player.extremeMode) return "1.00e227 Phosphorus"
                                return "1.00e211 Phosphorus"
                        },
                        done(){
                                return player.p.points.gte(player.extremeMode ? 1e227 : 1e211)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let a = "µ cost exponent is 1.96"
                                if (player.extremeMode) a += " and per milestone gain 5x Phosphorus"
                                return a
                        },
                }, // hasMilestone("mu", 6)
                7: {
                        requirementDescription(){
                                if (player.extremeMode) return "1.00e259 Phosphorus"
                                return "1.00e243 Phosphorus"
                        },
                        done(){
                                return player.p.points.gte(player.extremeMode ? 1e259 : 1e243)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let a = "µ cost exponent is 1.93"
                                if (player.extremeMode) a += ", µ's base cost is 100x less,"
                                return a + " and unlock a buyable"
                        },
                }, // hasMilestone("mu", 7)
                8: {
                        requirementDescription(){
                                return "19 µ"
                        },
                        done(){
                                return player.mu.points.gte(19)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Oxygen Carbon synergy gets effected by tokens"
                        },
                }, // hasMilestone("mu", 8)
                9: {
                        requirementDescription(){
                                if (player.extremeMode) return "1.00e417 Phosphorus"
                                return "1.00e345 Phosphorus"
                        },
                        done(){
                                return player.p.points.gte(player.extremeMode ? "1e417" : "1e345")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let a = "Each µ adds .001 to the Cubic base"
                                if (player.extremeMode) a += ", µ's base cost is 100x less,"
                                return a + " and µ cost exponent is 1.92"
                        },
                }, // hasMilestone("mu", 9)
                10: {
                        requirementDescription(){
                                if (player.extremeMode) return "1.00e459 Phosphorus"
                                return "1.00e370 Phosphorus"
                        },
                        done(){
                                return player.p.points.gte(player.extremeMode ? "1e459" : "1e370")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Each µ adds .001 to the Polynomial base"
                        },
                }, // hasMilestone("mu", 10)
                11: {
                        requirementDescription(){
                                if (player.extremeMode) return "1.00e465 Phosphorus"
                                return "1.00e398 Phosphorus"
                        },
                        done(){
                                return player.p.points.gte(player.extremeMode ? "1e465" : "1e398")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let a = "Add 1 to µ → ΔN base" 
                                if (player.extremeMode) a += ", µ's base cost is 100x less,"
                                return a + " and µ cost exponent is 1.91"
                        },
                }, // hasMilestone("mu", 11)
                12: {
                        requirementDescription(){
                                if (player.extremeMode) return "1.00e993 Phosphorus"
                                return "1.00e1283 Phosphorus"
                        },
                        done(){
                                return player.p.points.gte(player.extremeMode ? "1e993" : "1e1283")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Per µ milestone double Phosphorus gain"
                                return "Ponder the universe"
                        },
                }, // hasMilestone("mu", 12)
                13: {
                        requirementDescription(){
                                if (player.extremeMode) return "1.00e1248 Phosphorus"
                                return "1.00e1456 Phosphorus"
                        },
                        done(){
                                return player.p.points.gte(player.extremeMode ? "1e1248" : "1e1456")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "µ cost exponent is 1.9"
                        },
                }, // hasMilestone("mu", 13)
                14: {
                        requirementDescription(){
                                return "1.00e1585 Phosphorus"
                        },
                        done(){
                                return player.p.points.gte("1e1585")
                        },
                        unlocked(){
                                return player.extremeMode
                        },
                        effectDescription(){
                                return "Remove µ → ΔN's base cost and add 2 to its exponential divisor"
                        },
                }, // hasMilestone("mu", 14)
                15: {
                        requirementDescription(){
                                return "1.00e1646 Phosphorus"
                        },
                        done(){
                                return player.p.points.gte("1e1646")
                        },
                        unlocked(){
                                return player.extremeMode
                        },
                        effectDescription(){
                                return "Remove P → Δµ's base cost"
                        },
                }, // hasMilestone("mu", 15)
                16: {
                        requirementDescription(){
                                return "3e1714 Phosphorus"
                        },
                        done(){
                                return player.p.points.gte("3e1714")
                        },
                        unlocked(){
                                return player.extremeMode
                        },
                        effectDescription(){
                                return "Remove µ's base cost"
                        },
                }, // hasMilestone("mu", 16)
                17: {
                        requirementDescription(){
                                return "1e7665 Phosphorus"
                        },
                        done(){
                                return player.p.points.gte("1e7665")
                        },
                        unlocked(){
                                return player.extremeMode
                        },
                        effectDescription(){
                                return "Reduce µ cost base by 1"
                        },
                }, // hasMilestone("mu", 17)
                18: {
                        requirementDescription(){
                                return "1e10500 Phosphorus"
                        },
                        done(){
                                return player.p.points.gte("1e10500")
                        },
                        unlocked(){
                                return player.extremeMode
                        },
                        effectDescription(){
                                return "Reduce µ cost base by 1"
                        },
                }, // hasMilestone("mu", 18)
                19: {
                        requirementDescription(){
                                return "1e18130 Phosphorus"
                        },
                        done(){
                                return player.p.points.gte("1e18130")
                        },
                        unlocked(){
                                return player.extremeMode
                        },
                        effectDescription(){
                                return "Reduce µ cost base by 1 and halve Recycle scaling"
                        },
                }, // hasMilestone("mu", 19)
                20: {
                        requirementDescription(){
                                return "1000 µ"
                        },
                        done(){
                                return player.mu.points.gte(1000)
                        },
                        unlocked(){
                                return player.extremeMode
                        },
                        onComplete(){
                                player.mu.CCostFree = true
                        },
                        effectDescription(){
                                return "Reduce µ cost base by 1 and C buyables permanently cost nothing"
                        },
                }, // hasMilestone("mu", 20)
        },
        buyables: {
                rows: 3,
                cols: 3,
                11: {
                        title: "µ → Δµ",
                        cost(){
                                let amt = getBuyableAmount("mu", 11)
                                let exp = amt.div(tmp.mu.buyables[11].expDiv).plus(1)
                                return amt.pow(exp).floor()
                        },
                        expDiv(){
                                let ret = new Decimal(10)

                                ret = ret.plus(tmp.mu.buyables[13].effect)
                                ret = ret.plus(tmp.mu.buyables[23].effect)
                                
                                return ret
                        },
                        unlocked(){
                                if (hasMilestone("cells", 13)) return false
                                return hasUpgrade("mu", 21) || player.a.unlocked
                        },
                        canAfford:() => player.mu.points.gte(tmp.mu.buyables[11].cost) && !hasMilestone("cells", 13),
                        buy(){
                                if (!this.canAfford()) return
                                player.mu.buyables[11] = player.mu.buyables[11].plus(1)
                                if (!hasUpgrade("mu", 33)) player.mu.points = player.mu.points.sub(tmp.mu.buyables[11].cost)
                                doReset("mu", true)
                        },
                        base(){
                                return player.points.max(10).log10().max(10).log10()
                        },
                        effect(){
                                return tmp.mu.buyables[11].base.pow(player.mu.buyables[11])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.mu.buyables[11]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mu.buyables[11].effect) + " to Phosphorus gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("mu", 11)) + " µ</b><br>"
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(log10(Points))^x<br>" + format(tmp.mu.buyables[11].base) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "floor(x<sup>1+x/" + formatWhole(tmp.mu.buyables[11].expDiv) + "</sup>)" 
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                12: {
                        title: "µ → ΔP",
                        cost(){
                                let amt = getBuyableAmount("mu", 12)
                                let exp = amt.div(tmp.mu.buyables[12].expDiv).plus(1)
                                let init= amt.pow(exp)
                                let base = new Decimal(player.extremeMode ? 1e157 : 1e159)
                                if (hasUpgrade("p", 105)) base = decimalOne
                                return base.times(Decimal.pow(10, init))
                        },
                        expDiv(){
                                let ret = new Decimal(15)

                                ret = ret.plus(tmp.mu.buyables[13].effect)
                                ret = ret.plus(tmp.mu.buyables[23].effect)
                                
                                return ret
                        },
                        unlocked(){
                                if (hasMilestone("cells", 13)) return false
                                return player.mu.best.gte(12) || player.a.unlocked
                        },
                        canAfford:() => player.p.points.gte(tmp.mu.buyables[12].cost) && !hasMilestone("cells", 13),
                        buy(){
                                if (!this.canAfford()) return
                                player.mu.buyables[12] = player.mu.buyables[12].plus(1)
                                if (!hasUpgrade("mu", 33)) player.p.points = player.p.points.sub(tmp.mu.buyables[12].cost)
                                doReset("mu", true)
                        },
                        base(){
                                return player.mu.points.max(1).plus(tmp.mu.buyables[22].effect)
                        },
                        baseExtra(){
                                return tmp.mu.buyables[22].effect
                        },
                        effect(){
                                return tmp.mu.buyables[12].base.pow(player.mu.buyables[12])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.mu.buyables[12]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mu.buyables[12].effect) + " to Phosphorus gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mu", 12)) + " Phosphorus</b><br>"
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "µ+" + formatWhole(tmp.mu.buyables[12].baseExtra) +  "^x<br>"
                                eformula += format(tmp.mu.buyables[12].base) + "^x"
                                eformula = eformula.replace("+0", "")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e159*10^(x<sup>1+x/" + formatWhole(tmp.mu.buyables[12].expDiv) + "</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("159", "157")
                                if (hasUpgrade("p", 105)) cost2 = cost2.slice(6,)
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                13: {
                        title: "µ → ΔN",
                        cost(){
                                let amt = getBuyableAmount("mu", 13)
                                let exp = amt.div(tmp.mu.buyables[13].expDiv).plus(1)
                                let init= amt.pow(exp)
                                let base= new Decimal(player.extremeMode ? 1e293 : 1e281)
                                if (hasMilestone("mu", 14)) base = decimalOne
                                return base.times(Decimal.pow(player.extremeMode ? 1e4 : 50, init))
                        },
                        expDiv(){
                                let ret = new Decimal(10)

                                                                ret = ret.plus(tmp.mu.buyables[23].effect)
                                if (hasMilestone("mu", 14))     ret = ret.plus(2)
                                
                                return ret
                        },
                        unlocked(){
                                if (hasMilestone("cells", 13)) return false
                                return hasMilestone("mu", 7) || player.a.unlocked
                        },
                        canAfford:() => player.p.points.gte(tmp.mu.buyables[13].cost) && !hasMilestone("cells", 13),
                        buy(){
                                if (!this.canAfford()) return
                                player.mu.buyables[13] = player.mu.buyables[13].plus(1)
                                if (!hasUpgrade("mu", 33)) player.p.points = player.p.points.sub(tmp.mu.buyables[13].cost)
                                doReset("mu", true)
                        },
                        base(){
                                let ret = new Decimal(3)

                                if (hasMilestone("mu", 11)) ret = ret.plus(1)
                                
                                return ret
                        },
                        effect(){
                                return tmp.mu.buyables[13].base.times(player.mu.buyables[13])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.mu.buyables[13]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.mu.buyables[13].effect) + " to prior exponent dividers</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mu", 13)) + " Phosphorus</b><br>"
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.mu.buyables[13].base) + "*x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e281*50^(x<sup>1+x/" + formatWhole(tmp.mu.buyables[13].expDiv) + "</sup>)" 
                                if (player.extremeMode) {
                                        cost2 = cost2.replace("281*50", "293*1e4")
                                }
                                if (hasMilestone("mu", 14)) cost2 = cost2.slice(6,)
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                21: {
                        title: "P → Δµ",
                        cost(){
                                let amt = getBuyableAmount("mu", 21)
                                let exp = amt.div(tmp.mu.buyables[21].expDiv).plus(.8)
                                let init= amt.pow(exp)
                                let base = player.extremeMode ? 27 : 25
                                if (hasMilestone("mu", 15)) base = 0
                                return init.plus(base).floor()
                        },
                        expDiv(){
                                let ret = new Decimal(20)

                                ret = ret.plus(tmp.mu.buyables[23].effect)

                                return ret
                        },
                        unlocked(){
                                if (hasMilestone("cells", 13)) return false
                                return hasMilestone("mu", 11) || player.a.unlocked
                        },
                        canAfford:() => player.mu.points.gte(tmp.mu.buyables[21].cost) && !hasMilestone("cells", 13),
                        buy(){
                                if (!this.canAfford()) return
                                player.mu.buyables[21] = player.mu.buyables[21].plus(1)
                                if (!hasUpgrade("mu", 33)) player.mu.points = player.mu.points.sub(tmp.mu.buyables[21].cost)
                                doReset("mu", true)
                        },
                        base(){
                                return player.p.points.max(10).log10()
                        },
                        effect(){
                                return tmp.mu.buyables[21].base.pow(player.mu.buyables[21])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.mu.buyables[21]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mu.buyables[21].effect) + " to Phosphorus gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("mu", 21)) + " µ</b><br>"
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(Phosphorus)^x<br>" + format(tmp.mu.buyables[21].base) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "25+x<sup>.8+x/" + formatWhole(tmp.mu.buyables[21].expDiv) + "</sup>" 
                                if (player.extremeMode) cost2 = cost2.replace("25", "27")
                                if (hasMilestone("mu", 15)) cost2 = cost2.slice(3,)
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                22: {
                        title: "P → ΔP",
                        cost(){
                                let amt = getBuyableAmount("mu", 22)
                                let exp = amt.div(tmp.mu.buyables[22].expDiv).plus(1)
                                let init= amt.pow(exp)
                                let base = new Decimal(player.extremeMode ? "1e599" : "1e597")
                                if (hasUpgrade("mu", 34)) base = decimalOne
                                return base.times(Decimal.pow(20, init))
                        },
                        expDiv(){
                                let ret = new Decimal(30)

                                ret = ret.plus(tmp.mu.buyables[23].effect)

                                return ret
                        },
                        unlocked(){
                                if (hasMilestone("cells", 13)) return false
                                return player.mu.best.gte(28) || player.a.unlocked
                        },
                        canAfford:() => player.p.points.gte(tmp.mu.buyables[22].cost) && !hasMilestone("cells", 13),
                        buy(){
                                if (!this.canAfford()) return
                                player.mu.buyables[22] = player.mu.buyables[22].plus(1)
                                if (!hasUpgrade("mu", 33)) player.p.points = player.p.points.sub(tmp.mu.buyables[22].cost)
                                doReset("mu", true)
                        },
                        base(){
                                let ret = new Decimal(2)

                                if (hasUpgrade("p", 35)) ret = ret.plus(.05)
                                
                                return ret
                        },
                        effect(){
                                return tmp.mu.buyables[22].base.times(player.mu.buyables[22])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.mu.buyables[22]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.mu.buyables[22].effect) + " to µ → ΔP base</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mu", 22)) + " Phosphorus</b><br>"
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.mu.buyables[22].base) + "*x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e597*20^(x<sup>1+x/" + formatWhole(tmp.mu.buyables[22].expDiv) + "</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("597", "599")
                                if (hasUpgrade("mu", 34)) cost2 = cost2.slice(6,)
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                23: {
                        title: "P → ΔN",
                        cost(){
                                let amt = getBuyableAmount("mu", 23)
                                let exp = amt.div(tmp.mu.buyables[23].expDiv).plus(1)
                                let init= amt.pow(exp)
                                let base = new Decimal(player.extremeMode ? "1e819" : "1e814")
                                if (hasUpgrade("mu", 34)) base = decimalOne
                                return base.times(Decimal.pow(player.extremeMode ? 1e126 : 5e90, init))
                        },
                        expDiv(){
                                let ret = new Decimal(20)

                                return ret
                        },
                        unlocked(){
                                if (hasMilestone("cells", 13)) return false
                                return player.mu.best.gte(33) || player.a.unlocked
                        },
                        canAfford:() => player.p.points.gte(tmp.mu.buyables[23].cost) && !hasMilestone("cells", 13),
                        buy(){
                                if (!this.canAfford()) return
                                player.mu.buyables[23] = player.mu.buyables[23].plus(1)
                                if (!hasUpgrade("mu", 33)) player.p.points = player.p.points.sub(tmp.mu.buyables[23].cost)
                                doReset("mu", true)
                        },
                        base(){
                                return decimalOne
                        },
                        effect(){
                                return tmp.mu.buyables[23].base.times(player.mu.buyables[23])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.mu.buyables[23]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.mu.buyables[23].effect) + " to prior exponent dividers</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mu", 23)) + " Phosphorus</b><br>"
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.mu.buyables[23].base) + "*x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e814*5e90^(x<sup>1+x/" + formatWhole(tmp.mu.buyables[23].expDiv) + "</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("814*5e90", "819*1e126")
                                if (hasUpgrade("mu", 34)) cost2 = cost2.slice(6,)
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                31: {
                        title: "N → Δµ",
                        cost(){
                                let amt = getBuyableAmount("mu", 31)
                                let exp = amt.div(tmp.mu.buyables[31].expDiv)
                                if (hasUpgrade("d", 31)) return Decimal.pow(1e5, exp).floor()
                                if (hasUpgrade("d", 25)) return amt.pow(exp).floor()
                                let init= amt.pow(exp.plus(2))
                                let base = player.extremeMode ? 69 : 65
                                return new Decimal(base).plus(init).floor()
                        },
                        expDiv(){
                                let ret = new Decimal(15)

                                if (hasMilestone("a", 20)) ret = ret.plus(tmp.l.buyables[33].effect)

                                return ret
                        },
                        unlocked(){
                                return player.mu.best.gte(65) || player.a.unlocked
                        },
                        canAfford:() => player.mu.points.gte(tmp.mu.buyables[31].cost),
                        buy(){
                                if (!this.canAfford()) return
                                if (hasMilestone("cells", 57)) {
                                        let amt = player.mu.points
                                        let expDiv = tmp.mu.buyables[31].expDiv
                                        let base = 1e5
                                        let ma = amt.log(base).times(expDiv).plus(1).floor()
                                        player.mu.buyables[31] = player.mu.buyables[31].max(ma)
                                } else {
                                        player.mu.buyables[31] = player.mu.buyables[31].plus(1)
                                        if (!hasUpgrade("mu", 33)) {
                                                player.mu.points = player.mu.points.sub(tmp.mu.buyables[31].cost)
                                        }
                                        doReset("mu", true)
                                        if (hasMilestone("d", 15)) {
                                                let x = player.mu.buyables[31]
                                                let diff = new Decimal(20)
                                                if (hasMilestone("d", 16))      diff = new Decimal(100)
                                                if (player.extremeMode && hasMilestone("cells", 1)) {
                                                                                diff = diff.times(10)
                                                } 
                                                if (hasMilestone("d", 28))      diff = diff.times(20)
                                                if (hasMilestone("cells", 4) && !player.extremeMode) {
                                                                                diff = diff.times(10)
                                                }
                                                if (hasChallenge("l", 101))     diff = diff.times(50)
                                                if (hasChallenge("l", 102))     diff = diff.times(50)
                                                if (hasUpgrade("sci", 534))     diff = diff.times(100)
                                                if (hasMilestone("cells", 49) && player.extremeMode) {
                                                                                diff = diff.times(100)
                                                }
                                                                                diff = diff.times(layers.l.grid.getGemEffect(702))

                                                diff = diff.floor()
                                                player.mu.buyables[31] = new Decimal(x.div(diff).ceil().times(diff))
                                        }
                                }
                        },
                        base(){
                                if (hasChallenge("l", 61)) return tmp.l.challenges[61].reward
                                return player.n.points.max(10).log10()
                        },
                        effect(){
                                return tmp.mu.buyables[31].base.pow(player.mu.buyables[31]).min("ee20")
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.mu.buyables[31]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mu.buyables[31].effect) + " to Phosphorus</b><br>"
                                        if (hasChallenge("l", 61)) eff2 = eff2.replace("Phosphorus", "Protein")
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("mu", 31)) + " µ</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(Nitrogen)^x<br>" + format(tmp.mu.buyables[31].base) + "^x"
                                if (hasChallenge("l", 61)) eformula = eformula.slice(21,)

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "65+x<sup>2+x/" + formatWhole(tmp.mu.buyables[31].expDiv) + "</sup>" 
                                if (hasUpgrade("d", 25)) {
                                        cost2 = cost2.replace("65+", "")
                                        cost2 = cost2.replace("2+", "")
                                }
                                if (player.extremeMode) cost2 = cost2.replace("65", "69")
                                if (hasUpgrade("d", 31)) cost2 = cost2.replace("x", "100,000")
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                32: {
                        title: "N → ΔP",
                        cost(){
                                let amt = getBuyableAmount("mu", 32)
                                return tmp.mu.buyables[32].initialCost.times(Decimal.pow(tmp.mu.buyables[32].costBase, amt))
                        },
                        getMaxAfford(){
                                if (player.mu.points.lt(1)) return decimalZero
                                return player.mu.points.div(tmp.mu.buyables[32].initialCost).log(tmp.mu.buyables[32].costBase).floor().plus(1).max(0)
                        },
                        getMaxBulk(){
                                if (hasMilestone("d", 3) || hasUpgrade("cells", 11) || player.easyMode) return new Decimal(Infinity)
                                let ret = decimalOne

                                if (hasMilestone("l", 27)) ret = ret.times(5)
                                if (hasMilestone("l", 30)) ret = ret.times(5)
                                if (hasMilestone("a", 27)) ret = ret.times(5)

                                return ret
                        },
                        costBase(){
                                let ret = 10
                                if (hasUpgrade("mu", 41))       ret = 9
                                if (hasMilestone("l", 19))      ret = 8
                                if (hasMilestone("l", 20))      ret = 7
                                if (hasUpgrade("mu", 53))       ret = 6
                                if (hasUpgrade("p", 43))        ret = 5.5
                                if (hasUpgrade("p", 44))        ret = 5
                                if (hasUpgrade("p", 45))        ret = 4.5
                                if (hasUpgrade("p", 51))        ret = 4
                                return ret
                        },
                        initialCost(){
                                if (hasUpgrade("cells", 14)) return Decimal.pow(10, player.extremeMode ? -2e9 : -1e9)
                                let ret = new Decimal(1e4)
                                
                                ret = ret.div(tmp.mu.buyables[33].effect)
                                ret = ret.div(layers.l.grid.getGemEffect(201))

                                return ret
                        },
                        unlocked(){
                                return player.l.challenges[11] >= 10 || player.a.unlocked
                        },
                        canAfford:() => player.mu.points.gte(tmp.mu.buyables[32].cost) && (inChallenge("l", 11) || hasMilestone("l", 14)),
                        buy(){
                                if (!this.canAfford()) return
                                let data = tmp.mu.buyables[32]
                                let bulk = data.getMaxBulk.min(data.getMaxAfford.sub(player.mu.buyables[32]))
                                player.mu.buyables[32] = player.mu.buyables[32].plus(bulk)
                                if (!hasUpgrade("mu", 33)) player.mu.points = player.mu.points.sub(data.cost)
                                doReset("mu", true)
                        },
                        base(){
                                let ret = new Decimal(.01)
                                
                                if (hasMilestone("l", 16)) ret = ret.plus(.0001 * player.l.milestones.length)

                                return ret
                        },
                        effect(){
                                return tmp.mu.buyables[32].base.times(player.mu.buyables[32]).min(.5)
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.mu.buyables[32]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: -"
                                        let eff2 = format(tmp.mu.buyables[32].effect, 4) + " to µ cost exp</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("mu", 32)) + " µ</b><br>"

                                        let end = "Shift to see details"
                                        if (!hasMilestone("l", 14)) end += "<br>Note: Can only buy while in Dilation "
                                        return br + lvl + eff1 + eff2 + cost + end
                                }

                                let eformula = format(tmp.mu.buyables[32].base, 4)  + "*x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = format(tmp.mu.buyables[32].initialCost, 2, true) + "*"
                                cost2 += formatWhole(tmp.mu.buyables[32].costBase) + "<sup>x<sup>" 
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost + br
                                if (!hasMilestone("l", 14)) end += "Note: Can only buy while in Dilation<br>"
                                return br + end + "Effect is hardcapped at .5"
                        },
                },
                33: {
                        title: "N → ΔN",
                        cost(){
                                let amt = getBuyableAmount("mu", 33)
                                let init = hasUpgrade("l", 21) ? 1 : 1e4
                                return new Decimal(init).times(Decimal.pow(3, amt.pow(1.3)))
                        },
                        unlocked(){
                                return (player.l.challenges[11] >= 20 || player.a.unlocked) && !hasUpgrade("cells", 14)
                        },
                        getMaxAfford(){
                                let div = hasUpgrade("l", 21) ? 1 : 1e4
                                if (player.l.points.lt(div)) return decimalZero
                                return player.l.points.div(div).log(3).root(1.3).floor().plus(1).max(0)
                        },
                        canAfford:() => player.l.points.gte(tmp.mu.buyables[33].cost) && !hasUpgrade("cells", 14),
                        getMaxBulk(){
                                if (hasMilestone("d", 3) || hasUpgrade("cells", 11) || player.easyMode) return new Decimal(Infinity)
                                return decimalOne
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = tmp.mu.buyables[33]
                                let bulk = data.getMaxBulk.min(data.getMaxAfford.sub(player.mu.buyables[33]))
                                player.mu.buyables[33] = player.mu.buyables[33].plus(bulk)
                                player.l.points = player.l.points.sub(tmp.mu.buyables[33].cost)
                                doReset("mu", true)
                        },
                        base(){
                                let ret = new Decimal(2)

                                if (hasMilestone("l", 12))      ret = ret.plus(.1 * player.l.milestones.length)
                                if (hasUpgrade("p", 45))        ret = ret.plus(player.mu.buyables[33].times(.01))
                                                                ret = ret.plus(layers.l.grid.getGemEffect(103))
                                
                                return ret
                        },
                        effect(){
                                let ret = tmp.mu.buyables[33].base.pow(player.mu.buyables[33])
                                if (inChallenge("l", 11) && !hasMilestone("d", 17)) {
                                        if (hasMilestone("l", 23) && ret.gt(1e12)) {
                                                return ret.log10().sub(2).pow(12)
                                        }
                                        return ret.min(1e12)
                                }
                                return ret
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.mu.buyables[33]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: /"
                                        let eff2 = format(tmp.mu.buyables[33].effect) + " to N → ΔP cost</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("mu", 33)) + " Lives</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.mu.buyables[33].base, 4)  + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e4*3^(x<sup>1.2</sup>)" 
                                if (hasUpgrade("l", 21)) cost2 = cost2.slice(4,)
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                let ending = "<br>Note: if you are in Dilation then the effect is capped at 1e12"
                                if (hasMilestone("l", 23)) ending += "<br>x → (log10(x)-2)<sup>12</sup>"
                                if (hasMilestone("d", 17)) return br + end
                                return br + end + ending
                        },
                },
        },
        tabFormat: {
                "Upgrades": {
                        content: [
                                "main-display",
                                ["prestige-button", ""],
                                ["display-text",
                                        function(){
                                                return "You are gaining " + format(player.p.currentGainPerSec.times(tmp.p.getPassiveGainMult), 3) + " Phosphorus/s"
                                        }
                                ],
                                "blank", 
                                ["upgrades", [1,2,3,4,5,6,7]]
                        ],
                        unlocked(){
                                return true
                        },
                },
                "Milestones": {
                        content: [
                                "main-display",
                                "milestones",
                        ],
                        unlocked(){
                                return true
                        },
                },
                "Buyables": {
                        content: [
                                "main-display",
                                ["display-text", function(){
                                        if (player.mu.points.gt(1e10)) return "You are gaining an estimated " + format(tmp.mu.resetGain.sub(1).times(20)) + " µ/s"
                                        if (player.shiftAlias) return " " + format(player.p.currentGainPerSec.times(tmp.p.getPassiveGainMult), 3) + " Phosphorus/s"
                                        return "You have " + format(player.p.points) + " Phosphorus"
                                }],
                                ["buyables", [1,2,3]],
                        ],
                        unlocked(){
                                return hasUpgrade("mu", 21) || player.a.unlocked
                        },
                        shouldNotify(){
                                if (hasMilestone("l", 7)) return false

                                ids = [11, 12, 13, 21, 22, 
                                        23, 31, 32, 33]
                                for (i in ids) {
                                        id = ids[i]
                                        if (layers.mu.buyables[id] == undefined) continue
                                        if (!tmp.mu.buyables[id].unlocked) continue
                                        if (player.mu.buyables[id].neq(0)) continue
                                        if (tmp.mu.buyables[id].canAfford) return true
                                }
                                return false
                        },
                },
        },
        resetsNothing(){
                return hasUpgrade("mu", 34) || hasMilestone("l", 2) || player.or.unlocked
        },
        doReset(layer){
                if (layer != "mu") return
                player.p.points = decimalZero
                player.p.total = decimalZero
                player.p.best = decimalZero
                player.p.currentGainPerSec = decimalZero
                player.mu.time = 0
        },
})

addLayer("l", {
        name: "Lives", 
        symbol: "L", 
        position: 1, 
        startData(){ return {
                unlocked: false,
		points: decimalZero,
                best: decimalZero,
                total: decimalZero,
                abtime: 0,
                time: 0,
                times: 0,
                autotimes: 0,
                passiveTime: 0,
                activeChallengeID: 101,
                challengesDisplayState: 0,
        }},
        color: "#BE0E00",
        branches: [],
        requires:() => hasChallenge("l", 51) ? Decimal.pow(10, 1024) : Decimal.pow(2, 1024).pow10(), 
        resource: "Lives", 
        baseResource: "Points", 
        baseAmount(){return player.points},
        type: "custom",
        getResetGain(){
                let ret = tmp.l.getBaseGain.times(tmp.l.getGainMult)
                
                if (player.extremeMode) ret = ret.pow(.75)

                return ret.floor()
        },
        getBaseSubAmount(){
                let ret = new Decimal(9)

                if (hasMilestone("l", 29))      ret = ret.sub(player.l.buyables[23].div(5))
                                                ret = ret.sub(layers.l.grid.getGemEffect(402))
                if (hasUpgrade("l", 43))        ret = ret.sub(1)

                return ret
        },
        getBaseGain(){
                let pts = player.points
                let init = pts.max(10).log(10).log(2)
                if (init.lt(10)) return decimalZero
                if (init.lt(1024) && !(hasChallenge("l", 51) && !hasMilestone("or", 14))) return decimalZero

                if (!hasChallenge("l", 51) || hasMilestone("or", 14)) init = init.log(2)

                return init.sub(tmp.l.getBaseSubAmount).pow(tmp.l.getGainExp)
        },
        getGainExp(){
                let ret = new Decimal(.5)

                if (hasUpgrade("l", 23)) ret = ret.times(2)

                ret = ret.plus(tmp.l.buyables[13].effect)

                return ret
        },
        getGainMult(){ // life gain lifegain lgain l gain
                let ret = decimalOne

                                                ret = ret.times(tmp.l.challenges[11].rewardEffect)
                if (hasMilestone("l", 14))      ret = ret.times(Decimal.pow(1.25, player.mu.buyables[32]))
                if (hasMilestone("l", 15))      ret = ret.times(player.mu.buyables[31].max(1))
                                                ret = ret.times(tmp.l.buyables[11].effect)
                                                ret = ret.times(tmp.l.buyables[12].effect)
                                                ret = ret.times(tmp.l.buyables[21].effect)
                                                ret = ret.times(tmp.l.buyables[22].effect)
                                                ret = ret.times(tmp.l.buyables[31].effect)
                                                ret = ret.times(tmp.l.buyables[32].effect)
                                                ret = ret.times(layers.l.grid.getGemEffect(101))
                if (hasMilestone("l", 22)) {
                        let exp = player.mu.buyables[32].sub(40).max(0)
                                                ret = ret.times(Decimal.pow(1.5, exp))
                }
                if (hasMilestone("l", 37)) {
                        let sub = player.extremeMode ? 270 : 300
                        let exp = player.mu.buyables[32].sub(sub).max(0)
                                                ret = ret.times(Decimal.pow(2, exp))
                }
                if (true) {
                        let base204 = layers.l.grid.getGemEffect(204)
                                                ret = ret.times(base204.pow(tmp.l.getNonZeroGemCount))
                        let base505 = layers.l.grid.getGemEffect(505)
                                                ret = ret.times(base505.pow(getBuyableAmount("a", 21)))
                        let base807 = layers.l.grid.getGemEffect(807)
                                                ret = ret.times(base807.pow(getBuyableAmount("mu", 32)))
                }
                if (hasUpgrade("p", 52)) {
                        let exp = new Decimal(player.l.challenges[11]).sub(90).max(0)
                        let base = 2
                        if (player.extremeMode) base *= 2.5
                        if (hasUpgrade("p", 53)) base *= 2
                                                ret = ret.times(Decimal.pow(base, exp))
                }
                if (hasMilestone("l", 32)) {
                        let base = 2
                        if (hasMilestone("l", 33)) base *= 2
                        if (hasMilestone("l", 34)) base *= 2
                        if (hasMilestone("l", 35)) base *= 1.12
                                                ret = ret.times(Decimal.pow(base, player.l.milestones.length))
                }
                                                ret = ret.times(tmp.a.effect)
                if (hasMilestone("a", 3))       ret = ret.times(2021)
                if (hasMilestone("a", 21))      ret = ret.times(player.a.protein.points.max(1).min("1e2000"))
                                                ret = ret.times(tmp.d.effect[0] || 1)
                if (hasMilestone("d", 4))       ret = ret.times(tmp.a.buyables[13].effect)
                                                ret = ret.times(tmp.cells.effect)
                                                ret = ret.times(tmp.t.effect)
                                                ret = ret.times(tmp.or.effect)
                if (player.easyMode)            ret = ret.times(2)
                if (hasUpgrade("l", 22))        ret = ret.times(tmp.l.upgrades[22].effect)
                if (hasUpgrade("sci", 504))     ret = ret.times(tmp.sci.upgrades[504].effect)

                return ret.max(1)
        },
        getNextAt(){
                let gain = tmp.l.getResetGain.plus(1)

                if (player.extremeMode) gain = gain.root(.75)

                let reqInit = gain.div(tmp.l.getGainMult).max(1)
                let v1 = reqInit.root(tmp.l.getGainExp).plus(9)
                return Decimal.pow(2, Decimal.pow(2, v1)).pow10()
        },
        canReset(){
                return tmp.l.getResetGain.gt(0) && !hasUpgrade("or", 135)
        },
        effect(){
                if (inChallenge("l", 51) || hasChallenge("l", 51) || hasUpgrade("or", 135)) return decimalOne
                let amt = player.l.best

                if (amt.gt(1e5)) amt = amt.log10().times(4).sub(10).pow(5)

                return Decimal.pow(10, amt)
        },
        effectDescription(){
                if (inChallenge("l", 51) || hasChallenge("l", 51)) return ""
                return " multiplying all prior currencies by "  + format(tmp.l.effect) + "."
        },
        update(diff){
                let data = player.l
                
                if (player.points.max(10).log10().log(2).gte(1024)) data.unlocked = true
                data.best = data.best.max(data.points)

                let forceAbContent = hasMilestone("d", 1) || hasMilestone("or", 1)

                if (data.autobuyhco && hasMilestone("l", 2) || forceAbContent) {
                        let boughtYet = false
                        let hKeys = ["11", "12", "13", "14", "15", 
                                     "21", "22", "23", "24", "25", 
                                     "31", "32", "33", "34", "35", 
                                     "41", "42", "43", "44", "45", 
                                     "51", "52", "53", "54", "55", 
                                     "61", "62", "63", "64", "65", 
                                     "71", "72", "73", "74", "75", 
                                     "81", "82", "83", "84", "85"]

                        let coKeys = ["11", "12", "13", "14", "15", 
                                      "21", "22", "23", "24", "25", 
                                      "31", "32", "33", "34", "35"]
                        for (i in hKeys) {
                                if (boughtYet) break
                                id = hKeys[i]
                                boughtYet = buyUpg("h", id) 
                        }
                        for (i in coKeys) {
                                if (boughtYet) break
                                id = coKeys[i]
                                boughtYet = buyUpg("c", id) 
                                if (boughtYet) break
                                boughtYet = buyUpg("o", id) 
                        }
                }

                if (data.autobuynp && hasMilestone("l", 4) || forceAbContent) {
                        let boughtYet = false
                        let nKeys = ["11", "12", "13", "14", "15", 
                                     "21", "22", "23", "24", "25", 
                                     "31", "32", "33", "34", "35", 
                                     "41", "42", "43", "44", "45", 
                                     "51", "52", "53", "54", "55"]

                        let pKeys = ["11", "12", "13", "14", "15", 
                                      "21", "22", "23", "24", "25", 
                                      "31", "32", "33", "34", "35"]
                        if (player.extremeMode) {
                                pKeys = pKeys.concat(["101", "102", "103", "104", "105", 
                                                      "111", "112", "113", "114", "115"])
                        }
                        for (i in nKeys) {
                                if (boughtYet) break
                                id = nKeys[i]
                                boughtYet = buyUpg("n", id) 
                        }
                        for (i in pKeys) {
                                if (boughtYet) break
                                id = pKeys[i]
                                boughtYet = buyUpg("p", id) 
                        }
                }

                if (data.autobuymu && hasMilestone("l", 6) || forceAbContent) {
                        let boughtYet = false

                        let muKeys = ["11", "12", "13", "14", "15", 
                                      "21", "22", "23", "24", "25", 
                                      "31", "32", "33", "34", "35"]
                        for (i in muKeys) {
                                if (boughtYet) break
                                id = muKeys[i]
                                boughtYet = buyUpg("mu", id) 
                        }

                        let muBuyKeys = [11, 12, 13, 21,
                                         22, 23, 31,]
                        if (hasUpgrade("p", 51) || hasMilestone("a", 5) || forceAbContent) muBuyKeys.push(33)
                        for (i in muBuyKeys) {
                                if (!player.l.autobuymubuyables && !forceAbContent) break
                                if (hasMilestone("cells", 13) && muBuyKeys[i] < 31) continue
                                buyBuyable("mu", muBuyKeys[i])
                        }
                }

                if (data.autobuyntodp && hasMilestone("l", 17) || forceAbContent) {
                        if (tmp.mu.buyables[32].canAfford) {
                                layers.mu.buyables[32].buy()
                        }
                }

                let universalAllowed = !inChallenge("l", 11) || layers.l.grid.getGemEffect(407)

                if (hasMilestone("l", 21) && universalAllowed && data.time > 1 && !hasUpgrade("t", 151)) {
                        let str = "ee40"
                        if (hasUpgrade("l", 23))        str = "ee41"
                        if (hasMilestone("l", 22))      str = player.extremeMode ? "e2e41" : "ee43"
                        if (hasUpgrade("mu", 42) && player.extremeMode) {
                                                        str = "e7e41"
                        }
                        if (hasUpgrade("mu", 44) && player.extremeMode) {
                                                        str = "e2e42"
                        }
                        if (hasUpgrade("mu", 45) && player.extremeMode) {
                                                        str = "e3e42"
                        }
                        if (hasUpgrade("mu", 51) && player.extremeMode) {
                                                        str = "e2e44"
                        }
                        if (hasUpgrade("mu", 53) && player.extremeMode) {
                                                        str = "ee45"
                        } 
                        if (hasUpgrade("p", 41))        str = player.extremeMode ? "e4e45" : "ee45"
                        if (hasUpgrade("p", 54))        str = "ee46"
                        if (hasUpgrade("p", 55))        str = "ee47"
                        if (hasMilestone("l", 35))      str = "ee50"
                        if (hasMilestone("l", 36))      str = "ee51"

                        if (hasMilestone("l", 42) && player.p.best_over_amino.gt(str)) {
                                                        str = player.p.best_over_amino
                        }

                        player.p.points = player.p.points.max(str)
                }

                if (hasMilestone("a", 3) || hasMilestone("d", 1)) {
                        let a = 2 // the value of jumps

                        if (hasMilestone("a", 7)) a = 5
                        if (hasMilestone("d", 1)) a = 10

                        if (data.challenges[11] % a != 0) {
                                data.challenges[11] += 1
                        }
                }

                data.time += diff
                data.passiveTime += diff
                if (hasMilestone("l", 11)) {
                        let gain = tmp.l.getResetGain
                        if (data.passiveTime > 1) {
                                data.passiveTime += -1
                                data.times ++
                        } 
                        if (data.passiveTime > 10) data.passiveTime = 10

                        if (!hasMilestone("l", 13) || gain.times(1e4).lt(data.points) || hasMilestone("a", 3)) {
                                let netGain = gain.times(diff)
                                data.points = data.points.plus(netGain)
                                data.total = data.total.plus(netGain)
                        } else if (gain.gt(0)) {
                                let div = player.hardMode ? 100 : 1000
                                let totalLeft = Decimal.sub(1e4/div, data.points.div(gain).div(div))
                                if (diff < totalLeft) {
                                        let ng = tmp.l.getResetGain.times(diff).times(div)
                                        data.points = data.points.plus(ng)
                                        data.total = data.total.plus(ng)
                                } else {
                                        let ng = tmp.l.getResetGain.times(totalLeft.times(div-1).plus(diff))
                                        data.points = data.points.plus(ng)
                                        data.total = data.total.plus(ng)
                                }
                        }
                } else data.passiveTime = 0

                if (inChallenge("l", 12) && canCompleteChallenge("l", 12)) {
                        let gemPercentGainps = layers.l.grid.getGemEffect(205)
                        let gainId = player.l.activeChallengeID
                        let gemGain = gemPercentGainps.times(tmp.l.challenges[12].reward).times(diff)
                        player.l.grid[gainId].gems = player.l.grid[gainId].gems.plus(gemGain)
                }
        },
        row: 3, 
        prestigeButtonText(){
                let b = ""
                if (tmp.l.getResetGain.lt(1e3)) b = "<br>Next: " + format(tmp.l.getNextAt) + " points."

                return "Reset for <b>" + formatWhole(tmp.l.getResetGain) + "</b> Lives" + b
        },
        deactivated(){
                return hasUpgrade("or", 135)
        },
        layerShown(){
                if (tmp.l.deactivated) return false
                return player.l.unlocked
        },
        upgrades: {
                rows: 10,
                cols: 5,
                11: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Life I"
                        },
                        description(){
                                return "Life Milestone 1 effects Nitrogen Science gain"
                        },
                        cost:() => new Decimal(10),
                        unlocked(){
                                if (player.extremeMode && player.a.unlocked) return true
                                return player.extremeMode && hasMilestone("l", 8)
                        },
                }, // hasUpgrade("l", 11)
                12: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Life II"
                        },
                        description(){
                                return "Per upgrade you have one less token for prestige purposes and keep Nitrogen upgrades upon Life reset"
                        },
                        cost:() => new Decimal(30),
                        unlocked(){
                                if (player.extremeMode && player.a.unlocked) return true
                                return hasUpgrade("l", 11) && player.l.challenges[11] >= 2
                        },
                }, // hasUpgrade("l", 12)
                13: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Life III"
                        },
                        description(){
                                return "Remove .92 µ effect softcap and E buyables no longer cost anything"
                        },
                        cost:() => new Decimal(90),
                        unlocked(){
                                if (player.extremeMode && player.a.unlocked) return true
                                return hasUpgrade("l", 12) && player.l.challenges[11] >= 4
                        },
                }, // hasUpgrade("l", 13)
                14: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Life IV"
                        },
                        description(){
                                let a = "Every second Dilation completion makes Reuse base exponentiate point gain"
                                return a + br + "Currently: " + format(tmp.l.upgrades[14].effect)
                        },
                        cost:() => new Decimal(270),
                        effect(){
                                let lvls = Math.floor(player.l.challenges[11]/(hasUpgrade("l", 15) ? 1 : 2))
                                if (hasUpgrade("l", 43)) lvls += tmp.l.getNonZeroGemCount
                                if (hasMilestone("d", 20)) {
                                        let exp = tmp.l.getNonZeroGemCount ** 2 * lvls
                                        return Decimal.pow(player.d.milestones.length, exp).max(1)                               
                                }
                                if (hasUpgrade("sci", 453)) {
                                        let exp = lvls * tmp.sci.upgrades.proteinUpgradesLength ** 2
                                        return Decimal.pow(1.6, exp)
                                }
                                return tmp.sci.buyables[302].base.pow(lvls)
                        },
                        unlocked(){
                                if (player.extremeMode && player.a.unlocked) return true
                                return hasUpgrade("l", 13) && player.l.challenges[11] >= 7
                        },
                }, // hasUpgrade("l", 14)
                15: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Life V"
                        },
                        description(){
                                return "Life IV becomes every Dilation completion"
                        },
                        cost:() => new Decimal(300),
                        unlocked(){
                                if (player.extremeMode && player.a.unlocked) return true
                                return hasUpgrade("l", 14) && player.l.challenges[11] >= 9
                        },
                }, // hasUpgrade("l", 15)
                21: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Life VI"
                        },
                        description(){
                                return "Remove N → ΔN's base cost"
                        },
                        cost:() => new Decimal(713e5),
                        unlocked(){
                                if (player.extremeMode && player.a.unlocked) return true
                                return hasUpgrade("l", 15) && player.l.challenges[11] >= 30
                        },
                }, // hasUpgrade("l", 21)
                22: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Life VII"
                        },
                        description(){
                                let a = "µ cost base is 2 and each upgrade multiplies Life gain by Milestones/12"
                                return a + br + "Currently: " + format(tmp.l.upgrades[22].effect)
                        },
                        cost:() => new Decimal(1.91e14),
                        effect(){
                                let base = new Decimal(player.l.milestones.length).div(12).max(1)
                                return base.pow(player.l.upgrades.length)
                        },
                        unlocked(){
                                if (player.extremeMode && player.a.unlocked) return true
                                return hasUpgrade("l", 15) && player.l.challenges[11] >= 40
                        },
                }, // hasUpgrade("l", 22)
                23: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Life VIII"
                        },
                        description(){
                                return "Universe is ee41 and square base life gain"
                        },
                        cost:() => new Decimal(3e16),
                        unlocked(){
                                if (player.extremeMode && player.a.unlocked) return true
                                return hasUpgrade("l", 15) && player.l.challenges[11] >= 44
                        },
                }, // hasUpgrade("l", 23)
                24: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Life IX"
                        },
                        description(){
                                return "Life reset keeps content prior to tokens and you start with 200 tokens"
                        },
                        cost:() => new Decimal(1.92e17),
                        unlocked(){
                                if (player.extremeMode && player.a.unlocked) return true
                                return hasUpgrade("l", 15) && player.l.challenges[11] >= 48
                        },
                }, // hasUpgrade("l", 24)
                25: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Life X"
                        },
                        description(){
                                return "Remove α → ∂α's base cost"
                        },
                        cost:() => new Decimal(3.75e17),
                        unlocked(){
                                if (player.extremeMode && player.a.unlocked) return true
                                return hasUpgrade("l", 15) && player.l.challenges[11] >= 49
                        },
                }, // hasUpgrade("l", 25)
                31: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Life XI"
                        },
                        description(){
                                return "Remove α → ∂β's base cost"
                        },
                        cost:() => new Decimal(8.73e28),
                        unlocked(){
                                if (player.extremeMode && player.a.unlocked) return true
                                return hasUpgrade("l", 15) && player.l.challenges[11] >= 61
                        },
                }, // hasUpgrade("l", 31)
                32: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Life XII"
                        },
                        description(){
                                return "Per Dilation completion after 50 add .04 to its reward exponent"
                        },
                        cost:() => new Decimal(7.74e31),
                        unlocked(){
                                if (player.extremeMode && player.a.unlocked) return true
                                return hasUpgrade("l", 15) && player.l.challenges[11] >= 62
                        },
                }, // hasUpgrade("l", 32)
                33: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Life XIII"
                        },
                        description(){
                                return "Dilation completions after 60 scale 25% slower"
                        },
                        cost:() => new Decimal(4.31e33),
                        unlocked(){
                                if (player.extremeMode && player.a.unlocked) return true
                                return hasUpgrade("l", 15) && player.l.challenges[11] >= 64
                        },
                }, // hasUpgrade("l", 33)
                34: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Life XIV"
                        },
                        description(){
                                return "Per upgrade add 2 to Life Milestone 1's cap"
                        },
                        cost:() => new Decimal(1.11e34),
                        unlocked(){
                                if (player.extremeMode && player.a.unlocked) return true
                                return hasUpgrade("l", 15) && player.l.challenges[11] >= 66
                        },
                }, // hasUpgrade("l", 34)
                35: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Life XV"
                        },
                        description(){
                                return "Dilation completions scale 2% slower"
                        },
                        cost:() => new Decimal(5e51),
                        unlocked(){
                                if (player.extremeMode && player.a.unlocked) return true
                                return hasUpgrade("l", 15) && player.l.challenges[11] >= 77
                        },
                }, // hasUpgrade("l", 35)
                41: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Life XVI"
                        },
                        description(){
                                return "Remove α → ∂𝛾's base cost and add 10 to its exponential divider"
                        },
                        cost:() => new Decimal(1.8e261),
                        unlocked(){
                                if (player.extremeMode && player.a.unlocked) return true
                                return hasUpgrade("l", 35) && player.l.grid[101].gems.gt(0)
                        },
                }, // hasUpgrade("l", 41)
                42: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Life XVII"
                        },
                        description(){
                                return "Remove β → ∂α's base cost and add .011 to Constant's base"
                        },
                        cost:() => new Decimal(5e267),
                        unlocked(){
                                if (player.extremeMode && player.a.unlocked) return true
                                return hasUpgrade("l", 41)
                        },
                }, // hasUpgrade("l", 42)
                43: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Life XVIII"
                        },
                        description(){
                                return "Add 1 to base Life gain, remove β → ∂β's base cost, and Life IV counts non-0 gems"
                        },
                        cost:() => new Decimal("5e336"),
                        unlocked(){
                                if (player.extremeMode && player.a.unlocked) return true
                                return hasUpgrade("l", 42)
                        },
                }, // hasUpgrade("l", 43)
                44: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Life XIX"
                        },
                        description(){
                                return "Per upgrade add .001 to Constant base"
                        },
                        cost:() => new Decimal("6e492"),
                        unlocked(){
                                if (player.extremeMode && player.a.unlocked) return true
                                return hasUpgrade("l", 43)
                        },
                }, // hasUpgrade("l", 44)
                45: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Life XX"
                        },
                        description(){
                                return "β → ∂β levels exponentiate point gain"
                        },
                        cost:() => new Decimal("1e537"),
                        unlocked(){
                                if (player.extremeMode && player.a.unlocked) return true
                                return hasUpgrade("l", 44)
                        },
                }, // hasUpgrade("l", 45)
        },
        milestones: {
                1: {
                        requirementDescription(){
                                return "1 Life"
                        },
                        done(){
                                return player.l.points.gte(1)
                        },
                        unlocked(){
                                return true
                        },
                        effect(){
                                let cap = 50

                                if (hasMilestone("l", 11))      cap += 5 * player.l.milestones.length
                                if (hasUpgrade("l", 34))        cap += 2 * player.l.upgrades.length
                                if (player.extremeMode)         cap += layers.l.grid.getGemEffect(301)
                                if (hasMilestone("a", 14) && player.extremeMode) {
                                                                cap += tmp.l.getNonZeroGemCount
                                }
                                if (hasUpgrade("sci", 443))     cap += tmp.sci.upgrades.proteinUpgradesLength
                                
                                let exp = Math.min(cap, player.l.times)
                                if (hasUpgrade("d", 11)) exp = cap
                                return Decimal.pow(1.01, exp)
                        },
                        effectDescription(){
                                let a = "Reward: Per reset (up to 50) exponentiate prior currencies ^1.01 (same as Life effect), gain 10x D and E Points, and triple Phosphorus and Nitrogen reset times.<br>"
                                return a + "Currently: " + format(tmp.l.milestones[1].effect, 4)
                        },
                }, // hasMilestone("l", 1)
                2: {
                        requirementDescription(){
                                return "2 Lives"
                        },
                        done(){
                                return player.l.points.gte(2)
                        },
                        unlocked(){
                                return true
                        },
                        toggles:() => [["l", "autobuyhco"]],
                        effectDescription(){
                                return "Reward: Autobuy Hydrogen, Carbon, and Oxygen upgrades, µ resets nothing, and you can autobuy the first level of associativity of multiplication."
                        },
                }, // hasMilestone("l", 2)
                3: {
                        requirementDescription(){
                                return "3 Lives"
                        },
                        done(){
                                return player.l.points.gte(3)
                        },
                        unlocked(){
                                return true
                        },
                        toggles:() => player.extremeMode ? [["sci", "autobuyreuse"]] : [],
                        effectDescription(){
                                let a = "Reward: Keep µ XV, Nitrogen resets nothing,"
                                if (player.extremeMode) a += " autobuy Reuse, "
                                return a + " and coin content is kept until Life reset."
                        },
                }, // hasMilestone("l", 3)
                4: {
                        requirementDescription(){
                                return "4 Lives"
                        },
                        done(){
                                return player.l.points.gte(4)
                        },
                        unlocked(){
                                return true
                        },
                        toggles:() => [["l", "autobuynp"]],
                        effectDescription(){
                                return "Reward: Keep Nitrogen challenges upon Phosphorus and Life resets, and autobuy Nitrogen and Phosphorus upgrades."
                        },
                }, // hasMilestone("l", 4)
                5: {
                        requirementDescription(){
                                return "5 Lives"
                        },
                        done(){
                                return player.l.points.gte(5)
                        },
                        unlocked(){
                                return true
                        },
                        toggles:() => player.extremeMode ? [["sci", "autobuyrecycle"]] : [],
                        effectDescription(){
                                let a = "Reward: Start with 1 fuel, keep Corn and Nitrogen milestones,"
                                if (player.extremeMode) a += " autobuy Recycle,"
                                return a + " and keep a Phosphorus milestone per reset."
                        },
                }, // hasMilestone("l", 5)
                6: {
                        requirementDescription(){
                                return "6 Lives"
                        },
                        done(){
                                return player.l.points.gte(6)
                        },
                        unlocked(){
                                return true
                        },
                        toggles:() => [["l", "autobuymu"], ["l", "autobuymubuyables"]],
                        effectDescription(){
                                return "Reward: Autobuy µ upgrades, autobuy µ buyables, and keep Phosphorus III."
                        },
                }, // hasMilestone("l", 6)
                7: {
                        requirementDescription(){
                                return "7 Lives"
                        },
                        done(){
                                return player.l.points.gte(7)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Keep C and D point upgrades."
                        },
                }, // hasMilestone("l", 7)
                8: {
                        requirementDescription(){
                                return "10 Lives"
                        },
                        done(){
                                return player.l.points.gte(10)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Keep token and µ milestones and unlock a challenge."
                        },
                }, // hasMilestone("l", 8)
                9: {
                        requirementDescription(){
                                if (player.extremeMode) return "6 Dilation completions"
                                return "12 Dilation completions"
                        },
                        done(){
                                return player.l.challenges[11] >= (player.extremeMode ? 6 : 12)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Every Dilation completion makes you have one less effective token for prestige purposes."
                                return "Reward: Every other Dilation completion makes you have one less effective token for prestige purposes."
                        },
                }, // hasMilestone("l", 9)
                10: {
                        requirementDescription(){
                                if (player.extremeMode) return "8 Dilation completions"
                                return "13 Dilation completions"
                        },
                        done(){
                                return player.l.challenges[11] >= (player.extremeMode ? 8 : 13)
                        },
                        unlocked(){
                                return true
                        },
                        effect(){
                                let ret = new Decimal("1ee200")
                                if (player.extremeMode)         ret = new Decimal("1e3e130")
                                if (hasMilestone("l", 10))      ret = ret.pow(Decimal.pow(3, player.l.challenges[11]))
                                
                                return ret
                        },
                        effectDescription(){
                                let a = "Reward: Token costs are floored instead of rounded and cube the Oxygen-Carbon symmetry cap per Dilation completion."
                                return a + br + "Currently: " + format(tmp.l.milestones[10].effect)
                        },
                }, // hasMilestone("l", 10)
                11: {
                        requirementDescription(){
                                if (player.extremeMode) return "11 Dilation completions"
                                return "14 Dilation completions"
                        },
                        done(){
                                return player.l.challenges[11] >= (player.extremeMode ? 11 : 14)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: 1 Life milestone cap is increased by 5 per milestone, generate a Life reset every second, and gain 100% of Life gain upon reset per second."
                        },
                }, // hasMilestone("l", 11)
                12: {
                        requirementDescription(){
                                return "24 Dilation completions"
                        },
                        done(){
                                return player.l.challenges[11] >= 24
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Add .1 to the N → ΔN base per milestone."
                        },
                }, // hasMilestone("l", 12)
                13: {
                        requirementDescription(){
                                return "25 Dilation completions"
                        },
                        done(){
                                return player.l.challenges[11] >= 25
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: If you have less than 10,000 seconds worth of Life production then gain " + formatWhole(player.hardMode ? 100 : 1000) + "x."
                        },
                }, // hasMilestone("l", 13)
                14: {
                        requirementDescription(){
                                if (player.extremeMode) return "28 Dilation completions"
                                return "26 Dilation completions"
                        },
                        done(){
                                if (player.extremeMode) return player.l.challenges[11] >= 28
                                if (player.l.challenges[11] > 26) return true
                                if (!inChallenge("l", 11)) return
                                if (player.points.lt("1ee305")) return
                                return player.l.challenges[11] >= 26
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let b = "Note: Requires having 1ee305 Points in Dilation with 26 completions."
                                let a = "Reward: You can buy N → ΔP outside of Dilation and each level multiplies Life gain by 1.25."
                                if (player.extremeMode) return a 
                                return b + br + a
                        },
                }, // hasMilestone("l", 14)
                15: {
                        requirementDescription(){
                                if (player.extremeMode) return "1.00e21 µ"
                                return "5.00e21 µ"
                        },
                        done(){
                                return player.mu.points.gte(player.extremeMode ? 1e21 : 5e21)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: N → Δµ levels multiply Life gain."
                        },
                }, // hasMilestone("l", 15)
                16: {
                        requirementDescription(){
                                if (player.extremeMode) return "2.93e12 Lives"
                                return "2.00e22 µ"
                        },
                        done(){
                                if (player.extremeMode) return player.l.points.gte(2.93e12)
                                return player.mu.points.gte(2e22)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Each milestone adds .0001 to N → ΔP base."
                        },
                }, // hasMilestone("l", 16)
                17: {
                        requirementDescription(){
                                if (player.extremeMode) return "4.50e12 Lives"
                                return "2.70e12 Lives"
                        },
                        done(){
                                return player.l.points.gte(player.extremeMode ? 4.5e12 : 2.7e12)
                        },
                        unlocked(){
                                return true
                        },
                        toggles: () => [["l", "autobuyntodp"]],
                        effectDescription(){
                                return "Reward: Autobuy N → ΔP."
                        },
                }, // hasMilestone("l", 17)
                18: {
                        requirementDescription(){
                                if (player.extremeMode) return "3.00e23 µ"
                                return "1.00e25 µ"
                        },
                        done(){
                                return player.mu.points.gte(player.extremeMode ? 3e23 : 1e25)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let a = "Reward: Reduce token cost exponent to .49"
                                if (player.extremeMode) return a + "."
                                return a + ", square point gain, and raise point gain ^1.5 if you are at exactly 33 completions."
                        },
                }, // hasMilestone("l", 18)
                19: {
                        requirementDescription(){
                                if (player.extremeMode) return "7.00e24 µ"
                                return "e1.00e1000 Points"
                        },
                        done(){
                                if (player.extremeMode) return player.mu.points.gte(7e24)
                                return player.points.gte("ee1000")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: N → ΔP cost base is 8."
                        },
                }, // hasMilestone("l", 19)
                20: {
                        requirementDescription(){
                                if (player.extremeMode) return "7.00e25 µ"
                                return "e3.20e306 Points"
                        },
                        done(){
                                if (player.extremeMode) return player.mu.points.gte(7e25)
                                if (player.l.challenges[11] > 35) return true
                                if (!inChallenge("l", 11)) return false
                                if (player.l.challenges[11] < 35) return false
                                return player.points.gte("e3.2e306")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let b = "Note: Requires having 1e3.2e306 being in Dilation with 35 completions." + br
                                let a = "Reward: N → ΔP cost base is 7."
                                if (player.extremeMode) return a
                                return b + a
                        },
                }, // hasMilestone("l", 20)
                21: {
                        requirementDescription(){
                                if (player.extremeMode) return "39 Dilation completions"
                                return "e9.50e305 Points"
                        },
                        done(){
                                if (player.l.challenges[11] > (player.extremeMode ? 38 : 39)) return true
                                if (!inChallenge("l", 11)) return false
                                if (player.l.challenges[11] < 39) return false
                                return player.points.gte("e9.5e305")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let b = "Note: Requires having being in Dilation with 39 completions. This will be refered to as \"Universe\"" + br
                                if (player.extremeMode) b = b.slice(61, )
                                let a = "Reward: If not in a challenge, you get ee40 Phosphorus after one second."
                                return b + a
                        },
                }, // hasMilestone("l", 21)
                22: {
                        requirementDescription(){
                                if (player.extremeMode) return "7.77e20 Lives"
                                return "1.00e31 µ"
                        },
                        done(){
                                if (player.extremeMode) return player.l.points.gte(7.77e20)
                                return player.mu.points.gte(1e31)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let a = "Reward: Each N → ΔP after 40 multiplies life gain by 1.5 and Universe becomes ee43."
                                if (player.extremeMode) a = a.replace("ee43", "e2e41")
                                return a
                        },
                }, // hasMilestone("l", 22)
                23: {
                        requirementDescription(){
                                if (player.extremeMode) return "2.75e25 Lives"
                                return "3.45e31 Lives"
                        },
                        done(){
                                if (player.extremeMode) return player.l.points.gte(2.75e25)
                                return player.l.points.gte(3.45e31)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: N → ΔN in Dilation is softcapped instead of hardcapped x → (log10(x)-2)<sup>12</sup>."
                        },
                }, // hasMilestone("l", 23)
                24: {
                        requirementDescription(){
                                if (player.extremeMode) return "1.71e45 Lives"
                                return "1.70e50 Lives"
                        },
                        done(){
                                if (player.extremeMode) return player.l.points.gte(1.71e45)
                                return player.l.points.gte(1.7e50)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Token cost exponent is .47."
                        },
                }, // hasMilestone("l", 24)
                25: {
                        requirementDescription(){
                                if (player.extremeMode) return "2.26e116 Lives"
                                return "5.00e113 Lives"
                        },
                        done(){
                                if (player.extremeMode) return player.l.points.gte(2.26e116)
                                return player.l.points.gte(5e113)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: 𝛾 → ∂α's log10 becomes ln."
                                return "Reward: Token cost exponent is .46 and 𝛾 → ∂α's log10 becomes ln."
                        },
                }, // hasMilestone("l", 25)
                26: {
                        requirementDescription(){
                                if (player.extremeMode) return "9.75e126 Lives"
                                return "2.50e125 Lives"
                        },
                        done(){
                                if (player.extremeMode) return player.l.points.gte(9.75e126)
                                return player.l.points.gte(2.5e125)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: 𝛾 → ∂α's ln becomes log2."
                                return "Reward: Token cost exponent is .45 and 𝛾 → ∂α's ln becomes log2."
                        },
                }, // hasMilestone("l", 26)
                27: {
                        requirementDescription(){
                                if (player.extremeMode) return "7.40e128 Lives"
                                return "4.00e128 Lives"
                        },
                        done(){
                                if (player.extremeMode) return player.l.points.gte(7.4e128)
                                return player.l.points.gte(4e128)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: α → ∂β log10 becomes log7 and you bulk 5x N → ΔP."
                        },
                }, // hasMilestone("l", 27)
                28: {
                        requirementDescription(){
                                if (player.extremeMode) return "5.00e136 Lives"
                                return "1.00e148 Lives"
                        },
                        done(){
                                if (player.extremeMode) return player.l.points.gte(5e136)
                                return player.l.points.gte(1e148)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: α → ∂β log7 becomes log5."
                        },
                }, // hasMilestone("l", 28)
                29: {
                        requirementDescription(){
                                if (player.extremeMode) return "6.20e159 Lives"
                                return "1.00e157 Lives"
                        },
                        done(){
                                if (player.extremeMode) return player.l.points.gte(6.2e159)
                                return player.l.points.gte(1e157)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Add .2 to the base of base Life gain per β → ∂𝛾 and token cost exponent is .43."
                        },
                }, // hasMilestone("l", 29)
                30: {
                        requirementDescription(){
                                if (player.extremeMode) return "2.25e168 Lives"
                                return "1.00e182 Lives"
                        },
                        done(){
                                if (player.extremeMode) return player.l.points.gte(2.25e168)
                                return player.l.points.gte(1e182)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: α → ∂β log5 becomes log4, token cost exponent is .41 and you bulk 5x N → ΔP."
                        },
                }, // hasMilestone("l", 30)
                31: {
                        requirementDescription(){
                                if (player.extremeMode) return "2.76e181 Lives"
                                return "4.00e198 Lives"
                        },
                        done(){
                                if (player.extremeMode) return player.l.points.gte(2.76e181)
                                return player.l.points.gte(4e198)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: α → ∂β log4 becomes ln and token cost exponent is .4 and point gain is raised ^9 per Dilation completion over 100."
                                return "Reward: α → ∂β log4 becomes ln and token cost exponent is .4 and point gain is raised ^100 per Dilation completion over 100."
                        },
                }, // hasMilestone("l", 31)
                32: {
                        requirementDescription(){
                                if (player.extremeMode) return "5.00e191 Lives"
                                return "2.00e219 Lives"
                        },
                        done(){
                                if (player.extremeMode) return player.l.points.gte(5e191)
                                return player.l.points.gte(2e219)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Point gain is raised ^10 per Dilation completion over 100 and per milestone double life gain."
                        },
                }, // hasMilestone("l", 32)
                33: {
                        requirementDescription(){
                                if (player.extremeMode) return "1.00e214 Lives"
                                return "2.50e242 Lives"
                        },
                        done(){
                                if (player.extremeMode) return player.l.points.gte(1e214)
                                return player.l.points.gte(2.5e242)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let a = "Reward: Point gain is raised Dilation completions/100 per N → ΔN level and per milestone double life gain."
                                if (player.extremeMode) a = a.replace("100", "98")
                                return a
                        },
                }, // hasMilestone("l", 33)
                34: {
                        requirementDescription(){
                                if (player.extremeMode) return "1.00e229 Lives"
                                return "2.00e261 Lives"
                        },
                        done(){
                                if (player.extremeMode) return player.l.points.gte(1e229)
                                return player.l.points.gte(2e261)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Point gain is raised ^10 per Dilation completion over 100 and per milestone double life gain."
                        },
                }, // hasMilestone("l", 34)
                35: {
                        requirementDescription(){
                                if (player.extremeMode) return "4.00e290 Lives"
                                return "5.00e311 Lives"
                        },
                        done(){
                                if (player.extremeMode) return player.l.points.gte(4e290)
                                return player.l.points.gte("5e311")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Per milestone multiple life gain by 1.12 and Universe is ee50."
                        },
                }, // hasMilestone("l", 35)
                36: {
                        requirementDescription(){
                                if (player.extremeMode) return "5 C21 Gems and 1.00e293 Lives"
                                return "5 C12 Gems"
                        },
                        done(){
                                if (player.extremeMode) return player.l.grid[201].gems.gte(5) && player.l.points.gte("1e293")
                                return player.l.grid[102].gems.gte(5) && player.l.points.gte("5e311")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: α → ∂β ln becomes log2, Universe is ee51."
                                return "Reward: α → ∂β ln becomes log2, Universe is ee51, and raise point gain ^1.1.<br>Note: Requires 5e311 Lives."
                        },
                }, // hasMilestone("l", 36)
                37: {
                        requirementDescription(){
                                if (player.extremeMode) return "5.00e345 Lives"
                                return "3.00e382 Lives"
                        },
                        done(){
                                if (player.extremeMode) return player.l.points.gte("5e345")
                                return player.l.points.gte("3e382")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Each N → ΔP level after 280 doubles Life gain."
                                return "Reward: Each N → ΔP level after 300 doubles Life gain."
                        },
                }, // hasMilestone("l", 37)
                38: {
                        requirementDescription(){
                                if (player.extremeMode) return "1.00e378 Lives"
                                return "1.00e434 Lives"
                        },
                        done(){
                                if (player.extremeMode) return player.l.points.gte("1e378")
                                return player.l.points.gte("1e434")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: β → ∂α's log10 becomes log8 and remove 𝛾 → ∂α's base cost."
                                return "Reward: β → ∂α's log10 becomes log8."
                        },
                }, // hasMilestone("l", 38)
                39: {
                        requirementDescription(){
                                if (player.extremeMode) return "1.00e409 Lives"
                                return "1.00e486 Lives"
                        },
                        done(){
                                if (player.extremeMode) return player.l.points.gte("1e409")
                                return player.l.points.gte("1e486")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: β → ∂α's log8 becomes log6 and remove 𝛾 → ∂β's base cost."
                                return "Reward: β → ∂α's log8 becomes log6."
                        },
                }, // hasMilestone("l", 39)
                40: {
                        requirementDescription(){
                                if (player.extremeMode) return "1.00e419 Lives"
                                return "1.00e500 Lives"
                        },
                        done(){
                                if (player.extremeMode) return player.l.points.gte("1e419")
                                return player.l.points.gte("1e500")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: β → ∂α's log6 becomes log5 and remove 𝛾 → ∂𝛾's base cost."
                                return "Reward: β → ∂α's log6 becomes log5."
                        },
                }, // hasMilestone("l", 40)
                41: {
                        requirementDescription(){
                                 if (player.extremeMode) return "1.00e476 Lives"
                                return "1.00e532 Lives"
                        },
                        done(){
                                if (player.extremeMode) return player.l.points.gte("1e476")
                                return player.l.points.gte("1e532")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let a = "Reward: β → ∂α's log5 becomes log4 and you have one less token for prestige purposes"
                                if (player.extremeMode) return a + " per non-zero gem."
                                return a + "."
                        },
                }, // hasMilestone("l", 41)
                42: {
                        requirementDescription(){
                                if (player.extremeMode) return "1.00e524 Lives"
                                return "1.00e547 Lives"
                        },
                        done(){
                                if (player.extremeMode) return player.l.points.gte("1e524")
                                return player.l.points.gte("1e547")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: β → ∂α's log4 becomes log3 and Universe becomes best Phosphorus over Amino reset.<br>Note: Amino is unlocked by getting a C33 gem."
                        },
                }, // hasMilestone("l", 42)
        },
        buyables: {
                rows: 3,
                cols: 3,
                getBuyableExponent(){
                        let ret = new Decimal(2.5)
                        
                        if (hasMilestone("cells", 30))  ret = new Decimal(2.3)
                        if (hasMilestone("cells", 55))  ret = new Decimal(2.2)
                        if (hasUpgrade("cells", 215))   ret = new Decimal(2)
                        
                        if (hasUpgrade("t", 54))        ret = ret.sub(.1)

                        return ret
                }, // tmp.l.buyables.getBuyableExponent
                getMaxBulk(){
                        let maxBulk = player.extremeMode ? 10 : 20

                        if (layers.l.grid.getGemEffect(507) || player.extremeMode) {
                                                        maxBulk *= 50
                        }
                        if (layers.l.grid.getGemEffect(701) && player.extremeMode) {
                                                        maxBulk *= 2
                        }
                        if (hasUpgrade("cells", 11))    maxBulk *= 50
                        if (hasMilestone("cells", 27))  maxBulk *= 20
                        if (hasMilestone("cells", 28))  maxBulk *= 20
                        if (hasMilestone("cells", 30))  maxBulk *= 1000

                        if (player.easyMode)            maxBulk = 2e10

                        return maxBulk
                }, // tmp.l.buyables.getMaxBulk
                11: {
                        title: "α → ∂α",
                        cost(){
                                let init = new Decimal(player.extremeMode ? 1e8 : 7e11)
                                if (hasUpgrade("l", 25)) init = decimalOne
                                let base = new Decimal(player.extremeMode ? 2.5 : 4)
                                let id = 11
                                let expDiv = tmp.l.buyables[id].expDiv
                                let amt = getBuyableAmount("l", id)
                                if (hasChallenge("l", 101)) {
                                        return init.times(base.pow(amt.pow(tmp.l.buyables.getBuyableExponent).div(expDiv)))
                                }
                                let expBase = hasChallenge("l", 81) ? new Decimal(500) : amt
                                let exp2 = amt.div(expDiv).plus(1)
                                return init.times(Decimal.pow(base, expBase.pow(exp2)))
                        },
                        getMaxAfford(){
                                if (!hasMilestone("d", 19)) return
                                let pts = player.l.points
                                let init = player.extremeMode ? 1e8 : 7e11
                                if (hasUpgrade("l", 25)) init = 1
                                let base = player.extremeMode ? 2.5 : 4
                                if (pts.lt(init)) return decimalZero
                                if (hasChallenge("l", 101)) return pts.div(init).log(base).times(tmp.l.buyables[11].expDiv).root(tmp.l.buyables.getBuyableExponent).plus(1).floor()
                                return pts.div(init).log(base).log(500).sub(1).times(tmp.l.buyables[11].expDiv).plus(1).floor()
                        },
                        expDiv(){
                                let ret = new Decimal(20)

                                if (!inChallenge("l", 112) && !hasChallenge("l", 112)) {
                                        ret = ret.plus(tmp.l.buyables[13].effect)
                                }
                                ret = ret.plus(tmp.l.buyables[23].effect)
                                ret = ret.plus(tmp.l.buyables[33].effect)
                                if (player.extremeMode) ret = ret.plus(layers.l.grid.getGemEffect(302))
                                
                                return ret.min(1e9)
                        },
                        unlocked(){
                                return player.l.challenges[11] >= 30 || player.a.unlocked
                        },
                        canAfford:() => player.l.points.gte(tmp.l.buyables[11].cost),
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.l
                                let id = 11
                                let ma = tmp.l.buyables[id].getMaxAfford
                                let maxBulk = tmp.l.buyables.getMaxBulk
                                let up 
                                if (hasMilestone("cells", 59)) up = ma.sub(data.buyables[id]).max(0)
                                else up = hasMilestone("d", 19) ? ma.sub(data.buyables[id]).min(maxBulk) : 1
                                data.buyables[id] = data.buyables[id].plus(up)
                                if (!hasUpgrade("cells", 413)) {
                                        data.points = data.points.sub(tmp.l.buyables[id].cost)
                                }
                        },
                        getLogBase(){
                                let ret = 10
                                if (hasUpgrade("mu", 42)) ret = 8
                                if (hasUpgrade("mu", 43)) ret = 7
                                if (hasUpgrade("mu", 45)) ret = 6
                                if (hasUpgrade("mu", 51)) ret = 5
                                if (hasUpgrade("mu", 54)) ret = 4
                                if (hasUpgrade("mu", 55)) ret = 3
                                if (hasMilestone("a", 15)) ret = Math.E
                                if (hasMilestone("a", 16)) ret = 2
                                return ret
                        },
                        base(){
                                let logBase = tmp.l.buyables[11].getLogBase

                                let ret = player.points.max(10).log(logBase).max(10).log(logBase)
                                
                                if (!layers.l.grid.getGemEffect(207)) ret = ret.max(10).log(logBase)
                                
                                return ret
                        },
                        effect(){
                                return tmp.l.buyables[11].base.pow(player.l.buyables[11])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.l.buyables[11]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.l.buyables[11].effect) + " to Life gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("l", 11)) + " Lives</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "logINS(logINS(logINS(Points)))^x<br>" + format(tmp.l.buyables[11].base) + "^x"
                                if (layers.l.grid.getGemEffect(207)) eformula = eformula.replace("logINS(Points)", "Points")
                                let f = "log" + formatWhole(tmp.l.buyables[11].getLogBase)
                                if (f == "log2.72") f = "ln"
                                eformula = eformula.replaceAll("logINS", f)
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "7e11*4^(x<sup>1+x/" + formatWhole(tmp.l.buyables[11].expDiv) + "</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("7e11*4", "1e8*2.5")
                                if (hasUpgrade("l", 25)) cost2 = cost2.slice(4,)
                                if (hasChallenge("l", 81)) cost2 = cost2.replace("(x", "(500")
                                if (hasChallenge("l", 101)) {
                                        cost2 = cost2.replace("500<sup>1+x", "x<sup>2.5</sup>")
                                        cost2 = cost2.replace("</sup>)", ")")
                                }
                                if (hasMilestone("cells", 30)) cost2 = cost2.replace("2.5<", format(tmp.l.buyables.getBuyableExponent, 1) + "<")
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                12: {
                        title: "α → ∂β",
                        cost(){
                                let init = new Decimal(1e16)
                                let base = new Decimal(5)
                                if (player.extremeMode) base = new Decimal(2)
                                if (hasUpgrade("l", 31)) init = decimalOne
                                let id = 12
                                let expDiv = tmp.l.buyables[id].expDiv
                                let amt = getBuyableAmount("l", id)
                                if (hasChallenge("l", 101)) {
                                        return init.times(base.pow(amt.pow(tmp.l.buyables.getBuyableExponent).div(expDiv)))
                                }
                                let expBase = hasChallenge("l", 81) ? new Decimal(500) : amt
                                let exp2 = amt.div(expDiv).plus(1)
                                return init.times(Decimal.pow(base, expBase.pow(exp2)))
                        },
                        getMaxAfford(){
                                if (!hasMilestone("d", 19)) return
                                let pts = player.l.points
                                let init = 1e16
                                if (hasUpgrade("l", 31)) init = 1
                                let base = 5
                                if (player.extremeMode) base = 2
                                if (pts.lt(init)) return decimalZero
                                if (hasChallenge("l", 101)) return pts.div(init).log(base).times(tmp.l.buyables[12].expDiv).root(tmp.l.buyables.getBuyableExponent).plus(1).floor()
                                return pts.div(init).log(base).log(500).sub(1).times(tmp.l.buyables[12].expDiv).plus(1).floor()
                        },
                        expDiv(){
                                let ret = new Decimal(20)

                                if (!inChallenge("l", 112) && !hasChallenge("l", 112)) {
                                        ret = ret.plus(tmp.l.buyables[13].effect)
                                }
                                ret = ret.plus(tmp.l.buyables[23].effect)
                                ret = ret.plus(tmp.l.buyables[33].effect)
                                if (player.extremeMode) ret = ret.plus(layers.l.grid.getGemEffect(302))
                                
                                return ret.min(1e9)
                        },
                        unlocked(){
                                return player.l.challenges[11] >= 40 || player.a.unlocked
                        },
                        canAfford:() => player.l.points.gte(tmp.l.buyables[12].cost),
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.l
                                let id = 12
                                let ma = tmp.l.buyables[id].getMaxAfford
                                let maxBulk = tmp.l.buyables.getMaxBulk
                                let up 
                                if (hasMilestone("cells", 59)) up = ma.sub(data.buyables[id]).max(0)
                                else up = hasMilestone("d", 19) ? ma.sub(data.buyables[id]).min(maxBulk) : 1
                                data.buyables[id] = data.buyables[id].plus(up)
                                if (!hasUpgrade("cells", 413)) {
                                        data.points = data.points.sub(tmp.l.buyables[id].cost)
                                }
                        },
                        base(){
                                if (hasMilestone("cells", 35)) return player.cells.lambda.best
                                let ret = new Decimal(player.l.challenges[11]).max(1)
                                if (hasMilestone("d", 22)) return ret
                                
                                ret = ret.max(10).log10()

                                if (hasMilestone("l", 27)) ret = ret.div(Math.log10(7))
                                if (hasMilestone("l", 28)) ret = ret.div(Math.log10(5)/Math.log10(7))
                                if (hasMilestone("l", 30)) ret = ret.div(Math.log10(4)/Math.log10(5))
                                if (hasMilestone("l", 31)) ret = ret.times(Math.log(4))
                                if (hasMilestone("l", 36)) ret = ret.div(Math.log(2))
                                
                                return ret
                        },
                        effect(){
                                return tmp.l.buyables[12].base.pow(player.l.buyables[12])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.l.buyables[12]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.l.buyables[12].effect) + " to Life gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("l", 12)) + " Lives</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(Dilation completions)^x<br>" + format(tmp.l.buyables[12].base) + "^x"
                                if (hasMilestone("l", 27)) eformula = eformula.replace("log10", "log7")
                                if (hasMilestone("l", 28)) eformula = eformula.replace("log7", "log5")
                                if (hasMilestone("l", 30)) eformula = eformula.replace("log5", "log4")
                                if (hasMilestone("l", 31)) eformula = eformula.replace("log4", "ln")
                                if (hasMilestone("l", 36)) eformula = eformula.replace("ln", "log2")
                                if (hasMilestone("d", 22)) eformula = eformula.replace("log2(Dilation completions)", "Dilation completions")
                                if (hasMilestone("cells", 35)) eformula = eformula.replace("Dilation completions", "Lambda")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e16*5^(x<sup>1+x/" + formatWhole(tmp.l.buyables[12].expDiv) + "</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("5", "2")
                                if (hasUpgrade("l", 31)) cost2 = cost2.slice(5, )
                                if (hasChallenge("l", 81)) cost2 = cost2.replace("(x", "(500")
                                if (hasChallenge("l", 101)) {
                                        cost2 = cost2.replace("500<sup>1+x", "x<sup>2.5</sup>")
                                        cost2 = cost2.replace("</sup>)", ")")
                                }
                                if (hasMilestone("cells", 30)) cost2 = cost2.replace("2.5", format(tmp.l.buyables.getBuyableExponent, 1))
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                13: {
                        title: "α → ∂𝛾",
                        cost(){
                                let init = new Decimal(player.extremeMode ? 3e19 : 1e21)
                                if (hasUpgrade("l", 41)) init = decimalOne
                                let base = new Decimal(player.extremeMode ? 8 : 10)
                                let id = 13
                                let expDiv = tmp.l.buyables[id].expDiv
                                let amt = getBuyableAmount("l", id)
                                if (hasChallenge("l", 101)) {
                                        return init.times(base.pow(amt.pow(tmp.l.buyables.getBuyableExponent).div(expDiv)))
                                }
                                let expBase = hasChallenge("l", 81) ? new Decimal(500) : amt
                                let exp2 = amt.div(expDiv).plus(1)
                                return init.times(Decimal.pow(base, expBase.pow(exp2)))
                        },
                        getMaxAfford(){
                                if (!hasMilestone("d", 19)) return
                                let pts = player.l.points
                                let init = player.extremeMode ? 3e19 : 1e21
                                if (hasUpgrade("l", 41)) init = 1
                                let base = player.extremeMode ? 8 : 10
                                if (pts.lt(init)) return decimalZero
                                if (hasChallenge("l", 101)) return pts.div(init).log(base).times(tmp.l.buyables[13].expDiv).root(tmp.l.buyables.getBuyableExponent).plus(1).floor()
                                return pts.div(init).log(base).log(500).sub(1).times(tmp.l.buyables[13].expDiv).plus(1).floor()
                        },
                        expDiv(){
                                let ret = new Decimal(10)

                                ret = ret.plus(tmp.l.buyables[23].effect)
                                ret = ret.plus(tmp.l.buyables[33].effect)
                                if (hasUpgrade("l", 41)) ret = ret.plus(10)
                                if (player.extremeMode) ret = ret.plus(layers.l.grid.getGemEffect(302))
                                
                                return ret.min(1e9)
                        },
                        unlocked(){
                                return player.l.challenges[11] >= 50 || player.a.unlocked
                        },
                        canAfford:() => player.l.points.gte(tmp.l.buyables[13].cost),
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.l
                                let id = 13
                                let ma = tmp.l.buyables[id].getMaxAfford
                                let maxBulk = tmp.l.buyables.getMaxBulk
                                let up 
                                if (hasMilestone("cells", 59)) up = ma.sub(data.buyables[id]).max(0)
                                else up = hasMilestone("d", 19) ? ma.sub(data.buyables[id]).min(maxBulk) : 1
                                data.buyables[id] = data.buyables[id].plus(up)
                                if (!hasUpgrade("cells", 413)) {
                                        data.points = data.points.sub(tmp.l.buyables[id].cost)
                                }
                        },
                        base(){
                                if (hasUpgrade("cells", 215)) return decimalOne
                                let ret = decimalOne

                                if (!player.extremeMode)        ret = ret.plus(layers.l.grid.getGemEffect(202))
                                if (hasMilestone("a", 14))      ret = ret.plus(.05)
                                if (hasUpgrade("d", 24) && !player.extremeMode) {
                                                                ret = ret.plus(.1375)
                                }
                                
                                return ret
                        },
                        effect(){
                                return tmp.l.buyables[13].base.times(player.l.buyables[13])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.l.buyables[13]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.l.buyables[13].effect, 4) + " to prior exp dividers and Life gain exp</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("l", 13)) + " Lives</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.l.buyables[13].base, 4) + "*x"
                                if (inChallenge("l", 112) || hasChallenge("l", 112)) eff2 = eff2.replace("prior exp dividers and ", "")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e21*10^(x<sup>1+x/" + formatWhole(tmp.l.buyables[13].expDiv) + "</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("1e21*10", "3e19*8")
                                if (hasUpgrade("l", 41)) cost2 = cost2.slice(5,)
                                if (hasChallenge("l", 81)) cost2 = cost2.replace("(x", "(500")
                                if (hasChallenge("l", 101)) {
                                        cost2 = cost2.replace("500<sup>1+x", "x<sup>2.5</sup>")
                                        cost2 = cost2.replace("</sup>)", ")")
                                }
                                if (hasMilestone("cells", 30)) cost2 = cost2.replace("2.5", format(tmp.l.buyables.getBuyableExponent, 1))
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                21: {
                        title: "β → ∂α",
                        cost(){
                                let init = new Decimal(player.extremeMode ? 25e26 : 2.4e26)
                                if (hasUpgrade("l", 42)) init = decimalOne
                                let base = new Decimal(2)
                                let id = 21
                                let expDiv = tmp.l.buyables[id].expDiv
                                let amt = getBuyableAmount("l", id)
                                if (hasChallenge("l", 101)) {
                                        return init.times(base.pow(amt.pow(tmp.l.buyables.getBuyableExponent).div(expDiv)))
                                }
                                let expBase = hasChallenge("l", 81) ? new Decimal(500) : amt
                                let exp2 = amt.div(expDiv).plus(1)
                                return init.times(Decimal.pow(base, expBase.pow(exp2)))
                        },
                        getMaxAfford(){
                                if (!hasMilestone("d", 19)) return
                                let pts = player.l.points
                                let init = player.extremeMode ? 25e26 : 2.4e26
                                if (hasUpgrade("l", 42)) init = 1
                                let base = 2
                                if (pts.lt(init)) return decimalZero
                                if (hasChallenge("l", 101)) return pts.div(init).log(base).times(tmp.l.buyables[21].expDiv).root(tmp.l.buyables.getBuyableExponent).plus(1).floor()
                                return pts.div(init).log(base).log(500).sub(1).times(tmp.l.buyables[21].expDiv).plus(1).floor()
                        },
                        expDiv(){
                                let ret = new Decimal(15)

                                ret = ret.plus(tmp.l.buyables[23].effect)
                                ret = ret.plus(tmp.l.buyables[33].effect)
                                if (player.extremeMode) ret = ret.plus(layers.l.grid.getGemEffect(302))
                                
                                return ret.min(1e9)
                        },
                        unlocked(){
                                return player.l.challenges[11] >= 60 || player.a.unlocked
                        },
                        canAfford:() => player.l.points.gte(tmp.l.buyables[21].cost),
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.l
                                let id = 21
                                let ma = tmp.l.buyables[id].getMaxAfford
                                let maxBulk = tmp.l.buyables.getMaxBulk
                                let up 
                                if (hasMilestone("cells", 59)) up = ma.sub(data.buyables[id]).max(0)
                                else up = hasMilestone("d", 19) ? ma.sub(data.buyables[id]).min(maxBulk) : 1
                                data.buyables[id] = data.buyables[id].plus(up)
                                if (!hasUpgrade("cells", 413)) {
                                        data.points = data.points.sub(tmp.l.buyables[id].cost)
                                }
                        },
                        base(){
                                let ret = player.tokens.total.max(10).log10()

                                if (hasMilestone("l", 38))      ret = ret.times(Math.log(10)/Math.log(8))
                                if (hasMilestone("l", 39))      ret = ret.times(Math.log(8)/Math.log(6))
                                if (hasMilestone("l", 40))      ret = ret.times(Math.log(6)/Math.log(5))
                                if (hasMilestone("l", 41))      ret = ret.times(Math.log(5)/Math.log(4))
                                if (hasMilestone("l", 42))      ret = ret.times(Math.log(4)/Math.log(3))
                                if (hasMilestone("a", 13))      ret = ret.times(Math.log(3))
                                if (hasMilestone("a", 14))      ret = ret.div(Math.log(2))

                                if (hasChallenge("l", 72))      ret = player.tokens.total.max(1)

                                if (hasMilestone("cells", 36))  ret = Decimal.pow(2, ret)
                                
                                return ret
                        },
                        effect(){
                                return tmp.l.buyables[21].base.pow(player.l.buyables[21])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.l.buyables[21]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.l.buyables[21].effect) + " to Life gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("l", 21)) + " Lives</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(tokens)^x<br>" + format(tmp.l.buyables[21].base) + "^x"
                                if (hasMilestone("l", 38)) eformula = eformula.replace("log10", "log8")
                                if (hasMilestone("l", 39)) eformula = eformula.replace("log8", "log6")
                                if (hasMilestone("l", 40)) eformula = eformula.replace("log6", "log5")
                                if (hasMilestone("l", 41)) eformula = eformula.replace("log5", "log4")
                                if (hasMilestone("l", 42)) eformula = eformula.replace("log4", "log3")
                                if (hasMilestone("a", 13)) eformula = eformula.replace("log3", "ln")
                                if (hasMilestone("a", 14)) eformula = eformula.replace("ln", "log2")
                                if (hasChallenge("l", 72)) eformula = eformula.replace("log2(tokens)", "tokens")
                                if (hasMilestone("cells", 36)) eformula = eformula.replace("tokens", "(2<sup>tokens</sup>)")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "2.4e26*2^(x<sup>1+x/" + formatWhole(tmp.l.buyables[21].expDiv) + "</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("2.4e26", "2.5e27")
                                if (hasUpgrade("l", 42)) cost2 = cost2.slice(7,)
                                if (hasChallenge("l", 81)) cost2 = cost2.replace("(x", "(500")
                                if (hasChallenge("l", 101)) {
                                        cost2 = cost2.replace("500<sup>1+x", "x<sup>2.5</sup>")
                                        cost2 = cost2.replace("</sup>)", ")")
                                }
                                if (hasMilestone("cells", 30)) cost2 = cost2.replace("2.5", format(tmp.l.buyables.getBuyableExponent, 1))
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                22: {
                        title: "β → ∂β",
                        cost(){
                                let init = new Decimal(player.extremeMode ? 3e36 : 3e34)
                                if (hasUpgrade("l", 43)) init = decimalOne
                                let base = new Decimal(30)
                                let id = 22
                                let expDiv = tmp.l.buyables[id].expDiv
                                let amt = getBuyableAmount("l", id)
                                if (hasChallenge("l", 101)) {
                                        return init.times(base.pow(amt.pow(tmp.l.buyables.getBuyableExponent).div(expDiv)))
                                }
                                let expBase = hasChallenge("l", 81) ? new Decimal(500) : amt
                                let exp2 = amt.div(expDiv).plus(1)
                                return init.times(Decimal.pow(base, expBase.pow(exp2)))
                        },
                        getMaxAfford(){
                                if (!hasMilestone("d", 19)) return
                                let pts = player.l.points
                                let init = player.extremeMode ? 3e36 : 3e34
                                if (hasUpgrade("l", 43)) init = 1
                                let base = 30
                                if (pts.lt(init)) return decimalZero
                                if (hasChallenge("l", 101)) return pts.div(init).log(base).times(tmp.l.buyables[22].expDiv).root(tmp.l.buyables.getBuyableExponent).plus(1).floor()
                                return pts.div(init).log(base).log(500).sub(1).times(tmp.l.buyables[22].expDiv).plus(1).floor()
                        },
                        expDiv(){
                                let ret = new Decimal(10)

                                ret = ret.plus(tmp.l.buyables[23].effect)
                                ret = ret.plus(tmp.l.buyables[33].effect)
                                if (player.extremeMode) ret = ret.plus(layers.l.grid.getGemEffect(302))
                                
                                return ret.min(1e9)
                        },
                        unlocked(){
                                return player.l.challenges[11] >= 70 || player.a.unlocked
                        },
                        canAfford:() => player.l.points.gte(tmp.l.buyables[22].cost),
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.l
                                let id = 22
                                let ma = tmp.l.buyables[id].getMaxAfford
                                let maxBulk = tmp.l.buyables.getMaxBulk
                                let up 
                                if (hasMilestone("cells", 59)) up = ma.sub(data.buyables[id]).max(0)
                                else up = hasMilestone("d", 19) ? ma.sub(data.buyables[id]).min(maxBulk) : 1
                                data.buyables[id] = data.buyables[id].plus(up)
                                if (!hasUpgrade("cells", 413)) {
                                        data.points = data.points.sub(tmp.l.buyables[id].cost)
                                }
                        },
                        base(){
                                if (hasUpgrade("cells", 31)) return player.cells.kappa.points.max(1)
                                return tmp.tokens.buyables[41].effect
                        },
                        effect(){
                                return tmp.l.buyables[22].base.pow(player.l.buyables[22])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.l.buyables[22]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.l.buyables[22].effect) + " to Life gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("l", 22)) + " Lives</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "Constant effect^x<br>" + format(tmp.l.buyables[22].base) + "^x"
                                if (hasUpgrade("cells", 31)) eformula = eformula.replace("Constant effect", "Kappa")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "3e34*30^(x<sup>1+x/" + formatWhole(tmp.l.buyables[22].expDiv) + "</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("3e34", "3e36")
                                if (hasUpgrade("l", 43)) cost2 = cost2.slice(5,)
                                if (hasChallenge("l", 81)) cost2 = cost2.replace("(x", "(500")
                                if (hasChallenge("l", 101)) {
                                        cost2 = cost2.replace("500<sup>1+x", "x<sup>2.5</sup>")
                                        cost2 = cost2.replace("</sup>)", ")")
                                }
                                if (hasMilestone("cells", 30)) cost2 = cost2.replace("2.5", format(tmp.l.buyables.getBuyableExponent, 1))
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                23: {
                        title: "β → ∂𝛾",
                        init(){
                                if (player.extremeMode) return new Decimal(1e55).div(layers.l.grid.getGemEffect(202))
                                return new Decimal(4e53)
                        },
                        cost(){
                                let init = tmp.l.buyables[23].init
                                let base = new Decimal(200)
                                let id = 23
                                let expDiv = tmp.l.buyables[id].expDiv
                                let amt = getBuyableAmount("l", id)
                                if (hasChallenge("l", 101)) {
                                        return init.times(base.pow(amt.pow(tmp.l.buyables.getBuyableExponent).div(expDiv)))
                                }
                                let expBase = hasChallenge("l", 81) ? new Decimal(500) : amt
                                let exp2 = amt.div(expDiv).plus(1)
                                return init.times(Decimal.pow(base, expBase.pow(exp2)))
                        },
                        getMaxAfford(){
                                if (!hasMilestone("d", 19)) return
                                let pts = player.l.points
                                let init = tmp.l.buyables[23].init
                                let base = 200
                                if (pts.lt(init)) return decimalZero
                                if (hasChallenge("l", 101)) return pts.div(init).log(base).times(tmp.l.buyables[23].expDiv).root(tmp.l.buyables.getBuyableExponent).plus(1).floor()
                                return pts.div(init).log(base).log(500).sub(1).times(tmp.l.buyables[23].expDiv).plus(1).floor()
                        },
                        expDiv(){
                                let ret = new Decimal(10)

                                ret = ret.plus(tmp.l.buyables[33].effect)
                                if (player.extremeMode) ret = ret.plus(layers.l.grid.getGemEffect(302))
                                
                                return ret.min(1e9)
                        },
                        unlocked(){
                                return player.l.challenges[11] >= 80 || player.a.unlocked
                        },
                        canAfford:() => player.l.points.gte(tmp.l.buyables[23].cost),
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.l
                                let id = 23
                                let ma = tmp.l.buyables[id].getMaxAfford
                                let maxBulk = tmp.l.buyables.getMaxBulk
                                let up 
                                if (hasMilestone("cells", 59)) up = ma.sub(data.buyables[id]).max(0)
                                else up = hasMilestone("d", 19) ? ma.sub(data.buyables[id]).min(maxBulk) : 1
                                data.buyables[id] = data.buyables[id].plus(up)
                                if (!hasUpgrade("cells", 413)) {
                                        data.points = data.points.sub(tmp.l.buyables[id].cost)
                                }
                        },
                        base(){
                                if (hasUpgrade("cells", 215)) return decimalOne
                                let ret = new Decimal(2)

                                if (!player.extremeMode)        ret = ret.plus(layers.l.grid.getGemEffect(302))
                                if (hasMilestone("a", 15))      ret = ret.plus(.25)
                                if (hasChallenge("l", 72))      ret = ret.plus(tmp.l.challenges[41].reward)
                                
                                return ret
                        },
                        effect(){
                                return tmp.l.buyables[23].base.times(player.l.buyables[23])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.l.buyables[23]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.l.buyables[23].effect, 4) + " to prior exp dividers</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("l", 23)) + " Lives</b><br>"
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.l.buyables[23].base, 4) + "*x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = format(tmp.l.buyables[23].init) + "*200^(x<sup>1+x/" + formatWhole(tmp.l.buyables[23].expDiv) + "</sup>)"
                                if (cost2.split("1.00*")[0] == "") cost2 = cost2.slice(5,) 
                                // if the cost is 1 remove the first characters
                                if (hasChallenge("l", 81)) cost2 = cost2.replace("(x", "(500")
                                if (hasChallenge("l", 101)) {
                                        cost2 = cost2.replace("500<sup>1+x", "x<sup>2.5</sup>")
                                        cost2 = cost2.replace("</sup>)", ")")
                                }
                                if (hasMilestone("cells", 30)) cost2 = cost2.replace("2.5", format(tmp.l.buyables.getBuyableExponent, 1))
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                31: {
                        title: "𝛾 → ∂α",
                        cost(){
                                let init = new Decimal(player.extremeMode ? 2e80 : 7e84)
                                let base = new Decimal(player.extremeMode ? 987 : 158)
                                if (hasMilestone("cells", 34)) base = new Decimal(2)
                                if (hasMilestone("l", 38)) init = decimalOne
                                let id = 31
                                let expDiv = tmp.l.buyables[id].expDiv
                                let amt = getBuyableAmount("l", id)
                                if (hasChallenge("l", 101)) {
                                        return init.times(base.pow(amt.pow(tmp.l.buyables.getBuyableExponent).div(expDiv)))
                                }
                                let expBase = hasChallenge("l", 81) ? new Decimal(500) : amt
                                let exp2 = amt.div(expDiv).plus(1)
                                return init.times(Decimal.pow(base, expBase.pow(exp2)))
                        },
                        getMaxAfford(){
                                if (!hasMilestone("d", 19)) return
                                let pts = player.l.points
                                let init = player.extremeMode ? 2e80 : 7e84
                                let base = player.extremeMode ? 987 : 158
                                if (hasMilestone("cells", 34)) base = 2
                                if (hasMilestone("l", 38)) init = 1
                                if (pts.lt(init)) return decimalZero
                                if (hasChallenge("l", 101)) return pts.div(init).log(base).times(tmp.l.buyables[31].expDiv).root(tmp.l.buyables.getBuyableExponent).plus(1).floor()
                                return pts.div(init).log(base).log(500).sub(1).times(tmp.l.buyables[31].expDiv).plus(1).floor()
                        },
                        expDiv(){
                                let ret = new Decimal(8)

                                ret = ret.plus(tmp.l.buyables[33].effect)
                                if (player.extremeMode) ret = ret.plus(layers.l.grid.getGemEffect(302))

                                return ret.min(1e9)
                        },
                        unlocked(){
                                return player.l.challenges[11] >= 90 || player.a.unlocked
                        },
                        canAfford:() => player.l.points.gte(tmp.l.buyables[31].cost),
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.l
                                let id = 31
                                let ma = tmp.l.buyables[id].getMaxAfford
                                let maxBulk = tmp.l.buyables.getMaxBulk
                                let up 
                                if (hasMilestone("cells", 59)) up = ma.sub(data.buyables[id]).max(0)
                                else up = hasMilestone("d", 19) ? ma.sub(data.buyables[id]).min(maxBulk) : 1
                                data.buyables[id] = data.buyables[id].plus(up)
                                if (!hasUpgrade("cells", 413)) {
                                        data.points = data.points.sub(tmp.l.buyables[id].cost)
                                }
                        },
                        base(){
                                if (hasMilestone("cells", 54)) return player.cells.lambda.points.max(1)
                                let ret = player.l.points.max(10).log10()

                                if (hasMilestone("l", 25)) ret = ret.times(Math.log(10))
                                if (hasMilestone("l", 26)) ret = ret.div(Math.log(2))
                                
                                return ret
                        },
                        effect(){
                                return tmp.l.buyables[31].base.pow(player.l.buyables[31])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.l.buyables[31]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.l.buyables[31].effect) + " to Life gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("l", 31)) + " Lives</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(Lives)^x<br>" + format(tmp.l.buyables[31].base) + "^x"
                                if (hasMilestone("l", 25)) eformula = eformula.replace("log10", "ln")
                                if (hasMilestone("l", 26)) eformula = eformula.replace("ln", "log2")
                                if (hasMilestone("cells", 54)) eformula = eformula.replace("log2(Lives)", "Lambda")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "7e84*158^(x<sup>1+x/" + formatWhole(tmp.l.buyables[31].expDiv) + "</sup>)"
                                if (player.extremeMode) cost2 = cost2.replace("7e84*158", "2e80*987")
                                if (hasMilestone("l", 38)) cost2 = cost2.slice(5,)
                                if (hasChallenge("l", 81)) cost2 = cost2.replace("(x", "(500") 
                                if (hasChallenge("l", 101)) {
                                        cost2 = cost2.replace("500<sup>1+x", "x<sup>2.5</sup>")
                                        cost2 = cost2.replace("</sup>)", ")")
                                }
                                if (hasMilestone("cells", 30)) cost2 = cost2.replace("2.5", format(tmp.l.buyables.getBuyableExponent, 1))
                                if (hasMilestone("cells", 34)) cost2 = cost2.replace("158", "2")
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                32: {
                        title: "𝛾 → ∂β",
                        cost(){
                                let init = new Decimal(player.extremeMode ? 1.5e145 : 1e166)
                                let base = new Decimal(player.extremeMode ? 250 : 1600)
                                if (hasMilestone("l", 39)) init = decimalOne
                                if (hasMilestone("cells", 34)) base = new Decimal(2)
                                let id = 32
                                let expDiv = tmp.l.buyables[id].expDiv
                                let amt = getBuyableAmount("l", id)
                                if (hasChallenge("l", 101)) {
                                        return init.times(base.pow(amt.pow(tmp.l.buyables.getBuyableExponent).div(expDiv)))
                                }
                                let expBase = hasChallenge("l", 81) ? new Decimal(500) : amt
                                let exp2 = amt.div(expDiv).plus(1)
                                return init.times(Decimal.pow(base, expBase.pow(exp2)))
                        },
                        getMaxAfford(){
                                if (!hasMilestone("d", 19)) return
                                let pts = player.l.points
                                let init = player.extremeMode ? 1.5e145 : 1e166
                                let base = player.extremeMode ? 250 : 1600
                                if (hasMilestone("cells", 34)) base = 2
                                if (hasMilestone("l", 39)) init = 1
                                if (pts.lt(init)) return decimalZero
                                if (hasChallenge("l", 101)) return pts.div(init).log(base).times(tmp.l.buyables[32].expDiv).root(tmp.l.buyables.getBuyableExponent).plus(1).floor()
                                return pts.div(init).log(base).log(500).sub(1).times(tmp.l.buyables[32].expDiv).plus(1).floor()
                        },
                        expDiv(){
                                let ret = new Decimal(10)

                                ret = ret.plus(tmp.l.buyables[33].effect)
                                if (player.extremeMode) ret = ret.plus(layers.l.grid.getGemEffect(302))

                                return ret.min(1e9)
                        },
                        unlocked(){
                                return player.l.challenges[11] >= 100 || player.a.unlocked
                        },
                        canAfford:() => player.l.points.gte(tmp.l.buyables[32].cost),
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.l
                                let id = 32
                                let ma = tmp.l.buyables[id].getMaxAfford
                                let maxBulk = tmp.l.buyables.getMaxBulk
                                let up 
                                if (hasMilestone("cells", 59)) up = ma.sub(data.buyables[id]).max(0)
                                else up = hasMilestone("d", 19) ? ma.sub(data.buyables[id]).min(maxBulk) : 1
                                data.buyables[id] = data.buyables[id].plus(up)
                                if (!hasUpgrade("cells", 413)) {
                                        data.points = data.points.sub(tmp.l.buyables[id].cost)
                                }
                        },
                        base(){
                                if (hasUpgrade("t", 94)) return player.cells.stem_cells.points.max(1)
                                if (hasMilestone("cells", 39)) return tmp.tokens.buyables[22].effect
                                return player.l.buyables[11]
                        },
                        effect(){
                                return tmp.l.buyables[32].base.pow(player.l.buyables[32])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.l.buyables[32]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.l.buyables[32].effect) + " to Life gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("l", 32)) + " Lives</b><br>"
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }
                                
                                let eformula = "(α → ∂α levels)^x<br>" + format(tmp.l.buyables[32].base) + "^x"
                                if (hasMilestone("cells", 39))  eformula = eformula.replace("(α → ∂α levels)", "Near-ultraviolet")
                                if (hasUpgrade("t", 94))        eformula = eformula.replace("Near-ultraviolet", "Stem Cells")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e166*1600^(x<sup>1+x/" + formatWhole(tmp.l.buyables[32].expDiv) + "</sup>)"
                                if (player.extremeMode) cost2 = cost2.replace("1e166*1600", "1.5e145*250")
                                if (hasMilestone("l", 39) && player.extremeMode) cost2 = cost2.slice(8,)
                                if (hasChallenge("l", 81)) cost2 = cost2.replace("(x", "(500") 
                                if (hasChallenge("l", 101)) {
                                        cost2 = cost2.replace("500<sup>1+x", "x<sup>2.5</sup>")
                                        cost2 = cost2.replace("</sup>)", ")")
                                }
                                if (hasMilestone("cells", 30)) cost2 = cost2.replace("2.5", format(tmp.l.buyables.getBuyableExponent, 1))
                                if (hasMilestone("cells", 34)) cost2 = cost2.replace("1600", "2")
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                33: {
                        title: "𝛾 → ∂𝛾",
                        cost(){
                                let init = new Decimal(player.extremeMode ? 3e241 : 3e281)
                                let base = player.extremeMode ? 3e15 : 2e16
                                if (hasMilestone("d", 17) && player.extremeMode) base = 1e5
                                if (hasChallenge("l", 101)) base = 2467
                                if (hasMilestone("cells", 34)) base = 2
                                if (hasMilestone("l", 40)) init = decimalOne

                                base = new Decimal(base)

                                let id = 33
                                let expDiv = tmp.l.buyables[id].expDiv
                                let amt = getBuyableAmount("l", id)
                                if (hasChallenge("l", 101)) {
                                        return init.times(base.pow(amt.pow(tmp.l.buyables.getBuyableExponent).div(expDiv)))
                                }
                                let expBase = hasChallenge("l", 81) ? new Decimal(500) : amt
                                let exp2 = amt.div(expDiv).plus(1)
                                return init.times(Decimal.pow(base, expBase.pow(exp2)))
                        },
                        getMaxAfford(){
                                if (!hasMilestone("d", 19)) return
                                let pts = player.l.points
                                let init = player.extremeMode ? 3e241 : 3e281
                                let base = player.extremeMode ? 3e15 : 2e16
                                if (hasMilestone("d", 17) && player.extremeMode) base = 1e5
                                if (hasChallenge("l", 101)) base = 2468
                                if (hasMilestone("cells", 34)) base = 2
                                if (hasMilestone("l", 40)) init = 1
                                if (pts.lt(init)) return decimalZero
                                if (hasChallenge("l", 101)) return pts.div(init).log(base).times(tmp.l.buyables[33].expDiv).root(tmp.l.buyables.getBuyableExponent).plus(1).floor()
                                return pts.div(init).log(base).log(500).sub(1).times(tmp.l.buyables[33].expDiv).plus(1).floor()
                        },
                        expDiv(){
                                let ret = new Decimal(20)

                                if (hasMilestone("a", 17)) ret = ret.plus(player.a.milestones.length)
                                if (hasChallenge("l", 31)) ret = ret.plus(tmp.l.challenges[31].reward)
                                if (player.extremeMode) ret = ret.plus(layers.l.grid.getGemEffect(302))

                                if (hasMilestone("cells", 37)) ret = ret.times(player.tokens.total.max(1))

                                return ret.min(1e9)
                        },
                        unlocked(){
                                return player.l.challenges[11] >= 110 || player.a.unlocked
                        },
                        canAfford:() => player.l.points.gte(tmp.l.buyables[33].cost),
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.l
                                let id = 33
                                let ma = tmp.l.buyables[id].getMaxAfford
                                let maxBulk = tmp.l.buyables.getMaxBulk
                                let up 
                                if (hasMilestone("cells", 59)) up = ma.sub(data.buyables[id]).max(0)
                                else up = hasMilestone("d", 19) ? ma.sub(data.buyables[id]).min(maxBulk) : 1
                                data.buyables[id] = data.buyables[id].plus(up)
                                if (!hasUpgrade("cells", 413)) {
                                        data.points = data.points.sub(tmp.l.buyables[id].cost)
                                }
                        },
                        base(){
                                if (hasUpgrade("cells", 215)) return decimalOne
                                let ret = decimalOne

                                if (hasMilestone("a", 4))       ret = ret.plus(.005 * player.a.milestones.length)
                                if (hasChallenge("l", 41))      ret = ret.plus(tmp.l.challenges[41].reward)
                                if (hasUpgrade("sci", 421))     ret = ret.plus(.025 * tmp.sci.upgrades.proteinUpgradesLength)
                                if (hasMilestone("d", 17) && player.extremeMode) {
                                                                ret = ret.plus(player.d.milestones.length/30)
                                }
                                
                                return ret
                        },
                        effect(){
                                return tmp.l.buyables[33].base.times(player.l.buyables[33])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.l.buyables[33]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.l.buyables[33].effect, 4) + " to prior exp dividers</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("l", 33)) + " Lives</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.l.buyables[33].base, 4) + "*x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "3e281*2e16^(x<sup>1+x/" + formatWhole(tmp.l.buyables[33].expDiv) + "</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("3e281*2e16", "3e241*3e15")
                                if (hasMilestone("l", 40)) cost2 = cost2.slice(6,)
                                if (hasChallenge("l", 81)) cost2 = cost2.replace("(x", "(500")
                                if (hasChallenge("l", 101)) {
                                        cost2 = cost2.replace("500<sup>1+x", "x<sup>2.5</sup>")
                                        cost2 = cost2.replace("</sup>)", ")")
                                        cost2 = cost2.replace("2e16", "2468")
                                }
                                if (hasMilestone("d", 17) && player.extremeMode) cost2 = cost2.replace("3e15", "1e5")
                                if (hasMilestone("cells", 30)) cost2 = cost2.replace("2.5", format(tmp.l.buyables.getBuyableExponent, 1))
                                if (hasMilestone("cells", 34)) cost2 = cost2.replace("2468", "2")
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
        },
        clickables: {
                rows: 1,
                cols: 1,
                11: {
                        title(){
                                return "<h3 style='color: #0033FF'>Toggle</h3>"
                        },
                        display(){
                                let x = player.l.challengesDisplayState
                                if (x == 0) return "Display Gems"
                                return "Display description (shift for effect)"
                        },
                        unlocked(){
                                return player.l.challenges[11] >= 110 || player.a.unlocked
                        },
                        canClick(){
                                return true
                        },
                        onClick(){
                                player.l.challengesDisplayState = (player.l.challengesDisplayState + 1) % 2
                        },
                },
        },
        challenges: {
                11: {
                        name: "Dilation",
                        challengeDescription(){
                                if (player.shiftAlias) return "Affects all currencies in the info tab except coins. Go into info tab to see what Dilation does."

                                let a = "All prior currencies are dilated<br>^" 
                                let e = tmp.l.challenges[11].challengeEffect
                                if (e.gt(.1)) return a + format(e, 4)
                                return a + formatSmall(e)
                        },
                        goalDescription(){
                                return "e1.80e308 Points"
                        },
                        challengeEffect(){
                                let eff = player.l.challenges[11] + 1
                                if (player.l.activeChallenge != 11 && player.l.activeChallenge != undefined) eff = 111

                                if (player.extremeMode) { 
                                        if (eff >=111) eff -= .11
                                        if (eff >=110) eff -= .28
                                        if (eff >=104) eff += (eff - 103)/2
                                        if (eff >=103) eff += .3
                                        if (eff >=101) eff -= .12
                                        if (eff >=100) eff -= .03
                                        if (eff >= 98) eff -= (eff - 97)*.3
                                        if (eff >= 92) eff -= .62
                                        if (eff >= 91) eff += 5/6
                                        if (hasUpgrade("l", 35)) eff -= eff * .02
                                        if (eff >= 71) eff += eff/3 - 23
                                        if (hasUpgrade("l", 33) && eff >= 61) eff -= (eff - 61)/4
                                        if (eff >= 60) eff += -1/3
                                        if (eff >= 50) eff += 1
                                        if (eff >= 47) eff += (eff - 46)/2
                                        if (eff >= 41) eff += 4.25
                                        if (eff >= 40) eff += .75
                                        if (eff >= 39) eff += eff - 30
                                        if (eff >= 38) eff += 4
                                        if (eff >= 37) eff += 2
                                        if (eff >= 34) eff += eff - 33
                                        if (eff >= 28) eff -= .7
                                        if (eff >= 24) eff -= .8
                                        if (eff >= 23) eff -= .5
                                        if (eff >= 22) eff -= .5
                                        if (eff >= 21) eff -= .5
                                        if (eff >= 20) eff ++
                                        if (eff >= 19) eff ++
                                } else {
                                        if (eff > 91) eff = eff * 1.5 - 45.5
                                        if (eff > 65) eff = eff * 2 - 65
                                        if (eff > 50) eff = eff * 2 - 50
                                }

                                let ret = decimalOne.sub(eff/1000)

                                if (inChallenge("l", 12)) {
                                        let depth = tmp.l.challenges[12].getChallengeDepths[4] || 0
                                        let v = Math.floor(35 * Math.sqrt(depth)) // .035 in normal
                                        ret = ret.sub(v/1000)
                                }
                                
                                if (inChallenge("l", 22))       ret = ret.sub(.02)
                                if (inChallenge("l", 31))       ret = ret.sub(.04)
                                if (inChallenge("l", 32))       ret = ret.sub(.06)
                                if (inChallenge("l", 41))       ret = ret.sub(.08)
                                if (inChallenge("l", 42))       ret = ret.sub(.1)
                                if (inChallenge("l", 51))       ret = ret.sub(.12)
                                if (inChallenge("l", 52))       ret = ret.sub(.14)
                                if (inChallenge("l", 61))       ret = ret.sub(.16)
                                if (inChallenge("l", 62))       ret = ret.sub(.18)
                                if (inChallenge("l", 71))       ret = ret.sub(.2)
                                if (inChallenge("l", 72))       ret = ret.sub(.22)
                                if (inChallenge("l", 81))       ret = ret.sub(.24)
                                if (inChallenge("l", 82))       ret = ret.sub(.26)

                                if (layers.l.grid.getGemEffect(707)) {
                                                                ret = ret.plus(.004)
                                }
                                
                                if (inChallenge("l", 101))      ret = ret.pow(1.2)
                                if (inChallenge("l", 102))      ret = ret.pow(1.4)
                                if (inChallenge("l", 111))      ret = ret.pow(player.extremeMode ? 30 : 60)
                                if (inChallenge("l", 112))      ret = ret.pow(player.extremeMode ? 30 : 60)

                                return ret.min(1)
                        },
                        goal: () => Decimal.pow(10, Decimal.pow(2, 1024)),
                        canComplete: () => player.points.gte(tmp.l.challenges[11].goal),
                        rewardDescription(){
                                let a = "Each tenth challenge unlocks a buyable and boost life gain"
                                if (player.shiftAlias) return a
                                let b = "Currently: *" + format(tmp.l.challenges[11].rewardEffect)
                                let c = "You have completed this challenge<br>" 
                                c += formatWhole(player.l.challenges[11]) + "/110 times"
                                return a + br + b + br + c
                        },
                        completionLimit: 110,
                        rewardEffect(){
                                let comps = player.l.challenges[11]
                                let exp = 2
                                if (hasUpgrade("l", 32)) exp += Math.max(0, comps - 50) * .04
                                return Decimal.pow(comps + 1, exp)
                        },
                        unlocked(){
                                return hasMilestone("l", 8) || player.a.unlocked
                        },
                        countsAs: [],
                }, // inChallenge("l", 11)
                12: {
                        name: "Customizable", 
                        baseReward(){
                                return player.points.max(10).log10().max(10).log(2).sub(960).max(49).sqrt().sub(7)
                        },
                        gemGainMult(){
                                let ret = decimalOne
                                
                                if (hasUpgrade("a", 41))        ret = ret.times(3)
                                if (hasUpgrade("sci", 424))     ret = ret.times(2)
                                if (hasMilestone("d", 11))      ret = ret.times(10)
                                                                ret = ret.times(layers.l.grid.getGemEffect(602))

                                return ret
                        },
                        reward(){
                                let data = tmp.l.challenges[12]
                                if (data.baseReward.lt(1)) return decimalZero
                                return data.baseReward.times(data.gemGainMult).floor()
                        },
                        nextAt(){
                                let data = tmp.l.challenges[12]
                                let gain = data.reward
                                let mult = data.gemGainMult

                                let v1 = gain.plus(1).div(mult).max(1)
                                return Decimal.pow(2, v1.plus(7).pow(2).plus(960)).pow10()
                        },
                        goal: () => Decimal.pow(10, Decimal.pow(2, 1024)),
                        canComplete(){ 
                                if (player.l.challenges[11] < 110) return false
                                return player.points.gt(tmp.l.challenges[12].goal)
                        },
                        onComplete(){
                                player.l.challenges[12] = 0
                                let data = player.l.grid[player.l.activeChallengeID]
                                data.gems = data.gems.plus(tmp.l.challenges[12].reward)
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                let data = tmp.l.challenges[12]
                                let a = "Dilation at 110 completions<br>Gets harder based on which challenge is selected from the Selection tab"
                                let b = "Goal: e1.80e308 Points" + br

                                let data2 = player.l.grid[player.l.activeChallengeID]
                                let c = ""
                                if (inChallenge("l", 12) || !hasMilestone("a", 13)) {
                                        c = "Upon Completion: +" + formatWhole(data.reward) + " C"
                                        c += (data2.hundreds*10 + data2.units) + " Gems"
                                        c += "<br>Next at " + format(tmp.l.challenges[12].nextAt)
                                }

                                let d = "Rewards: See the Selection tab"
                                return a + br + b + c + br + d
                        },
                        unlocked(){
                                if (hasUpgrade("or", 134)) return false
                                return player.l.challenges[11] >= 110 || player.a.unlocked
                        },
                        countsAs: [11],
                        getChallengeDepths(){
                                let id = player.l.activeChallengeID
                                let data = player.l.grid[id]

                                if (player.points.lt(0)) x = 3

                                let h = data.hundreds
                                let u = data.units
                                let d8 = (h >= 8) + (h >= 8) + (u >= 8)
                                let d3 = (h >= 3) + (h >= 3) + (u >= 3)
                                let d4 = (h >= 4) + (h >= 4) + (u >= 4)
                                let d5 = (h >= 5) + (h >= 5) + (u >= 5)
                                let d6 = (h >= 6) + (h >= 6) + (u >= 6)
                                let d7 = (h >= 7) + (h >= 7) + (u >= 7)
                                let c8multiplier = player.extremeMode ? 2.36 : 3.3
                                let d8Eff = d8 == 0 ? 1 : (c8multiplier + d8*.5)
                                let c2d8Eff = player.extremeMode ? d8Eff : (d8 == 0 ? 1 : (.5 + d8/2))
                                return [0, 
                                        0, 
                                        (2*h+u-3) * c2d8Eff, 
                                        d3*d8Eff,
                                        d4*d8Eff,
                                        d5*d8Eff,
                                        d6*d8Eff,
                                        d7*d8Eff,
                                        d8]
                        },
                }, // inChallenge("l", 12)
                21: {
                        name: "Anti-Hydrogen", 
                        reward(){
                                if (hasUpgrade("or", 121)) return decimalOne
                                let data = player.l.challenges
                                let comps = 0
                                let keys = Object.keys(player.l.challenges)
                                for (i in keys){
                                        id = keys[i]
                                        if (id == 11 || id == 12) continue
                                        comps += data[id]
                                }
                                let nz = tmp.l.getNonZeroGemCount
                                let base = player.a.points.max(10).log10()
                                return base.pow(nz).pow(comps || 1)
                        },
                        goal: () => Decimal.pow(10, Decimal.pow(10, player.extremeMode ? 277340 : 140.4e3)),
                        canComplete(){ 
                                if (player.l.challenges[11] < 110) return false
                                return player.points.gt(tmp.l.challenges[21].goal)
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                if (hasUpgrade("or", 121)) return makeRed("<h3>Disables Hydrogen</h3>")
                                let a = "Dilation at 110 completions and all hydrogen content is disabled"
                                let b = "Goal: " + (player.extremeMode ? "e1e277,340" : "e1e140,400") + " Points"
                                let c = "Reward: Per Anti- challenge per non-zero gem log10(Amino Acid) multiplies Amino Acid gain"
                                c += " and add 1.9 to base point gain but disable hydrogen content"
                                let d = "Currently: " + format(tmp.l.challenges[21].reward)

                                return a + br + b + br + c + br + d
                        },
                        unlocked(){
                                return hasMilestone("d", 13) || player.cells.unlocked
                        },
                        countsAs: [11],
                }, // inChallenge("l", 21) hasChallenge("l", 21)
                22: {
                        name: "Anti-Minigame", 
                        reward(){
                                if (hasUpgrade("or", 122)) return decimalOne
                                let data = player.l.challenges
                                let comps = 0
                                let keys = Object.keys(player.l.challenges)
                                for (i in keys){
                                        id = keys[i]
                                        if (id == 11 || id == 12) continue
                                        comps += data[id]
                                }
                                let base = player.d.points.max(10).log10()
                                if (hasMilestone("cells", 7)) base = base.times(Math.log2(10))
                                return base.pow(comps)
                        },
                        goal: () => Decimal.pow(10, Decimal.pow(10, player.extremeMode ? 275540 : 145.1e3)),
                        canComplete(){ 
                                if (player.l.challenges[11] < 110) return false
                                return player.points.gt(tmp.l.challenges[22].goal)
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                if (hasUpgrade("or", 122)) return makeRed("<h3>Disables Minigames</h3>")
                                let a = "Dilation at 110 completions, all minigame content is disabled, and subtract .02 from the Dilation exponent"
                                let b = "Goal: e1e145,100 Points"
                                if (player.extremeMode) b = b.replace("145,100", "275,540")
                                let c = "Reward: Per Anti- challenge log10(DNA) multiplies DNA gain but disable minigame content"
                                let d = "Currently: " + format(tmp.l.challenges[22].reward)
                                if (hasMilestone("cells", 7)) c = c.replace("log10", "log2")

                                return a + br + b + br + c + br + d
                        },
                        unlocked(){
                                return hasChallenge("l", 21) || player.cells.unlocked
                        },
                        countsAs: [11],
                }, // inChallenge("l", 22) hasChallenge("l", 22)
                31: {
                        name: "Anti-Carbon", 
                        reward(){
                                if (hasUpgrade("or", 123)) return decimalZero
                                let data = player.l.challenges
                                let comps = 0
                                let keys = Object.keys(player.l.challenges)
                                for (i in keys){
                                        id = keys[i]
                                        if (id == 11 || id == 12) continue
                                        comps += data[id]
                                }
                                return new Decimal(player.extremeMode ? 100 : 117).times(comps)
                        },
                        goal: () => Decimal.pow(10, Decimal.pow(10, player.extremeMode ? 271950 : 149.1e3)),
                        canComplete(){ 
                                if (player.l.challenges[11] < 110) return false
                                return player.points.gt(tmp.l.challenges[31].goal)
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                if (hasUpgrade("or", 123)) return makeRed("<h3>Disables Carbon</h3>")
                                let a = "Dilation at 110 completions, all carbon content is disabled, and subtract .04 from the Dilation exponent"
                                let b = "Goal: e1e149,100 Points"
                                let c = "Reward: Per Anti- challenge<br> add 117 to 𝛾 → ∂𝛾's exponential divider but disable carbon content"
                                let d = "Currently: " + format(tmp.l.challenges[31].reward)

                                if (player.extremeMode) {
                                        c = c.replace("117", "100")
                                        b = b.replace("149,100", "271,950")
                                }

                                return a + br + b + br + c + br + d
                        },
                        unlocked(){
                                return hasChallenge("l", 22) || player.cells.unlocked
                        },
                        countsAs: [11],
                }, // inChallenge("l", 31) hasChallenge("l", 31)
                32: {
                        name: "Anti-Oxygen",
                        reward(){
                                if (hasUpgrade("or", 124)) return decimalZero
                                let data = player.l.challenges
                                let comps = 0
                                let keys = Object.keys(player.l.challenges)
                                for (i in keys){
                                        id = keys[i]
                                        if (id == 11 || id == 12) continue
                                        comps += data[id]
                                }
                                return new Decimal(.5).times(comps)
                        },
                        goal: () => Decimal.pow(10, Decimal.pow(10, player.extremeMode ? 268.8e3 : 151.5e3)),
                        canComplete(){ 
                                if (player.l.challenges[11] < 110) return false
                                return player.points.gt(tmp.l.challenges[32].goal)
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                if (hasUpgrade("or", 124)) return makeRed("<h3>Disables Oxygen</h3>")
                                let a = "Dilation at 110 completions, all oxygen content is disabled, and subtract .06 from the Dilation exponent"
                                let b = "Goal: e1e151,500 Points"
                                let c = "Reward: Per Anti- challenge<br> add .5 to DNA gain exponent but disable oxygen content"
                                if (player.extremeMode) c = c.replace(" but", " and shRNA cost exponent is 1.8 but")
                                let d = "Currently: " + format(tmp.l.challenges[32].reward)

                                if (player.extremeMode) b = b.replace("151,500", "268,800")

                                return a + br + b + br + c + br + d
                        },
                        unlocked(){
                                return hasChallenge("l", 31) || player.cells.unlocked
                        },
                        countsAs: [11],
                }, // inChallenge("l", 32) hasChallenge("l", 32)
                41: {
                        name: "Anti-Nitrogen", 
                        reward(){
                                if (hasUpgrade("or", 125)) return decimalZero
                                let data = player.l.challenges
                                let comps = 0
                                let keys = Object.keys(player.l.challenges)
                                for (i in keys){
                                        id = keys[i]
                                        if (id == 11 || id == 12) continue
                                        comps += data[id]
                                }
                                return new Decimal(.2).times(comps)
                        },
                        goal: () => Decimal.pow(10, Decimal.pow(10, player.extremeMode ? 343565 : 204700)),
                        canComplete(){ 
                                if (player.l.challenges[11] < 110) return false
                                return player.points.gt(tmp.l.challenges[41].goal)
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                if (hasUpgrade("or", 125)) return makeRed("<h3>Disables Nitrogen</h3>")
                                let a = "Dilation at 110 completions, all nitrogen content is disabled<sup>*</sup>, and subtract .08 from the Dilation exponent"
                                let b = "Goal: e1e204,700 Points"
                                if (player.extremeMode) b = b.replace("204,700", "343,565")
                                let c = "Reward: Per Anti- challenge<br> add .2 to 𝛾 → ∂𝛾's base but disable nitrogen content<sup>*</sup>"
                                let d = "Currently: " + format(tmp.l.challenges[41].reward)

                                return a + br + b + br + c + br + d
                        },
                        unlocked(){
                                return hasMilestone("d", 14) || player.cells.unlocked
                        },
                        countsAs: [11],
                }, // inChallenge("l", 41) hasChallenge("l", 41)
                42: {
                        name: "Anti-Inflammatory", 
                        reward(){
                                if (hasMilestone("or", 14)) return decimalZero
                                let data = player.l.challenges
                                let comps = 0
                                let keys = Object.keys(player.l.challenges)
                                for (i in keys){
                                        id = keys[i]
                                        if (id == 11 || id == 12) continue
                                        comps += data[id]
                                }
                                return new Decimal(.01).times(comps)
                        },
                        goal: () => Decimal.pow(10, Decimal.pow(10, player.extremeMode ? 379500 : 256.3e3)),
                        canComplete(){ 
                                if (player.l.challenges[11] < 110) return false
                                return player.points.gt(tmp.l.challenges[42].goal)
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                if (hasMilestone("or", 14)) return makeRed("<h3>Ineffective</h3>")
                                let a = "Dilation at 110 completions, and subtract .1 from the Dilation exponent"
                                let b = "Goal: e1e256,300 Points"
                                if (player.extremeMode) b = b.replace("256,300", "379,500")
                                let c = "Reward: Per Anti- challenge<br> add .01 to constant's base"
                                let d = "Currently: " + format(tmp.l.challenges[42].reward)

                                return a + br + b + br + c + br + d
                        },
                        unlocked(){
                                return hasUpgrade("d", 15) || player.cells.unlocked
                        },
                        countsAs: [11],
                }, // inChallenge("l", 42) hasChallenge("l", 42)
                51: {
                        name: "Anti-Omega",
                        goal: () => Decimal.pow(10, Decimal.pow(10, player.extremeMode ? 381381 : 267.3e3)),
                        canComplete(){ 
                                if (player.l.challenges[11] < 110) return false
                                return player.points.gt(tmp.l.challenges[51].goal)
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                if (hasMilestone("or", 14)) return makeRed("<h3>Nullifies Life effect</h3>")
                                let a = "Dilation at 110 completions, nullify Life effect, and subtract .12 from the Dilation exponent"
                                let b = "Goal: e1e267,300 Points"
                                if (player.extremeMode) b = b.replace("267,300", "381,381")
                                let c = "Reward: Remove a log2 from the Life gain formula and add .005 to C43's base but nullify Life effect"

                                return a + br + b + br + c 
                        },
                        unlocked(){
                                return hasUpgrade("d", 21) || player.cells.unlocked
                        },
                        countsAs: [11],
                }, // inChallenge("l", 51) hasChallenge("l", 51)
                52: {
                        name: "Anti-Psi", 
                        reward(){
                                if (hasMilestone("or", 14)) return decimalZero
                                let data = player.l.challenges
                                let comps = 0
                                let keys = Object.keys(player.l.challenges)
                                for (i in keys){
                                        id = keys[i]
                                        if (id == 11 || id == 12) continue
                                        comps += data[id]
                                }
                                return new Decimal(comps)
                        },
                        goal: () => Decimal.pow(10, Decimal.pow(10, player.extremeMode ? 368.9e3 : 266e3)),
                        canComplete(){ 
                                if (player.l.challenges[11] < 110) return false
                                return player.points.gt(tmp.l.challenges[52].goal)
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                if (hasMilestone("or", 14)) return makeRed("<h3>Ineffective</h3>")
                                let a = "Dilation at 110 completions, nullify Phosphorus effect, and subtract .14 from the Dilation exponent"
                                let b = "Goal: e1e266,000 Points"
                                if (player.extremeMode) b = b.replace("266,000", "368,900")
                                let c = "Reward: Uncap C43 effect, and per Anti- challenge you have one less token for prestige purposes, but nullify Phosphorus effect"
                                let d = "Currently: -" + formatWhole(tmp.l.challenges[52].reward)

                                return a + br + b + br + c + br + d
                        },
                        unlocked(){
                                return hasChallenge("l", 51) || player.cells.unlocked
                        },
                        countsAs: [11],
                }, // inChallenge("l", 52) hasChallenge("l", 52)
                61: {
                        name: "Anti-Chi", 
                        reward(){
                                let data = player.l.challenges
                                let comps = 0
                                let keys = Object.keys(player.l.challenges)
                                for (i in keys){
                                        id = keys[i]
                                        if (id == 11 || id == 12) continue
                                        comps += data[id]
                                }
                                return new Decimal(.1).times(comps).plus(1)
                        },
                        goal: () => Decimal.pow(10, Decimal.pow(10, player.extremeMode ? 354453 : 274e3)),
                        canComplete(){ 
                                if (player.l.challenges[11] < 110) return false
                                return player.points.gt(tmp.l.challenges[61].goal)
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                if (hasMilestone("or", 14)) return makeRed("<h3>Ineffective</h3>")
                                let a = "Dilation at 110 completions and subtract .16 from the Dilation exponent"
                                let b = "Goal: e1e274,000 Points"
                                if (player.extremeMode) b = b.replace("274,000", "354,453")
                                let c = "Reward: N → Δµ base is 1 + Anti- completions/10, but hardcap N → Δµ effect at ee20, and N → Δµ effects Protein gain up to ee20"
                                let d = "Currently: " + format(tmp.l.challenges[61].reward)

                                return a + br + b + br + c 
                        },
                        unlocked(){
                                return hasChallenge("l", 52) || player.cells.unlocked
                        },
                        countsAs: [11],
                }, // inChallenge("l", 61) hasChallenge("l", 61)
                62: {
                        name: "Anti-Phi",
                        goal: () => Decimal.pow(10, Decimal.pow(10, player.extremeMode ? 446e3 : 423e3)),
                        canComplete(){ 
                                if (player.l.challenges[11] < 110) return false
                                return player.points.gt(tmp.l.challenges[62].goal)
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                let a = "Dilation at 110 completions and subtract .18 from the Dilation exponent"
                                let b = "Goal: e1e423,000 Points"
                                if (player.extremeMode) b = b.replace("423,000", "446,000")
                                let c = "Reward: Unlock the next set of challenges"

                                return a + br + b + br + c 
                        },
                        unlocked(){
                                return hasChallenge("l", 61) || player.cells.unlocked
                        },
                        countsAs: [11],
                }, // inChallenge("l", 62) hasChallenge("l", 62)
                71: {
                        name: "Anti-Upsilon", 
                        reward(){
                                if (hasMilestone("or", 14)) return decimalOne
                                let data = player.l.challenges
                                let comps = 0
                                let keys = Object.keys(player.l.challenges)
                                for (i in keys){
                                        id = keys[i]
                                        if (id == 11 || id == 12) continue
                                        comps += data[id]
                                }
                                let base = getBuyableAmount("a", 13).max(10).log10()

                                if (hasMilestone("cells", 3)) base = base.times(Math.log(10)/Math.log(7))
                                if (hasMilestone("cells", 4)) base = base.times(Math.log(7)/Math.log(5))
                                if (hasMilestone("cells", 5)) base = base.times(Math.log(5))
                                if (hasMilestone("cells", 7)) base = base.div(Math.log(2))

                                return base.pow(comps)
                        },
                        goal: () => Decimal.pow(10, Decimal.pow(10, player.extremeMode ? 675900 : 579200)),
                        canComplete(){ 
                                if (player.l.challenges[11] < 110) return false
                                return player.points.gt(tmp.l.challenges[71].goal)
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                if (hasMilestone("or", 14)) return makeRed("<h3>Ineffective</h3>")
                                let a = "Dilation at 110 completions, subtract .2 from the Dilation exponent, and nullify µ effect"
                                let b = "Goal: e1e579,200 Points"
                                if (player.extremeMode) b = b.replace("579,200", "675,900")
                                let c = "Reward: Per Anti- challenge exponentiate Phosphorus gain ^ log10(miRNA) but nullify µ effect"
                                let d = "Currently: " + format(tmp.l.challenges[71].reward)

                                if (hasMilestone("cells", 3)) c = c.replace("log10", "log7")
                                if (hasMilestone("cells", 4)) c = c.replace("log7", "log5")
                                if (hasMilestone("cells", 5)) c = c.replace("log5", "ln")
                                if (hasMilestone("cells", 7)) c = c.replace("ln", "log2")

                                return a + br + b + br + c + br + d
                        },
                        unlocked(){
                                return hasMilestone("d", 18) || player.cells.unlocked
                        },
                        countsAs: [11],
                }, // inChallenge("l", 71) hasChallenge("l", 71)
                72: {
                        name: "Anti-Tau", 
                        goal: () => Decimal.pow(10, Decimal.pow(10, player.extremeMode ? 698896 : 641300)),
                        canComplete(){ 
                                if (player.l.challenges[11] < 110) return false
                                return player.points.gt(tmp.l.challenges[72].goal)
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                if (hasMilestone("or", 14)) return makeRed("<h3>Ineffective</h3>")
                                let a = "Dilation at 110 completions and subtract .22 from the Dilation exponent"
                                let b = "Goal: e1e641,300 Points"
                                if (player.extremeMode) b = b.replace("641,300", "698,896")
                                let c = "Reward: β → ∂α's log2 is removed and Anti-Nitrogen effects β → ∂𝛾"

                                return a + br + b + br + c
                        },
                        unlocked(){
                                return hasChallenge("l", 71) || player.cells.unlocked
                        },
                        countsAs: [11],
                }, // inChallenge("l", 72) hasChallenge("l", 72)
                81: {
                        name: "Anti-Sigma", 
                        goal: () => Decimal.pow(10, Decimal.pow(10, player.extremeMode ? 915000 : 701700)),
                        canComplete(){ 
                                if (player.l.challenges[11] < 110) return false
                                return player.points.gt(tmp.l.challenges[81].goal)
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                if (hasMilestone("or", 14)) return makeRed("<h3>Ineffective</h3>")
                                let a = "Dilation at 110 completions and subtract .24 from the Dilation exponent"
                                let b = "Goal: e1e701,700 Points"
                                if (player.extremeMode) b = b.replace("701,700", "915,000")
                                let c = "Reward: All Life buyables exponent bases are 500"

                                return a + br + b + br + c
                        },
                        unlocked(){
                                return hasChallenge("l", 72) || player.cells.unlocked
                        },
                        countsAs: [11],
                }, // inChallenge("l", 81) hasChallenge("l", 81)
                82: {
                        name: "Anti-Rho", 
                        goal: () => Decimal.pow(10, Decimal.pow(10, player.extremeMode ? 1981e3 : 1989e3)),
                        canComplete(){ 
                                if (player.l.challenges[11] < 110) return false
                                return player.points.gt(tmp.l.challenges[82].goal)
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                if (hasMilestone("or", 15)) return makeRed("<h3>Ineffective</h3>")
                                let a = "Dilation at 110 completions and subtract .26 from the Dilation exponent"
                                let b = "Goal: e1e1,989,000 Points"
                                if (player.extremeMode) b = b.replace("989", "981")
                                let c = "Reward: Add .0001 to tRNA base"

                                return a + br + b + br + c
                        },
                        unlocked(){
                                return hasChallenge("l", 81) || player.cells.unlocked
                        },
                        countsAs: [11],
                }, // inChallenge("l", 82) hasChallenge("l", 82)
                91: {
                        name: "Anti-Pi", 
                        reward(){
                                if (hasUpgrade("or", 131)) return decimalZero
                                let data = player.l.challenges
                                let comps = 0
                                let keys = Object.keys(player.l.challenges)
                                for (i in keys){
                                        id = keys[i]
                                        if (id == 11 || id == 12) continue
                                        comps += data[id]
                                }
                                return new Decimal(.01).times(comps)
                        },
                        goal: () => Decimal.pow(10, Decimal.pow(10, player.extremeMode ? 27100 : 312100)),
                        canComplete(){ 
                                if (player.l.challenges[11] < 110) return false
                                if (player.l.activeChallengeID != 808) return false
                                return player.points.gt(tmp.l.challenges[91].goal)
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                if (hasUpgrade("or", 131)) return makeRed("<h3>Ineffective</h3>")
                                let a = "Requires being in C88. Customizable and nullify µ III's effect"
                                let b = "Goal: e1e312,100 Points"
                                if (player.extremeMode) b = b.replace("312,100", "27,100")
                                let c = "Reward: Per Anti- challenge subtract .01 to µ cost exponent but µ III's µ becomes µ^.95"
                                if (player.extremeMode) c= c.replace("but", "and add .01 to " + makePurple("D") + " base but")
                                let d = "Currently: " + format(tmp.l.challenges[91].reward)

                                return a + br + b + br + c + br + d
                        },
                        unlocked(){
                                return hasMilestone("cells", 8) || player.t.unlocked
                        },
                        countsAs: [11, 12],
                }, // inChallenge("l", 91) hasChallenge("l", 91)
                92: {
                        name: "Anti-Omicron", 
                        reward(){
                                if (hasMilestone("or", 15)) return decimalOne
                                let data = player.l.challenges
                                let comps = 0
                                let keys = Object.keys(player.l.challenges)
                                for (i in keys){
                                        id = keys[i]
                                        if (id == 11 || id == 12) continue
                                        comps += data[id]
                                }
                                return new Decimal(comps).pow(1.5)
                        },
                        goal: () => Decimal.pow(10, Decimal.pow(10, player.extremeMode ? 27630 : 397000)),
                        canComplete(){ 
                                if (player.l.challenges[11] < 110) return false
                                if (player.l.activeChallengeID != 808) return false
                                return player.points.gt(tmp.l.challenges[92].goal)
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                if (hasMilestone("or", 15)) return makeRed("<h3>Ineffective</h3>")
                                let a = "Requires being in C88. Customizable and nullify Phosphorus IV's effect"
                                let b = "Goal: e1e397,000 Points"
                                if (player.extremeMode) b = b.replace("397,000", "27,630")
                                let c = "Reward: Raise Constant base to Anti- challenge completions<sup>1.5</sup> but nullify Phosphorus IV's effect"
                                if (player.extremeMode) c = c.replace("to", "to and multiply DNA Science gain by")
                                let d = "Currently: " + format(tmp.l.challenges[92].reward)

                                return a + br + b + br + c + br + d
                        },
                        unlocked(){
                                return hasChallenge("l", 91)
                        },
                        countsAs: [11, 12],
                }, // inChallenge("l", 92) hasChallenge("l", 92)
                101: {
                        name: "Anti-Xi", 
                        goal: () => Decimal.pow(10, Decimal.pow(10, player.extremeMode ? 23500 : 396600)),
                        canComplete(){ 
                                if (player.l.challenges[11] < 110) return false
                                if (player.l.activeChallengeID != 808) return false
                                return player.points.gt(tmp.l.challenges[101].goal)
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                if (hasMilestone("or", 15)) return makeRed("<h3>Ineffective</h3>")
                                let a = "Requires being in C88. Customizable and raise dilation effect ^1.2"
                                let b = "Goal: e1e396,600 Points"
                                if (player.extremeMode) b = b.replace("396,600", "23,500")
                                let c = "Reward: Change Life buyables exponent from 500<sup>1+x/DIV</sup> to x<sup>2.5</sup>/DIV, 𝛾 → ∂𝛾's primary base is 2468, and bulk 50x N → Δµ"

                                return a + br + b + br + c
                        },
                        unlocked(){
                                return hasChallenge("l", 92)
                        },
                        countsAs: [11, 12],
                }, // inChallenge("l", 101) hasChallenge("l", 101)
                102: {
                        name: "Anti-Nu", 
                        reward(){
                                let data = player.l.challenges
                                let comps = 0
                                let keys = Object.keys(player.l.challenges)
                                for (i in keys){
                                        id = keys[i]
                                        if (id == 11 || id == 12) continue
                                        comps += data[id]
                                }
                                return new Decimal(comps).pow(1.5)
                        },
                        goal: () => Decimal.pow(10, Decimal.pow(10, player.extremeMode ? 124700 : 28900e3)),
                        canComplete(){ 
                                if (player.l.challenges[11] < 110) return false
                                if (player.l.activeChallengeID != 808) return false
                                return player.points.gt(tmp.l.challenges[102].goal)
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                let a = "Requires being in C88. Customizable and raise dilation effect ^1.4"
                                let b = "Goal: e1e28,900,000 Points"
                                if (player.extremeMode) b = b.replace("28,900,000", "124,700")
                                let c = "Reward: Unlock a new feature in Cells! Bulk 50x N → Δµ"

                                return a + br + b + br + c
                        },
                        unlocked(){
                                return hasChallenge("l", 101)
                        },
                        countsAs: [11, 12],
                }, // inChallenge("l", 102) hasChallenge("l", 102)
                111: {
                        name: "Anti-Theta", 
                        goal: () => Decimal.pow(10, Decimal.pow(10, player.extremeMode ? 4088 : 2544e3)),
                        canComplete(){ 
                                if (player.l.challenges[11] < 110) return false
                                if (player.l.activeChallengeID != 808) return false
                                return player.points.gt(tmp.l.challenges[111].goal)
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                if (hasMilestone("or", 15)) return makeRed("<h3>Ineffective</h3>")
                                let a = "Requires being in C88 and Customizable and raise dilation effect ^60"
                                let b = "Goal: e1e2,544,000 Points"
                                let c = "Reward: Anti-Hydrogen effects DNA and Anti-Minigame effects Cells each at most ^1.5, and Anti-Carbon effect multiplies Stem Cell gain if you have over 15 Secondary completions"
                                if (player.extremeMode) {
                                        c = "Reward: Anti-Hydrogen effects DNA and Anti-Minigame effects Cells each at most ^1.5"
                                        a = a.replace("60", "30")
                                        b = b.replace("2,544,000", "4,088")
                                }

                                return a + br + b + br + c
                        },
                        unlocked(){
                                return hasMilestone("cells", 58) || player.t.unlocked
                        },
                        countsAs: [11, 12],
                }, // inChallenge("l", 111) hasChallenge("l", 111)
                112: {
                        name: "Anti-Eta", 
                        goal: () => Decimal.pow(10, Decimal.pow(10, player.extremeMode ? 5742 : 9949e3)),
                        canComplete(){ 
                                if (player.l.challenges[11] < 110) return false
                                if (player.l.activeChallengeID != 808) return false
                                return player.points.gt(tmp.l.challenges[112].goal)
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                if (hasMilestone("or", 15)) return makeRed("<h3>Ineffective</h3>")
                                let a = "Requires being in C88 and Customizable, α → ∂𝛾 doesn't effect prior exponent dividers and raise dilation effect ^60"
                                let b = "Goal: e1e9,949,000 Points"
                                let c = "Reward: Anti-Inflammatory effects Visible, add .0003 to tRNA's base, and Secondary is 1e4x easier but α → ∂𝛾 doesn't effect prior exponent dividers"
                                if (player.extremeMode) {
                                        c = "Reward: Add .0003 to tRNA's base and Secondary is 1e4x easier but α → ∂𝛾 doesn't effect prior exponent dividers"
                                        a = a.replace("60", "30")
                                        b = b.replace("9,949,000", "5,742")
                                }

                                return a + br + b + br + c
                        },
                        unlocked(){
                                return hasChallenge("l", 111)
                        },
                        countsAs: [11, 12],
                }, // inChallenge("l", 112) hasChallenge("l", 112)
                121: {
                        name: "Anti-Hard",
                        goal: () => decimalOne,
                        canComplete(){ 
                                return player.points.gt(tmp.l.challenges[121].goal)
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                if (hasMilestone("or", 15)) return makeRed("<h3>Ineffective</h3>")
                                let a = "Free!"
                                let b = "Goal: 1 Point"
                                let c = "Reward: Satisfaction!"

                                return a + br + b + br + c
                        },
                        unlocked(){
                                return hasUpgrade("t", 51)
                        },
                        countsAs: [],
                }, // inChallenge("l", 121) hasChallenge("l", 121)
                122: {
                        name: "Anti-Difficult",
                        goal: () => decimalOne,
                        canComplete(){ 
                                return player.points.gt(tmp.l.challenges[122].goal)
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                if (hasMilestone("or", 15)) return makeRed("<h3>Ineffective</h3>")
                                let a = "Free!"
                                let b = "Goal: 1 Point"
                                let c = "Reward: Bliss."

                                return a + br + b + br + c
                        },
                        unlocked(){
                                return hasMilestone("t", 6)
                        },
                        countsAs: [],
                }, // inChallenge("l", 122) hasChallenge("l", 122)
        },
        getNonZeroGemCount(){
                let data = player.l.grid
                let keys = ["101", "102", "103", "104", "105", "106", "107", "108", 
                            "201", "202", "203", "204", "205", "206", "207", "208", 
                            "301", "302", "303", "304", "305", "306", "307", "308", 
                            "401", "402", "403", "404", "405", "406", "407", "408", 
                            "501", "502", "503", "504", "505", "506", "507", "508", 
                            "601", "602", "603", "604", "605", "606", "607", "608", 
                            "701", "702", "703", "704", "705", "706", "707", "708", 
                            "801", "802", "803", "804", "805", "806", "807", "808"]
                let a = 0
                for (i in keys) {
                        let id = keys[i]
                        if (data[id].gems.gt(0)) a += 1
                }
                return a
        },
        getMaxedGemCount(){
                let data = player.l.grid
                let keys = ["101", "102", "103", "104", "105", "106", "107", "108", 
                            "201", "202", "203", "204", "205", "206", "207", "208", 
                            "301", "302", "303", "304", "305", "306", "307", "308", 
                            "401", "402", "403", "404", "405", "406", "407", "408", 
                            "501", "502", "503", "504", "505", "506", "507", "508", 
                            "601", "602", "603", "604", "605", "606", "607", "608", 
                            "701", "702", "703", "704", "705", "706", "707", "708", 
                            "801", "802", "803", "804", "805", "806", "807", "808"]
                let a = 0
                for (i in keys) {
                        let id = keys[i]
                        if (data[id].gems.gte(1e4)) a += 1
                }
                return a
        },
        grid: {
                rows(){
                        if (player.cells.unlocked) return 8
                        if (hasMilestone("d", 23)) return 8
                        if (hasChallenge("l", 62)) return 7
                        if (hasMilestone("d", 10)) return 6
                        if (hasUpgrade("a", 33) || player.d.unlocked) return 5
                        if (hasMilestone("a", 13)) return 4
                        return 3
                },
                cols(){
                        if (player.cells.unlocked) return 8
                        if (hasMilestone("d", 23)) return 8
                        if (hasChallenge("l", 62)) return 7
                        if (hasMilestone("d", 10)) return 6
                        if (hasUpgrade("a", 33) || player.d.unlocked) return 5
                        if (hasMilestone("a", 13)) return 4
                        return 3
                },
                maxRows: 8,
                maxCols: 8,
                getStartData(id) {
                        return {active: id == 101, gems: decimalZero, units: id % 100, hundreds: (id-id%100)/100}
                },
                getUnlocked(id) {
                        return player.l.challenges[11] >= 110 || player.a.unlocked
                },
                getCanClick(data, id) {
                        if (data.units > 1 && player.l.grid[id-1].gems.eq(0)) return false
                        if (data.hundreds > 1 && player.l.grid[id-100].gems.eq(0)) return false
                        return true
                },
                onClick(data, id) {
                        if (inChallenge("l", 12) && id != player.l.activeChallengeID) {
                                Vue.set(player.l, "activeChallenge", null)
                        }
                        if (player.l.activeChallengeID == undefined) {
                                player.l.activeChallengeID = id
                                data.active = true
                        } else {
                                player.l.grid[player.l.activeChallengeID].active = false
                                data.active = true
                                player.l.activeChallengeID = id
                        }
                },
                getStyle(data, id){
                        if (data.active) {
                                if (data.gems.gte(1e4)) return {"background-color": "#45860F"}
                                return {"background-color": "#99C53A"}
                        }
                        let x = ["#CC0033", "#D21A39", "#D93340", "#DF4D46", "#E6664D",
                                 "#EC8053", "#F29959", "#F9B360",]
                        let y = ["#0099FF", "#168AF8", "#2C7CF0", "#426DE9", "#575FE2",
                                 "#6D50DB", "#8342D3", "#9933CC",]
                        let valId = Math.max(data.units, data.hundreds)
                        if (data.gems.gte(1e4)) return {"background-color": y[valId-1]}
                        return {"background-color": x[valId-1]}
                },
                getDisplay(data, id) {
                        if (player.l.challengesDisplayState == 0) {
                                return "Gems: " + formatWhole(data.gems) + "<br>Currently: " + (data.active ? "On" : "Off")
                        }
                        if (!player.shiftAlias) {
                                if (player.extremeMode) return GEM_EFFECT_DESCRIPTIONS_EXTREME[id]
                                return GEM_EFFECT_DESCRIPTIONS[id]
                        }
                        id2 = id + (player.extremeMode ? 1000 : 0)
                        if ([203, 208, 1203, 1706, 706, 1801, 801].includes(id2)) {
                                let f = format(layers.l.grid.getGemEffect(id).times(100), 4)
                                return "Currently:<br>" + f + "/100"
                        }
                        if ([205, 306, 1205, 1306].includes(id2)) {
                                let f = format(layers.l.grid.getGemEffect(id).times(100), 4)
                                return "Currently:<br>" + f + "%"
                        }
                        if (id2 == 401 || id2 == 1401) {
                                let f = formatWhole(layers.l.grid.getGemEffect(id).times(100))
                                return "Currently:<br>" + f + "%"
                        }
                        if ([303, 404, 1301, 1303].includes(id2)) {
                                return "Currently:<br>" + formatWhole(layers.l.grid.getGemEffect(id))
                        }
                        let booleans = [1603, 1605, 603, 1207, 207, 
                                        1407, 407, 507, 1701, 701, 
                                        1705, 705, 1707, 707, 408, 
                                        608, 802, 803, 804, 806, 
                                        808, 1408, 1608, 1803, 1802,
                                        1804, 1806, 1808]
                        if (booleans.includes(id2)) {
                                return "Currently:<br>" + layers.l.grid.getGemEffect(id)
                        }
                        return "Currently:<br>" + format(layers.l.grid.getGemEffect(id), 4)
                }, // layers.l.grid.getGemEffect(id)
                getGemEffect(id) {
                        let g = player.l.grid[id].gems.floor()
                        if (g.gt(1e3)) g = g.min(1e4).log10().plus(7).pow(3) 
                        if (hasUpgrade("or", 134)) g = decimalZero 
                        if (player.extremeMode) {
                                if (GEM_EFFECT_FORMULAS_EXTREME[id] == undefined) return decimalZero
                                return GEM_EFFECT_FORMULAS_EXTREME[id](g)  
                        }
                        return GEM_EFFECT_FORMULAS[id](g)
                },
                getTitle(data, id){
                        if (data.gems.gte(1e4) && data.active) return makeRed("<b>C" + (data.hundreds*10+data.units) + "<b>")
                        return "C" + (data.hundreds*10+data.units)
                },
        },
        microtabs: {
                challenge_content: {
                        "Dilation": {
                                content: [
                                        ["challenges", [1]],
                                ],
                                unlocked(){
                                        return tmp.l.challenges[11].unlocked
                                },
                        },
                        "Selection": {
                                content: [
                                        "grid",
                                        ["clickables", [1]],
                                ],
                                unlocked(){
                                        return tmp.l.challenges[12].unlocked
                                },
                        },
                        "Anti": {
                                content: [
                                        ["challenges", [2,3,4,5,6,7,8,9,10,11,12]],
                                ],
                                unlocked(){
                                        return tmp.l.challenges[21].unlocked
                                },
                        },
                        "Info": {
                                content: [
                                        ["display-text", function(){
                                                let a = makeBlue("Challenge depths") + ":"
                                                let b = "If you are in challenge AB then you are in challenge A twice and challenge B once."
                                                let c = "Additionally each challenge other than challenge 2 puts you in the previous challenge and challenge 2 one more time."
                                                let d = "For example, challenge 45: By default its challenge 4 twice and challenge 5 once."
                                                let e = "However, you are also in challenge 4 again because you are in challenge 5."
                                                let f = "So in effect you are in challenges 2/3/4/5 a total of 10/3/3/1 times."
                                                let g = "Note: Depths is the number of times you are in the given challenge."
                                                let step1 = a + br + b + br + c + br + d + br + e + br + f + br + g

                                                let challStart = makeBlue("The effects of challenges") + ":" + br
                                                let c2 = "Challenge 2: Add .01 to µ cost exponent per depth"
                                                let c3 = "Challenge 3: Dilate Oxygen and Carbon gain ^.99 per depth+1 choose 2"
                                                let c4 = "Challenge 4: Subtract floor(35*depth<sup>.5</sup>)/1000 from the Dilation exponent"
                                                let c5 = "Challenge 5: Dilate Point gain ^.665<sup>sqrt(depth)</sup>"
                                                let c6 = "Challenge 6: Per challenge 2 depth + 86 dilate point gain ^(.96^depth<sup>1/8</sup>)"
                                                let c7 = "Challenge 7: Challenge 6 base is reduced by .023*depth<sup>.56</sup>"
                                                let c8 = "Challenge 8: Challenge 3 to 7 depths are 3.3 + depths/2 times more and<br>challenge 2 is .5 + depths/2 times more"
                                                if (player.extremeMode) {
                                                        c3 = c3.replace(".99", ".985-depth/200")
                                                        c5 = c5.replace(".665", ".713")
                                                        c6 = c6.replace(".96", ".951")
                                                        c6 = c6.replace("1/8", "1/10")
                                                        c7 = c7.replace(".023", ".0188")
                                                        c8 = "Challenge 8: Challenge 2 to 7 depths are 2.36 + depths/2 times more"
                                                }
                                                let challs = challStart + c2 + br + c3 + br + c4 + br + c5 + br + c6 + br + c7 + br + c8

                                                let q = "Note: Effect gem amounts above 10,000 are hardcapped and<br>above 1,000 are softcapped x → (7+log10(x))<sup>3</sup>"
                                                
                                                let step2 = step1 + br2 + challs + br2 + q

                                                if (!hasMilestone("d", 14) && !player.cells.unlocked) return step2

                                                let r = "<sup>*</sup>Base Phosphorus gain is set to 1 so you can still gain Phosphorus"

                                                return step2 + br2 + r
                                        }]
                                ],
                                unlocked(){
                                        return tmp.l.challenges[12].unlocked
                                },
                        },
                },
        },
        tabFormat: {
                "Challenges": {
                        content: [
                                "main-display",
                                ["prestige-button", ""],
                                "blank", 
                                function(){return tmp.l.challenges[11].unlocked ? ["microtabs", "challenge_content"] : "blank"},
                        ],
                        unlocked(){
                                return true
                        },
                },
                "Upgrades": {
                        content: [
                                "main-display",
                                ["prestige-button", ""],
                                "blank", 
                                "upgrades",
                                ],
                        unlocked(){
                                return player.extremeMode && hasMilestone("l", 8)
                        },
                },
                "Milestones": {
                        content: [
                                "main-display",
                                ["display-text", function(){
                                        return "You have done " + formatWhole(player.l.times) + " Life resets"
                                }],
                                "milestones",
                        ],
                        unlocked(){
                                return true
                        },
                },
                "Buyables": {
                        content: [
                                "main-display",
                                "blank",
                                ["buyables", [1,2,3]],
                        ],
                        unlocked(){
                                return (player.l.challenges[11] >= 30 || player.a.unlocked) && !hasUpgrade("cells", 64)
                        },
                        shouldNotify(){
                                if (hasMilestone("a", 5) && data.autobuylbuys || hasMilestone("d", 1)) return false
                                x = [11, 12, 13, 21, 22,
                                     23, 31, 32, 33]
                                for (i in x) {
                                        id = x[i]
                                        if (layers.l.buyables[id] == undefined) continue
                                        if (!tmp.l.buyables[id].unlocked) continue
                                        if (tmp.l.buyables[id].canBuy) return true
                                }
                                return false
                        }
                },
                "Info": {
                        content: [
                                "main-display",
                                ["display-text", function(){
                                        let a = "Initial life gain: sqrt(log2(log2(log10(Life Points)))-9)" + br2 
                                        let b = "Life resets reset everything before Life except achievements" + br2
                                        b += "For unlocking Life, you maintain all minigame autobuyers and token resets do nothing." + br2
                                        let c = "Life affects most prior currencies:" + br
                                        let d = "Life Points, Hydrogen, Atomic Hydrogen, Deuterium, " + br
                                        let e = "Carbon, Oxygen, Nitrogen, Phosphorus/s, Coins, Color amounts," + br
                                        if (player.extremeMode) e += "Science<sup>**</sup>, Hydrogen Science, Oxygen Science, Carbon Science, Nitrogen Science<sup>**</sup>," + br
                                        let f = "A Points, B Points, C Points, D Points, and E Points"
                                        let step0 = a + b + c + d + e + f + "."
                                        if (player.extremeMode) step0 += br2 + "<sup>**</sup>Capped at 1e10 and not affected by Life milestone 1"
                                        if (hasUpgrade("l", 11)) {
                                                step0 = step0.replace("Nitrogen Science<sup>**</sup>,", "Nitrogen Science<sup>*3</sup>")
                                                step0 += br + "<sup>*3</sup>Capped a 1e10"
                                        }

                                        if (!tmp.l.challenges[11].unlocked) return step0

                                        let g = "Dilation nerfs x → 10^(log10(x)^exp)"
                                        let step1 = step0 + br2 + g
                                        if (player.l.challenges[11] < 50) return step1
                                        let formExp = format(tmp.l.getGainExp)
                                        let h = "Current base gain is " + format(tmp.l.getBaseGain)
                                        h += " and gain exp is " + formExp

                                        let i = "Current gain formula is (log2(log2(log10(Life Points)))"
                                        if (hasChallenge("l", 51)) i = "Current gain formula is (log2(log10(Life Points))"
                                        if (tmp.l.getBaseSubAmount.gt(0)) i += "-" + format(tmp.l.getBaseSubAmount)
                                        else i += "+" + format(tmp.l.getBaseSubAmount.times(-1))
                                        i += ")<sup>" + formExp + "</sup>"
                                        
                                        if (!player.d.unlocked) return step1 + br2 + i + br + h
                                        
                                        let j = "Exponential dividers are hardcapped at 1e9"

                                        return step1 + br2 + i + br + h + br2 + j
                                }],
                        ],
                        unlocked(){
                                return true
                        },
                },
                
        },
        onPrestige(){
                let timesAdd = 1
                if (player.easyMode) timesAdd *= 2
                if (hasMilestone("a", 1)) timesAdd *= 3
                player.l.times += timesAdd
                player.l.time = 0
        },
        doReset(layer, force=false){
                if (layer != "l" && !force) return
                player.l.time = 0

                //this does a L reset

                /*
                1. mu content
                2. Phosphorus content
                3. Nitrogen content
                4. Oxygen content
                5. Carbon content
                6. Minigame content
                6a/b/c/d/e. a/b/c/d/e point content
                7. Token content
                7a. Coin content
                8. Hydrogen content
                8a/b. Atomic/molecular hydrogen
                */

                let data1 = player.mu
                let data2 = player.p
                let data3 = player.n
                let data4 = player.o
                let data5 = player.c
                let data6 = player.mini
                let data7 = player.tokens
                let data8 = player.h

                // 1 Mu content
                if (!player.d.unlocked) {
                        let muUpgRem = [11, 12, 13, 14, 15, 
                                        21, 22, 23, 24, 25, 
                                        31, 32, 33, 34, 35]
                        if (hasMilestone("l", 3)) muUpgRem = filterOut(muUpgRem, [35])
                        // upgrades
                        data1.upgrades = filterOut(data1.upgrades, muUpgRem)
                        
                        let muKeptMilestones = 0
                        if (hasMilestone("a", 2)) muKeptMilestones += player.a.times 
                        if (!hasMilestone("l", 8)) {
                                sortStrings(data1.milestones)
                                data1.milestones = data1.milestones.slice(0, muKeptMilestones)
                        }
                }

                data1.points = decimalZero
                data1.best = decimalZero
                data1.total = decimalZero
                data1.buyables[11] = decimalZero
                data1.buyables[12] = decimalZero
                data1.buyables[13] = decimalZero
                data1.buyables[21] = decimalZero
                data1.buyables[22] = decimalZero
                data1.buyables[23] = decimalZero
                data1.buyables[31] = decimalZero // buyables
                data1.buyables[32] = decimalZero

                // 2 Phosphorus content
                if (!player.d.unlocked) {
                        let pUpgRem = [11, 12, 13, 14, 15, 
                                       21, 22, 23, 24, 25, 
                                       31, 32, 33, 34, 35,
                                       101,102,103,104,105,
                                       111,112,113,114,115,]
                        if (hasMilestone("l", 6)) pUpgRem = filterOut(pUpgRem, [13])
                        // upgrades
                        data2.upgrades = filterOut(data2.upgrades, pUpgRem)

                        let pKeptMilestones = 0
                        if (hasMilestone("l", 5)) pKeptMilestones = player.l.times
                        if (hasMilestone("a", 1)) pKeptMilestones += 6
                        if (!hasMilestone("a", 2)) {
                                sortStrings(data2.milestones)
                                data2.milestones = data2.milestones.slice(0, pKeptMilestones)
                        }

                        data2.times = 0
                }

                data2.currentGainPerSec = decimalZero
                data2.points = decimalZero
                data2.best = decimalZero
                data2.total = decimalZero

                // 3: Nitrogen conent
                if (!player.a.unlocked) {
                        let nUpgRem = [11, 12, 13, 14, 15, 
                                       21, 22, 23, 24, 25, 
                                       31, 32, 33, 34, 35,
                                       41, 42, 43, 44, 45,
                                       51, 52, 53, 54, 55,]
                        if (!hasMilestone("a", 6) && !hasUpgrade("l", 12)) {
                                data3.upgrades = filterOut(data3.upgrades, nUpgRem)
                        }

                        let nKeptMilestones = 0
                        if (!hasMilestone("l", 5)) {
                                sortStrings(data3.milestones)
                                data3.milestones = data3.milestones.slice(0, nKeptMilestones)
                        }

                        if (!hasMilestone("l", 4)) {
                                data3.challenges[11] = 0
                                data3.challenges[12] = 0
                                data3.challenges[21] = 0
                                data3.challenges[22] = 0
                                data3.challenges[31] = 0
                                data3.challenges[32] = 0
                                data3.challenges[41] = 0
                                data3.challenges[42] = 0
                        }

                        data3.times = 0
                }

                data3.points = decimalZero
                data3.best = decimalZero
                data3.total = decimalZero

                // 4 Oxygen content
                if (!player.a.everMilestone3 && !hasUpgrade("l", 24)) {
                        let oUpgRem = [11, 12, 13, 14, 15, 
                                       21, 22, 23, 24, 25, 
                                       31, 32, 33, 34, 35]
                        data4.upgrades = filterOut(data4.upgrades, oUpgRem)
                }
                
                data4.points = decimalZero
                data4.best = decimalZero
                data4.total = decimalZero

                // 5 Carbon content
                if (!player.a.everMilestone3 && !hasUpgrade("l", 24)) {
                        let cUpgRem = [11, 12, 13, 14, 15, 
                                       21, 22, 23, 24, 25, 
                                       31, 32, 33, 34, 35]
                        data5.upgrades = filterOut(data5.upgrades, cUpgRem)
                }

                data5.points = decimalZero
                data5.best = decimalZero
                data5.total = decimalZero

                // 6 minigame content
                if (!player.a.everMilestone3) {
                        if (!hasUpgrade("l", 24)) { //6a
                                data6.a_points.extras[11] = decimalZero
                                data6.a_points.extras[12] = decimalZero
                                data6.a_points.extras[13] = decimalZero
                                data6.a_points.extras[21] = decimalZero
                                data6.a_points.extras[23] = decimalZero
                                data6.a_points.extras[61] = decimalZero
                                data6.a_points.extras[62] = decimalZero
                                data6.a_points.extras[63] = decimalZero
                        }

                        if (!false) { //6c
                                let cPtUpgRem = [11, 12, 13, 14, 15, 
                                                 21, 22, 23, 24, 25, 
                                                 31, 32, 33, 34, 35,
                                                 41, 42, 43, 44, 45]
                                if (hasMilestone("l", 5)) cPtUpgRem = filterOut(cPtUpgRem, [12])
                                if (!hasMilestone("l", 7)) { // upgrades
                                        data6.upgrades = filterOut(data6.upgrades, cPtUpgRem)
                                }
                        }

                        if (!false) { //6d
                                let dPtUpgRem = [51, 52, 53, 54, 55, 
                                                 61, 62, 63, 64, 65, 
                                                 71, 72, 73, 74, 75,
                                                 81, 82, 83, 84, 85]
                                if (!hasMilestone("l", 7)) { // upgrades
                                        data6.upgrades = filterOut(data6.upgrades, dPtUpgRem)
                                }
                        }
                }

                let resetBuyableIds = [11, 12, 13, 21, 23, 
                                       61, 62, 63, 31, 32, 
                                       33, 41, 42, 43, 51, 
                                       52, 53, 71, 72, 73, 
                                       81, 82, 83, 91, 92, 
                                       93, 101, 102, 103, 
                                       111, 112, 113, 121, 
                                       122, 123, 131, 132, 
                                       133, 151, 152, 153, 
                                       161, 162, 163, 171, 
                                       172, 173, 181, 182, 
                                       183, 201, 202, 203, 
                                       211, 212, 213, 221, 
                                       222, 223, 231, 232, 
                                       233, 241]

                for (i in resetBuyableIds){
                        x = resetBuyableIds[i]
                        data6.buyables[x] = decimalZero
                }
                
                data6.a_points.points = decimalZero
                data6.a_points.best = decimalZero
                data6.b_points.points = decimalZero
                data6.b_points.best = decimalZero
                data6.c_points.points = decimalZero
                data6.c_points.best = decimalZero
                data6.c_points.lastRoll = []
                data6.d_points.points = decimalZero
                data6.d_points.best = decimalZero
                data6.d_points.fuel = hasMilestone("l", 5) ? decimalOne : decimalZero
                data6.e_points.points = decimalZero
                data6.e_points.best = decimalZero

                // 7 token content
                if (!hasUpgrade("p", 52) && !player.a.unlocked) {
                        let tokenKeptMilestones = 0 //milestones
                        if (!hasMilestone("l", 8)) {
                                sortStrings(data7.milestones)
                                data7.milestones = data7.milestones.slice(0, tokenKeptMilestones)
                        }

                        let resetKeys = ["11", "12", "13", "21", "22", 
                                         "23", "31", "32", "33", "41", 
                                         "42", "43", "51", "52", "53", 
                                         "61", "62", "63"]

                        for (let i = 0; i < 18; i ++){
                                x = resetKeys[i]
                                data7.buyables[x] = decimalZero
                                data7.best_buyables[x] = decimalZero
                        }

                        if (!hasMilestone("l", 3)) { // 7a
                                let coinUpgRem = [11, 21, 22, 31, 32, 
                                                  33, 34, 41, 42, 51, 
                                                  52, 61, 62, 71, 72, 
                                                  73, 81, 82, 91, 92, 
                                                  93, 94, 95]
                                // upgrades
                                data7.upgrades = filterOut(data7.upgrades, coinUpgRem)
                        }

                        data7.coins.points = decimalZero
                        data7.coins.best = decimalZero
                        let tokenStart = hasUpgrade("l", 24) ? new Decimal(200) : decimalZero
                        data7.points = tokenStart
                        data7.best = tokenStart
                        data7.total = tokenStart
                }

                // 8 Hydrogen content
                if (!player.a.everMilestone3) {
                        data8.points = decimalZero
                        data8.best = decimalZero
                        data8.total = decimalZero
                        data8.atomic_hydrogen.points = decimalZero
                        data8.atomic_hydrogen.best = decimalZero
                        data8.deuterium.points = decimalZero
                        data8.deuterium.best = decimalZero

                        let hUpgRem = [11, 12, 13, 14, 15, 
                                       21, 22, 23, 24, 25, 
                                       31, 32, 33, 34, 35, 
                                       41, 42, 43, 44, 45, 
                                       51, 52, 53, 54, 55, 
                                       61, 62, 63, 64, 65, 
                                       71, 72, 73, 74, 75, 
                                       81, 82, 83, 84, 85]
                        // upgrades
                        data8.upgrades = filterOut(data8.upgrades, hUpgRem)
                }

                if (player.extremeMode) layers.sci.doReset("l")

                player.tokens.lastRespecDisplayFormula = layers.tokens.buyables.costFormulaText()
                // make the display update
        },
})

addLayer("a", {
        name: "Amino", 
        symbol: "A", 
        position: 0, 
        startData(){ return {
                unlocked: false,
		points: decimalZero,
                best: decimalZero,
                total: decimalZero,
                abtime: 0,
                time: 0,
                times: 0,
                autoBuyableTime: 0,
                passiveTime: 0,
                gemPassiveTime: 0,
                protein: {
                        best: decimalZero,
                        total: decimalZero,
                        points: decimalZero,
                        passiveTime: 0,
                },
                everMilestone3: false,
        }},
        color: "#F2990D",
        branches: [],
        requires:() => Decimal.pow(2, player.extremeMode ? 1812 : 1880), 
        resource: "Amino Acids", 
        baseResource: "Lives", 
        baseAmount(){return player.l.points},
        type: "custom",
        getResetGain(){
                let ret = tmp.a.getBaseGain.times(tmp.a.getGainMult)
                
                if (player.extremeMode) ret = ret.pow(.75)

                return ret.floor()
        },
        getBaseGain(){
                if (hasUpgrade("or", 135)) return decimalOne
                let pts = player.l.points
                let init = pts.max(10).log(2).sub(player.extremeMode ? 1300 : 1368)
                if (init.lt(512)) return decimalZero

                return init.cbrt().sub(7).pow(tmp.a.getGainExp)
        },
        getGainExp(){
                return new Decimal(2).plus(layers.l.grid.getGemEffect(502))
        },
        getGainMult(){ // amino gain aminogain again a gain acidgain amino acid gain aminoacidgain
                let ret = decimalOne

                if (hasUpgrade("a", 25))        ret = ret.times(getBuyableAmount("a", 13).max(1))
                if (!player.extremeMode)        ret = ret.times(layers.l.grid.getGemEffect(305))
                if (hasMilestone("a", 28))      ret = ret.times(getBuyableAmount("a", 21).max(1))
                if (hasUpgrade("a", 43))        ret = ret.times(Decimal.pow(player.extremeMode ? 1.03 : 1.02, getBuyableAmount("a", 22)))
                if (hasMilestone("a", 44))      ret = ret.times(Decimal.pow(1.1, getBuyableAmount("a", 13)))
                if (hasUpgrade("a", 51))        ret = ret.times(Decimal.pow(2, player.a.milestones.length))
                if (hasUpgrade("a", 63))        ret = ret.times(player.a.protein.points.max(10).log10())
                                                ret = ret.times(tmp.a.buyables[33].effect)
                                                ret = ret.times(tmp.d.effect[1-hasUpgrade("t", 92)] || 1)
                if (hasChallenge("l", 21))      ret = ret.times(tmp.l.challenges[21].reward)
                if (layers.l.grid.getGemEffect(804)) {
                                                ret = ret.times(tmp.tokens.buyables[31].effect)
                }
                if (hasMilestone("cells", 10))  ret = ret.times(player.cells.total13.max(1))
                                                ret = ret.times(tmp.t.effect)
                                                ret = ret.times(tmp.or.effect)
                if (player.easyMode)            ret = ret.times(2)
                if (hasUpgrade("sci", 403))     ret = ret.times(Decimal.pow(2, tmp.sci.upgrades.proteinUpgradesLength))
                if (hasUpgrade("sci", 434))     ret = ret.times(Decimal.pow(2, tmp.sci.upgrades.proteinUpgradesLength))
                                                ret = ret.times(player.sci.dna_science.points.max(1).pow(tmp.sci.buyables[501].effect))

                return ret
        },
        getNextAt(){
                let gain = tmp.a.getResetGain.plus(1)

                if (player.extremeMode) gain = gain.root(.75)

                let reqInit = gain.div(tmp.a.getGainMult).max(1)
                let v1 = reqInit.root(tmp.a.getGainExp).plus(7).pow(3).plus(player.extremeMode ? 1300 : 1368)
                return Decimal.pow(2, v1)
        },
        canReset(){
                return tmp.a.getResetGain.gt(0)
        },
        tooltip(){
                if (player.a.protein.points.eq(0)) return formatCurrency(player.a.points) + " Amino Acid"
                return formatCurrency(player.a.points) + " Amino Acid and " + formatCurrency(player.a.protein.points) + " Protein"
        },
        effect(){
                let amt = player.a.best

                let exp = amt.sqrt().min(10)
                exp = exp.plus(layers.l.grid.getGemEffect(104))

                return amt.plus(1).pow(exp)
        },
        effectDescription(){
                if (player.shiftAlias) return " (x+1)<sup>min(10, sqrt(x))</sup>"
                return " multiply Life gain by " + format(tmp.a.effect) + "."
        },
        update(diff){
                if (tmp.a.deactivated) return
                let data = player.a
                
                if (player.l.grid[303].gems.gt(0)) data.unlocked = true
                data.best = data.best.max(data.points)

                let forceAbContent = hasMilestone("d", 1) || hasMilestone("or", 1)

                if (hasMilestone("a", 4) && data.autobuypmu45 || forceAbContent) {
                        let boughtYet = false
                        let pMuKeys = ["41", "42", "43", "44", "45", 
                                       "51", "52", "53", "54", "55"]
                        for (i in pMuKeys) {
                                if (boughtYet) break
                                id = pMuKeys[i]
                                boughtYet = buyUpg("p", id) 
                                if (boughtYet) break
                                boughtYet = buyUpg("mu", id) 
                        }
                }

                data.time += diff
                data.passiveTime += diff
                data.gemPassiveTime += diff

                let buyFactor = 1
                if (hasMilestone("a", 8)) buyFactor *= 2
                if (hasMilestone("a", 10)) buyFactor *= 2.5
                if (hasMilestone("a", 11)) buyFactor *= 2
                if (hasMilestone("a", 16)) buyFactor *= 2
                if (hasMilestone("d", 1)) buyFactor = 20

                data.autoBuyableTime += diff * buyFactor
                if (hasMilestone("d", 5) || hasMilestone("a", 18)) {
                        if (data.passiveTime > 1) {
                                data.passiveTime += -1
                                data.times ++
                        } 
                        if (data.passiveTime > 10) data.passiveTime = 10
                } else data.passiveTime = 0

                let gainportion = layers.l.grid.getGemEffect(401)
                if (hasUpgrade("or", 12)) gainportion = gainportion.plus(1)
                if (!hasUpgrade("a", 63)) {
                        if (gainportion.gt(0)) {
                                let gainAmt = tmp.a.getResetGain.times(diff).times(gainportion)
                                data.points = data.points.plus(gainAmt)
                                data.total = data.total.plus(gainAmt)
                        }
                } else {
                        if (gainportion.gt(0)) {
                                let time = Decimal.sub(100, data.points.div(tmp.a.getResetGain)).max(0)
                                if (gainportion.times(diff).lt(time)) { // the amount we expect to gain is less than the max
                                        data.points = data.points.plus(tmp.a.getResetGain.times(gainportion).times(diff))
                                        data.total = data.total.plus(tmp.a.getResetGain.times(gainportion).times(diff))
                                } else {
                                        let newGain = tmp.a.getResetGain.times(100).sub(data.points).max(0)
                                        data.points = tmp.a.getResetGain.times(100).max(data.points)
                                        data.total = data.total.plus(newGain)
                                }
                        }
                }

                if (hasMilestone("a", 4)) {
                        if (data.gemPassiveTime > 10) data.gemPassiveTime = 10
                        if (data.gemPassiveTime > 1) {
                                data.gemPassiveTime += -1
                                let gridData = player.l.grid

                                let doThese = []
                                if (hasMilestone("a", 4))       doThese.push(101)
                                if (hasMilestone("a", 5))       doThese.push(102)
                                if (hasMilestone("a", 6))       doThese.push(201)
                                if (hasMilestone("a", 7))       doThese.push(202)
                                if (hasMilestone("a", 8))       doThese.push(103)
                                if (hasMilestone("a", 9))       doThese.push(203)
                                if (hasMilestone("a", 10))      doThese.push(301)
                                if (hasMilestone("a", 11))      doThese.push(302)
                                if (hasMilestone("a", 12))      doThese.push(303)
                                if (hasMilestone("a", 21))      doThese.push(404)
                                if (hasUpgrade("a", 23))        doThese.push(401)
                                if (hasUpgrade("a", 24))        doThese.push(402)
                                if (hasUpgrade("a", 25))        doThese.push(403)
                                if (hasUpgrade("a", 31))        doThese.push(304)
                                if (hasUpgrade("a", 32))        doThese.push(204)
                                if (hasUpgrade("a", 33))        doThese.push(104)
                                if (hasMilestone("d", 4))       doThese.push(405)
                                if (hasMilestone("d", 5))       doThese.push(305)
                                if (hasMilestone("d", 6))       doThese.push(205)
                                if (hasMilestone("d", 7))       doThese.push(105)
                                if (hasMilestone("d", 8))       doThese.push(501)
                                if (hasMilestone("d", 9))       doThese.push(502)
                                if (hasMilestone("d", 10))      doThese.push(503)
                                if (hasMilestone("d", 11))      doThese.push(504)
                                if (hasMilestone("d", 12))      doThese.push(505)

                                let addPer = 1
                                if (hasMilestone("d", 3)) addPer = 10
                                if (hasMilestone("d", 8)) addPer = 100
                                for (i in doThese) {
                                        id = doThese[i]
                                        if ((gridData[id].gems.lt(1e3) || hasMilestone("d", 8)) && gridData[id].gems.lt(1e4)) {
                                                gridData[id].gems = gridData[id].gems.plus(addPer)
                                        }
                                }
                        }
                } else data.gemPassiveTime = 0

                if (((hasMilestone("a", 5) && data.autobuylbuys) || forceAbContent) && !hasUpgrade("cells", 64)) {
                        if (data.autoBuyableTime > 10) data.autoBuyableTime = 10
                        if (data.autoBuyableTime > 1) {
                                data.autoBuyableTime += -1
                                let ids = [11, 12, 13, 21, 22,
                                           23, 31, 32, 33]

                                for (i in ids) {
                                        id = ids[i]
                                        if (tmp.l.buyables[id].canAfford) {
                                                layers.l.buyables[id].buy()
                                                if (!hasMilestone("a", 17) && !forceAbContent) break
                                        }
                                }
                        }
                } else data.autoBuyableTime = 0

                if (hasUpgrade("a", 11)) {
                        let data2 = data.protein
                        let gain = tmp.a.protein.getResetGain
                        data2.points = data2.points.plus(gain.times(diff))
                        data2.total = data2.total.plus(gain.times(diff))
                        data2.best = data2.best.max(data2.points)

                        let proteinTimeMult = 1
                        if (hasUpgrade("a", 22)) proteinTimeMult *= 2
                        if (hasUpgrade("a", 23)) proteinTimeMult *= 2.5
                        if (hasUpgrade("a", 24)) proteinTimeMult *= 2
                        if (hasUpgrade("a", 25)) proteinTimeMult *= 2
                        if (forceAbContent) proteinTimeMult = 20
                        
                        data2.passiveTime += diff * proteinTimeMult
                        if (hasUpgrade("a", 21) || forceAbContent) {
                                if (data2.passiveTime > 10) data2.passiveTime = 10
                                if (data2.passiveTime > 1) {
                                        data2.passiveTime += -1
                                        if (tmp.a.buyables[11].canBuy) layers.a.buyables[11].buy()
                                        if ((forceAbContent || hasUpgrade("a", 22)) && tmp.a.buyables[12].canBuy) {
                                                layers.a.buyables[12].buy()
                                        }
                                        if ((forceAbContent || hasMilestone("a", 30)) && tmp.a.buyables[21].canBuy) {
                                                layers.a.buyables[21].buy()
                                        }
                                        if ((forceAbContent || hasMilestone("a", 38)) && tmp.a.buyables[22].canBuy) {
                                                layers.a.buyables[22].buy()
                                        } 
                                        if ((forceAbContent || hasUpgrade("a", 53)) && tmp.a.buyables[23].canBuy) {
                                                layers.a.buyables[23].buy()
                                        } 
                                        if ((hasMilestone("d", 4) || hasMilestone("or", 1) || hasUpgrade("cells", 11)) && tmp.a.buyables[31].canBuy){
                                                layers.a.buyables[31].buy()
                                        }
                                        if ((hasMilestone("d", 6) || hasMilestone("or", 1) || hasUpgrade("cells", 11)) && tmp.a.buyables[32].canBuy){
                                                layers.a.buyables[32].buy()
                                        }
                                        if ((hasMilestone("d", 12) || hasMilestone("or", 1) || hasUpgrade("cells", 11)) && tmp.a.buyables[13].canBuy){
                                                layers.a.buyables[13].buy()
                                        }
                                        if ((layers.l.grid.getGemEffect(603) || hasMilestone("or", 1) || hasUpgrade("cells", 11)) && tmp.a.buyables[33].canBuy) {
                                                layers.a.buyables[33].buy()
                                        }
                                }
                        } else data2.passiveTime = 0

                        if (hasMilestone("a", 32) || hasMilestone("d", 1)) {
                                let othergain = tmp.a.protein.getAllOtherGain
                                let exp = tmp.a.protein.mRNAtRNABoostExp
                                let timemult = Math.pow(10, -6)
                                if (hasMilestone("d", 2)) timemult = Math.pow(10, -4)
                                if (hasMilestone("a", 32)) timemult = .001
                                if (hasMilestone("a", 39)) timemult = .05
                                let tRNAFactor = Decimal.pow(tmp.a.buyables[11].baseCost, tmp.a.buyables[11].base.log(5))
                                let mRNAFactor = Decimal.pow(tmp.a.buyables[12].baseCost, tmp.a.buyables[12].base.log(10))
                                let mult = mRNAFactor.times(tRNAFactor).pow(-1).times(timemult)
                                data2.points = data2.points.plus(othergain.times(mult).pow(exp).times(diff).min("1ee40"))
                        }
                }
        },
        row: 3, 
        prestigeButtonText(){
                let b = ""
                if (tmp.a.getResetGain.lt(1e3)) b = "<br>Next: " + format(tmp.a.getNextAt) + " Lives."

                return "Reset for <b>" + formatWhole(tmp.a.getResetGain) + "</b> Amino Acids" + b
        },
        layerShown(){
                return player.a.unlocked && !tmp.a.deactivated
        },
        deactivated(){
                return hasUpgrade("or", 223)
        },
        protein: {
                getAUpgBase(){
                        let aUpgBase = decimalOne
                        
                        if (hasUpgrade("a", 14))        aUpgBase = aUpgBase.times(player.extremeMode ? 3 : 2)
                        if (hasUpgrade("a", 32))        aUpgBase = aUpgBase.times(player.extremeMode ? 3 : 2)
                                                        aUpgBase = aUpgBase.times(layers.l.grid.getGemEffect(503))

                        return aUpgBase
                },
                getSciUpgBase(){
                        if (!player.extremeMode) return decimalOne
                        let ret = decimalOne

                        if (hasUpgrade("sci", 401)) ret = ret.times(2)
                        if (hasUpgrade("sci", 404)) ret = ret.times(player.sci.protein_science.points.plus(10).log10())
                        if (hasUpgrade("sci", 441)) ret = ret.times(player.a.protein.points.max(10).log10().max(10).log10())
                        if (hasUpgrade("sci", 452)) ret = ret.times(player.d.points.plus(10).log10().pow(2))

                        return ret
                },
                getAMilestoneBase(){
                        let base = decimalOne
                        
                        if (hasMilestone("a", 22)) base = base.times(1 + player.a.milestones.length/100)
                        if (hasMilestone("a", 33)) base = base.times(2)
                        if (hasMilestone("a", 34)) base = base.times(2)
                        if (hasMilestone("a", 38)) base = base.times(2)
                        if (hasMilestone("a", 40)) base = base.times(2)
                        if (hasMilestone("a", 41)) base = base.times(2)
                        if (hasMilestone("a", 43)) base = base.times(2)

                        return base
                },
                getAllOtherGain(){ // protein gain protaingain progain pgain pro gain
                        let ret = player.a.points.plus(10).log10()

                        if (player.hardMode)            ret = ret.div(5)
                                                        ret = ret.times(tmp.d.effect[0] || 1)

                                                        ret = ret.times(tmp.a.buyables[13].effect)
                                                        ret = ret.times(tmp.a.buyables[21].effect)
                                                        ret = ret.times(tmp.a.buyables[23].effect)
                                                        ret = ret.times(tmp.a.buyables[31].effect)
                                                        ret = ret.times(tmp.a.buyables[32].effect)

                                                        ret = ret.times(tmp.a.protein.getAUpgBase.pow(player.a.upgrades.length))
                        if (player.extremeMode)         ret = ret.times(tmp.a.protein.getSciUpgBase.pow(tmp.sci.upgrades.proteinUpgradesLength))
                        if (hasUpgrade("a", 15))        ret = ret.times(getBuyableAmount("a", 12).max(1))
                        if (hasUpgrade("a", 31))        ret = ret.times(getBuyableAmount("a", 13).max(1).pow(3))
                        if (hasUpgrade("a", 13))        ret = ret.times(getBuyableAmount("a", 11).max(1))
                        if (hasUpgrade("a", 42))        ret = ret.times(getBuyableAmount("a", 22).max(1))
                        if (hasMilestone("a", 28))      ret = ret.times(getBuyableAmount("a", 21).max(1))
                        if (hasUpgrade("a", 45))        ret = ret.times(getBuyableAmount("a", 23).max(1).pow(2))
                        
                        if (hasMilestone("a", 29))      ret = ret.times(getBuyableAmount("a", 13).div(100).plus(1).pow(getBuyableAmount("a", 22)))
                        if (hasMilestone("a", 31))      ret = ret.times(player.a.points.min(player.extremeMode ? 1e50 : 1e25).max(1))
                                                        ret = ret.times(tmp.a.protein.getAMilestoneBase.pow(player.a.milestones.length))
                                                        ret = ret.times(layers.l.grid.getGemEffect(406).pow(player.d.milestones.length))
                        if (hasMilestone("d", 14))      ret = ret.times(player.d.points.max(1))
                        if (hasChallenge("l", 61))      ret = ret.times(tmp.mu.buyables[31].effect)
                                                        ret = ret.times(layers.l.grid.getGemEffect(307).pow(getBuyableAmount("l", 33)))
                        if (hasMilestone("d", 18))      ret = ret.times(player.d.points.max(1).pow(tmp.l.getNonZeroGemCount))
                        
                                                        ret = ret.times(layers.l.grid.getGemEffect(105))
                                                        ret = ret.times(tmp.cells.effect)
                                                        ret = ret.times(tmp.t.effect)
                                                        ret = ret.times(tmp.or.effect)
                        if (player.easyMode)            ret = ret.times(4)
                        if (hasMilestone("a", 19) && player.extremeMode) {
                                                        ret = ret.times(2)
                        }
                        if (hasUpgrade("sci", 412))     ret = ret.times(player.sci.protein_science.points.max(1))
                        if (hasUpgrade("sci", 413) && !hasUpgrade("sci", 452)) {
                                                        ret = ret.times(tmp.sci.buyables[302].base)
                        }
                        if (hasUpgrade("sci", 435))     ret = ret.times(tmp.sci.upgrades[435].effect)
                        if (hasMilestone("d", 20) && player.extremeMode) {
                                                        ret = ret.times(player.mu.points.plus(1).pow(player.d.milestones.length))
                        }
                                                        ret = ret.times(player.mu.points.plus(1).pow(tmp.sci.buyables[503].effect.pow(2)))
                                                        ret = ret.times(tmp.sci.buyables[511].protein_effect)
                                                        ret = ret.times(Decimal.pow(tmp.sci.buyables[512].effect.plus(1), tmp.l.getNonZeroGemCount ** 2))

                        if (player.extremeMode)         ret = ret.pow(.75)

                        return ret
                },
                mRNAtRNAGainPer(){
                        let a = tmp.a.buyables[11].base
                        let b = tmp.a.buyables[12].base
                        let ret = a.log(5).plus(b.log(10))
                        if (ret.gt(1)) console.log(a.toString(), b.toString())
                        return ret
                },
                mRNAtRNABoostExp(){
                        // 1/(1-(Math.log(2.205)/Math.log(5)+Math.log(3.204)/Math.log(10)))
                        let gain = tmp.a.protein.mRNAtRNAGainPer
                        if (gain.lt(1)) return gain.sub(1).pow(-1).times(-1)
                        return "well oops"
                },
                getResetGain(){
                        let ret = tmp.a.protein.getAllOtherGain

                        ret = ret.times(tmp.a.buyables[11].effect)
                        ret = ret.times(tmp.a.buyables[12].effect)

                        return ret.min("1ee40")
                },
        },
        upgrades: {
                rows: 10,
                cols: 5,
                11: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid I"
                        },
                        description(){
                                return "Unlock Protein and each upgrade cubes point gain"
                        },
                        cost:() => new Decimal(player.extremeMode ? "1e1234" : "1e1465"),
                        currencyLocation:() => player.l,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Lives",
                        unlocked(){
                                return layers.l.grid.getGemEffect(404) >= 1 || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 11)
                },
                12: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid II"
                        },
                        description(){
                                return "Each tRNA adds .001 to mRNA base until 3.2"
                        },
                        cost:() => new Decimal(15e3),
                        currencyLocation:() => player.a.protein,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein",
                        unlocked(){
                                return layers.l.grid.getGemEffect(404) >= 2 || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 12)
                },
                13: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid III"
                        },
                        description(){
                                return "The number of tRNA's multiplies Protein gain and exponentiates Point gain"
                        },
                        cost:() => new Decimal(2e5),
                        currencyLocation:() => player.a.protein,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein",
                        unlocked(){
                                return layers.l.grid.getGemEffect(404) >= 3 || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 13)
                },
                14: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid IV"
                        },
                        description(){
                                let a = "Each mRNA adds .001 to tRNA base until 2.2 and each upgrade doubles Protein gain"
                                if (player.extremeMode) a = a.replace("doubles", "triples")
                                return a
                        },
                        cost:() => new Decimal(3e14),
                        currencyLocation:() => player.a.protein,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein",
                        unlocked(){
                                return layers.l.grid.getGemEffect(404) >= 4 || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 14)
                },
                15: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid V"
                        },
                        description(){
                                return "The number of mRNA's multiplies Protein gain and exponentiates Point gain"
                        },
                        cost:() => new Decimal(3e35),
                        currencyLocation:() => player.a.protein,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein",
                        unlocked(){
                                return layers.l.grid.getGemEffect(404) >= 5 || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 15)
                },
                21: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid VI"
                        },
                        description(){
                                return "Autobuy tRNA"
                        },
                        cost:() => new Decimal(1e75),
                        currencyLocation:() => player.a.protein,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein",
                        unlocked(){
                                return layers.l.grid.getGemEffect(404) >= 6 || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 21)
                },
                22: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid VII"
                        },
                        description(){
                                return "Autobuy mRNA and the autobuyer triggers twice as often"
                        },
                        cost:() => new Decimal("1e420"),
                        currencyLocation:() => player.a.protein,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein",
                        unlocked(){
                                return layers.l.grid.getGemEffect(404) >= 7 || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 22)
                },
                23: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid VIII"
                        },
                        description(){
                                let a = "The autobuyer triggers 2.5x as often"
                                if (player.extremeMode) a += ", unlock Protein Science,"
                                return a + " and gain a C41 gem per second"
                        },
                        cost:() => new Decimal("1e999"),
                        currencyLocation:() => player.a.protein,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein",
                        unlocked(){
                                return layers.l.grid.getGemEffect(404) >= 8 || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 23)
                },
                24: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid IX"
                        },
                        description(){
                                return "Unlock miRNA, gain a C42 gem per second, and the autobuyer triggers twice as often"
                        },
                        cost:() => new Decimal("1e1400"),
                        currencyLocation:() => player.a.protein,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein",
                        unlocked(){
                                return hasUpgrade("a", 23) || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 24)
                },
                25: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid X"
                        },
                        description(){
                                return "miRNA levels multiply Amino Acid gain, gain a C43 gem per second, and the autobuyer triggers twice as often"
                        },
                        cost:() => new Decimal("1e3000"),
                        currencyLocation:() => player.a.protein,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein",
                        unlocked(){
                                return hasUpgrade("a", 24) || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 25)
                },
                31: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid XI"
                        },
                        description(){
                                return "Amino resets keep gem content, gain a C34 gem per second, and miRNA levels cubed multiply Protein gain"
                        },
                        cost:() => new Decimal("1e3200"),
                        currencyLocation:() => player.a.protein,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein",
                        unlocked(){
                                return hasUpgrade("a", 25) || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 31)
                },
                32: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid XII"
                        },
                        description(){
                                let a = "Each upgrade doubles Protein gain, gain a C24 gem per second, and tRNA and mRNA cost nothing"
                                if (player.extremeMode) return a.replace("doubles", "triples")
                                return a
                        },
                        cost:() => new Decimal("1e4200"),
                        currencyLocation:() => player.a.protein,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein",
                        unlocked(){
                                return hasUpgrade("a", 31) || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 32)
                },
                33: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid XIII"
                        },
                        description(){
                                return "Unlock the next set of challenges, gain a C14 gem per second, and each miRNA raises point gain ^100"
                        },
                        cost:() => new Decimal("1e5100"),
                        currencyLocation:() => player.a.protein,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein",
                        unlocked(){
                                return hasUpgrade("a", 32) || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 33)
                },
                34: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid XIV"
                        },
                        description(){
                                return "Add .001 to tRNA and mRNA bases and log10(Protein) exponentiates point gain"
                        },
                        cost:() => new Decimal("1e5432"),
                        currencyLocation:() => player.a.protein,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein",
                        unlocked(){
                                return hasUpgrade("a", 33) || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 34)
                },
                35: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid XV"
                        },
                        description(){
                                return "Add .001 to tRNA and mRNA bases and log10(Protein) exponentiates point gain"
                        },
                        cost:() => new Decimal(player.extremeMode ? "ee4" : "1e9000"),
                        currencyLocation:() => player.a.protein,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein",
                        unlocked(){
                                return hasUpgrade("a", 34) || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 35)
                },
                41: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid XVI"
                        },
                        description(){
                                return "Triple gem gain"
                        },
                        cost:() => new Decimal(player.extremeMode ? "1e47274" : "1e51000"),
                        currencyLocation:() => player.a.protein,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein",
                        unlocked(){
                                return hasUpgrade("a", 35) || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 41)
                },
                42: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid XVII"
                        },
                        description(){
                                return "siRNA levels multiply protein gain"
                        },
                        cost:() => new Decimal(player.extremeMode ? "1e62026" : "1e63636"),
                        currencyLocation:() => player.a.protein,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein",
                        unlocked(){
                                return hasUpgrade("a", 41) || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 42)
                },
                43: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid XVIII"
                        },
                        description(){
                                if (player.extremeMode) return "Each siRNA multiplies Amino Acid and Protein Science gain by 1.03"
                                return "Each siRNA multiplies Amino Acid gain by 1.02"
                        },
                        cost:() => new Decimal(player.extremeMode ? "1e170e3" : "1e198e3"),
                        currencyLocation:() => player.a.protein,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein",
                        unlocked(){
                                return hasUpgrade("a", 42) || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 43)
                },
                44: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid XIX"
                        },
                        description(){
                                return "Unlock crRNA and add .001 to mRNA base"
                        },
                        cost:() => new Decimal(player.extremeMode ? "1e220e3" : "1e209e3"),
                        currencyLocation:() => player.a.protein,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein",
                        unlocked(){
                                return hasUpgrade("a", 43) || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 44)
                },
                45: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid XX"
                        },
                        description(){
                                return "crRNA levels squared multiply protein gain"
                        },
                        cost:() => new Decimal("1e263e3"),
                        currencyLocation:() => player.a.protein,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Protein",
                        unlocked(){
                                return hasUpgrade("a", 44) || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 45)
                },
                51: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid XXI"
                        },
                        description(){
                                return "Each milestone doubles Amino Acid gain"
                        },
                        cost:() => new Decimal(player.extremeMode ? 3e55 : 1e46),
                        unlocked(){
                                return hasMilestone("a", 40) || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 51)
                },
                52: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid XXII"
                        },
                        description(){
                                return "Add .0001 to tRNA base"
                        },
                        cost:() => new Decimal(player.extremeMode ? 1e85 : 3e63),
                        unlocked(){
                                return hasUpgrade("a", 51) || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 52)
                },
                53: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid XXIII"
                        },
                        description(){
                                return "Autobuy crRNA and you can buy max all Protein buyables"
                        },
                        cost:() => new Decimal(player.extremeMode ? (hasMilestone("d", 4) ? 1e35 : 1e100) : 3e68),
                        unlocked(){
                                return hasUpgrade("a", 52) || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 53)
                },
                54: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid XXIV"
                        },
                        description(){
                                return "siRNA's log10 becomes log2"
                        },
                        cost:() => new Decimal(player.extremeMode ? 1e101 : 3e69),
                        unlocked(){
                                return hasUpgrade("a", 53) || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 54)
                },
                55: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid XXV"
                        },
                        description(){
                                return "Add .0002 to tRNA base"
                        },
                        cost:() => new Decimal(player.extremeMode ? 3e101 : 3e70),
                        unlocked(){
                                return hasUpgrade("a", 54) || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 55)
                },
                61: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid XXVI"
                        },
                        description(){
                                return "Add .0003 to tRNA base"
                        },
                        cost:() => new Decimal(player.extremeMode ? 1e136 : 1e82),
                        unlocked(){
                                return hasUpgrade("a", 55) || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 61)
                },
                62: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid XXVII"
                        },
                        description(){
                                return "Add .0004 to tRNA base"
                        },
                        cost:() => new Decimal(player.extremeMode ? 1e214 : 1e106),
                        unlocked(){
                                return hasUpgrade("a", 61) || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 62)
                },
                63: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid XXVIII"
                        },
                        description(){
                                return "<bdi style='font-size: 80%'>log10(Protein) multiplies Amino Acid gain, but you can only get up to 100x what you can reset for worth of Amino Acid production</bdi>"
                        },
                        cost:() => new Decimal(player.extremeMode ? "1e403" : "3e159"),
                        unlocked(){
                                return hasUpgrade("a", 62) || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 63)
                },
                64: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid XXIX"
                        },
                        description(){
                                return "Unlock shRNA"
                        },
                        cost:() => new Decimal(player.extremeMode ? "3.6e410" : "2.6e167"),
                        unlocked(){
                                return hasUpgrade("a", 63) || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 64)
                },
                65: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Amino Acid XXX"
                        },
                        description(){
                                return "Unlock DNA"
                        },
                        cost:() => new Decimal(player.extremeMode ? "7.7e415" : "4.4e169"),
                        unlocked(){
                                return hasUpgrade("a", 64) || hasMilestone("d", 5) || player.cells.unlocked
                        }, // hasUpgrade("a", 65)
                },
        },
        milestones: {
                1: {
                        requirementDescription(){
                                return "1 Amino Acid reset"
                        },
                        done(){
                                return player.a.times >= 1
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Square base Phosphorus gain, keep the first six Phosphorus milestones, triple Life reset gain, and per Amino Acid reset keep four life milestones and a gem from every challenge."
                        },
                }, // hasMilestone("a", 1)
                2: {
                        requirementDescription(){
                                return "2 Amino Acid resets"
                        },
                        done(){
                                return player.a.times >= 2
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Keep Phosphorus milestones upon Life reset and a µ milestone upon Life reset per Amino Acid reset."
                        },
                }, // hasMilestone("a", 2)
                3: {
                        requirementDescription(){
                                return "3 Amino Acid resets"
                        },
                        done(){
                                return player.a.times >= 3
                        },
                        unlocked(){
                                return true
                        },
                        onComplete(){
                                player.a.everMilestone3 = true
                        },
                        effectDescription(){
                                return "Reward: Permanently keep Hydrogen, Carbon, Oxygen, and minigame content upon Life reset, gain 2021x Lives but nullify boosted Life gain, and you gain two dilation completions at once<sup>*</sup>."
                        },
                }, // hasMilestone("a", 3)
                4: {
                        requirementDescription(){
                                return "4 Amino Acid resets"
                        },
                        done(){
                                return player.a.times >= 4
                        },
                        unlocked(){
                                return true
                        },
                        toggles:() => [["a", "autobuypmu45"]],
                        effectDescription(){
                                return "Reward: Autobuy the last two rows of µ and Phosphorus upgrades, gain a C11 gem per second<sup>**</sup>, and each milestone adds .005 to the 𝛾 → ∂𝛾 base."
                        },
                }, // hasMilestone("a", 4)
                5: {
                        requirementDescription(){
                                return "5 Amino Acid resets"
                        },
                        done(){
                                return player.a.times >= 5
                        },
                        unlocked(){
                                return true
                        },
                        toggles:() => [["a", "autobuylbuys"]],
                        effectDescription(){
                                return "Reward: Gain a C12 gem per second, subtract .01 from the µ cost exponent, autobuy Life buyables, and keep the N → ΔN autobuyer."
                        },
                }, // hasMilestone("a", 5)
                6: {
                        requirementDescription(){
                                return "6 Amino Acid resets"
                        },
                        done(){
                                return player.a.times >= 6
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let a = "Reward: Gain a C21 gem per second"
                                if (player.extremeMode) return a + " and keep a Life upgrade per Amino Acid reset."
                                return a + ", and keep Nitrogen upgrades upon Life reset."
                        },
                }, // hasMilestone("a", 6)
                7: {
                        requirementDescription(){
                                return "7 Amino Acid resets"
                        },
                        done(){
                                return player.a.times >= 7
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Gain a C22 gem per second, subtract .01 from µ cost exponent, and you gain five dilation completions at once<sup>*</sup>."
                        },
                }, // hasMilestone("a", 7)
                8: {
                        requirementDescription(){
                                return "8 Amino Acid resets"
                        },
                        done(){
                                return player.a.times >= 8
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Gain a C13 gem per second and you buy Life buyables twice as fast."
                        },
                }, // hasMilestone("a", 8)
                9: {
                        requirementDescription(){
                                return "10 Amino Acid resets"
                        },
                        done(){
                                return player.a.times >= 10
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Gain a C23 gem per second and keep Dilation completions and Life resets."
                        },
                }, // hasMilestone("a", 9)
                10: {
                        requirementDescription(){
                                return "12 Amino Acid resets"
                        },
                        done(){
                                return player.a.times >= 12
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Gain a C31 gem per second and you buy Life buyables 2.5x as fast."
                        },
                }, // hasMilestone("a", 10)
                11: {
                        requirementDescription(){
                                return "15 Amino Acid resets"
                        },
                        done(){
                                return player.a.times >= 15
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Gain a C32 gem per second and you buy Life buyables twice as fast."
                        },
                }, // hasMilestone("a", 11)
                12: {
                        requirementDescription(){
                                return "18 Amino Acid resets"
                        },
                        done(){
                                return player.a.times >= 18
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Gain a C33 gem per second and keep up to 1,000 of each of the first 9 gems upon Amino Acid reset."
                        },
                }, // hasMilestone("a", 12)
                13: {
                        requirementDescription(){
                                if (player.extremeMode) return "50 Amino Acids"
                                return "100 Amino Acids"
                        },
                        done(){
                                if (player.extremeMode) return player.a.points.gte(50)
                                return player.a.points.gte(100)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Unlock another set of Life challenges and β → ∂α's log3 becomes ln."
                        },
                }, // hasMilestone("a", 13)
                14: {
                        requirementDescription(){
                                if (player.extremeMode) return "1.00e700 Lives"
                                return "1.00e851 Lives"
                        },
                        done(){
                                if (player.extremeMode) return player.l.points.gte("1e700")
                                return player.l.points.gte("1e851")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let a = "Reward: β → ∂α's ln becomes log2"
                                if (player.extremeMode) a += ", per non-0 gem add 1 to Life Milestone 1's limit, "
                                return a + " and add .05 to α → ∂𝛾's base."
                        },
                }, // hasMilestone("a", 14)
                15: {
                        requirementDescription(){
                                if (player.extremeMode) return "1.00e781 Lives"
                                return "1.00e882 Lives"
                        },
                        done(){
                                if (player.extremeMode) return player.l.points.gte("1e781")
                                return player.l.points.gte("1e881")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let a = "Reward: α → ∂α's log3s becomes lns"
                                if (player.extremeMode) a += ", Reuse levels after 100 scale x<sup>2.65</sup> instead of exponentially,"
                                return a + " and add .25 to β → ∂𝛾's base."
                        },
                }, // hasMilestone("a", 15)
                16: {
                        requirementDescription(){
                                return "1.00e932 Lives"
                        },
                        done(){
                                return player.l.points.gte("1e932")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: α → ∂α's lns becomes log2s and you buy Lives buyables twice as fast."
                        },
                }, // hasMilestone("a", 16)
                17: {
                        requirementDescription(){
                                return "1.00e1006 Lives"
                        },
                        done(){
                                return player.l.points.gte("1e1006")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let a = "Reward: You can buy all Lives buyables at once and each milestone adds 1 to 𝛾 → ∂𝛾's exponent divider"
                                if (player.extremeMode) a += " and cubes point gain"
                                return a + "."
                        },
                }, // hasMilestone("a", 17)
                18: {
                        requirementDescription(){
                                if (player.extremeMode) return "1.00e1150 Lives"
                                return "1.00e1118 Lives"
                        },
                        done(){
                                if (player.extremeMode) return player.l.points.gte("1e1150")
                                return player.l.points.gte("1e1118")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Each β → ∂𝛾 cubes point gain and gain an Amino Acid reset per second."
                        },
                }, // hasMilestone("a", 18)
                19: {
                        requirementDescription(){
                                return "1.00e1256 Lives"
                        },
                        done(){
                                return player.l.points.gte("1e1256")
                        },
                        unlocked(){
                                return true
                        },
                        effect(){
                                let base = new Decimal(1.05)
                                let exp = getBuyableAmount("mu", 31).pow(1.5)
                                return base.pow(exp)
                        },
                        effectDescription(){
                                let a = "Reward: Per N → Δµ<sup>1.5</sup> exponentiate point gain ^1.05"
                                if (player.extremeMode) a += " and double protein gain"
                                let b = "<br>Currently: ^" + format(tmp.a.milestones[19].effect) 
                                return a + "." + b
                        },
                }, // hasMilestone("a", 19)
                20: {
                        requirementDescription(){
                                if (player.extremeMode) return "1.00e1337 Lives"
                                return "e1.00e2600 Points"
                        },
                        done(){
                                if (player.extremeMode) return player.l.points.gte("1e1337")
                                return player.points.gte("ee2600")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: 𝛾 → ∂𝛾 effects N → Δµ and add .002 to Constant's base per milestone."
                        },
                }, // hasMilestone("a", 20)
                21: {
                        requirementDescription(){
                                return "1.00e34 Proteins"
                        },
                        done(){
                                return player.a.protein.points.gte("1e34")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Gain a C44 gem per second and Protein (up to 1e2000) multiplies Life gain."
                        },
                }, // hasMilestone("a", 21)
                22: {
                        requirementDescription(){
                                return "10 C25 Gems"
                        },
                        done(){
                                return player.l.grid[205].gems.gte(10)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Unlock rRNA and each milestones multiples Protein gain and exponentiates point gain by 1+milestones/100."
                                return "Reward: Unlock rRNA and each milestones multiples Protein gain by 1+milestones/100."
                        },
                }, // hasMilestone("a", 22)
                23: {
                        requirementDescription(){
                                return "1e11,111 Protein"
                        },
                        done(){
                                return player.a.protein.points.gte("1e11111")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: You can bulk all tRNA and mRNA."
                        },
                }, // hasMilestone("a", 23)
                24: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e20,000 Protein"
                                return "1e22,722 Protein"
                        },
                        done(){
                                if (player.extremeMode) return player.a.protein.points.gte("1e2e4")
                                return player.a.protein.points.gte("1e22722")
                        },
                        unlocked(){
                                return true
                        },
                        effect(){
                                let l = getBuyableAmount("a", 21)
                                return l.div(50).plus(1).pow(l)
                        },
                        effectDescription(){
                                return "Reward: Each rRNA raises point gain ^1+rRNA/50.<br>Currently: ^" + format(tmp.a.milestones[24].effect) 
                        },
                }, // hasMilestone("a", 24)
                25: {
                        requirementDescription(){
                                return "1e23,456 Protein"
                        },
                        done(){
                                return player.a.protein.points.gte("1e23456")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Add .001 to tRNA base."
                        },
                }, // hasMilestone("a", 25)
                26: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e30,603 Protein"
                                return "1e31,313 Protein"
                        },
                        done(){
                                if (player.extremeMode) return player.a.protein.points.gte("1e30603")
                                return player.a.protein.points.gte("1e31313")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Add .001 to mRNA base and unlock siRNA."
                        },
                }, // hasMilestone("a", 26)
                27: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e65,432 Protein"
                                return "1e66,000 Protein"
                        },
                        done(){
                                if (player.extremeMode) return player.a.protein.points.gte("1e65432")
                                return player.a.protein.points.gte("1e66000")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Add .001 to mRNA base and you can bulk 5x N → ΔP."
                        },
                }, // hasMilestone("a", 27)
                28: {
                        requirementDescription(){
                                return "1e76,543 Protein"
                        },
                        done(){
                                return player.a.protein.points.gte("1e76543")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: rRNA levels multiply protein and Amino Acid gain."
                        },
                }, // hasMilestone("a", 28)
                29: {
                        requirementDescription(){
                                return "1e79,000 Protein"
                        },
                        done(){
                                return player.a.protein.points.gte("1e79000")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Add .001 to tRNA base and each siRNA multiplies Protein gain by 1+miRNA/100."
                        },
                }, // hasMilestone("a", 29)
                30: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e123,456 Protein"
                                return "1e118,000 Protein"
                        },
                        done(){
                                if (player.extremeMode) return player.a.protein.points.gte("1e123456")
                                return player.a.protein.points.gte("1e118e3")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Add .001 to tRNA base and autobuy rRNA."
                        },
                }, // hasMilestone("a", 30)
                31: {
                        requirementDescription(){
                                return "1e160,000 Protein"
                        },
                        done(){
                                return player.a.protein.points.gte("1e160e3")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Amino Acid up to e50 multiplies Protein gain but mRNA and tRNA's base costs are set to 1."
                                return "Reward: Amino Acid up to e25 multiplies Protein gain but mRNA and tRNA's base costs are set to 1."
                        },
                }, // hasMilestone("a", 31)
                32: {
                        requirementDescription(){
                                return "1e175,000 Protein"
                        },
                        done(){
                                return player.a.protein.points.gte("1e175e3")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: mRNA and tRNA production boost is additionally treated as if you can buy them in 1ms<sup>*3</sup>."
                        },
                }, // hasMilestone("a", 32)
                33: {
                        requirementDescription(){
                                return "1e283,000 Protein"
                        },
                        done(){
                                return player.a.protein.points.gte("1e283e3")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Each milestone doubles protein gain."
                        },
                }, // hasMilestone("a", 33)
                34: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e309,000 Protein"
                                return "1e325,000 Protein"
                        },
                        done(){
                                if (player.extremeMode) return player.a.protein.points.gte("1e309e3")
                                return player.a.protein.points.gte("1e325e3")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Each milestone doubles protein gain."
                        },
                }, // hasMilestone("a", 34)
                35: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e518,000 Protein"
                                return "1e354,000 Protein"
                        },
                        done(){
                                if (player.extremeMode) return player.a.protein.points.gte("1e518e3")
                                return player.a.protein.points.gte("1e354e3")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Add .001 to mRNA base."
                        },
                }, // hasMilestone("a", 35)
                36: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e765,500 Protein"
                                return "1e506,000 Protein"
                        },
                        done(){
                                if (player.extremeMode) return player.a.protein.points.gte("1e765.5e3")
                                return player.a.protein.points.gte("1e506e3")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: crRNA's log10 becomes ln."
                        },
                }, // hasMilestone("a", 36)
                37: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e959,000 Protein"
                                return "1e572,000 Protein"
                        },
                        done(){
                                if (player.extremeMode) return player.a.protein.points.gte("1e959e3")
                                return player.a.protein.points.gte("1e572e3")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: crRNA's ln becomes log2."
                        },
                }, // hasMilestone("a", 37)
                38: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e1,071,300 Protein"
                                return "1e607,000 Protein"
                        },
                        done(){
                                if (player.extremeMode) return player.a.protein.points.gte("1e1071.3e3")
                                return player.a.protein.points.gte("1e607e3")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Autobuy siRNA and each milestone doubles protein gain."
                        },
                }, // hasMilestone("a", 38)
                39: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e1,112,000 Protein"
                                return "1e645,000 Protein"
                        },
                        done(){
                                if (player.extremeMode) return player.a.protein.points.gte("1e1112e3")
                                return player.a.protein.points.gte("1e645e3")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: 1ms becomes 50ms for production boosts."
                        },
                }, // hasMilestone("a", 39)
                40: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e1,126,000 Protein"
                                return "1e664,000 Protein"
                        },
                        done(){
                                if (player.extremeMode) return player.a.protein.points.gte("1e1126e3")
                                return player.a.protein.points.gte("1e664e3")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Unlock ncRNA and double protein gain per milestone."
                        },
                }, // hasMilestone("a", 40)
                41: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e1,373,000 Protein"
                                return "1e875,700 Protein"
                        },
                        done(){
                                if (player.extremeMode) return player.a.protein.points.gte("1e1373e3")
                                return player.a.protein.points.gte("1e875.7e3")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Each milestone doubles protein gain."
                        },
                }, // hasMilestone("a", 41)
                42: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e1,796,000 Protein"
                                return "1e1,001,000 Protein"
                        },
                        done(){
                                if (player.extremeMode) return player.a.protein.points.gte("1e1796e3")
                                return player.a.protein.points.gte("1e1001e3")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Unlock snRNA."
                        },
                }, // hasMilestone("a", 42)
                43: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e1,851,000 Protein"
                                return "1e1,099,000 Protein"
                        },
                        done(){
                                if (player.extremeMode) return player.a.protein.points.gte("1e1851e3")
                                return player.a.protein.points.gte("1e1099e3")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Each milestone doubles Protein gain."
                        },
                }, // hasMilestone("a", 43)
                44: {
                        requirementDescription(){
                                if (player.extremeMode) return "3e74 Amino Acid"
                                return "1e42 Amino Acid"
                        },
                        done(){
                                if (player.extremeMode) return player.a.points.gte(3e74)
                                return player.a.points.gte(1e42)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Each miRNA multiplies Amino Acid gain by 1.1 ."
                        },
                }, // hasMilestone("a", 44)
                45: {
                        requirementDescription(){
                                return "1e45 Amino Acid"
                        },
                        done(){
                                if (player.extremeMode) return false
                                return player.a.points.gte(1e45)
                        },
                        unlocked(){
                                return !player.extremeMode
                        },
                        effectDescription(){
                                return "When in the chronicle of wasted time"
                        },
                }, // hasMilestone("a", 45) source: https://www.tweetspeakpoetry.com/2015/06/25/top-ten-shakespeare-sonnets/
                46: {
                        requirementDescription(){
                                return "3e45 Amino Acid"
                        },
                        done(){
                                if (player.extremeMode) return false
                                return player.a.points.gte(3e45)
                        },
                        unlocked(){
                                return !player.extremeMode
                        },
                        effectDescription(){
                                return "I see descriptions of the fairest wights,"
                        },
                }, // hasMilestone("a", 46)
                47: {
                        requirementDescription(){
                                return "5e62 Amino Acid"
                        },
                        done(){
                                return player.a.points.gte(5e62)
                        },
                        unlocked(){
                                return !player.extremeMode
                        },
                        effectDescription(){
                                return "And beauty making beautiful old rhyme"
                        },
                }, // hasMilestone("a", 47)
                48: {
                        requirementDescription(){
                                return "1e2,040,000 Protein"
                        },
                        done(){
                                if (player.extremeMode) return false
                                return player.a.protein.points.gte("1e2040e3")
                        },
                        unlocked(){
                                return !player.extremeMode
                        },
                        effectDescription(){
                                return "In praise of ladies dead, and lovely knights,"
                        },
                }, // hasMilestone("a", 48)
                49: {
                        requirementDescription(){
                                return "1e70 Amino Acid"
                        },
                        done(){
                                if (player.extremeMode) return false
                                return player.a.points.gte(1e70)
                        },
                        unlocked(){
                                return !player.extremeMode
                        },
                        effectDescription(){
                                return "Then, in the blazon of sweet beauty’s best,"
                        },
                }, // hasMilestone("a", 49)
        },
        buyables: {
                rows: 3,
                cols: 3,
                11: {
                        title: "tRNA", // 1/(1-(Math.log(2.201)/Math.log(5)+Math.log(3.201)/Math.log(10)))
                        cost(){
                                let amt = getBuyableAmount("a", 11)
                                let baseCost = tmp.a.buyables[11].baseCost
                                return baseCost.times(Decimal.pow(5, amt))
                        },
                        baseCost(){
                                if (hasMilestone("a", 31)) return decimalOne
                                let ret = new Decimal(200)
                                
                                ret = ret.div(layers.l.grid.getGemEffect(405))

                                return ret
                        },
                        unlocked(){
                                return true
                        },
                        maxAfford(){
                                let pts = player.a.protein.points
                                if (pts.eq(0)) return decimalZero
                                return pts.div(tmp.a.buyables[11].baseCost).log(5).plus(1).floor().max(0)
                        },
                        canAfford:() => player.a.protein.points.gte(tmp.a.buyables[11].cost),
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.a
                                let ma = tmp.a.buyables[11].maxAfford
                                let up = hasMilestone("a", 23) || hasMilestone("d", 1) || player.easyMode ? ma.sub(data.buyables[11]) : 1
                                data.buyables[11] = data.buyables[11].plus(up)
                                if (!hasUpgrade("a", 32)) {
                                        data.protein.points = data.protein.points.sub(tmp.a.buyables[11].cost)
                                }
                        },
                        base(){
                                let ret = new Decimal(2)

                                if (hasUpgrade("a", 14))        ret = ret.plus(getBuyableAmount("a", 12).min(200).div(1000))
                                if (hasUpgrade("a", 34))        ret = ret.plus(.001)
                                if (hasUpgrade("a", 35))        ret = ret.plus(.001)
                                if (hasMilestone("a", 25))      ret = ret.plus(.001)
                                if (hasMilestone("a", 29))      ret = ret.plus(.001)
                                if (hasMilestone("a", 30))      ret = ret.plus(.001)
                                if (hasUpgrade("a", 52))        ret = ret.plus(.0001)
                                if (hasUpgrade("a", 55))        ret = ret.plus(.0002)
                                if (hasUpgrade("a", 61))        ret = ret.plus(.0003)
                                if (hasUpgrade("a", 62))        ret = ret.plus(.0004)
                                if (hasChallenge("l", 82) && !hasMilestone("or", 15)) {
                                                                ret = ret.plus(.0001)
                                }
                                if (hasUpgrade("or", 134))      ret = ret.plus(.0002)
                                else if (layers.l.grid.getGemEffect(705)) {
                                                                ret = ret.plus(.0001)
                                }
                                if (hasMilestone("d", 21))      ret = ret.plus(.0001)
                                if (hasMilestone("d", 22))      ret = ret.plus(.0001)
                                if (hasMilestone("d", 25))      ret = ret.plus(.0003)
                                if (hasMilestone("d", 26))      ret = ret.plus(.0003)
                                if (hasUpgrade("d", 32))        ret = ret.plus(.0004)
                                if (layers.l.grid.getGemEffect(808) && !hasUpgrade("or", 12)) {
                                                                ret = ret.plus(player.extremeMode ? .0001 : .0006)
                                }
                                if (hasUpgrade("d", 35))        ret = ret.plus(player.extremeMode ? .0005 : .001)
                                if (hasMilestone("cells", 6) && tmp.cells.milestones[6].effect.lt(1)) {
                                                                ret = ret.plus(tmp.cells.milestones[6].effect)
                                }
                                if (hasMilestone("cells", 52))  ret = ret.plus(.0001)
                                if (hasMilestone("cells", 53))  ret = ret.plus(.0001)
                                if (hasMilestone("cells", 54))  ret = ret.plus(.0001)
                                if (hasMilestone("cells", 55))  ret = ret.plus(.0001)
                                if (hasMilestone("cells", 56))  ret = ret.plus(.0001)
                                if (hasMilestone("cells", 57))  ret = ret.plus(.0001)
                                if (hasMilestone("cells", 58))  ret = ret.plus(.0001)
                                if (hasMilestone("cells", 59) && player.extremeMode) {
                                                                ret = ret.plus(.0001)
                                }
                                if (hasChallenge("l", 112) && !hasMilestone("or", 15)) {
                                                                ret = ret.plus(.0003)
                                }
                                if (hasMilestone("or", 15))     ret = ret.plus(.0005)
                                
                                return ret
                        },
                        effect(){
                                return tmp.a.buyables[11].base.pow(player.a.buyables[11])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.a.buyables[11]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.a.buyables[11].effect) + " to Protein gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("a", 11)) + " Protein</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.a.buyables[11].base, 4) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = format(tmp.a.buyables[11].baseCost, 2, true) + "*5^x"
                                if (hasMilestone("a", 31)) cost2 = "5^x"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                12: {
                        title: "mRNA",
                        cost(){
                                let amt = getBuyableAmount("a", 12)
                                let baseCost = tmp.a.buyables[12].baseCost
                                return baseCost.times(Decimal.pow(10, amt))
                        },
                        baseCost(){
                                if (hasMilestone("a", 31)) return decimalOne
                                let ret = new Decimal(500)
                                
                                ret = ret.div(layers.l.grid.getGemEffect(501))

                                return ret
                        },
                        unlocked(){
                                return true
                        },
                        maxAfford(){
                                let pts = player.a.protein.points
                                if (pts.eq(0)) return decimalZero
                                return pts.div(tmp.a.buyables[12].baseCost).log(10).plus(1).floor().max(0)
                        },
                        canAfford:() => player.a.protein.points.gte(tmp.a.buyables[12].cost),
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.a
                                let ma = tmp.a.buyables[12].maxAfford
                                let up = hasMilestone("a", 23) || hasMilestone("d", 1) || player.easyMode ? ma.sub(data.buyables[12]) : 1
                                data.buyables[12] = data.buyables[12].plus(up)
                                if (!hasUpgrade("a", 32)) {
                                        data.protein.points = data.protein.points.sub(tmp.a.buyables[12].cost)
                                }
                        },
                        base(){
                                let ret = new Decimal(3)

                                if (hasUpgrade("a", 12))        ret = ret.plus(getBuyableAmount("a", 11).min(200).div(1000))
                                if (hasUpgrade("a", 34))        ret = ret.plus(.001)
                                if (hasUpgrade("a", 35))        ret = ret.plus(.001)
                                if (hasMilestone("a", 26))      ret = ret.plus(.001)
                                if (hasMilestone("a", 27))      ret = ret.plus(.001)
                                if (hasUpgrade("a", 44))        ret = ret.plus(.001)
                                if (hasMilestone("a", 35))      ret = ret.plus(.001)
                                if (hasUpgrade("or", 12))       ret = ret.plus(.0053)

                                let lvls = Math.max(0, tmp.l.getNonZeroGemCount - 49)
                                if (!hasUpgrade("or", 12))      ret = ret.plus(layers.l.grid.getGemEffect(208).times(Math.min(8, lvls)))
                                
                                return ret
                        },
                        effect(){
                                return tmp.a.buyables[12].base.pow(player.a.buyables[12])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.a.buyables[12]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.a.buyables[12].effect) + " to Protein gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("a", 12)) + " Protein</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.a.buyables[12].base, 4) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = format(tmp.a.buyables[12].baseCost, 2, true) + "*10^x"
                                if (hasMilestone("a", 31)) cost2 = "10^x"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                13: {
                        title: "miRNA",
                        cost(){
                                let amt = getBuyableAmount("a", 13)
                                let baseCost = new Decimal("1e1450")
                                if (hasUpgrade("sci", 411)) baseCost = decimalOne
                                let exp = 2
                                if (hasUpgrade("sci", 432)) exp = 1.9
                                if (hasUpgrade("sci", 433)) exp = 1.8
                                if (hasUpgrade("sci", 442)) exp = 1.7
                                if (hasUpgrade("sci", 444)) exp = 1.6
                                return baseCost.times(Decimal.pow("1e500", amt.pow(exp)))
                        },
                        unlocked(){
                                return hasUpgrade("a", 24) || hasMilestone("d", 5) || player.cells.unlocked
                        },
                        maxAfford(){
                                let pts = player.a.protein.points
                                let base = hasUpgrade("sci", 411) ? "1" : "1e1450"
                                if (pts.lt(base)) return decimalZero
                                let exp = 2
                                if (hasUpgrade("sci", 432)) exp = 1.9
                                if (hasUpgrade("sci", 433)) exp = 1.8
                                if (hasUpgrade("sci", 442)) exp = 1.7
                                if (hasUpgrade("sci", 444)) exp = 1.6
                                return pts.div(base).log("1e500").root(exp).plus(1).floor()
                        },
                        canAfford:() => player.a.protein.points.gte(tmp.a.buyables[13].cost),
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.a
                                let id = 13
                                let ma = tmp.a.buyables[id].maxAfford
                                let up = hasUpgrade("a", 53) || player.easyMode ? ma.sub(data.buyables[id]) : 1
                                data.buyables[id] = data.buyables[id].plus(up)
                                if (!hasMilestone("cells", 48)) {
                                        data.protein.points = data.protein.points.sub(tmp.a.buyables[id].cost)
                                }
                        },
                        base(){
                                if (hasUpgrade("t", 151)) return new Decimal("ee13")
                                if (hasMilestone("cells", 29)) return player.mu.points.max(1).pow(player.extremeMode && !hasUpgrade("sci", 544) ? .1 : 1)
                                let ret = player.l.points.max(10).log10()

                                if (hasMilestone("d", 3))       ret = ret.times(Math.log(10)/Math.log(9))
                                if (hasMilestone("d", 6))       ret = ret.times(Math.log(9)/Math.log(8))
                                if (hasMilestone("d", 7))       ret = ret.times(Math.log(8)/Math.log(7))
                                if (hasMilestone("d", 8))       ret = ret.times(Math.log(7)/Math.log(6))
                                if (hasMilestone("d", 9))       ret = ret.times(Math.log(6)/Math.log(5))
                                if (hasMilestone("d", 10))      ret = ret.times(Math.log(5)/Math.log(4))
                                if (hasMilestone("d", 11))      ret = ret.times(Math.log(4)/Math.log(3))
                                if (hasMilestone("d", 12))      ret = ret.times(Math.log(3))
                                if (hasMilestone("d", 13))      ret = ret.div(Math.log(2))
                                
                                return ret
                        },
                        effect(){
                                return tmp.a.buyables[13].base.pow(player.a.buyables[13])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.a.buyables[13]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.a.buyables[13].effect) + " to Protein gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("a", 13)) + " Protein</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(Lives)^x<br>" + format(tmp.a.buyables[13].base) + "^x"
                                if (hasMilestone("d", 3)) eformula = eformula.replace("log10", "log9")
                                if (hasMilestone("d", 6)) eformula = eformula.replace("log9", "log8")
                                if (hasMilestone("d", 7)) eformula = eformula.replace("log8", "log7")
                                if (hasMilestone("d", 8)) eformula = eformula.replace("log7", "log6")
                                if (hasMilestone("d", 9)) eformula = eformula.replace("log6", "log5")
                                if (hasMilestone("d", 10)) eformula = eformula.replace("log5", "log4")
                                if (hasMilestone("d", 11)) eformula = eformula.replace("log4", "log3")
                                if (hasMilestone("d", 12)) eformula = eformula.replace("log3", "ln")
                                if (hasMilestone("d", 13)) eformula = eformula.replace("ln", "log2")
                                if (hasMilestone("cells", 29)) eformula = eformula.replace("log2(Lives)", "µ")
                                if (hasUpgrade("t", 151)) eformula = eformula.replace("µ", "e1e13")
                                if (player.extremeMode && !hasUpgrade("sci", 544)) eformula = eformula.replace("µ^x", "(µ<sup>.1</sup>)^x")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e1450*1e500^x<sup>2</sup>"
                                if (hasUpgrade("sci", 411)) cost2 = cost2.slice(7, )
                                if (hasUpgrade("sci", 432)) cost2 = cost2.replace("2<", "1.9<")
                                if (hasUpgrade("sci", 433)) cost2 = cost2.replace("1.9<", "1.8<")
                                if (hasUpgrade("sci", 442)) cost2 = cost2.replace("1.8<", "1.7<")
                                if (hasUpgrade("sci", 444)) cost2 = cost2.replace("1.7<", "1.6<")
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                21: {
                        title: "rRNA",
                        cost(){
                                let amt = getBuyableAmount("a", 21)
                                let baseCost = new Decimal("1e7350")
                                if (hasUpgrade("sci", 422)) baseCost = decimalOne
                                return baseCost.times(Decimal.pow("1e200", amt.pow(1.2)))
                        },
                        unlocked(){
                                return hasMilestone("a", 22) || hasMilestone("d", 5) || player.cells.unlocked
                        },
                        maxAfford(){
                                let pts = player.a.protein.points
                                let init = hasUpgrade("sci", 422) ? "1" : "1e7350"
                                if (pts.lt(init)) return decimalZero
                                return pts.div(init).log("1e200").root(1.2).plus(1).floor()
                        },
                        canAfford:() => player.a.protein.points.gte(tmp.a.buyables[21].cost),
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.a
                                let id = 21
                                let ma = tmp.a.buyables[id].maxAfford
                                let up = hasUpgrade("a", 53) || player.easyMode ? ma.sub(data.buyables[id]) : 1
                                data.buyables[id] = data.buyables[id].plus(up)
                                if (!hasMilestone("cells", 48)) {
                                        data.protein.points = data.protein.points.sub(tmp.a.buyables[id].cost)
                                }
                        },
                        base(){
                                if (hasUpgrade("cells", 63)) {
                                        let base = player.tokens.total.max(1)
                                        let exp = player.tokens.tokens2.total

                                        return base.pow(exp)
                                }
                                if (hasMilestone("cells", 54)){
                                        return player.l.points.max(10).log10()
                                }
                                let ret = new Decimal(tmp.l.getNonZeroGemCount).max(1)

                                if (hasMilestone("cells", 18)) {
                                        if (!hasMilestone("cells", 35)) {
                                                return ret.plus(getBuyableAmount("cells", 11).sqrt())
                                        } else return ret.times(getBuyableAmount("cells", 11).max(1))
                                }
                                
                                return ret
                        },
                        effect(){
                                return tmp.a.buyables[21].base.pow(player.a.buyables[21])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.a.buyables[21]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.a.buyables[21].effect) + " to Protein gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("a", 21)) + " Protein</b><br>"
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "[Non zero gem challenges]^x<br>" + format(tmp.a.buyables[21].base) + "^x"
                                if (hasMilestone("cells", 18)) eformula = eformula.replace("[Non zero gem challenges]", "64+sqrt(Omnipotent)")
                                if (hasMilestone("cells", 35))  eformula = eformula.replace("+sqrt(Omnipotent)", "*Omnipotent")
                                if (hasMilestone("cells", 54))  eformula = eformula.replace("64*Omnipotent", "log10(Lives)")
                                if (hasUpgrade("cells", 63))    eformula = eformula.replace("log10(Lives)", "(Tokens<sup>Tokens II</sup>)")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e7350*1e200^x<sup>1.2</sup>"
                                if (hasUpgrade("sci", 422)) cost2 = cost2.slice(7,)
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                22: {
                        title: "siRNA",
                        cost(){
                                let amt = getBuyableAmount("a", 22)
                                let baseCost = new Decimal(player.extremeMode ? "1e34000" : "1e35000")
                                if (hasUpgrade("sci", 425)) baseCost = decimalOne
                                return baseCost.times(Decimal.pow("1e100", amt.pow(1.2)))
                        },
                        unlocked(){
                                return hasMilestone("a", 26) || hasMilestone("d", 5) || player.cells.unlocked
                        },
                        maxAfford(){
                                let pts = player.a.protein.points
                                let init = player.extremeMode ? "1e34000" : "1e35000"
                                if (hasUpgrade("sci", 425)) init = "1"
                                if (pts.lt(init)) return decimalZero
                                return pts.div(init).log("1e100").root(1.2).plus(1).floor()
                        },
                        canAfford:() => player.a.protein.points.gte(tmp.a.buyables[22].cost),
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.a
                                let id = 22
                                let ma = tmp.a.buyables[id].maxAfford
                                let up = hasUpgrade("a", 53) || player.easyMode ? ma.sub(data.buyables[id]) : 1
                                data.buyables[id] = data.buyables[id].plus(up)
                                if (!hasMilestone("cells", 48)) {
                                        data.protein.points = data.protein.points.sub(tmp.a.buyables[id].cost)
                                }
                        },
                        base(){
                                if (hasMilestone("cells", 19)) return player.cells.stem_cells.points.max(1)

                                let ret = player.a.protein.points.max(10).log10()

                                if (hasUpgrade("a", 54)) ret = ret.times(Math.log2(10))
                                
                                return ret
                        },
                        effect(){
                                let ret = tmp.a.buyables[22].base.pow(player.a.buyables[22])
                                let lim = player.extremeMode ? 1e100 : 1e125
                                if (ret.gt(lim) && inChallenge("l", 12) && !hasUpgrade("d", 24)) return new Decimal(lim)
                                return ret
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.a.buyables[22]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: ^"
                                        let eff2 = format(tmp.a.buyables[22].effect) + " to Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("a", 22)) + " Protein</b><br>"

                                        let end = "<br>Note: hardcapped at 1e125 in Customizable"
                                        if (hasUpgrade("d", 24)) end = ""
                                        if (player.extremeMode) end = end.replace("125", "100")
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details" + br + end
                                }

                                let eformula = "log10(Protein)^x<br>" + format(tmp.a.buyables[22].base) + "^x"
                                if (hasUpgrade("a", 54)) eformula = eformula.replace("log10", "log2")
                                if (hasMilestone("cells", 19)) eformula = eformula.replace("log2(Protein)", "Stem Cells")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e35,000*1e100^x<sup>1.2</sup>"
                                if (player.extremeMode) cost2 = cost2.replace("35", "34")
                                if (hasUpgrade("sci", 425)) cost2 = cost2.slice(9,)
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                23: {
                        title: "crRNA",
                        cost(){
                                let amt = getBuyableAmount("a", 23)
                                let baseCost = new Decimal(player.extremeMode ? "1e259e3" : "1e257000")
                                if (hasUpgrade("sci", 445)) baseCost = decimalOne
                                let base = player.extremeMode ? "1e1000" : "1e2000"
                                return baseCost.times(Decimal.pow(base, amt.pow(1.2)))
                        },
                        unlocked(){
                                return hasUpgrade("a", 44) || hasMilestone("d", 5) || player.cells.unlocked
                        },
                        maxAfford(){
                                let pts = player.a.protein.points
                                let init = player.extremeMode ? "1e259e3" : "1e257e3"
                                if (hasUpgrade("sci", 445)) init = "1"
                                if (pts.lt(init)) return decimalZero
                                return pts.div(init).log(player.extremeMode ? "1e1000" : "1e2000").root(1.2).plus(1).floor()
                        },
                        canAfford:() => player.a.protein.points.gte(tmp.a.buyables[23].cost),
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.a
                                let id = 23
                                let ma = tmp.a.buyables[id].maxAfford
                                let up = hasUpgrade("a", 53) || player.easyMode ? ma.sub(data.buyables[id]) : 1
                                data.buyables[id] = data.buyables[id].plus(up)
                                if (!hasMilestone("cells", 48)) {
                                        data.protein.points = data.protein.points.sub(tmp.a.buyables[id].cost)
                                }
                        },
                        base(){
                                if (hasUpgrade("cells", 25)) return player.cells.points.max(1).sqrt()
                                let ret = player.a.points.max(10).log10()

                                if (hasMilestone("a", 36)) ret = ret.times(Math.log(10))
                                if (hasMilestone("a", 37)) ret = ret.div(Math.log(2))

                                if (hasMilestone("cells", 31)) ret = ret.pow(tmp.tokens.buyables[42].effect)
                                
                                return ret
                        },
                        effect(){
                                return tmp.a.buyables[23].base.pow(player.a.buyables[23])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.a.buyables[23]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.a.buyables[23].effect) + " to Protein gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("a", 23)) + " Protein</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details" 
                                }

                                let eformula = "log10(Amino Acid)^x<br>" + format(tmp.a.buyables[23].base) + "^x"
                                if (hasMilestone("a", 36)) eformula = eformula.replace("log10", "ln")
                                if (hasMilestone("a", 37)) eformula = eformula.replace("ln", "log2")
                                if (hasUpgrade("cells", 25)) eformula = eformula.replace("log2(Amino Acid)", "sqrt(Cells)")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e257,000*1e2000^x<sup>1.2</sup>"
                                if (player.extremeMode) {
                                        cost2 = cost2.replace("7", "9")
                                        cost2 = cost2.replace("2000", "1000")
                                }
                                if (hasUpgrade("sci", 445)) cost2 = cost2.slice(10,)
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                31: {
                        title: "ncRNA",
                        cost(){
                                let amt = getBuyableAmount("a", 31)
                                let baseCost = new Decimal(player.extremeMode ? (hasMilestone("d", 12) ? 1 : "1e1156.5e3") : "1e702000")
                                return baseCost.times(Decimal.pow("1e6000", amt.pow(1.2)))
                        },
                        unlocked(){
                                return hasMilestone("a", 40) || hasMilestone("d", 5) || player.cells.unlocked
                        },
                        maxAfford(){
                                let pts = player.a.protein.points
                                let init = player.extremeMode ? (hasMilestone("d", 12) ? 1 : "1e1156.5e3") : "1e702000"
                                if (pts.lt(init)) return decimalZero
                                return pts.div(init).log("1e6000").root(1.2).plus(1).floor()
                        },
                        canAfford:() => player.a.protein.points.gte(tmp.a.buyables[31].cost),
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.a
                                let id = 31
                                let ma = tmp.a.buyables[id].maxAfford
                                let up = hasUpgrade("a", 53) || player.easyMode ? ma.sub(data.buyables[id]) : 1
                                data.buyables[id] = data.buyables[id].plus(up)
                                if (!hasMilestone("cells", 48)) {
                                        data.protein.points = data.protein.points.sub(tmp.a.buyables[id].cost)
                                }
                        },
                        base(){
                                if (hasMilestone("cells", 19)) return player.cells.points.max(1)
                                let pts = player.points.max(10).log10()

                                if (hasUpgrade("d", 15)) pts = pts.times(Math.log(10))
                                if (hasUpgrade("d", 22)) pts = pts.div(Math.log(2))

                                let ret = pts.log10()

                                if (hasUpgrade("d", 14)) ret = ret.times(Math.log(10))
                                if (hasUpgrade("d", 21)) ret = ret.div(Math.log(2))
                                
                                return ret.max(1)
                        },
                        effect(){
                                return tmp.a.buyables[31].base.pow(player.a.buyables[31])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.a.buyables[31]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.a.buyables[31].effect) + " to Protein gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("a", 31)) + " Protein</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details" 
                                }

                                let eformula = "log10(log10(Points))^x<br>" + format(tmp.a.buyables[31].base) + "^x"
                                if (hasUpgrade("d", 14)) eformula = eformula.replace("log10", "ln")
                                if (hasUpgrade("d", 15)) eformula = eformula.replace("log10", "ln")
                                if (hasUpgrade("d", 21)) eformula = eformula.replace("ln", "log2")
                                if (hasUpgrade("d", 22)) eformula = eformula.replace("ln", "log2")
                                if (hasMilestone("cells", 19)) eformula = eformula.replace("log2(log2(Points))", "Cells")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e702,000*1e6,000^x<sup>1.2</sup>"
                                if (player.extremeMode) cost2 = cost2.replace("702,000", "1,156,500")
                                if (hasMilestone("d", 12)) cost2 = cost2.slice(12,)
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                32: {
                        title: "snRNA",
                        cost(){
                                let amt = getBuyableAmount("a", 32)
                                let baseCost = new Decimal(player.extremeMode ? (hasMilestone("d", 11) ? 1 : "1e1826e3") : "1e1012000")
                                return baseCost.times(Decimal.pow("1e5000", amt.pow(1.1)))
                        },
                        unlocked(){
                                return hasMilestone("a", 42) || hasMilestone("d", 5) || player.cells.unlocked
                        },
                        maxAfford(){
                                let pts = player.a.protein.points
                                let init = player.extremeMode ? (hasMilestone("d", 11) ? 1 : "1e1826e3") : "1e1012000"
                                if (pts.lt(init)) return decimalZero
                                return pts.div(init).log("1e5000").root(1.1).plus(1).floor()
                        },
                        canAfford:() => player.a.protein.points.gte(tmp.a.buyables[32].cost),
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.a
                                let id = 32
                                let ma = tmp.a.buyables[id].maxAfford
                                let up = hasUpgrade("a", 53) || player.easyMode ? ma.sub(data.buyables[id]) : 1
                                data.buyables[id] = data.buyables[id].plus(up)
                                if (!hasMilestone("cells", 48)) {
                                        data.protein.points = data.protein.points.sub(tmp.a.buyables[id].cost)
                                }
                        },
                        base(){
                                if (hasUpgrade("cells", 63))    return player.points.max(10).log10().max(10).log10()
                                if (layers.l.grid.getGemEffect(806)) return getBuyableAmount("a", 22).max(1)
                                return getBuyableAmount("a", 22).max(Math.E).ln()
                        },
                        effect(){
                                return tmp.a.buyables[32].base.pow(player.a.buyables[32])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.a.buyables[32]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.a.buyables[32].effect) + " to Protein gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("a", 32)) + " Protein</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details" 
                                }

                                let eformula = "ln(siRNA levels)^x<br>" + format(tmp.a.buyables[32].base) + "^x"
                                if (layers.l.grid.getGemEffect(806)) eformula = eformula.replace("ln", "")
                                if (hasUpgrade("cells", 63)) eformula = eformula.replace("siRNA levels", "log10(log10(Points))")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e1,012,000*1e5,000^x<sup>1.1</sup>"
                                if (player.extremeMode) cost2 = cost2.replace("012", "826")
                                if (hasMilestone("d", 11)) cost2 = cost2.slice(12, )
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                33: {
                        title: "shRNA",
                        cost(){
                                let amt = getBuyableAmount("a", 33)
                                let baseCost = new Decimal(player.extremeMode ? (hasUpgrade("sci", 455) ? 1 : "1e2852e4") : "1e9484e3")
                                let exp = 2
                                if (hasChallenge("l", 32) && player.extremeMode) exp = 1.9
                                if (layers.l.grid.getGemEffect(605) && player.extremeMode) exp = 1.8
                                if (layers.l.grid.getGemEffect(207) && player.extremeMode) exp = 1.7
                                return baseCost.times(Decimal.pow("1e7000", amt.pow(exp)))
                        },
                        unlocked(){
                                return hasUpgrade("a", 64) || hasMilestone("d", 5) || player.cells.unlocked
                        },
                        maxAfford(){
                                let pts = player.a.protein.points
                                let init = player.extremeMode ? (hasUpgrade("sci", 455) ? 1 : "1e2852e4") : "1e9484e3"
                                if (pts.lt(init)) return decimalZero
                                let exp = 2
                                if (hasChallenge("l", 32) && player.extremeMode) exp = 1.9
                                if (layers.l.grid.getGemEffect(605) && player.extremeMode) exp = 1.8
                                if (layers.l.grid.getGemEffect(207) && player.extremeMode) exp = 1.7
                                return pts.div(init).log("1e7000").root(exp).plus(1).floor()
                        },
                        canAfford:() => player.a.protein.points.gte(tmp.a.buyables[33].cost),
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.a
                                let id = 33
                                let ma = tmp.a.buyables[id].maxAfford
                                let up = hasUpgrade("a", 53) || player.easyMode ? ma.sub(data.buyables[id]) : 1
                                data.buyables[id] = data.buyables[id].plus(up)
                                if (!hasMilestone("cells", 48)) {
                                        data.protein.points = data.protein.points.sub(tmp.a.buyables[id].cost)
                                }
                        },
                        base(){
                                let ret = new Decimal(10)

                                                                ret = ret.plus(layers.l.grid.getGemEffect(106))
                                                                ret = ret.plus(layers.l.grid.getGemEffect(801).times(player.a.buyables[33]))
                                
                                if (hasUpgrade("cells", 115))   ret = player.cells.mu.points.max(1).pow(player.extremeMode ? .5 : 1)
                                if (hasMilestone("cells", 25))  ret = ret.times(tmp.tokens.buyables[13].effect)
                                
                                return ret
                        },
                        effect(){
                                return tmp.a.buyables[33].base.pow(player.a.buyables[33])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.a.buyables[33]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.a.buyables[33].effect) + " to Amino Acid gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("a", 33)) + " Protein</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details" 
                                }

                                let eformula = format(tmp.a.buyables[33].base) + "^x"
                                if (hasUpgrade("cells", 115)) eformula = "(Mu*Infrared)^x" + br + eformula
                                if (hasUpgrade("t", 92)) eformula = eformula.replace("*Infrared", "")
                                if (player.extremeMode) eformula = eformula.replace("Mu", "sqrt(Mu)")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e9,484,000*1e7,000^x<sup>2</sup>"
                                if (player.extremeMode) cost2 = cost2.replace("9,484", "28,520")
                                if (hasUpgrade("sci", 455)) cost2 = cost2.slice(13, )
                                let expPortion = "2<"
                                if (hasChallenge("l", 32) && player.extremeMode) expPortion = "1.9<"
                                if (layers.l.grid.getGemEffect(605) && player.extremeMode) expPortion = "1.8<"
                                if (layers.l.grid.getGemEffect(207) && player.extremeMode) expPortion = "1.7<"
                                cost2 = cost2.replace("2<", expPortion)
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
        },
        tabFormat: {
                "Upgrades": {
                        content: [
                                "main-display",
                                ["prestige-button", ""],
                                "blank", 
                                ["upgrades", [1,2,3,4,5,6,7]],
                                "blank",
                        ],
                        unlocked(){
                                return true
                        },
                        shouldNotify(){
                                let x = ["11", "12", "13", "14", "15", 
                                         "21", "22", "23", "24", "25", 
                                         "31", "32", "33", "34", "35", 
                                         "41", "42", "43", "44", "45", 
                                         "51", "52", "53", "54", "55", 
                                         "61", "62", "63", "64", "65",]
                                for (i in x){
                                        id = x[i]
                                        if (hasUpgrade("a", id)) continue
                                        if (!tmp.a.upgrades[id].unlocked) continue
                                        if (canAffordUpgrade("a", id)) return true
                                }
                                return false
                        },
                },
                "Milestones": {
                        content: [
                                "main-display",
                                ["display-text", function(){
                                        return "You have done " + formatWhole(player.a.times) + " Amino Acid resets"
                                }],
                                "milestones",
                        ],
                        unlocked(){
                                return true
                        },
                },
                "Protein": {
                        content: [
                                "main-display",
                                ["secondary-display3", "protein"],
                                ["display-text", function(){
                                        if (player.cells.times > 11) return ""
                                        if (player.a.protein.total.lt(1e100)) { 
                                                return "Current gain is " + format(tmp.a.protein.getResetGain) + " Protein per second"
                                        }
                                        if (!hasMilestone("a", 32)) { // 175e3 milestone
                                                let othergain = tmp.a.protein.getAllOtherGain
                                                let exp = tmp.a.protein.mRNAtRNABoostExp
                                                let tRNAFactor = tmp.a.buyables[11].baseCost.pow(tmp.a.buyables[11].base.log(5))
                                                let mRNAFactor = tmp.a.buyables[12].baseCost.pow(tmp.a.buyables[12].base.log(10))
                                                let mult = mRNAFactor.times(tRNAFactor).pow(-1).times(.001)
                                                let start = "For buyables to take 1ms to be affordable, you would have "
                                                return start + format(othergain.times(mult).pow(exp)) + " protein"
                                        }
                                        let boostExp = tmp.a.protein.mRNAtRNABoostExp
                                        let timePerBuyable = player.a.protein.points.root(boostExp).div(tmp.a.protein.getAllOtherGain || 1)
                                        let base1 = tmp.a.buyables[11].base.pow(Math.log(50)/Math.log(25)) 
                                        let base2 = tmp.a.buyables[12].base.pow(Math.log(50)/Math.log(100))
                                        // sqr(base1 * base2) is the expected multiplier per buyable, weighted cause theyre costs scale differently
                                        let oomps 
                                        if (timePerBuyable.gte(.05)) {
                                                oomps = base1.times(base2).sqrt().pow(timePerBuyable.pow(-1)).log10()
                                                // we expect to buy timePerBuyable.pow(-1) per second at base1.times(base2).sqrt() multiplier each
                                                // take log10 because its orders of magnitude
                                        } else {
                                                // on a given tick, we expect to buy log10(.05/timePerBuyable) + .5 mRNA and log5(.05/timePerBuyable) + .5 tRNA
                                                let storeValue = timePerBuyable.pow(-1).times(.05).log10().plus(.5)
                                                let expectmRNA = storeValue
                                                let expecttRNA = storeValue.div(0.6989700043360189) // 0.6989700043360189 = Math.log10(5)
                                                let tRNABoost = tmp.a.buyables[11].base.pow(expecttRNA)
                                                let mRNABoost = tmp.a.buyables[12].base.pow(expectmRNA)
                                                let expectBoost = tRNABoost.times(mRNABoost)
                                                oomps = expectBoost.log10().times(20) // cause 20 ticks per second
                                        }
                                        if (!player.shiftAlias || !tmp.a.buyables[13].unlocked || player.a.protein.points.lt(10)) {
                                                let a = "Current time to buy a buyable is approximately " + formatTime(timePerBuyable) + br
                                                // Math.log(10*5)/(2*Math.log(5))
                                                return a + "and you are gaining approximately " + format(oomps) + " OoM of protein per second"
                                        }
                                        let a = "The cheapest buyable other than mRNA and tRNA is "
                                        let cost = tmp.a.buyables[13].cost
                                        let costId = 13
                                        let idsCheck = [21, 22, 23, 31]
                                        for (i in idsCheck) {
                                                id = idsCheck[i]
                                                let c = tmp.a.buyables[id].cost
                                                if (c.lt(cost)) {
                                                        cost = c
                                                        costId = id
                                                }
                                        }
                                        let start = a + makeBlue(tmp.a.buyables[costId].title) + " and costs " + format(cost) + "<br>which is "
                                        let mid = format(cost.div(player.a.protein.points)) + " more than what you have, and is estimated to take "
                                        // = OoM/s now / ln(10) * boostExp * (10^(Oom Needed/boost exp)-1) 
                                        // last term is from integral
                                        let oomNeeded = cost.div(player.a.protein.points).log10()
                                        let flat = oomps.pow(-1).div(Math.log(10)).times(boostExp)
                                        let scaling = oomNeeded.div(boostExp).pow10().sub(1).max(0)
                                        let end = formatTime(flat.times(scaling)) 
                                        
                                        return start + mid + end
                                }],
                                "blank",
                                ["buyables", [1,2,3]],
                        ],
                        unlocked(){
                                return hasUpgrade("a", 11)
                        },
                },
                "Info": {
                        content: [
                                "main-display",
                                ["display-text", function(){
                                        if (player.or.unlocked) return ""

                                        let a = "Initial Amino Acid gain: (cbrt(log2(Lives)-1368)-7)<sup>2</sup>"
                                        let b = "Amino resets (in order) all Life content, N → ΔN levels, "
                                        let c = "the last two rows of Phosphorus and mu upgrades and finally does a Life reset."
                                        let d = "For unlocking Amino, Nitrogen and Phosphorus resets permanently do nothing"
                                        if (player.extremeMode) d += ", Oxygen Science and Nitrogen Science buyables cost nothing,"
                                        d += " and token and Nitrogen content is permanently kept upon Life resets."

                                        if (player.extremeMode) a = a.replace("1368", "1300")

                                        let part1 = a + br2 + b + br + c + br2 + d

                                        if (!player.a.everMilestone3) return part1

                                        let e = "Note that you have thus reached a point in the game where henceforth"
                                        let f = "Carbon, Oxygen, minigame, token, and Hydrogen content will not get reset."
                                        let g = "<sup>*</sup> it makes it so that if you have an odd number of completions you get a free completion."
                                        let h = "<sup>**</sup> passive gain only gives up to 1,000 gems."

                                        let part2 = part1 + br2 + e + br + f + br + g + br + h
                                        
                                        if (!hasUpgrade("a", 11)) return part2

                                        let i = "Base protein gain is log10(10+Amino Acid)"
                                        let boostExp = tmp.a.protein.mRNAtRNABoostExp
                                        let j1 = "Currently your mRNA and tRNA make your non-mRNA and non-tRNA boosts<br>effectively ^" + format(boostExp)
                                        j1 += " meaning a 2x boost to protein gain nets " + format(Decimal.pow(2, boostExp)) + " more total protein"
                                        let j2 = ""

                                        let idsCheck = [13, 21, 22, 23, 31, 32, 33]
                                        let boost = " boost to protein gain."
                                        let doEndingFormula = function(v){
                                                return makeRed(format(v)) + "/" + makeRed(format(v.pow(boostExp))) + boost
                                        }
                                        let boostPer = {}
                                        for (idCard in idsCheck) {
                                                id = idsCheck[idCard]
                                                boostPer[id] = decimalOne
                                                if (!tmp.a.buyables[id].unlocked || id == 22 || id == 33) continue
                                                boostPer[id] = boostPer[id].times(tmp.a.buyables[id].base)
                                                j2 += "<br>Each "
                                                j2 += tmp.a.buyables[id].title + " primarily gives a "
                                                j2 += doEndingFormula(tmp.a.buyables[id].base)
                                        }

                                        let j = j1 + j2 + br

                                        if (tmp.a.protein.getAUpgBase.gt(1)) {
                                                j += br + "Each "
                                                j += makeBlue("Amino Acid upgrade") + " gives a " + doEndingFormula(tmp.a.protein.getAUpgBase)
                                        }
                                        if (tmp.a.protein.getSciUpgBase.gt(1)) {
                                                j += br + "Each "
                                                j += makeBlue("Protein Science upgrade") + " gives a " + doEndingFormula(tmp.a.protein.getSciUpgBase)
                                        }
                                        if (hasUpgrade("a", 13)) {
                                                let a13 = decimalOne
                                                if (getBuyableAmount("a", 11).gt(0)) a13 = a13.plus(getBuyableAmount("a", 11).pow(-1))
                                                if (getBuyableAmount("a", 11).lt(14300)) {
                                                        j += "<br>Amino Acid III makes the next tRNA give a " + doEndingFormula(a13) 
                                                }
                                        }
                                        if (hasUpgrade("a", 15)) {
                                                let a15 = decimalOne
                                                if (getBuyableAmount("a", 12).gt(0)) a15 = a15.plus(getBuyableAmount("a", 12).pow(-1))
                                                if (getBuyableAmount("a", 12).lt(10000)) {
                                                        j += "<br>Amino Acid V makes the next mRNA give a " + doEndingFormula(a15) 
                                                }
                                        }
                                        if (hasUpgrade("a", 31)) {
                                                let a31 = getBuyableAmount("a", 13).plus(1).div(getBuyableAmount("a", 13).max(1)).pow(3)
                                                if (getBuyableAmount("a", 13).lt(1e3)) {
                                                        j += "<br>Amino Acid XI makes the next miRNA give a " + doEndingFormula(a31) 
                                                }
                                                boostPer[13] = boostPer[13].times(a31)
                                        }
                                        if (tmp.a.buyables[21].unlocked && tmp.l.getNonZeroGemCount < 64) {
                                                let abuy21 = tmp.a.buyables[21].base.pow(-1).plus(1)
                                                j += "<br>The next non-0 gem amount gives a " + doEndingFormula(abuy21.pow(getBuyableAmount("a", 21))) 
                                        }
                                        if (hasUpgrade("a", 42)) {
                                                let a42 = decimalOne
                                                if (getBuyableAmount("a", 22).gt(0)) a42 = a42.plus(getBuyableAmount("a", 22).pow(-1))
                                                if (getBuyableAmount("a", 22).lt(1e3)) {
                                                        j += "<br>Amino Acid XVII makes the next siRNA give a " + doEndingFormula(a42) 
                                                }
                                                boostPer[22] = boostPer[22].times(a42)
                                        }
                                        if (hasMilestone("a", 28)) {
                                                let m28 = decimalOne
                                                if (getBuyableAmount("a", 21).gt(0)) m28 = m28.plus(getBuyableAmount("a", 21).pow(-1))
                                                if (getBuyableAmount("a", 21).lt(1e3)) {
                                                        j += "<br>Amino Milestone 28 makes the next rRNA give a " + doEndingFormula(m28)
                                                } 
                                                boostPer[21] = boostPer[21].times(m28)
                                        }
                                        if (hasUpgrade("a", 45)) {
                                                let a45 = getBuyableAmount("a", 23).plus(1).div(getBuyableAmount("a", 23).max(1)).pow(2)
                                                if (getBuyableAmount("a", 23).lt(1e3)) {
                                                        j += "<br>Amino Acid XX makes the next crRNA give a " + doEndingFormula(a45) 
                                                }
                                                boostPer[23] = boostPer[23].times(a45)
                                        }
                                        let mBase = tmp.a.protein.getAMilestoneBase
                                        if (mBase.gt(1)) {
                                                j += br + "Each "
                                                j += makeBlue("milestone") + " gives a " + doEndingFormula(mBase)
                                        }
                                        if (hasMilestone("a", 29)) {
                                                let base = getBuyableAmount("a", 13).div(100).plus(1)
                                                let exp = getBuyableAmount("a", 22)
                                                // let m29mi = new Decimal(.01).div(base).plus(1).pow(exp)
                                                let m29mi 
                                                if (getBuyableAmount("a", 13).lt(1e8)) {
                                                        m29mi = new Decimal(.01).div(base).plus(1).pow(exp)
                                                } else { // the second order term is -.5/miRNA levels compared to the primary
                                                        m29mi = Decimal.exp(exp.times(.01).div(base))
                                                }

                                                j += "<br>Milestone 29 makes the next siRNA give a " + doEndingFormula(base)
                                                j += "<br> and the next miRNA give a " + doEndingFormula(m29mi)
                                                boostPer[22] = boostPer[22].times(base)
                                                boostPer[13] = boostPer[13].times(m29mi)
                                        }
                                        if (tmp.a.buyables[32].unlocked && getBuyableAmount("a", 22).lt(1e9)) {
                                                let getVal = function(x){return x.max(Math.E).ln()}
                                                let base = getVal(getBuyableAmount("a", 22).plus(1)).div(getVal(getBuyableAmount("a", 22)))
                                                let end = base.pow(getBuyableAmount("a", 32))
                                                j += br + "Due to snRNA the next siRNA gives a " + doEndingFormula(end)
                                                boostPer[22] = boostPer[22].times(end)
                                        }
                                        if (getBuyableAmount("a", 22).lt(1e9) && tmp.a.buyables[23].unlocked){
                                                let base23 = tmp.a.buyables[23].base
                                                let logBase = 10
                                                if (hasMilestone("a", 36)) logBase = Math.E
                                                if (hasMilestone("a", 37)) logBase = 2
                                                let logGain = tmp.a.buyables[33].base.log(logBase)
                                                let logGain10 = tmp.a.buyables[33].base.log(10)
                                                let gainPer = logGain.div(base23).plus(1)
                                                let end = gainPer.pow(getBuyableAmount("a", 23)).times(logGain10.div(player.a.points.max(10).log10()).plus(1))
                                                j += br + "Amino Acid gain from the next shRNA gives a " + doEndingFormula(end)
                                                boostPer[33] = boostPer[33].times(end)
                                        }

                                        for (idCard in idsCheck) {
                                                id = idsCheck[idCard]
                                                if (!tmp.a.buyables[id].unlocked) continue
                                                if (getBuyableAmount("a", 22).gt(1e9) && id == 33) continue
                                                if (id == 13) j += br2 + "That means in total,"
                                                j += "<br>The next "
                                                j += makeBlue(tmp.a.buyables[id].title) + " gives a "
                                                j += doEndingFormula(boostPer[id])
                                        }

                                        if (!hasMilestone("a", 32)) return part2 + br2 + i + br + j
                                        
                                        let k1 = "<sup>*3</sup>If you are gaining X protein/s from sources other than tRNA and mRNA,"
                                        let k2 = "and your mRNA and tRNA net ^Y protein gain"
                                        let k3 = "then you get an additional (X/1000)<sup>Y</sup> protein per second."
                                        let k = k1 + br + k2 + br + k3

                                        let part3 = part2 + br2 + i + br + j + br2 + k

                                        return part3
                                }],
                        ],
                        unlocked(){
                                return !player.or.unlocked
                        },
                },
        },
        onPrestige(){
                let timesAdd = 1
                if (player.easyMode) timesAdd *= 2
                if (hasMilestone("d", 1)) timesAdd *= 3
                player.a.times += timesAdd
                player.a.time = 0
        },
        doReset(layer){
                if (layer != "a") return

                /*
                1. Life content
                2. Mu content
                3. Phoshphorus content
                */

                let data1 = player.l
                let data2 = player.mu
                let data3 = player.p

                // 1 Life content
                if (!false) {
                        let lKeptMilestones = 0
                        if (hasMilestone("a", 1)) lKeptMilestones += 4 * player.a.times
                        if (!false) {
                                sortStrings(data1.milestones)
                                data1.milestones = data1.milestones.slice(0, lKeptMilestones)
                        }

                        let startingBuyableAmount = decimalZero
                        if (hasMilestone("cells", 1)) startingBuyableAmount = new Decimal(500)

                        data1.buyables[11] = startingBuyableAmount
                        data1.buyables[12] = startingBuyableAmount
                        data1.buyables[13] = startingBuyableAmount
                        data1.buyables[21] = startingBuyableAmount
                        data1.buyables[22] = startingBuyableAmount
                        data1.buyables[23] = startingBuyableAmount
                        data1.buyables[31] = startingBuyableAmount // buyables
                        data1.buyables[32] = startingBuyableAmount
                        data1.buyables[33] = startingBuyableAmount

                        //gems
                        if (!hasUpgrade("a", 31)) {
                                let x = getResetGemIDs()
                                let keepGems = decimalZero
                                if (hasMilestone("a", 1)) keepGems = keepGems.plus(player.a.times)

                                let gData = player.l.grid

                                for (i in x) {
                                        id = x[i]
                                        let thisKeep = keepGems
                                        if (hasMilestone("a", 12) && id < 400 && (id % 100 < 4)) thisKeep = thisKeep.max(1000)
                                        gData[id].gems = gData[id].gems.min(thisKeep)
                                }
                        }

                        //challenges
                        if (!hasMilestone("a", 9) && !player.cells.unlocked) data1.challenges[11] = 0

                        //reset times
                        if (!hasMilestone("a", 9)) data1.times = 0

                        if (player.extremeMode) {
                                let lKeptUpgrades = 0
                                if (hasMilestone("a", 6)) lKeptUpgrades += player.a.times
                                if (!false) {
                                        sortStrings(data1.upgrades)
                                        data1.upgrades = data1.upgrades.slice(0, lKeptUpgrades)
                                }
                        }
                }

                data1.points = decimalZero
                data1.best = decimalZero
                data1.total = decimalZero

                // 2 Mu content
                if (!false) { 
                        // 2 rows of upgrades
                        data2.buyables[33] = decimalZero

                        let muUpgRem = [41, 42, 43, 44, 45, 
                                        51, 52, 53, 54, 55]
                        // upgrades
                        data2.upgrades = filterOut(data2.upgrades, muUpgRem)
                }

                // 3 Phosphorus content
                if (!hasMilestone("d", 2)) {
                        // 2 rows of upgrades
                        let pUpgRem = [41, 42, 43, 44, 45, 
                                       51, 52, 53, 54, 55]
                        // upgrades
                        data3.upgrades = filterOut(data3.upgrades, pUpgRem)
                }
                player.p.best_over_amino = decimalZero

                layers.l.doReset("a", true) // force it

                if (player.extremeMode) layers.sci.doReset("a")
        },
})

addLayer("d", {
        name: "DNA", 
        symbol: "D", 
        position: 3, 
        startData(){ return {
                unlocked: false,
		points: decimalZero,
                best: decimalZero,
                total: decimalZero,
                abtime: 0,
                time: 0,
                times: 0,
                passiveTime: 0,
        }},
        color: "#8C3300",
        branches: [],
        requires:() => new Decimal(player.extremeMode ? "8e415" : 4.4e169), 
        resource: "DNA", 
        baseResource: "Amino Acid", 
        baseAmount(){return player.a.points},
        type: "custom",
        getResetGain(){
                let ret = tmp.d.getBaseGain.times(tmp.d.getGainMult)
                
                if (player.extremeMode) ret = ret.pow(.75)
                
                return ret.floor()
        },
        getBaseGain(){
                if (hasUpgrade("or", 222)) {
                        let perT2 = 2
                        if (hasUpgrade("or", 21)) perT2 = 4
                        if (hasUpgrade("an", 15)) perT2 = player.an.upgrades.length
                        if (hasUpgrade("an", 33)) perT2 = player.ch.points

                        let mult = decimalOne
                        if (hasUpgrade("sp", 34)) mult = mult.times(tmp.sp.effect.pow(player.tokens.total.sqrt()))
                        return Decimal.pow(perT2, player.tokens.tokens2.total).times(mult).pow(tmp.d.getGainExp)
                }
                let pts = player.a.points
                let init = pts.div(player.extremeMode ? "8e315" : 4.4e144).max(1).log10()
                if (layers.l.grid.getGemEffect(408) || hasUpgrade("or", 145)) init = init.plus(144.6434526764861874) 
                if (init.lt(25)) return decimalZero

                let v1 = init
                if (!hasMilestone("cells", 31)) v1 = v1.sqrt()
                if (player.extremeMode) v1 = v1.div(2)
                else if (!layers.l.grid.getGemEffect(701) && !hasUpgrade("or", 145)) v1 = v1.div(2)
                return v1.plus(tmp.d.getBaseGainAddition).pow(tmp.d.getGainExp)
        },
        getBaseGainAddition(){
                if (hasMilestone("cells", 31)) return decimalZero
                let ret = new Decimal(-1.5)

                if (player.extremeMode) ret = ret.sub(2.5)
                ret = ret.plus(layers.l.grid.getGemEffect(506))

                return ret
        },
        getGainMult(){ // dna gain dnagain dgain d gain
                let ret = decimalOne

                                                ret = ret.times(layers.l.grid.getGemEffect(206))
                if (hasUpgrade("d", 12)) {
                        let base = 2
                        if (hasUpgrade("d", 13)) base *= 2
                        if (hasMilestone("d", 14)) base *= 2
                        if (hasUpgrade("d", 14)) base *= 2
                        if (hasUpgrade("d", 15)) base *= 2
                                                ret = ret.times(Decimal.pow(base, player.d.upgrades.length))
                }       
                if (hasChallenge("l", 22))      ret = ret.times(tmp.l.challenges[22].reward)
                if (!hasUpgrade("or", 133))     ret = ret.times(layers.l.grid.getGemEffect(601).pow(getBuyableAmount("a", 33)).min("1e50000"))
                if (hasUpgrade("d", 23))        ret = ret.times(player.l.points.max(10).log10())
                if (hasMilestone("d", 18) && !hasMilestone("an", 30)) {
                        let base = 2
                        if (hasUpgrade("d", 24) && !player.extremeMode) base *= 2
                        if (hasUpgrade("d", 25)) base *= 2
                        if (hasUpgrade("d", 31)) base *= 2
                                                ret = ret.times(Decimal.pow(base, player.d.milestones.length))
                }
                                                ret = ret.times(layers.l.grid.getGemEffect(607).pow(tmp.l.getNonZeroGemCount))
                if (hasUpgrade("d", 35))        ret = ret.times(Decimal.pow(1.01, getBuyableAmount("a", 33)).min("e2e5"))
                                                ret = ret.times(tmp.cells.effect)
                if (hasUpgrade("cells", 113) && !hasUpgrade("ch", 25)) {
                                                ret = ret.times(tmp.cells.upgrades[113].effect)
                }
                                                ret = ret.times(tmp.t.effect)
                if (hasUpgrade("t", 112))       ret = ret.times(tmp.t.effect.pow(player.t.upgrades.length))
                if (hasChallenge("l", 111))     ret = ret.times(tmp.l.challenges[21].reward.min(ret.sqrt()))
                if (player.cells.challenges[21] >= 1) {
                        let base = player.points.max(10).log10().max(10).log10()
                        let exp = player.cells.upgrades.length
                                                ret = ret.times(base.pow(exp))
                }
                                                ret = ret.times(tmp.or.effect)
                if (player.easyMode)            ret = ret.times(2)
                if (hasUpgrade("sci", 553))     ret = ret.times(tmp.cells.buyables[13].effect)
                                                ret = ret.times(player.points.max(100).log10().log10().log10().max(1).pow(tmp.sci.buyables[503].effect))
                                                ret = ret.times(tmp.an.effect)
                if (hasUpgrade("sp", 45))       ret = ret.times(player.an.grid[208].extras.plus(1).pow(player.nu.points.pow(9)))

                return ret.max(1)
        },
        getGainExp(){
                let ret = new Decimal(2)

                if (hasChallenge("l", 32))      ret = ret.plus(tmp.l.challenges[32].reward)
                if (hasUpgrade("d", 33))        ret = ret.plus(player.d.upgrades.length)
                if (hasMilestone("cells", 18))  ret = ret.plus(getBuyableAmount("cells", 11).sqrt())
                if (player.extremeMode)         ret = ret.plus(layers.l.grid.getGemEffect(507))
                
                if (hasUpgrade("t", 74))        ret = ret.times(player.t.upgrades.length)
                if (hasUpgrade("or", 145))      ret = ret.times(2)
                if (hasUpgrade("or", 213))      ret = ret.times(2)
                if (hasUpgrade("an", 41))       ret = ret.times(player.ch.points.max(6).log(6))
                if (hasMilestone("ch", 23))     ret = ret.times(player.nu.points.max(2).log(2))
                if (hasMilestone("ch", 25))     ret = ret.times(player.nu.points.max(1).sqrt())
                if (hasMilestone("ch", 26))     ret = ret.times(1.31)
                if (hasMilestone("nu", 17))     ret = ret.times(Decimal.pow(1.01, player.nu.points))

                return ret
        },
        getNextAt(){
                let gain = tmp.d.getResetGain.plus(1)

                if (player.extremeMode) gain = gain.root(.75)

                let baseGain = gain.div(tmp.d.getGainMult)

                return baseGain.max(1).root(tmp.d.getGainExp).sub(tmp.d.getBaseGainAddition).times(2).pow(2).pow10().times(player.extremeMode ? "8e315" : 4.4e144)
        },
        canReset(){
                return tmp.d.getResetGain.gt(0) && !hasUpgrade("or", 125)
        },
        effect(){
                if (hasUpgrade("or", 342)) return decimalOne
                let amt = player.d.best

                let exp = amt.cbrt().times(2).min(10)
                if (hasUpgrade("cells", 14))    exp = exp.plus(getBuyableAmount("cells", 12))

                if (hasUpgrade("t", 92))        exp = exp.times(player.tokens.total.max(1).pow(Math.PI).min(2e8))

                return [amt.plus(1).pow(exp), amt.times(3).plus(1)]
        },
        effectDescription(){
                if (hasUpgrade("or", 342)) return ""
                let eff = tmp.d.effect
                let start = " multiplying Life and Protein gain by " 
                if (hasUpg("t", 92)) return "multiplying Life, Protein, and Amino Acid gain by " + format(eff[0] || 1) + "."
                return start + format(eff[0] || 1) + " and Amino Acid gain by " + format(eff[1] || 1) + "."
        },
        update(diff){
                let data = player.d
                
                if (tmp.d.layerShown) data.unlocked = true
                data.best = data.best.max(data.points)

                let gainPercentage = layers.l.grid.getGemEffect(306).times(diff)
                if (hasUpgrade("or", 12)) gainPercentage = gainPercentage.plus(diff)

                data.total = data.total.plus(tmp.d.getResetGain.times(gainPercentage))
                if (!hasUpgrade("d", 23)) {
                        data.points = data.points.plus(tmp.d.getResetGain.times(gainPercentage))
                } else {
                        rem = Decimal.sub(10, data.points.div(tmp.d.getResetGain)).div(1.21)
                        if (rem.gt(diff)) data.points = data.points.plus(tmp.d.getResetGain.times(gainPercentage))
                        else data.points = data.points.max(tmp.d.getResetGain.times(10))
                }

                data.time += diff
                data.passiveTime += layers.l.grid.getGemEffect(606).toNumber() * diff
                if (hasUpgrade("or", 123)) data.passiveTime += diff
                if (data.passiveTime > 1) {
                        data.passiveTime += -1
                        data.times ++
                }
                if (data.passiveTime > 10) data.passiveTime = 10
        },
        row: 3, 
        prestigeButtonText(){
                let b = ""
                if (tmp.d.getResetGain.lt(1e3)) b = "<br>Next: " + format(tmp.d.getNextAt) + " Amino Acid."

                return "Reset for <b>" + formatWhole(tmp.d.getResetGain) + "</b> DNA" + b
        },
        layerShown(){
                if (tmp.d.deactivated) return false
                return player.d.best.gt(0) || hasUpgrade("a", 65) || player.cells.unlocked
        },
        upgrades: {
                rows: 10,
                cols: 5,
                11: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA I"
                        },
                        description(){
                                return "<bdi style='font-size: 80%'>The 1 Life reset milestone is always maxed, subtract .05 from µ cost exponent while not in Customizable, and add 100% to C25 effect</bdi>"
                        },
                        cost:() => decimalOne,
                        unlocked(){
                                if (hasMilestone("an", 28)) return false
                                return true
                        }, // hasUpgrade("d", 11)
                },
                12: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA II"
                        },
                        description(){
                                return "Per upgrade per ncRNA exponentiate point gain to the number of ncRNA's and per upgrade double DNA gain"
                        },
                        cost:() => new Decimal(player.extremeMode ? 40 : 30),
                        unlocked(){
                                if (hasMilestone("an", 28)) return false
                                return hasMilestone("d", 10) || player.cells.unlocked
                        }, // hasUpgrade("d", 12)
                },
                13: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA III"
                        },
                        description(){
                                let a = "Per upgrade per miRNA exponentiate point gain to the number of miRNAs and per upgrade double DNA gain"
                                if (player.extremeMode) a = a.replace("er upgrade p", "")
                                return a
                        },
                        cost:() => new Decimal(player.extremeMode ? 1e13 : 1e12),
                        unlocked(){
                                if (hasMilestone("an", 28)) return false
                                return hasChallenge("l", 32) || player.cells.unlocked
                        }, // hasUpgrade("d", 13)
                },
                14: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA IV"
                        },
                        description(){
                                return "Per upgrade double DNA gain and ncRNA's outer log10 becomes ln"
                        },
                        cost:() => new Decimal(5e19),
                        unlocked(){
                                if (hasMilestone("an", 28)) return false
                                return hasChallenge("l", 41) || player.cells.unlocked
                        }, // hasUpgrade("d", 14)
                },
                15: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA V"
                        },
                        description(){
                                return "Per upgrade double DNA gain and ncRNA's inner log10 becomes ln"
                        },
                        cost:() => new Decimal(player.extremeMode ? 3.23e23 : 2e22),
                        unlocked(){
                                if (hasMilestone("an", 28)) return false
                                return hasUpgrade("d", 14) || player.cells.unlocked
                        }, // hasUpgrade("d", 15)
                },
                21: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA VI"
                        },
                        description(){
                                return "ncRNA's outer ln becomes log2 and unlock Anti-omega but Phosphorus I no longer produces Nitrogen"
                        },
                        cost:() => new Decimal(player.extremeMode ? 2.7e27 : 5e27),
                        unlocked(){
                                if (hasMilestone("an", 28)) return false
                                return hasUpgrade("d", 15) || player.cells.unlocked
                        }, // hasUpgrade("d", 21)
                },
                22: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA VII"
                        },
                        description(){
                                return "ncRNA's inner ln becomes log2 and when not in a life challenge after one second regain your best N → Δµ amount"
                        },
                        cost:() => new Decimal(5e34),
                        unlocked(){
                                if (hasMilestone("an", 28)) return false
                                return hasUpgrade("d", 21) || player.cells.unlocked
                        }, // hasUpgrade("d", 22)
                },
                23: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA VIII"
                        },
                        description(){
                                return "log10(Lives) multiplies DNA gain but you can only have 10x of your DNA gained on reset"
                        },
                        cost:() => new Decimal(player.extremeMode ? 2e37 : 2e36),
                        unlocked(){
                                if (hasMilestone("an", 28)) return false
                                return hasUpgrade("d", 22) || player.cells.unlocked
                        }, // hasUpgrade("d", 23)
                },
                24: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA IX"
                        },
                        description(){
                                if (player.extremeMode) return "siRNA is no longer hardcapped"
                                return "Add .1375 to α → ∂𝛾's base, per milestone double DNA gain, and siRNA is no longer hardcapped"
                        },
                        cost:() => new Decimal(player.extremeMode ? 1.8e102 : 8e101),
                        unlocked(){
                                if (hasMilestone("an", 28)) return false
                                return hasMilestone("d", 22) || player.cells.unlocked
                        }, // hasUpgrade("d", 24)
                },
                25: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA X"
                        },
                        description(){
                                if (player.extremeMode) return "Remove the 69+ and 2+ in the N → Δµ formula and per milestone double DNA gain"
                                return "Remove the 65+ and 2+ in the N → Δµ formula and per milestone double DNA gain"
                        },
                        cost:() => new Decimal(player.extremeMode ? "3.33e333" : 1e156),
                        unlocked(){
                                if (hasMilestone("an", 28)) return false
                                return layers.l.grid.getGemEffect(803) || player.cells.unlocked
                        }, // hasUpgrade("d", 25)
                },
                31: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA XI"
                        },
                        description(){
                                return "Make N → Δµ base 100,000 and per milestone double DNA gain"
                        },
                        cost:() => new Decimal(player.extremeMode ? "1.7e345" : 2e166),
                        unlocked(){
                                if (hasMilestone("an", 28)) return false
                                return hasUpgrade("d", 25) || player.cells.unlocked
                        }, // hasUpgrade("d", 31)
                },
                32: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA XII"
                        },
                        description(){
                                if (player.extremeMode) return "Per upgrade double DNA Science gain and add .0004 to tRNA's base"
                                return "Add .0004 to tRNA's base"
                        },
                        cost:() => new Decimal(player.extremeMode ? "4e619" : 1e238),
                        unlocked(){
                                if (hasMilestone("an", 28)) return false
                                return hasUpgrade("d", 31) || player.cells.unlocked
                        }, // hasUpgrade("d", 32)
                },
                33: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA XIII"
                        },
                        description(){
                                return "Per upgrade you have one less token for prestige purposes and add 1 to DNA gain exponent"
                        },
                        cost:() => new Decimal(player.extremeMode ? "9.79e979" : 4.64e283),
                        unlocked(){
                                if (hasMilestone("an", 28)) return false
                                return hasUpgrade("d", 32) || player.cells.unlocked
                        }, // hasUpgrade("d", 33)
                },
                34: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA XIV"
                        },
                        description(){
                                return "Per upgrade per α → ∂α exponentiate point gain to the number of α → ∂α's"
                        },
                        cost:() => new Decimal(player.extremeMode ? "1.5e1007" : "5.010e322"),
                        unlocked(){
                                if (hasMilestone("an", 28)) return false
                                return hasUpgrade("d", 33) || player.cells.unlocked
                        }, // hasUpgrade("d", 34)
                },
                35: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>DNA XV"
                        },
                        description(){
                                if (player.extremeMode) return "Add .0005 to tRNA's base and each 𝛾 → ∂𝛾 multiplies DNA gain by 1.01 (up to e2e5), and unlock Cells"
                                return "Add .001 to tRNA's base and each 𝛾 → ∂𝛾 multiplies DNA gain by 1.01 (up to e2e5), and unlock Cells"
                        },
                        cost:() => new Decimal(player.extremeMode ? "4e1010" : "1e449"),
                        unlocked(){
                                if (hasMilestone("an", 28)) return false
                                return hasUpgrade("d", 34) || player.cells.unlocked
                        }, // hasUpgrade("d", 35)
                },
        },
        milestones: {
                1: {
                        requirementDescription(){
                                return "1 DNA reset"
                        },
                        done(){
                                return player.d.times >= 1
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: mRNA and tRNA production boost is additionally treated as if you can buy them in 1µs, you gain 10 dilation completions at once, keep all prior automation, and gain 3x Amino Acid resets."
                        },
                }, // hasMilestone("d", 1)
                2: {
                        requirementDescription(){
                                return "2 DNA resets"
                        },
                        done(){
                                return player.d.times >= 2
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Per reset keep three Amino Acid milestones, keep Phosphorus upgrades, and mRNA and tRNA production boost is additionally treated as if you can buy them in 100µs."
                        },
                }, // hasMilestone("d", 2)
                3: {
                        requirementDescription(){
                                if (player.hardMode) return "4 DNA resets"
                                return "3 DNA resets"
                        },
                        done(){
                                if (player.hardMode) return player.d.times >= 4
                                return player.d.times >= 3
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: miRNA's log10 becomes log9, you gain 10 passive gems at once, and you infinitely bulk N → ΔP and N → ΔN."
                        },
                }, // hasMilestone("d", 3)
                4: {
                        requirementDescription(){
                                if (player.hardMode) return "6 DNA resets"
                                return "4 DNA resets"
                        },
                        done(){
                                if (player.hardMode) return player.d.times >= 6
                                return player.d.times >= 4
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let a = "Reward: miRNA effects Life gain, gain C45 gems passively,"
                                if (player.extremeMode) a += " keep a Protein Science upgrade per reset, Amino Acid XXIII costs 1e35,"
                                return a + " and autobuy ncRNA."
                        },
                }, // hasMilestone("d", 4)
                5: {
                        requirementDescription(){
                                if (player.hardMode) return "8 DNA resets"
                                return "5 DNA resets"
                        },
                        done(){
                                if (player.hardMode) return player.d.times >= 8
                                return player.d.times >= 5
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Keep Amino Acid resets, gain C35 gems passively, and gain an Amino Acid reset per second."
                        },
                }, // hasMilestone("d", 5)
                6: {
                        requirementDescription(){
                                if (player.hardMode) return "11 DNA resets"
                                return "6 DNA resets"
                        },
                        done(){
                                if (player.hardMode) return player.d.times >= 11
                                return player.d.times >= 6
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Autobuy snRNA, miRNA's log9 becomes log8, and gain C25 gems passively."
                        },
                }, // hasMilestone("d", 6)
                7: {
                        requirementDescription(){
                                if (player.hardMode) return "14 DNA resets"
                                return "7 DNA resets"
                        },
                        done(){
                                if (player.hardMode) return player.d.times >= 14
                                return player.d.times >= 7
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Keep two Amino Acid upgrades per reset, miRNA's log8 becomes log7, and gain C15 gems passively."
                        },
                }, // hasMilestone("d", 7)
                8: {
                        requirementDescription(){
                                if (player.hardMode) return "17 DNA resets"
                                return "8 DNA resets"
                        },
                        done(){
                                if (player.hardMode) return player.d.times >= 17
                                return player.d.times >= 8
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: You passively gain 100 gems instead of 10, passive gem gain is capped at 10,000, miRNA's log7 becomes log6, and gain C51 gems passively."
                        },
                }, // hasMilestone("d", 8)
                9: {
                        requirementDescription(){
                                if (player.hardMode) return "25 DNA resets"
                                return "9 DNA resets"
                        },
                        done(){
                                if (player.hardMode) return player.d.times >= 25
                                return player.d.times >= 9
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: miRNA's log6 becomes log5, and gain C52 gems passively."
                        },
                }, // hasMilestone("d", 9)
                10: {
                        requirementDescription(){
                                if (player.hardMode) return "30 DNA resets"
                                return "20 DNA resets"
                        },
                        done(){
                                if (player.hardMode) return player.d.times >= 30
                                return player.d.times >= 20
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: miRNA's log5 becomes log4, gain C53 gems passively, and unlock a new set of challenges."
                        },
                }, // hasMilestone("d", 10)
                11: {
                        requirementDescription(){
                                return "100 DNA"
                        },
                        done(){
                                return player.d.points.gte(100)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let a = "Reward: miRNA's log4 becomes log3, "
                                if (player.extremeMode) a += "remove snRNA's base cost, "
                                return a + "gain C54 gems passively, and gain 10x gems."
                        },
                }, // hasMilestone("d", 11)
                12: {
                        requirementDescription(){
                                return "2,000 DNA"
                        },
                        done(){
                                return player.d.points.gte(2e3)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let a = "Reward: miRNA's log3 becomes ln, gain C55 gems passively, "
                                if (player.extremeMode) a += "remove ncRNA's base cost, "
                                return a + "keep gems, and autobuy miRNA."
                        },
                }, // hasMilestone("d", 12)
                13: {
                        requirementDescription(){
                                return "10,000 C46 Gems"
                        },
                        done(){
                                return player.l.grid[406].gems.gte(1e4)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: miRNA's ln becomes log2 and unlock new Life Challenges whose completions never get removed."
                        },
                }, // hasMilestone("d", 13)
                14: {
                        requirementDescription(){
                                return "10,000 C64 Gems"
                        },
                        done(){
                                return player.l.grid[604].gems.gte(1e4)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: DNA multiplies protein gain, unlock Anti-Nitrogen, and per upgrade double DNA gain."
                        },
                }, // hasMilestone("d", 14)
                15: {
                        requirementDescription(){
                                if (player.extremeMode) return "e89,012,345 Protein"
                                return "18,100 N → Δµ"
                        },
                        done(){
                                if (player.cells.milestone1Ever) return true 
                                if (player.extremeMode) return player.a.protein.points.max(10).log10().gt(89012345)
                                return getBuyableAmount("mu", 31).gte(18100)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Subtract .01 from the µ cost exponent and N → Δµ levels are rounded up to a multiple of 20 when bought."
                                return "Reward: Subtract .01 from the µ cost exponent and N → Δµ levels are rounded up to a multiple of 20 when bought but disable DNA VII for N → Δµ."
                        },
                }, // hasMilestone("d", 15)
                16: {
                        requirementDescription(){
                                if (player.extremeMode) return "2.80e45 DNA"
                                return "8.00e48 DNA"
                        },
                        done(){
                                return player.d.points.gte(player.extremeMode ? 2.8e45 : 8e48)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Subtract .05 from the µ cost exponent while in Customizable and N → Δµ levels are rounded up to a multiple of 100 when bought."
                        },
                }, // hasMilestone("d", 16)
                17: {
                        requirementDescription(){
                                if (player.extremeMode) return "8.70e49 DNA"
                                return "1.30e49 DNA"
                        },
                        done(){
                                if (player.extremeMode) return player.d.points.gte(8.7e49)
                                return player.d.points.gte(1.3e49)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: N → ΔN effect is no longer softcapped in dilation, 𝛾 → ∂𝛾 cost base is 1e5, and add 1/30 to its base per milestone."
                                return "Reward: N → ΔN effect is no longer softcapped in dilation."
                        },
                }, // hasMilestone("d", 17)
                18: {
                        requirementDescription(){
                                if (player.extremeMode) return "4.10e51 DNA"
                                return "2.30e49 DNA"
                        },
                        done(){
                                if (player.extremeMode) return player.d.points.gte(4.1e51)
                                return player.d.points.gte(2.3e49)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Per milestone double DNA gain, per non-zero gem multiply Protein gain by DNA, and unlock a challenge."
                        },
                }, // hasMilestone("d", 18)
                19: {
                        requirementDescription(){
                                if (player.extremeMode) return "1.00e68 DNA"
                                return "1.00e65 DNA"
                        },
                        done(){
                                if (player.extremeMode) return player.d.points.gte(1e68)
                                return player.d.points.gte(1e65)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: You can bulk up to 500 Life buyables."
                                return "Reward: You can bulk up to 20 Life buyables."
                        },
                }, // hasMilestone("d", 19)
                20: {
                        requirementDescription(){
                                if (player.extremeMode) return "1.20e72 DNA"
                                return "e6e136 Phosphorus"
                        },
                        done(){
                                if (player.extremeMode) return player.d.points.gte(1.2e72)
                                return player.p.points.gte("e6e136")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Per milestone cube Phosphorus gain and multiply Protein gain by µ+1 and Life IV base is [milestones]^(non-zero gems)<sup>2</sup>."
                                return "Reward: Per milestone + 1 square Phosphorus gain." 
                        },
                }, // hasMilestone("d", 20)
                21: {
                        requirementDescription(){
                                if (player.extremeMode) return "1.70e99 DNA"
                                return "3.00e100 DNA"
                        },
                        done(){
                                if (player.extremeMode) return player.d.points.gte(1.7e99)
                                return player.d.points.gte(3e100)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Add .0001 to tRNA base."
                        },
                }, // hasMilestone("d", 21)
                22: {
                        requirementDescription(){
                                if (player.extremeMode) return "4.40e100 DNA"
                                return "1.60e101 DNA"
                        },
                        done(){
                                if (player.extremeMode) return player.d.points.gte(4.4e100)
                                return player.d.points.gte(1.6e101)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Add .0001 to tRNA base and remove α → ∂β's log2."
                        },
                }, // hasMilestone("d", 22)
                23: {
                        requirementDescription(){
                                return "54,321 C77 Gems"
                        },
                        done(){
                                return player.l.grid[707].gems.gte(54321)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Unlock the next set of challenges."
                        },
                }, // hasMilestone("d", 23)
                24: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e9647 Amino Acids"
                                return "e1e9 Protein"
                        },
                        done(){
                                if (player.extremeMode) return player.a.points.gte("1e9647")
                                return player.a.protein.points.gte("e1e9")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Dilation effect from Customizable is raised ^.94."
                        },
                }, // hasMilestone("d", 24)
                25: {
                        requirementDescription(){
                                if (player.extremeMode) return "e1,605,000,000 Protein"
                                return "e2e9 Protein"
                        },
                        done(){
                                if (player.extremeMode) return player.a.protein.points.gte("e1605e6")
                                return player.a.protein.points.gte("e2e9")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) "Reward: Add .0003 to tRNA's base and Dilation effect from Customizable is raised ^.973."
                                return "Reward: Add .0003 to tRNA's base."
                        },
                }, // hasMilestone("d", 25)
                26: {
                        requirementDescription(){
                                if (player.extremeMode) return "e6,418,000,000 Protein"
                                return "e3e9 Protein"
                        },
                        done(){
                                if (player.extremeMode) return player.a.protein.points.gte("e6418e6")
                                return player.a.protein.points.gte("e3e9")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Add .0003 to tRNA's base."
                        },
                }, // hasMilestone("d", 26)
                27: {
                        requirementDescription(){
                                if (player.extremeMode) return "e1.53e10 Protein"
                                return "e4.8e9 Protein"
                        },
                        done(){
                                if (player.extremeMode) return player.a.protein.points.gte("e1.53e10")
                                return player.a.protein.points.gte("e4.8e9")
                        },
                        unlocked(){
                                return true
                        },
                        effect(){
                                return Decimal.pow(2, getBuyableAmount("mu", 31).pow(1.41))
                        },
                        effectDescription(){
                                return "Reward: Per N → Δµ<sup>1.41</sup> square point gain." + br + "Currently: " + format(tmp.d.milestones[27].effect)
                        },
                }, // hasMilestone("d", 27)
                28: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e328 DNA"
                                return "4e153 DNA"
                        },
                        done(){
                                if (player.extremeMode) return player.d.points.gte("1e328")
                                return player.d.points.gte("4e153")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: N → Δµ rounding is 20x more and gain 20x DNA Science gain."
                                return "Reward: N → Δµ rounding is 20x more."
                        },
                }, // hasMilestone("d", 28)
        },
        tabFormat: {
                "Upgrades": {
                        content: [
                                "main-display",
                                ["prestige-button", "", function (){ return hasUpgrade("or", 125) ? {'display': 'none'} : {}}],
                                ["display-text",
                                        function(){
                                                if (hasUpgrade("or", 125)) return "You are gaining " + format(tmp.d.getResetGain) + " DNA per second"
                                        }
                                ],
                                "blank", 
                                ["upgrades", [1,2,3,4,5,6,7]],
                                "blank",
                        ],
                        unlocked(){
                                return !hasMilestone("an", 28)
                        },
                },
                "Milestones": {
                        content: [
                                "main-display",
                                ["display-text", function(){
                                        return "You have done " + formatWhole(player.d.times) + " DNA resets"
                                }],
                                "milestones",
                        ],
                        unlocked(){
                                return true
                        },
                },
                "Info": {
                        content: [
                                "main-display",
                                ["display-text", function(){
                                        let div = player.extremeMode ? "8e315" : "4.4e144"
                                        let a1 = "Initial DNA gain: (sqrt(log10(Amino Acid/" + div + "))/2-1.50)<sup>2</sup>"
                                        if (player.extremeMode) a1 = a1.replace("1.50", "4.00")
                                        let char = tmp.d.getBaseGainAddition.gte(0) ? "+" : "-"
                                        let exp = "<sup>" + format(tmp.d.getGainExp) + "</sup>"
                                        let a2 = "Current DNA gain: (sqrt(log10(Amino Acid/" + div + "))/2" + char + format(tmp.d.getBaseGainAddition.abs())
                                        a2 += ")" + exp 
                                        if (hasUpgrade("or", 222)) a2 = "Current DNA gain: (2^[Tokens II])" + exp
                                        if (hasUpgrade("or", 21)) a2 = a2.replace("2", "4")
                                        if (hasUpgrade("an", 15)) a2 = a2.replace("4", "[Animal upgrades]")
                                        if (hasUpgrade("an", 33)) a2 = a2.replace("Animal upgrades", "Chromosomes")
                                        if ((layers.l.grid.getGemEffect(701) || hasUpgrade("or", 145)) && !player.extremeMode) a2 = a2.replace("/2", "")
                                        if (layers.l.grid.getGemEffect(408) || hasUpgrade("or", 145)) a2 = a2.replace("/" + div, "")
                                        if (hasMilestone("cells", 31)) {
                                                a2 = a2.replace("sqrt(", "")
                                                a2 = a2.replace(")+0.00", "")
                                        }

                                        let b = "DNA resets (in order) Amino Acid content, Life content,"
                                        let c = " the last two rows of Phosphorus and µ upgrades."

                                        let d = "For unlocking DNA permanently keep Nitrogen, Phosphorus,"
                                        d += "and µ content<br>on all prior resets except for the final two rows of Phosphorus and µ upgrades.<br>"

                                        return a1 + br + a2 + br2 + b + br + c + br2 + d
                                }],
                        ],
                        unlocked(){
                                return true
                        },
                },
        },
        onPrestige(){
                let timesAdd = 1
                if (player.easyMode) timesAdd *= 2
                if (hasUpgrade("cells", 11)) timesAdd *= 3
                player.d.times += timesAdd
                player.d.time = 0
        },
        doReset(layer){
                if (layer != "d") return

                /*
                1. Amino Acid content
                2. Life content
                3. Mu content
                4. Phoshphorus content
                */

                let data1 = player.a
                let data2 = player.l
                let data3 = player.mu
                let data4 = player.p

                // 1 Amino Acid content
                if (!false) {
                        let aKeptMilestones = 0
                        if (hasMilestone("d", 2)) aKeptMilestones += 3 * player.d.times
                        if (!false){
                                sortStrings(data1.milestones)
                                data1.milestones = data1.milestones.slice(0, aKeptMilestones)
                        }

                        data1.buyables[11] = decimalZero
                        data1.buyables[12] = decimalZero
                        data1.buyables[13] = decimalZero
                        data1.buyables[21] = decimalZero
                        data1.buyables[22] = decimalZero
                        data1.buyables[23] = decimalZero
                        data1.buyables[31] = decimalZero
                        data1.buyables[32] = decimalZero
                        data1.buyables[33] = decimalZero

                        let aKeptUpgrades = 0
                        if (hasMilestone("d", 7)) aKeptUpgrades += player.d.times * 2
                        if (!false) {
                                sortStrings(data1.upgrades)
                                data1.upgrades = data1.upgrades.slice(0, aKeptUpgrades)
                        }

                        if (!hasMilestone("d", 5)) data1.times = 0
                }

                data1.points = decimalZero
                data1.best = decimalZero
                data1.total = decimalZero
                data1.protein.best = decimalZero
                data1.protein.total = decimalZero
                data1.protein.points = decimalZero

                // 2 Life content
                if (!false) {
                        let lKeptMilestones = 0
                        if (hasMilestone("a", 1)) lKeptMilestones += 4 * player.a.times
                        if (!false) {
                                sortStrings(data2.milestones)
                                data2.milestones = data2.milestones.slice(0, lKeptMilestones)
                        }

                        let startingBuyableAmount = decimalZero
                        if (hasMilestone("cells", 1)) startingBuyableAmount = new Decimal(500)

                        data2.buyables[11] = startingBuyableAmount
                        data2.buyables[12] = startingBuyableAmount
                        data2.buyables[13] = startingBuyableAmount
                        data2.buyables[21] = startingBuyableAmount
                        data2.buyables[22] = startingBuyableAmount
                        data2.buyables[23] = startingBuyableAmount
                        data2.buyables[31] = startingBuyableAmount // buyables
                        data2.buyables[32] = startingBuyableAmount
                        data2.buyables[33] = startingBuyableAmount

                        //gems
                        if (!hasMilestone("d", 12)) {
                                let x = getResetGemIDs()
                                let keepGems = decimalZero
                                if (hasMilestone("a", 1)) keepGems = keepGems.plus(player.a.times)

                                let gData = player.l.grid

                                for (i in x) {
                                        id = x[i]
                                        let thisKeep = keepGems
                                        if (hasMilestone("a", 12) && id < 400 && (id % 100 < 4)) {
                                                thisKeep = thisKeep.max(1000)
                                        }
                                        gData[id].gems = gData[id].gems.min(thisKeep)
                                }
                        }

                        //challenges
                        if (!hasMilestone("a", 9) && !player.cells.unlocked) data2.challenges[11] = 0

                        //reset times
                        if (!hasMilestone("a", 9)) data2.times = 0

                        if (player.extremeMode) {
                                let lKeptUpgrades = 0
                                if (hasMilestone("a", 6)) lKeptUpgrades += player.a.times
                                if (!false) {
                                        sortStrings(data2.upgrades)
                                        data2.upgrades = data2.upgrades.slice(0, lKeptUpgrades)
                                }
                        }
                }

                data2.points = decimalZero
                data2.best = decimalZero
                data2.total = decimalZero

                // 3 Mu content
                if (!false) { 
                        // 2 rows of upgrades
                        data3.buyables[32] = decimalZero
                        data3.buyables[33] = decimalZero

                        let muUpgRem = [41, 42, 43, 44, 45, 
                                        51, 52, 53, 54, 55]
                        // upgrades
                        data3.upgrades = filterOut(data3.upgrades, muUpgRem)
                }

                data3.buyables[11] = decimalZero
                data3.buyables[12] = decimalZero
                data3.buyables[13] = decimalZero
                data3.buyables[21] = decimalZero
                data3.buyables[22] = decimalZero
                data3.buyables[23] = decimalZero
                data3.buyables[31] = decimalZero // buyables
                data3.buyables[32] = decimalZero
                data3.buyables[33] = decimalZero

                // 4 Phosphorus content
                if (!hasMilestone("d", 2)) {
                        // 2 rows of upgrades
                        let pUpgRem = [41, 42, 43, 44, 45, 
                                       51, 52, 53, 54, 55]
                        // upgrades
                        data4.upgrades = filterOut(data4.upgrades, pUpgRem)
                }

                player.p.best_over_amino = decimalZero

                layers.sci.doReset("d")

                resetPreLifeCurrencies()
        },
})

addLayer("cells", {
        name: "Cells", 
        symbol: "C", 
        position: 3, 
        startData(){ return {
                unlocked: false,
		points: decimalZero,
                best: decimalZero,
                total: decimalZero,
                abtime: 0,
                time: 0,
                times: 0,
                passiveTime: 0,
                milestone1Ever: false,
                milestone2Best: 0,
                timeInMinigame: 0,
                currentMinigame: undefined,
                total11: decimalZero,
                total12: decimalZero,
                total13: decimalZero,
                total14: decimalZero,
                mu: {
                        points: decimalZero,
                        best: decimalZero,
                },
                lambda: {
                        points: decimalZero,
                        best: decimalZero,
                        sacrificed: decimalZero, 
                },
                kappa: {
                        points: decimalZero,
                        best: decimalZero,
                        currentBarValue: decimalOne,
                        currentTime: 0,
                },
                iota: {
                        points: decimalZero,
                        best: decimalZero,
                },
                stem_cells: {
                        points: decimalZero,
                        best: decimalZero,
                },
                slowTime: 0,
        }},
        color: "#99E21D",
        branches: [],
        requires:() => new Decimal(player.extremeMode ? "1e1818" : "1e1172"),
        resource: "Cells", 
        baseResource: "DNA", 
        baseAmount(){return player.d.points},
        type: "custom",
        tooltip(){
                if (player.cells.stem_cells.points.eq(0) || tmp.mc.layerShown) return format(player.cells.points, 3) + " Cells"
                return formatWhole(player.cells.points) + " Cells and " + formatCurrency(player.cells.stem_cells.points) + " Stem Cells"
        },
        getResetGain(){
                let ret = tmp.cells.getBaseGain.times(tmp.cells.getGainMult)
                
                if (player.extremeMode) ret = ret.pow(.75)
                
                return ret.floor()
        },
        getBaseGain(){
                let pts = player.d.points
                let init = pts.div(player.extremeMode ? "1e1228" : "1e582").max(1)
                if (init.lt("1e590")) return decimalZero

                return init.pow(tmp.cells.getGainExp).sub(1).max(0)
        },
        getGainMult(){ // c gain cellsgain cgain cells gain cellgain cell gain cgain
                let ret = decimalOne

                if (hasUpgrade("cells", 111))   ret = ret.times(tmp.cells.upgrades[111].effect)
                if (hasUpgrade("cells", 211))   ret = ret.times(tmp.cells.upgrades[211].effect)
                if (hasUpgrade("cells", 311))   ret = ret.times(tmp.cells.upgrades[311].effect)
                if (hasUpgrade("cells", 411))   ret = ret.times(tmp.cells.upgrades[411].effect)
                if (hasMilestone("cells", 16) && !hasMilestone("ch", 13)) {
                                                ret = ret.times(tmp.cells.milestones[16].effect)
                }
                if (!hasUpgrade("an", 51))      ret = ret.times(tmp.cells.challenges[12].rewardEffect)
                if (hasMilestone("cells", 40))  ret = ret.times(player.cells.stem_cells.best.max(1).root(100))
                                                ret = ret.times(player.cells.stem_cells.points.plus(10).log10())
                                                ret = ret.times(tmp.t.effect)
                if (hasUpgrade("t", 62))        ret = ret.times(tmp.tokens.buyables[21].effect)
                if (!hasMilestone("ch", 15)) {
                        if (hasUpgrade("cells", 15))    ret = ret.times(tmp.cells.upgrades[15].effect)
                        if (hasUpgrade("cells", 54))    ret = ret.times(tmp.cells.upgrades[54].effect)
                        if (hasUpgrade("cells", 21))  {
                                let exp = player.extremeMode ? player.cells.upgrades.length + 3 : 0
                                                        ret = ret.times(Decimal.pow(player.cells.upgrades.length, exp))
                        }
                }
                if (hasMilestone("t", 17) && !hasMilestone("an", 30)) {
                                                ret = ret.times(player.tokens.tokens2.total.max(1).pow(player.t.milestones.length))
                }
                if (hasUpgrade("t", 135) && !hasMilestone("ch", 14)) {
                                                ret = ret.times(tmp.t.upgrades[135].effect)
                }
                if (hasUpgrade("sci", 511))     ret = ret.times(Decimal.pow(2, tmp.sci.upgrades[511].lvls))
                if (hasUpgrade("sci", 555))     ret = ret.times(tmp.sci.buyables[501].effect.max(1))
                if (hasUpgrade("sci", 561))     ret = ret.times(tmp.sci.buyables[502].effect.max(1))
                if (hasChallenge("l", 111))     ret = ret.times(tmp.l.challenges[22].reward.min(ret.sqrt()))
                                                ret = ret.times(tmp.or.effect)
                if (player.easyMode)            ret = ret.times(2)
                if (hasUpgrade("sci", 514))     ret = ret.times(player.cells.stem_cells.points.plus(10).log10())
                if (hasUpgrade("or", 102))      ret = ret.times(tmp.or.upgrades[102].cell_effect)
                if (hasUpgrade("sci", 551))     ret = ret.times(player.sci.dna_science.points.max(10).log10().pow(tmp.sci.upgrades[551].lvls))
                if (hasUpgrade("an", 41))       ret = ret.times(player.an.grid[406].extras.plus(1).pow(player.an.grid[507].buyables.pow(3)))
                                                ret = ret.times(tmp.or.challenges[21].reward)
                                                ret = ret.times(tmp.an.effect)

                return ret.max(1)
        },
        getGainExp(){
                let ret = new Decimal(1/1960)

                if (hasMilestone("cells", 14))  ret = ret.times(2)
                if (hasMilestone("cells", 20))  ret = ret.times(49/25)
                if (hasUpgrade("t", 52))        ret = ret.times(100/99)
                if (hasUpgrade("or", 211) && !player.or.filterLeftKidney) {
                                                ret = ret.times(99/98)
                }
                if (hasMilestone("or", 19) && player.or.filterLeftKidney) {
                                                ret = ret.times(99/98)
                }
                if (hasUpgrade("or", 341))      ret = ret.times(49/48)

                return ret
        },
        getNextAt(){
                let gain = tmp.cells.getResetGain.plus(1)

                if (player.extremeMode) gain = gain.root(.75)

                let reqInit = gain.div(tmp.cells.getGainMult).max(1)
                return reqInit.plus(1).root(tmp.cells.getGainExp).times(player.extremeMode ? "1e1228" : "1e582")
        },
        canReset(){
                return tmp.cells.getResetGain.gt(0) && !hasMilestone("cells", 14)
        },
        effectExp(){
                let exp = player.cells.best.cbrt().min(10)

                if (hasMilestone("cells", 11))  exp = exp.plus(player.cells.upgrades.length)
                if (hasUpgrade("or", 121))      exp = exp.plus(player.or.upgrades.length)
                if (hasUpgrade("t", 95)) {
                        let upgs = player.t.upgrades.length
                        let mile = player.t.milestones.length
                        let per = player.extremeMode ? .08 : .05
                                                exp = exp.plus(per * upgs * mile)
                }
                if (hasUpgrade("ch", 15))       exp = exp.plus(13.75)

                return exp
        },
        effect(){
                return player.cells.best.plus(9).pow(tmp.cells.effectExp)
        },
        effectDescription(){
                let start = " multiplying DNA, Life, and Protein gain and exponentiating Phosphorus gain by " 
                return start + format(tmp.cells.effect) + "."
        },
        update(diff){
                let data = player.cells
                
                if (data.points.gt(0)) data.unlocked = true
                data.best = data.best.max(data.points)

                if (data.milestone2Best != 0 || hasMilestone("cells", 2)) data.milestone2Best = Math.max(data.milestone2Best, data.times)
                if (hasMilestone("cells", 1)) data.milestone1Ever = true

                data.time += diff
                if (hasMilestone("cells", 14)) data.passiveTime += diff
                if (data.passiveTime > 1) {
                        data.passiveTime += -1
                        data.times ++
                }
                if (data.passiveTime > 10) data.passiveTime = 10

                if (data.currentMinigame != undefined) data.timeInMinigame += diff
                if (data.timeInMinigame > layers.cells.getMinigameMaximum()) {
                        layers.cells.exitMinigame()
                        tmp.cells.buyables[411].unlocked = false
                        tmp.cells.buyables[412].unlocked = false
                        tmp.cells.buyables[413].unlocked = false // to prevent autobuying
                        // do stuff for exiting
                        data.currentMinigame = undefined
                        if (["Iota", "Kappa", "Mu", "Lambda"].includes(player.subtabs.cells.mainTabs)) {
                                player.subtabs.cells.mainTabs = "Upgrades"
                        }
                }
                let run1 = data.currentMinigame == 11 || hasMilestone("cells", 21) || hasMilestone("or", 4)
                let run2 = data.currentMinigame == 12 || hasMilestone("cells", 32) || hasMilestone("or", 4)
                let run3 = data.currentMinigame == 13 || hasMilestone("cells", 37) || hasMilestone("or", 4)
                let run4 = data.currentMinigame == 14 || hasMilestone("cells", 38) || hasMilestone("or", 4)

                if (run1) layers.cells.mu.update(diff)
                if (run2) layers.cells.lambda.update(diff)
                if (run3) layers.cells.kappa.update(diff)
                if (run4) layers.cells.iota.update(diff)

                if (hasMilestone("cells", 9) || hasMilestone("cells", 14)) {
                        if (player.cells.points.lt(tmp.cells.getResetGain) || !hasMilestone("cells", 14)) {
                                let gain = tmp.cells.getResetGain.times(diff).div(10)
                                data.points = data.points.plus(gain)
                                data.total = data.total.plus(gain)
                                if (hasMilestone("cells", 14)) {
                                        player.cells.points = player.cells.points.min(tmp.cells.getResetGain)
                                }
                        }
                }

                if (hasUpgrade("cells", 13)) layers.cells.stem_cells.update(diff)
                if (layers.cells.buyables[11].base().lte(0)) player.cells.activeChallenge = undefined

                if (hasMilestone("an", 1) && !inChallenge("cells", 12)) {
                        if (player.cells.challenges[12] % 19 > 0) player.cells.challenges[12] ++
                } else if (hasUpgrade("or", 11) && !inChallenge("cells", 12)) {
                        if (player.cells.challenges[12] % 5 > 0) player.cells.challenges[12] ++
                }

                if (hasMilestone("or", 5) && !inChallenge("cells", 11)) {
                        if (player.cells.challenges[11] % 5 > 0) player.cells.challenges[11] ++ 
                }
        },
        mu: {// mu gain mgain mugain m gain
                getResetGain(){
                        let ret = decimalOne
                                                        ret = ret.times(tmp.cells.buyables[111].effect)
                                                        ret = ret.times(tmp.cells.buyables[112].effect)
                        if (hasUpgrade("cells", 111))   ret = ret.times(tmp.cells.upgrades[111].effect)
                        if (hasUpgrade("cells", 212))   ret = ret.times(tmp.cells.upgrades[212].effect)
                        if (hasUpgrade("cells", 412))   ret = ret.times(tmp.cells.upgrades[412].effect)
                        if (hasUpgrade("cells", 112)) {
                                let mult = player.cells.total12.pow(.1).max(1)
                                if (!hasMilestone("t", 5)) mult = mult.min(1e50)
                                                        ret = ret.times(mult)
                        }
                                                        ret = ret.times(player.cells.stem_cells.points.plus(10).log10())
                        if (hasMilestone("cells", 22) && !hasMilestone("ch", 13)) {
                                                        ret = ret.times(getBuyableAmount("cells", 11).plus(1))
                        }
                        if (hasUpgrade("t", 12))        ret = ret.times(100)
                                                        ret = ret.times(tmp.t.effect)
                                                        ret = ret.times(tmp.or.effect)
                        if (hasUpgrade("or", 11))       ret = ret.times(1e10)
                        if (player.easyMode)            ret = ret.times(4)
                        if (hasUpgrade("sci", 511))     ret = ret.times(Decimal.pow(2, tmp.sci.upgrades[511].lvls))
                                                        ret = ret.times(tmp.sci.buyables[513].minigame_effect)
                        if (hasUpgrade("sci", 521))     ret = ret.times(player.sci.dna_science.points.max(10).log10())
                                                        ret = ret.times(tmp.an.effect)

                        if (hasUpgrade("t", 11))        ret = ret.pow(1.01)
                        if (hasUpgrade("sci", 512))     ret = ret.pow(hasMilestone("cells", 11) ? 1.3 : 1.28)
                        if (player.extremeMode)         ret = ret.pow(.75)

                        return ret.max(0)
                },
                onExit(){
                        let data = player.cells
                        let data2 = data.mu
                        data2.points = decimalZero
                        data.buyables[111] = decimalZero
                },
                update(diff){
                        let data = player.cells
                        let gain = tmp.cells.mu.getResetGain.times(diff)
                        data.mu.points = data.mu.points.plus(gain)
                        data.total11 = data.total11.plus(gain)
                        data.mu.best = data.mu.best.max(data.mu.points)

                        let forceAbContent = hasMilestone("t", 1) || hasMilestone("or", 1)
                        if (hasMilestone("cells", 12) || forceAbContent) layers.cells.buyables[111].buy()
                        if (hasMilestone("cells", 48) || forceAbContent) layers.cells.buyables[112].buy()
                },
        },
        lambda: {// lambda gain lgain lambdagain l gain
                getResetGain(){
                        let ret = player.cells.lambda.sacrificed

                        if (hasUpgrade("cells", 211))   ret = ret.times(tmp.cells.upgrades[211].effect)
                        if (hasUpgrade("cells", 412))   ret = ret.times(tmp.cells.upgrades[412].effect)
                        if (hasUpgrade("cells", 112)) {
                                let mult = player.cells.total13.pow(.1).max(1)
                                if (!hasMilestone("t", 5)) mult = mult.min(1e50)
                                                        ret = ret.times(mult)
                        }
                                                        ret = ret.times(player.cells.stem_cells.points.plus(10).log10())
                        if (hasUpgrade("t", 13))        ret = ret.times(100)
                                                        ret = ret.times(tmp.t.effect)
                        if (hasMilestone("t", 5))       ret = ret.times(tmp.cells.buyables[412].effect)
                        if (hasUpgrade("t", 61))        ret = ret.times(player.cells.points)
                                                        ret = ret.times(tmp.or.effect)
                        if (hasUpgrade("or", 11))       ret = ret.times(1e10)
                        if (player.easyMode)            ret = ret.times(4)
                        if (hasUpgrade("sci", 511))     ret = ret.times(Decimal.pow(2, tmp.sci.upgrades[511].lvls))
                                                        ret = ret.times(tmp.sci.buyables[513].minigame_effect)
                        if (hasUpgrade("sci", 522))     ret = ret.times(player.sci.dna_science.points.max(10).log10())
                                                        ret = ret.times(tmp.an.effect)
                        
                        if (hasUpgrade("t", 11))        ret = ret.pow(1.01)
                        if (hasUpgrade("sci", 512))     ret = ret.pow(hasMilestone("cells", 11) ? 1.3 : 1.28)
                        if (player.extremeMode)         ret = ret.pow(.75)

                        return ret.max(0)
                },
                onExit(){
                        let data = player.cells
                        let data2 = data.lambda
                        data2.points = decimalZero
                        data.buyables[211] = decimalZero
                        data2.sacrificed = decimalZero
                },
                update(diff){
                        let data = player.cells
                        let gain = tmp.cells.lambda.getResetGain.times(diff)
                        data.lambda.points = data.lambda.points.plus(gain)
                        data.total12 = data.total12.plus(gain)
                        data.lambda.best = data.lambda.best.max(data.lambda.points)
                        let forceAbContent = hasMilestone("t", 1) || hasMilestone("or", 1)
                        if (hasUpgrade("cells", 12) || forceAbContent) {
                                let add = data.points.div(100).times(diff)
                                data.lambda.sacrificed = data.lambda.sacrificed.plus(add)
                        }
                },
        },
        kappa: {
                getResetGain(){// kappa gain kgain kappagain k gain
                        let ret = player.cells.kappa.currentBarValue.max(1).log10().times(50)

                        if (hasUpgrade("cells", 311))   ret = ret.times(tmp.cells.upgrades[311].effect)
                        if (hasUpgrade("cells", 212))   ret = ret.times(tmp.cells.upgrades[212].effect)
                        if (hasUpgrade("cells", 412))   ret = ret.times(tmp.cells.upgrades[412].effect)
                        if (hasUpgrade("cells", 312))   ret = ret.times(tmp.cells.upgrades[312].effect)
                        if (hasUpgrade("cells", 313))   ret = ret.times(tmp.cells.upgrades[313].effect)
                        if (hasUpgrade("cells", 112)) {
                                let mult = player.cells.total14.pow(.1).max(1)
                                if (!hasMilestone("t", 5)) mult = mult.min(1e50)
                                                        ret = ret.times(mult)
                        }
                                                        ret = ret.times(player.cells.stem_cells.points.plus(10).log10())
                        if (hasUpgrade("cells", 314))   ret = ret.times(tmp.cells.upgrades[314].effect.pow(player.cells.upgrades.length))
                        if (hasUpgrade("t", 14))        ret = ret.times(100)
                                                        ret = ret.times(tmp.t.effect)
                        if (hasUpgrade("t", 61))        ret = ret.times(player.cells.points)
                                                        ret = ret.times(tmp.or.effect)
                        if (hasUpgrade("or", 11))       ret = ret.times(1e10)
                        if (player.easyMode)            ret = ret.times(4)
                        if (hasUpgrade("sci", 511))     ret = ret.times(Decimal.pow(2, tmp.sci.upgrades[511].lvls))
                                                        ret = ret.times(tmp.sci.buyables[513].minigame_effect)
                        if (hasUpgrade("sci", 515))     ret = ret.times(player.sci.dna_science.points.max(10).log10())
                        if (hasUpgrade("sci", 523))     ret = ret.times(player.sci.dna_science.points.max(10).log10())
                                                        ret = ret.times(tmp.an.effect)

                        if (hasUpgrade("t", 11))        ret = ret.pow(1.01)
                        if (hasUpgrade("sci", 512))     ret = ret.pow(hasMilestone("cells", 11) ? 1.3 : 1.28)
                        if (player.extremeMode)         ret = ret.pow(.75)

                        return ret.max(0)
                },
                onExit(){
                        let data = player.cells
                        let data2 = data.kappa
                        data2.points = decimalZero
                        data.buyables[311] = decimalZero
                        data2.currentBarValue = decimalOne
                },
                update(diff){
                        let data = player.cells
                        let data2 = data.kappa
                        let gain = tmp.cells.kappa.getResetGain.times(diff)
                        data2.points = data2.points.plus(gain)
                        data.total13 = data.total13.plus(gain)
                        data2.best = data2.best.max(data2.points)

                        let barUpdateFactor = 1
                        if (hasUpgrade("cells", 312)) barUpdateFactor *= 2
                        if (hasUpgrade("cells", 313)) barUpdateFactor *= 2
                        data2.currentTime += diff * barUpdateFactor

                        if (data2.currentTime > 2) data2.currentTime = 2
                        if (data2.currentTime > 1) {
                                data2.currentTime += -1
                                let rand = Math.random() - .4
                                if (hasUpgrade("cells", 12)) rand += .1
                                if (hasUpgrade("cells", 13)) rand += .1

                                let gain = Decimal.pow(1.5, rand)
                                data2.currentBarValue = data2.currentBarValue.times(gain)
                        } 
                },
        },
        iota: {
                getResetGain(){ // iota gain igain iotagain i gain
                        let ret = decimalOne
                        if (hasUpgrade("cells", 411))   ret = ret.times(tmp.cells.upgrades[411].effect)
                        if (hasUpgrade("cells", 212))   ret = ret.times(tmp.cells.upgrades[212].effect)
                                                        ret = ret.times(tmp.cells.buyables[411].effect)
                                                        ret = ret.times(tmp.cells.buyables[412].effect)
                                                        ret = ret.times(tmp.cells.buyables[413].effect)
                                                        ret = ret.times(player.cells.stem_cells.points.plus(10).log10())
                        if (hasUpgrade("t", 15))        ret = ret.times(100)
                                                        ret = ret.times(tmp.t.effect)
                        if (hasMilestone("t", 5))       ret = ret.times(player.cells.total11.max(1).pow(.1))
                                                        ret = ret.times(tmp.or.effect)
                        if (hasUpgrade("or", 11))       ret = ret.times(1e10)
                        if (player.easyMode)            ret = ret.times(4)
                        if (hasUpgrade("sci", 511))     ret = ret.times(Decimal.pow(2, tmp.sci.upgrades[511].lvls))
                                                        ret = ret.times(tmp.sci.buyables[513].minigame_effect)
                                                        ret = ret.times(tmp.an.effect)

                        if (hasUpgrade("t", 11))        ret = ret.pow(1.01)
                        if (hasUpgrade("sci", 512))     ret = ret.pow(hasMilestone("cells", 11) ? 1.3 : 1.28)
                        if (player.extremeMode)         ret = ret.pow(.75)
                                                        
                        return ret.max(0)
                },
                onExit(){
                        let data = player.cells
                        let data2 = data.iota
                        data2.points = decimalZero
                        if (!hasUpgrade("cells", 414)) data.buyables[411] = decimalZero
                        data.buyables[412] = decimalZero
                        data.buyables[413] = decimalZero
                },
                update(diff){
                        let data = player.cells
                        let gain = tmp.cells.iota.getResetGain.times(diff)
                        data.iota.points = data.iota.points.plus(gain)
                        data.total14 = data.total14.plus(gain)
                        data.iota.best = data.iota.best.max(data.iota.points)
                        let forceAbContent = hasMilestone("t", 1) || hasMilestone("or", 1)
                        if (hasUpgrade("cells", 413) || forceAbContent) {
                                layers.cells.buyables[411].buy()
                                layers.cells.buyables[412].buy()
                                layers.cells.buyables[413].buy()
                        }
                },
        },
        stem_cells: {
                getResetGain(){ //stem gain stemgain stemcellgain stem cellgain stem cell gain
                        if (!hasUpgrade("cells", 13)) return decimalZero
                        let ret = decimalOne
                        
                                                        ret = ret.times(tmp.cells.buyables[11].effect)
                                                        ret = ret.times(tmp.cells.buyables[12].effect)
                                                        ret = ret.times(tmp.cells.buyables[13].effect)
                                                        ret = ret.times(tmp.cells.buyables[21].effect)
                                                        ret = ret.times(tmp.cells.buyables[22].effect)
                                                        //ret = ret.times(tmp.cells.buyables[23].effect)
                        if (player.hardMode)            ret = ret.div(4)
                        if (player.easyMode)            ret = ret.times(4)
                        if (!hasUpgrade("an", 45)) {
                                if (hasUpgrade("cells", 114))   ret = ret.times(getBuyableAmount("cells", 112))
                                if (hasUpgrade("cells", 214))   ret = ret.times(tmp.cells.upgrades[214].effect)
                                if (hasUpgrade("cells", 414))   ret = ret.times(getBuyableAmount("cells", 411).max(10).log10().pow(1 + player.extremeMode))
                                if (hasUpgrade("cells", 314))   ret = ret.times(tmp.cells.upgrades[314].effect)
                        }
                        if (hasChallenge("cells", 11))  ret = ret.times(tmp.cells.challenges[11].rewardEffect)
                        if (!hasMilestone("ch", 13)) {
                                if (hasMilestone("cells", 12)) {
                                        let exp = player.extremeMode ? 2.5 : 1
                                                                ret = ret.times(player.cells.milestones.length ** exp)
                                }
                                if (hasMilestone("cells", 16))  ret = ret.times(tmp.cells.milestones[16].effect)
                                if (hasMilestone("cells", 17))  {
                                        let exp = player.cells.activeChallenge ? 2 : 1
                                        if (!player.extremeMode) exp = .5
                                                                ret = ret.times(Math.max(1, player.cells.upgrades.length) ** exp)
                                }
                                if (hasMilestone("cells", 22))  ret = ret.times(getBuyableAmount("cells", 11).plus(1))
                                if (hasMilestone("cells", 23))  ret = ret.times(player.cells.mu.best.max(10).log10())
                                if (hasMilestone("cells", 24))  ret = ret.times(tmp.tokens.buyables[21].effect)
                                if (hasMilestone("cells", 26))  ret = ret.times(player.tokens.total.max(1))
                                if (hasMilestone("cells", 32))  ret = ret.times(player.cells.lambda.points.max(10).log10())
                                if (hasMilestone("cells", 38))  ret = ret.times(player.d.points.max(10).log10())
                                if (hasMilestone("cells", 39))  ret = ret.times(player.mu.points.max(10).log10())
                                if (hasMilestone("cells", 40))  ret = ret.times(player.cells.best.max(1).root(player.extremeMode ? 100 : 50))
                                if (hasMilestone("cells", 41))  ret = ret.times(player.tokens.buyables[11].max(1))
                                if (hasMilestone("cells", 53))  ret = ret.times(tmp.cells.milestones[53].effect)
                                if (hasMilestone("cells", 59) && !player.extremeMode) {
                                                                ret = ret.times(layerChallengeCompletions("cells") ** 2)
                                }
                        }
                        if (hasChallenge("l", 111) && player.cells.challenges[12] >= 15 && !player.extremeMode) {
                                                        ret = ret.times(tmp.l.challenges[31].reward.max(1))
                        }
                        if (!hasMilestone("ch", 14)) {
                                if (hasUpgrade("t", 31))        ret = ret.times(3)
                                if (hasUpgrade("t", 32) && player.cells.activeChallenge != undefined) {
                                                                ret = ret.times(10)
                                }        
                                if (hasUpgrade("t", 34))        ret = ret.times(tmp.t.upgrades[34].effect)
                                if (hasUpgrade("t", 92))        ret = ret.times(player.tokens.total.max(1).pow(Math.PI))
                                if (hasUpgrade("t", 111))       ret = ret.times(5)
                                if (hasUpgrade("t", 113))       ret = ret.times(player.tokens.tokens2.total.div(69).plus(1).pow(player.tokens.total))
                                if (hasUpgrade("t", 135))       ret = ret.times(tmp.t.upgrades[135].effect)
                                if (hasUpgrade("t", 144))       ret = ret.times(Decimal.pow(2, player.t.upgrades.length))
                        }
                                                        ret = ret.times(tmp.t.effect)
                        if (!hasMilestone("an", 30)) {
                                if (hasMilestone("t", 10)) {
                                        let base = getBuyableAmount("cells", 13).max(1)
                                        let exp  = player.t.upgrades.length ** .5
                                                                ret = ret.times(base.pow(exp))
                                }
                                if (hasMilestone("t", 11)) {
                                        let base = getBuyableAmount("cells", 13).max(1)
                                        let exp  = player.t.milestones.length
                                                                ret = ret.times(base.pow(exp))
                                }
                                if (hasMilestone("t", 17))      ret = ret.times(player.tokens.tokens2.total.max(1).pow(player.t.milestones.length))
                                if (hasMilestone("t", 18))      ret = ret.times(player.tokens.total.pow10().root(player.extremeMode ? 29.918840221005354 : 47.19363281906435)) // log1.05(10)
                        }
                        if (!hasMilestone("ch", 15)) {
                                if (hasUpgrade("cells", 15))    ret = ret.times(tmp.cells.upgrades[15].effect)
                                if (hasUpgrade("cells", 21))  {
                                        let exp = player.extremeMode ? player.cells.upgrades.length + 3 : 2
                                                                ret = ret.times(Decimal.pow(player.cells.upgrades.length, exp))
                                }
                                if (hasUpgrade("cells", 23) && !player.extremeMode) {
                                                                ret = ret.times(player.cells.upgrades.length)
                                }
                                if (hasUpgrade("cells", 24)) {
                                        if (player.extremeMode) ret = ret.times(player.cells.points.max(1).pow(.01))
                                        else                    ret = ret.times(player.cells.upgrades.length)
                                }
                                if (hasUpgrade("cells", 52))    ret = ret.times(player.cells.points.max(10).log10().pow(player.tokens.tokens2.total))
                                if (hasUpgrade("cells", 54))    ret = ret.times(tmp.cells.upgrades[54].effect)
                        }
                        if (!hasUpgrade("an", 34))      ret = ret.times(tmp.tokens.buyables[102].effect)
                                                        ret = ret.times(tmp.or.effect)
                        if (hasUpgrade("sci", 532))     ret = ret.times(tmp.sci.upgrades[532].effect)
                                                        ret = ret.times(tmp.sci.buyables[522].stem_cell_effect)
                        if (!inChallenge("cells", 12) || player.cells.challenges[12] < 10) {
                                                        ret = ret.times(tmp.sci.buyables[523].stem_cell_effect)
                        }
                        if (hasUpgrade("sci", 524))     ret = ret.times(tmp.sci.buyables[501].effect.max(1))
                        if (hasUpgrade("sci", 525))     ret = ret.times(tmp.sci.buyables[502].effect.max(1))
                        if (hasMilestone("cells", 32) && !hasMilestone("ch", 13)) {
                                                        ret = ret.times(tmp.sci.buyables[503].effect.max(1))
                        }
                        if (hasUpgrade("sci", 531))     ret = ret.times(tmp.sci.buyables[511].effect.max(1))
                        if (hasUpgrade("sci", 532))     ret = ret.times(tmp.sci.buyables[512].effect.max(1))
                        if (hasMilestone("cells", 34))  ret = ret.times(tmp.sci.buyables[513].effect.max(1))
                        if (hasUpgrade("sci", 533))     ret = ret.times(tmp.sci.buyables[521].effect.max(1))
                        if (hasUpgrade("sci", 534))     ret = ret.times(tmp.sci.buyables[522].effect.max(1))
                        if (hasUpgrade("sci", 535))     ret = ret.times(tmp.sci.buyables[523].effect.max(1))
                        if (hasUpgrade("sci", 535))     ret = ret.times(Decimal.pow(1.01, tmp.sci.buyables.dnaBuyablesTotal))
                        if (hasUpgrade("sci", 542))     ret = ret.times(tmp.sci.upgrades[542].effect)
                        if (hasUpgrade("sci", 543))     ret = ret.times(tmp.sci.upgrades.dnaUpgradesLength)
                        if (hasUpgrade("or", 102))      ret = ret.times(tmp.or.upgrades[102].stem_cell_effect)
                        if (hasUpgrade("sci", 552))     ret = ret.times(Decimal.pow(2, tmp.sci.upgrades[552].lvls))
                        if (hasUpgrade("t", 72) && player.extremeMode) {
                                                        ret = ret.times(player.cells.points.max(10).log10())
                        }
                        if (hasUpgrade("sci", 553))     ret = ret.times(player.tokens.total.max(1))
                        if (hasUpgrade("sci", 561))     ret = ret.times(Decimal.pow(2, tmp.sci.upgrades.dnaUpgradesLength))
                        if (hasUpgrade("sci", 562))     ret = ret.times(tmp.sci.buyables[521].effect.max(1).pow(tmp.sci.upgrades[551].lvls))
                        if (hasUpgrade("sci", 563))     ret = ret.times(tmp.sci.buyables[512].effect.max(1).pow(tmp.sci.upgrades[551].lvls))
                        if (hasUpgrade("sci", 564))     ret = ret.times(tmp.sci.buyables[522].effect.max(1).pow(tmp.sci.upgrades[551].lvls))
                        if (hasUpgrade("t", 91))        ret = ret.times(tmp.t.upgrades[91].effect)
                                                        ret = ret.times(tmp.or.challenges[12].reward)
                        if (hasUpgrade("or", 332))      ret = ret.times(player.or.contaminants.points.max(1).pow(.01 * player.or.upgrades.length))
                                                        ret = ret.times(tmp.an.effect)

                        if (inChallenge("cells", 12))   ret = ret.pow(tmp.cells.challenges[12].challengeEffect)

                        // AFTER SECONDARY BUFFS
                        if (!hasMilestone("ch", 14)) {
                                if (hasUpgrade("t", 63))        ret = ret.times(tmp.t.effect)
                                if (hasUpgrade("t", 124))       ret = ret.times(Math.max(1, player.cells.challenges[11]) ** 2.5)
                        }
                        if (hasMilestone("t", 20) && !hasMilestone("an", 30)) {
                                                        ret = ret.times(Decimal.pow(1.5, player.tokens.tokens2.total))
                        }

                        if (hasUpgrade("t", 35))        ret = ret.pow(1.001)
                        if (hasUpgrade("sci", 513))     ret = ret.pow(tmp.sci.upgrades[513].effect)
                        if (hasUpgrade("sci", 525))     ret = ret.pow(1.01)
                        if (player.extremeMode)         ret = ret.pow(.75)
                        if (hasUpgrade("or", 205) && player.or.filterLeftKidney) {
                                                        ret = ret.pow(1.001)
                        }
                        if (hasUpgrade("or", 214) && !player.or.filterLeftKidney) {
                                                        ret = ret.pow(1.001)
                        }

                        return ret
                },
                update(diff){
                        let data = player.cells
                        let data2 = data.stem_cells

                        let gain = tmp.cells.stem_cells.getResetGain

                        let thisGain = gain.times(diff)

                        data2.points = data2.points.plus(thisGain)
                        data2.best = data2.best.max(data2.points)

                        if (hasMilestone("cells", 15) && data.time > 1 && !player.cells.activeChallenge) {
                                if (data2.best.div(data2.points).gt(1e4)) data2.points = data2.best.div(1e4)
                        }

                        let forceAbContent = hasMilestone("or", 1)

                        if (hasMilestone("cells", 29) || hasMilestone("t", 1) || forceAbContent) {
                                layers.cells.buyables[11].buy()
                        }
                        if (hasMilestone("t", 2) || forceAbContent) layers.cells.buyables[12].buy()
                },
        },
        exitMinigame(){
                let data = player.cells
                if (data.currentMinigame == 11) {
                        layers.cells.mu.onExit()
                }
                if (data.currentMinigame == 12) {
                        layers.cells.lambda.onExit()
                }
                if (data.currentMinigame == 13) {
                        layers.cells.kappa.onExit()
                }
                if (data.currentMinigame == 14) {
                        layers.cells.iota.onExit()
                }
                data.timeInMinigame = 0
        },
        bars: {
                kappa: {
                        direction: RIGHT,
                        width: 600,
                        height: 50,
                        progress(){
                                let amt = player.cells.kappa.currentBarValue
                                return amt.root(5).div(amt.root(5).plus(1))
                        },
                        display(){
                                let a = "The bar value is currently " 
                                let b = format(player.cells.kappa.currentBarValue) 
                                if (player.cells.kappa.best.lt(1e100)) return a + b
                                return b
                        },
                        unlocked(){
                                return true
                        },
                        fillStyle(){
                                return {
                                        "background": "#66CCFF"
                                }
                        },
                        textStyle(){
                                return {
                                        "color": "#990033"
                                }
                        },
                }
        },
        getMinigameMaximum(){
                if (player.cells.currentMinigame == undefined) return Infinity
                return layers.cells.clickables[player.cells.currentMinigame].maxTimes()
        },
        row: 1, 
        prestigeButtonText(){
                let b = ""
                if (tmp.cells.getResetGain.lt(1e3)) b = "<br>Next: " + format(tmp.cells.getNextAt) + " DNA."

                return "Reset for <b>" + formatWhole(tmp.cells.getResetGain) + "</b> Cells" + b
        },
        layerShown(){
                if (tmp.cells.deactivated) return false
                return hasUpgrade("d", 35) || player.cells.unlocked
        },
        upgrades: {
                rows: 10,
                cols: 5,
                11: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells I"
                        },
                        description(){
                                let a = "<bdi style='font-size: 80%'>Gain 3x DNA resets, bulk 50x Life buyables, keep all prior autobuyer content, and per Cell reset (max 10) dilate point gain ^1.02</bdi>"
                                return a + br + "Currently: " + format(tmp.cells.upgrades[11].effect)
                        },
                        effect(){
                                let max = 10
                                let exp = Math.min(max, player.cells.times)
                                return Decimal.pow(1.02, exp)
                        },
                        cost:() => decimalOne,
                        unlocked(){
                                return true
                        }, // hasUpgrade("cells", 11)
                },
                12: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells II"
                        },
                        description(){
                                return "<bdi style='font-size: 90%'>Add .3 to all Iota bases, add .1 to Kappa bar exponent, and per second 1% of your cells are sacrificed without cost</bdi>"
                        },
                        cost:() => new Decimal(5e8),
                        unlocked(){
                                return hasUpgrade("cells", 112) || player.t.unlocked
                        }, // hasUpgrade("cells", 12)
                },
                13: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells III"
                        },
                        description(){
                                if (player.extremeMode) return "Unlock stem cells, add .1 to Kappa bar exponent, and add .1 to DNA helicase base"
                                return "Unlock stem cells and add .1 to Kappa bar exponent<br>Requires: 6e11 Cells on reset"
                        },
                        canAfford(){
                                return tmp.cells.getResetGain.gte(6e11) || player.extremeMode
                        },
                        cost:() => new Decimal(player.extremeMode ? 1e11 : 5.43e12),
                        unlocked(){
                                return hasUpgrade("cells", 12) || player.t.unlocked
                        }, // hasUpgrade("cells", 13)
                },
                14: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells IV"
                        },
                        description(){
                                if (player.extremeMode) return "<bdi style='font-size: 80%'>Each totipotent adds 1 to DNA effect exponent and N → ΔP's base cost is " + formatSmall(Decimal.pow(.1, 2e9)) + " but remove N → ΔN</bdi>"
                                return "<bdi style='font-size: 80%'>Each totipotent adds 1 to DNA effect exponent and N → ΔP's base cost is " + formatSmall(Decimal.pow(.1, 1e9)) + " but remove N → ΔN</bdi>"
                        },
                        canAfford(){
                                return tmp.cells.getResetGain.gte(6e11)
                        },
                        onPurchase(){
                                player.mu.buyables[33] = decimalZero
                        },
                        cost:() => new Decimal(player.extremeMode ? 3e110 : 1e99),
                        currencyLocation:() => player.cells.stem_cells,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Stem Cells",
                        unlocked(){
                                return hasUpgrade("cells", 13) || player.t.unlocked
                        }, // hasUpgrade("cells", 14)
                },
                15: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells V"
                        },
                        description(){
                                let a = "<bdi style='font-size: 80%'>Per upgrade multiply Stem Cell and Cell gain by log8(Secondary completions)"
                                if (player.extremeMode) {
                                        a = a.replace("log8", "")
                                        a += "<sup>.9</sup>"
                                }
                                return a + br + "Currently: " + format(tmp.cells.upgrades[15].effect) + "</bdi>"
                        },
                        effect(){
                                let base = new Decimal(player.cells.challenges[12]).max(8).log(8)
                                if (player.extremeMode) base = new Decimal(player.cells.challenges[12]).max(1).pow(.9)
                                let exp = player.cells.upgrades.length
                                return base.pow(exp)
                        },
                        cost:() => new Decimal(player.extremeMode ? "2.9e3571" : "1e5293"),
                        unlocked(){
                                return hasUpgrade("t", 105) || player.or.unlocked
                        }, // hasUpgrade("cells", 15)
                },
                21: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells VI"
                        },
                        description(){
                                if (player.extremeMode) return "Omnipotent cost base is 9.8 and upgrades<sup>upgrades + 3</sup> multiply Stem Cell and Cell gain"
                                return "Omnipotent cost base is 9.8 and upgrades squared multiply Stem Cell gain"
                        },
                        cost:() => new Decimal(player.extremeMode ? "2.1e3367" : "5e5363"),
                        unlocked(){
                                return hasUpgrade("cells", 15) || player.or.unlocked
                        }, // hasUpgrade("cells", 21)
                },
                22: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells VII"
                        },
                        description(){
                                if (player.extremeMode) return "Omnipotent cost base is 9.7 and DNA Sci XXVII count every upgrade in its tab but nullify Quadratic"
                                return "Omnipotent cost base is 9.7 but nullify Quadratic"
                        },
                        cost:() => new Decimal(player.extremeMode ? "1.65e3924" : "4e5696"),
                        unlocked(){
                                return hasUpgrade("cells", 21) || player.or.unlocked
                        }, // hasUpgrade("cells", 22)
                },
                23: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells VIII"
                        },
                        description(){
                                if (player.extremeMode) return "Omnipotent cost base is 9.6 and Pluripotent cost base is 1e19"
                                return "Omnipotent cost base is 9.6 and upgrades multiply Stem Cell gain"
                        },
                        cost:() => new Decimal(player.extremeMode ? "1e4237" : "1e6066"),
                        unlocked(){
                                return hasUpgrade("cells", 22) || player.or.unlocked
                        }, // hasUpgrade("cells", 23)
                },
                24: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells IX"
                        },
                        description(){
                                if (player.extremeMode) return "<bdi style='font-size: 80%'>Omnipotent cost base is 9.5, Cells<sup>.01</sup> multiplies Stem Cell gain, and Cells resets nothing but nullify Linear</bdi>"
                                return "Omnipotent cost base is 9.5, upgrades multiply Stem Cell gain, and Cells resets nothing but nullify Linear"
                        },
                        cost:() => new Decimal(player.extremeMode ? "1e4657" : "1e6479"),
                        unlocked(){
                                return hasUpgrade("cells", 23) || player.or.unlocked
                        }, // hasUpgrade("cells", 24)
                },
                25: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells X"
                        },
                        description(){
                                if (player.extremeMode) return "Omnipotent cost base is 9.4, crRNA's base is sqrt(Cells) but nullify Logarithmic"
                                return "Omnipotent cost base is 9.42 and crRNA's base is sqrt(Cells) but nullify Logarithmic"
                        },
                        cost:() => new Decimal(player.extremeMode ? "3e4973" : "3e6941"),
                        unlocked(){
                                return hasUpgrade("cells", 24) || player.or.unlocked
                        }, // hasUpgrade("cells", 25)
                },
                31: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells XI"
                        },
                        description(){
                                if (player.extremeMode) return "Omnipotent cost base is 9.2 and β → ∂β's base is Kappa but nullify Constant and Secondary is 1e7x harder"
                                return "Omnipotent cost base is 9.34 and β → ∂β's base is Kappa but nullify Constant"
                        },
                        cost:() => new Decimal(player.extremeMode ? "1.7e5313" : "3e7377"),
                        unlocked(){
                                return hasUpgrade("cells", 25) || player.or.unlocked
                        }, // hasUpgrade("cells", 31)
                },
                32: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells XII"
                        },
                        description(){
                                if (player.extremeMode) return "Omnipotent cost base is 9.05"
                                return "Omnipotent cost base is 9.25"
                        },
                        cost:() => new Decimal(player.extremeMode ? "1e6044" : "5e7850"),
                        unlocked(){
                                return hasUpgrade("cells", 31) || player.or.unlocked
                        }, // hasUpgrade("cells", 32)
                },
                33: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells XIII"
                        },
                        description(){
                                if (player.extremeMode) return "Omnipotent cost base is 8.85"
                                return "Omnipotent cost base is 9.19"
                        },
                        cost:() => new Decimal(player.extremeMode ? "5e6738" : "3e8431"),
                        unlocked(){
                                return hasUpgrade("cells", 32) || player.or.unlocked
                        }, // hasUpgrade("cells", 33)
                },
                34: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells XIV"
                        },
                        description(){
                                if (player.extremeMode) return "Omnipotent cost base is 8.69"
                                return "Omnipotent cost base is 9.12"
                        },
                        cost:() => new Decimal(player.extremeMode ? "3e7861" : "3e8884"),
                        unlocked(){
                                return hasUpgrade("cells", 33) || player.or.unlocked
                        }, // hasUpgrade("cells", 34)
                },
                35: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells XV"
                        },
                        description(){
                                if (player.extremeMode) return "Omnipotent cost base is 8.55"
                                return "Omnipotent cost base is 9.1"
                        },
                        cost:() => new Decimal(player.extremeMode ? "6e9022" : "6e9512"),
                        unlocked(){
                                return hasUpgrade("cells", 34) || player.or.unlocked
                        }, // hasUpgrade("cells", 35)
                },
                41: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells XVI"
                        },
                        description(){
                                if (player.extremeMode) return "Omnipotent cost base is 8.5 and Secondary is 1e26x easier"
                                return "Omnipotent cost base is 9.04"
                        },
                        cost:() => new Decimal(player.extremeMode ? "5e10289" : "2e9746"),
                        unlocked(){
                                return hasUpgrade("cells", 35) || player.or.unlocked
                        }, // hasUpgrade("cells", 41)
                },
                42: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells XVII"
                        },
                        description(){
                                if (player.extremeMode) return "Unlock Tokens II and per Token II gain 1e1000x DNA Science but remove most token content"
                                return "Omnipotent cost base is 9 and unlock Tokens II but remove most token content"
                        },
                        onPurchase(){
                                player.tokens.buyables[11] = decimalZero
                                player.tokens.points = player.tokens.total
                                player.subtabs.tokens.mainTabs = "II"
                                if (player.or.unlocked) return
                                player.tab = "tokens"
                        },
                        cost:() => new Decimal(player.extremeMode ? "1e10888" : "9e10301"),
                        unlocked(){
                                return hasUpgrade("cells", 41) || player.or.unlocked
                        }, // hasUpgrade("cells", 42)
                },
                43: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells XVIII"
                        },
                        description(){
                                if (player.extremeMode) return "Per Token II dilate point gain ^13 and Secondary is 1e40x easier"
                                return "Per Token II dilate point gain ^13"
                        },
                        cost:() => new Decimal(player.extremeMode ? "5e12521" : "2e12664"),
                        unlocked(){
                                return player.tokens.total.gt(500) && hasUpgrade("cells", 42) || player.or.unlocked
                        }, // hasUpgrade("cells", 43)
                },
                44: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells XIX"
                        },
                        description(){
                                return "Tissues effect base is Tissues but Token II multiplies Tissue gain"
                        },
                        cost:() => new Decimal(player.extremeMode ? "1e114545" : "1e12973"),
                        unlocked(){
                                return hasUpgrade("cells", 43) || player.or.unlocked
                        }, // hasUpgrade("cells", 44)
                },
                45: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells XX"
                        },
                        description(){
                                return "Unlock two new Token II buyables and per upgrade you have one less token for prestige purposes"
                        },
                        cost:() => new Decimal("3e13236"),
                        unlocked(){
                                return hasUpgrade("cells", 44) || player.or.unlocked
                        }, // hasUpgrade("cells", 45)
                },
                51: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells XXI"
                        },
                        description(){
                                return "Per upgrade per Tissue upgrade Primary is 1.91x easier and Secondary is 100x easier"
                        },
                        cost:() => new Decimal("1e13440"),
                        unlocked(){
                                return hasUpgrade("cells", 45) || player.or.unlocked
                        }, // hasUpgrade("cells", 51)
                },
                52: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells XXII"
                        },
                        description(){
                                return "Token II via Cell's scaling is twice as easy and per Token II log10(Cells) multiply Stem Cell gain"
                        },
                        cost:() => new Decimal("1e13639"),
                        unlocked(){
                                return hasUpgrade("cells", 51) || player.or.unlocked
                        }, // hasUpgrade("cells", 52)
                },
                53: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells XXIII"
                        },
                        description(){
                                return "Per upgrade add .008 to Tissue effect exponent"
                        },
                        cost:() => new Decimal("5e14023"),
                        unlocked(){
                                return hasUpgrade("cells", 52) || player.or.unlocked
                        }, // hasUpgrade("cells", 53)
                },
                54: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells XXIV"
                        },
                        description(){
                                return "log10(Lives)* log10(Amino Acid) multiplies Stem Cell and Cell gain"
                        },
                        effect(){
                                return player.l.points.max(10).log10().times(player.a.points.max(10).log10())
                        },
                        cost:() => new Decimal("1e14272"),
                        unlocked(){
                                return hasUpgrade("cells", 53) || player.or.unlocked
                        }, // hasUpgrade("cells", 54)
                },
                55: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells XXV"
                        },
                        description(){
                                return "Remove Cell milestone 53's -44 and unlock End"
                        },
                        cost:() => new Decimal("1e14491"),
                        unlocked(){
                                return hasUpgrade("cells", 54) || player.or.unlocked
                        }, // hasUpgrade("cells", 55)
                },
                61: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells XXVI"
                        },
                        description(){
                                return "Raise the 3 in Down Quark's base to Token II - 20 and per upgrade dilate Point gain ^1.1"
                        },
                        cost:() => new Decimal("1e22305"),
                        unlocked(){
                                return player.cells.challenges[11] >= 24 || player.or.unlocked
                        }, // hasUpgrade("cells", 61)
                },
                62: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells XXVII"
                        },
                        description(){
                                return "Unlock Tertiary"
                        },
                        cost:() => new Decimal("1e36963"),
                        unlocked(){
                                return hasUpgrade("t", 145) || player.or.unlocked
                        }, // hasUpgrade("cells", 62)
                },
                63: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells XXVIII"
                        },
                        description(){
                                return "rRNA base is Tokens<sup>Tokens II</sup> and snRNA base is log10(log10(Points))"
                        },
                        cost:() => new Decimal("1e37682"),
                        unlocked(){
                                return hasUpgrade("cells", 62) || player.or.unlocked
                        }, // hasUpgrade("cells", 63)
                },
                64: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells XXIX"
                        },
                        description(){
                                return "C74 Gems effect is 1.04 and per upgrade add .022 to Omnipotent base, but remove Life buyables"
                        },
                        cost:() => new Decimal("1e38255"),
                        onPurchase(){
                                player.l.buyables[11] = decimalZero
                                player.l.buyables[12] = decimalZero
                                player.l.buyables[13] = decimalZero
                                player.l.buyables[21] = decimalZero
                                player.l.buyables[22] = decimalZero
                                player.l.buyables[23] = decimalZero
                                player.l.buyables[31] = decimalZero
                                player.l.buyables[32] = decimalZero
                                player.l.buyables[33] = decimalZero
                                player.mu.buyables[31] = decimalZero
                                if (player.subtabs.l.mainTabs == "Buyables") player.subtabs.l.mainTabs = "Info"
                        },
                        unlocked(){
                                return hasUpgrade("cells", 63) || player.or.unlocked
                        }, // hasUpgrade("cells", 64)
                },
                65: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Cells XXX"
                        },
                        description(){
                                return "Bottom Quark is based on best"
                        },
                        cost:() => new Decimal("1e38590"),
                        unlocked(){
                                return hasUpgrade("cells", 64) || player.or.unlocked
                        }, // hasUpgrade("cells", 65)
                },
                111: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Mu I"
                        },
                        description(){
                                let a = "log10(10+total Mu) multiplies Mu and Cell gain"
                                return a + br + "Currently: " + format(tmp.cells.upgrades[111].effect)
                        },
                        effect(){
                                if (hasMilestone("an", 29)) return decimalOne
                                return player.cells.total11.plus(10).log10()
                        },
                        cost:() => new Decimal(2000),
                        currencyLocation:() => player.cells.mu,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Mu",
                        unlocked(){
                                return true
                        }, // hasUpgrade("cells", 111)
                },
                112: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Mu II"
                        },
                        description(){
                                return "Total resource ^.1 multiplies the resource to the left maxed at 1e50" 
                        },
                        cost:() => new Decimal(player.extremeMode ? 1e8 : 6e6),
                        currencyLocation:() => player.cells.mu,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Mu",
                        unlocked(){
                                return hasUpgrade("cells", 111) || player.t.unlocked
                        }, // hasUpgrade("cells", 112)
                },
                113: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Mu III"
                        },
                        description(){
                                let a = "Unlock squeeze which is kept on reset, and per upgrade total Mu multiplies DNA gain"
                                return a + br + "Currently: " + format(tmp.cells.upgrades[113].effect)
                        },
                        effect(){
                                return player.cells.total11.max(1).pow(player.cells.upgrades.length).min("1ee5")
                        },
                        cost:() => new Decimal(1.6e16),
                        currencyLocation:() => player.cells.mu,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Mu",
                        unlocked(){
                                return hasUpgrade("cells", 112) || player.t.unlocked
                        }, // hasUpgrade("cells", 113)
                },
                114: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Mu IV"
                        },
                        description(){
                                return "Double the linear component of Sinusoidal and Squeeze levels multiply Stem Cell gain"
                        },
                        cost:() => new Decimal(player.extremeMode ? 1e27 : 1e25),
                        currencyLocation:() => player.cells.mu,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Mu",
                        unlocked(){
                                return hasUpgrade("cells", 113) || player.t.unlocked
                        }, // hasUpgrade("cells", 114)
                },
                115: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Mu V"
                        },
                        description(){
                                if (player.extremeMode) return "Sinusoidal exponent is not square rooted and shRNA base is sqrt(Mu)"
                                return "Sinusoidal exponent is not square rooted and shRNA base is Mu"
                        },
                        cost:() => new Decimal(player.extremeMode ? "3e761" : "e1253"),
                        unlocked(){
                                return hasChallenge("l", 112) || player.t.unlocked
                        }, // hasUpgrade("cells", 115)
                },
                211: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lambda I"
                        },
                        description(){
                                let a = "log10(10+total Lambda) multiplies Lambda and Cell gain"
                                return a + br + "Currently: " + format(tmp.cells.upgrades[211].effect)
                        },
                        effect(){
                                if (hasMilestone("an", 29)) return decimalOne
                                let ret = player.cells.total12.plus(10).log10()
                                if (hasUpgrade("cells", 213)) ret = ret.times(player.cells.upgrades.length)
                                return ret
                        },
                        cost:() => new Decimal(5000),
                        currencyLocation:() => player.cells.lambda,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Lambda",
                        unlocked(){
                                return true
                        }, // hasUpgrade("cells", 211)
                },
                212: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lambda II"
                        },
                        description(){
                                let a = "log100(total Lambda) multiplies Mu, Iota, and Kappa gain"
                                return a + br + "Currently: " + format(tmp.cells.upgrades[212].effect)
                        },
                        effect(){
                                let ret = player.cells.total12.plus(10).log10().div(2).max(1)
                                if (hasUpgrade("cells", 213)) ret = ret.times(player.cells.upgrades.length)
                                return ret
                        },
                        cost:() => new Decimal(1e8),
                        currencyLocation:() => player.cells.lambda,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Lambda",
                        unlocked(){
                                return hasUpgrade("cells", 211) || player.t.unlocked
                        }, // hasUpgrade("cells", 212)
                },
                213: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lambda III"
                        },
                        description(){
                                return "Multiply Lambda I and Lambda II effect by the number of upgrades and you bulk buy Iota buyables"
                        },
                        cost:() => new Decimal(2.9e29),
                        currencyLocation:() => player.cells.lambda,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Lambda",
                        unlocked(){
                                return hasUpgrade("cells", 212) || player.t.unlocked
                        }, // hasUpgrade("cells", 213)
                },
                214: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lambda IV"
                        },
                        description(){
                                let a = "Unlock another Stem Cell buyable, and per upgrade multiply Stem Cell gain by 1+upgrades/100"
                                return a + br + "Currently: " + format(tmp.cells.upgrades[214].effect)
                        },
                        effect(){
                                let upg = new Decimal(player.cells.upgrades.length)
                                return upg.div(100).plus(1).pow(upg)
                        },
                        cost:() => new Decimal(1e42),
                        currencyLocation:() => player.cells.lambda,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Lambda",
                        unlocked(){
                                return hasUpgrade("cells", 213) || player.t.unlocked
                        }, // hasUpgrade("cells", 214)
                },
                215: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lambda V"
                        },
                        description(){
                                return "<bdi style='font-size: 80%'>log10(Lambda) multiplies Near-ultraviolet base, and Life buyables exponents are 2 but α → ∂𝛾, β → ∂𝛾 and 𝛾 → ∂𝛾's bases are 1</bdi>"
                        },
                        cost:() => new Decimal(player.extremeMode ? "3.9e798" : "e1315"),
                        unlocked(){
                                return hasUpgrade("cells", 115) || player.t.unlocked
                        }, // hasUpgrade("cells", 215)
                },
                311: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Kappa I"
                        },
                        description(){
                                let a = "log10(10+total Kappa) multiplies Kappa and Cell gain"
                                return a + br + "Currently: " + format(tmp.cells.upgrades[311].effect)
                        },
                        effect(){
                                if (hasMilestone("an", 29)) return decimalOne
                                return player.cells.total13.plus(10).log10()
                        },
                        cost:() => new Decimal("1000"),
                        currencyLocation:() => player.cells.kappa,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Kappa",
                        unlocked(){
                                return true
                        }, // hasUpgrade("cells", 311)
                },
                312: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Kappa II"
                        },
                        description(){
                                let a = "1+Kappa<sup>.5</sup> multiplies Kappa gain and the bar changes twice as fast"
                                return a + br + "Currently: " + format(tmp.cells.upgrades[312].effect)
                        },
                        effect(){
                                return player.cells.kappa.points.sqrt().plus(1)
                        },
                        cost:() => new Decimal(1e6),
                        currencyLocation:() => player.cells.kappa,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Kappa",
                        unlocked(){
                                return hasUpgrade("cells", 311) || player.t.unlocked
                        }, // hasUpgrade("cells", 312)
                },
                313: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Kappa III"
                        },
                        description(){
                                let a = "Cells multiply Kappa gain and the bar changes twice as fast"
                                if (player.extremeMode) a = a.replace("gain", "gain, log10(Kappa) multiplies DNA Science gain,")
                                return a + br + "Currently: " + format(tmp.cells.upgrades[313].effect)
                        },
                        effect(){
                                return player.cells.points.max(1)
                        },
                        cost:() => new Decimal(player.extremeMode ? 2.01e102 : 1.11e111),
                        currencyLocation:() => player.cells.kappa,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Kappa",
                        unlocked(){
                                return hasUpgrade("cells", 312) || player.t.unlocked
                        }, // hasUpgrade("cells", 313)
                },
                314: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Kappa IV"
                        },
                        description(){
                                return "log10(log10(Protein)) multiplies Stem Cell gain and Kappa gain per upgrade"
                        },
                        effect(){
                                return player.a.protein.points.max(10).log10().max(10).log10()
                        },
                        cost:() => new Decimal(player.extremeMode ? 5e177 : 1e171),
                        currencyLocation:() => player.cells.kappa,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Kappa",
                        unlocked(){
                                return hasUpgrade("cells", 313) || player.t.unlocked
                        }, // hasUpgrade("cells", 314)
                },
                315: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Kappa V"
                        },
                        description(){
                                if (player.extremeMode) return "Tokens multiply Infrared base and dilate point gain"
                                return "Tokens exponentiates Infrared base and dilate point gain"
                        },
                        cost:() => new Decimal(player.extremeMode ? "3e809" : "e1377"),
                        unlocked(){
                                return hasUpgrade("cells", 215) || player.t.unlocked
                        }, // hasUpgrade("cells", 315)
                },
                411: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Iota I"
                        },
                        description(){
                                let a = "log10(10+total Iota) multiplies Iota and Cell gain"
                                return a + br + "Currently: " + format(tmp.cells.upgrades[411].effect)
                        },
                        effect(){
                                if (hasMilestone("an", 29)) return decimalOne
                                return player.cells.total14.plus(10).log10()
                        },
                        cost:() => new Decimal(4321),
                        currencyLocation:() => player.cells.iota,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Iota",
                        unlocked(){
                                return true
                        }, // hasUpgrade("cells", 411)
                },
                412: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Iota II"
                        },
                        description(){
                                let a = "log10(log10(total Iota)) multiplies Kappa, Mu, and Lambda gain per upgrade"
                                return a + br + "Currently: " + format(tmp.cells.upgrades[412].effect)
                        },
                        effect(){
                                return player.cells.total14.max(10).log10().max(10).log10().pow(player.cells.upgrades.length)
                        },
                        cost:() => new Decimal(player.extremeMode ? 1e67 : 1e45),
                        currencyLocation:() => player.cells.iota,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Iota",
                        unlocked(){
                                return hasUpgrade("cells", 411) || player.t.unlocked
                        }, // hasUpgrade("cells", 412)
                },
                413: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Iota III"
                        },
                        description(){
                                return "Once per tick autobuy all three buyables and Life buyables are free"
                        },
                        cost:() => new Decimal(player.extremeMode ? 1e222 : 1e150),
                        currencyLocation:() => player.cells.iota,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Iota",
                        unlocked(){
                                return hasUpgrade("cells", 412) || player.t.unlocked
                        }, // hasUpgrade("cells", 413)
                },
                414: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Iota IV"
                        },
                        description(){
                                if (player.extremeMode) return "<bdi style='font-size: 80%'>Prime is always activated, Prime levels are no longer reset, and log10(Prime levels)<sup>2</sup> multiply Stem Cell gain<br>Requires: 1e34 Stem Cells</bdi>"
                                return "<bdi style='font-size: 80%'>Prime is always activated, Prime levels are no longer reset, and log10(Prime levels) multiply Stem Cell gain<br>Requires: 1e46 Stem Cells</bdi>"
                        },
                        canAfford(){
                                return player.cells.stem_cells.best.gte(player.extremeMode ? 1e34 : 1e46)
                        },
                        cost:() => hasMilestone("cells", 38) ? decimalOne : new Decimal(player.extremeMode ? "1e400" : "1e446"),
                        currencyLocation:() => player.cells.iota,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Iota",
                        unlocked(){
                                return hasUpgrade("cells", 413) || player.t.unlocked
                        }, // hasUpgrade("cells", 414)
                },
                415: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Iota V"
                        },
                        description(){
                                return "Unlock Tissues and Odd is always activated"
                        },
                        cost:() => new Decimal(player.extremeMode ? "1.3e811" : "e1381"),
                        unlocked(){
                                return hasUpgrade("cells", 315) || player.t.unlocked
                        }, // hasUpgrade("cells", 415)
                },
        },
        clickables: {
                rows: 10,
                cols: 10,
                11: {
                        title(){
                                return "<h3 style='color: #0033FF'>Mu</h3>"
                        },
                        maxTimes(){
                                return 60
                        },
                        display(){
                                return "Unlock the Mu minigame" + br + "Total points: " + format(player.cells.total11)
                        },
                        unlocked(){
                                return hasChallenge("l", 102) || hasUpgrade("or", 135)
                        },
                        canClick(){
                                return player.cells.currentMinigame == undefined && !(hasMilestone("cells", 21) || hasMilestone("or", 4))
                        },
                        onClick(){
                                player.cells.currentMinigame = 11
                                player.cells.timeInMinigame = 0
                        },
                },
                12: {
                        title(){
                                return "<h3 style='color: #0033FF'>Lambda</h3>"
                        },
                        maxTimes(){
                                return 60
                        },
                        display(){
                                return "Unlock the Lambda minigame" + br + "Total points: " + format(player.cells.total12)
                        },
                        unlocked(){
                                return hasChallenge("l", 102) || hasUpgrade("or", 135)
                        },
                        canClick(){
                                return player.cells.currentMinigame == undefined && !(hasMilestone("cells", 32) || hasMilestone("or", 4))
                        },
                        onClick(){
                                player.cells.currentMinigame = 12
                                player.cells.timeInMinigame = 0
                        },
                },
                13: {
                        title(){
                                return "<h3 style='color: #0033FF'>Kappa</h3>"
                        },
                        maxTimes(){
                                return 60
                        },
                        display(){
                                return "Unlock the Kappa minigame" + br + "Total points: " + format(player.cells.total13)
                        },
                        unlocked(){
                                return hasChallenge("l", 102) || hasUpgrade("or", 135)
                        },
                        canClick(){
                                return player.cells.currentMinigame == undefined && !(hasMilestone("cells", 37) || hasMilestone("or", 4))
                        },
                        onClick(){
                                player.cells.currentMinigame = 13
                                player.cells.timeInMinigame = 0
                        },
                },
                14: {
                        title(){
                                return "<h3 style='color: #0033FF'>Iota</h3>"
                        },
                        maxTimes(){
                                return 60
                        },
                        display(){
                                return "Unlock the Iota minigame" + br + "Total points: " + format(player.cells.total14)
                        },
                        unlocked(){
                                return hasChallenge("l", 102) || hasUpgrade("or", 135)
                        },
                        canClick(){
                                return player.cells.currentMinigame == undefined && !(hasMilestone("cells", 38) || hasMilestone("or", 4))
                        },
                        onClick(){
                                player.cells.currentMinigame = 14
                                player.cells.timeInMinigame = 0
                        },
                },
                15: {
                        title(){
                                return "Nullify"
                        },
                        display(){
                                if (player.cells.currentMinigame == undefined) return "You are not in a minigame right now"
                                return "Time left: " + formatTime(layers.cells.getMinigameMaximum() - player.cells.timeInMinigame)
                        },
                        unlocked(){
                                return hasChallenge("l", 102)
                        },
                        canClick(){
                                return true
                        },
                        onClick(){
                                if (player.cells.currentMinigame) layers.cells.exitMinigame()
                                player.cells.currentMinigame = undefined
                                player.cells.timeInMinigame = 0
                        }
                },
                211: {
                        title(){
                                return "Sacrifice"
                        },
                        display(){
                                return "Sacrifice 10% of your cells<br>Currently you have sacrificed " + format(player.cells.lambda.sacrificed)
                        },
                        unlocked(){
                                return true
                        },
                        canClick(){
                                return player.cells.points.gte(10)
                        },
                        onClick(){
                                player.cells.points = player.cells.points.times(.9)
                                player.cells.lambda.sacrificed = player.cells.lambda.sacrificed.plus(player.cells.points.div(9))
                        }
                },
        },
        milestones: {
                1: {
                        requirementDescription(){
                                return "1 Cell reset"
                        },
                        done(){
                                return player.cells.times >= 1
                        },
                        unlocked(){
                                return true
                        },
                        onComplete(){
                                player.cells.milestone1Ever = true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Per reset keep a DNA milestone, bulk 10x N → Δµ, always start with 500 of each Life buyable, and permanently get DNA milestone 15."
                                return "Reward: Per reset keep a DNA milestone, always start with 500 of each Life buyable, and permanently get DNA milestone 15."
                        },
                }, // hasMilestone("cells", 1)
                2: {
                        requirementDescription(){
                                return "2 Cell resets"
                        },
                        done(){
                                return player.cells.times >= 2
                        },
                        unlocked(){
                                return true
                        },
                        onComplete(){
                                if (player.cells.milestone2Best == 0) player.cells.milestone2Best = 2
                        },
                        effectDescription(){
                                return "Reward: Per reset permanently keep another gem and keep Life reset times."
                        },
                }, // hasMilestone("cells", 2)
                3: {
                        requirementDescription(){
                                return "3 Cell resets"
                        },
                        done(){
                                return player.cells.times >= 3
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Per reset keep a DNA reset and Anti-Upsilon's log10 becomes log7."
                        },
                }, // hasMilestone("cells", 3)
                4: {
                        requirementDescription(){
                                return "5 Cell resets"
                        },
                        done(){
                                return player.cells.times >= 5
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Per milestone double DNA Science gain and Anti-Upsilon's log7 becomes log5."
                                return "Reward: You can bulk 10x more N → Δµ and Anti-Upsilon's log7 becomes log5."
                        },
                }, // hasMilestone("cells", 4)
                5: {
                        requirementDescription(){
                                return "8 Cell resets"
                        },
                        done(){
                                return player.cells.times >= 8
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Per reset keep a DNA upgrade, keep DNA Science buyables and upgrades on Cell reset, and Anti-Upsilon's log5 becomes ln."
                                return "Reward: Per reset keep a DNA upgrade and Anti-Upsilon's log5 becomes ln."
                        },
                }, // hasMilestone("cells", 5)
                6: {
                        requirementDescription(){
                                return "13 Cells"
                        },
                        done(){
                                return player.cells.points.gte(13)
                        },
                        unlocked(){
                                return true
                        },
                        effect(){
                                if (player.extremeMode) return new Decimal(player.cells.milestones.length).div(2).floor().min(10).div(1e4)
                                return new Decimal(Math.min(10, player.cells.milestones.length)).div(1e4)
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Every other milestone (up to 20) add .0001 to tRNA's base." + br + "Currently: " + format(tmp.cells.milestones[6].effect, 4)
                                return "Reward: Per milestone (up to 10) add .0001 to tRNA's base." + br + "Currently: " + format(tmp.cells.milestones[6].effect, 4)
                        },
                }, // hasMilestone("cells", 6)
                7: {
                        requirementDescription(){
                                return "21 Cells"
                        },
                        done(){
                                return player.cells.points.gte(21)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Anti-Upsilon's ln becomes log2 and Anti-Minigame's log10 becomes log2."
                        },
                }, // hasMilestone("cells", 7)
                8: {
                        requirementDescription(){
                                return "100 Cells"
                        },
                        done(){
                                return player.cells.points.gte(100)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Unlock another Anti- challenge."
                        },
                }, // hasMilestone("cells", 8)
                9: {
                        requirementDescription(){
                                if (player.hardMode) return "1,000 of every minigame amount"
                                return "1,000 of any minigame amount"
                        },
                        done(){
                                let x = new Decimal(1000)
                                let a = 0
                                if (x.lte(player.cells.mu.best)) a += 1
                                if (x.lte(player.cells.kappa.best)) a += 1
                                if (x.lte(player.cells.lambda.best)) a += 1
                                if (x.lte(player.cells.iota.best)) a += 1
                                return a >= (player.hardMode ? 4 : 1)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Gain 10% of your Cells on reset per second."
                        },
                }, // hasMilestone("cells", 9)
                10: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e30 Kappa and 5e141 DNA Science"
                                return "1e100 Kappa"
                        },
                        done(){
                                if (player.extremeMode) return player.cells.kappa.points.gte(1e30) && player.sci.dna_science.points.gte("5e141")
                                return player.cells.kappa.points.gte(1e100)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Total kappa multiplies Amino Acid gain and DNA Sci VI uses upgrades."
                                return "Reward: Total kappa multiplies Amino Acid gain."
                        },
                }, // hasMilestone("cells", 10)
                11: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e86 Kappa"
                                return "1e140 Kappa"
                        },
                        done(){
                                if (player.extremeMode) return player.cells.kappa.points.gte(1e86)
                                return player.cells.kappa.points.gte(1e140)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Each upgrade adds 1 to Cell effect exponent and DNA Sci VII's becomes 1.3"
                                return "Reward: Each upgrade adds 1 to Cell effect exponent."
                        },
                }, // hasMilestone("cells", 11)
                12: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e35 Mu"
                                return "1e28 Mu"
                        },
                        done(){
                                return player.cells.mu.points.gte(player.extremeMode ? 1e35 : 1e28)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Automatically bulk buy Sinusoidal, Sinusoidal is free, and the number of milestones<sup>2.5</sup> multiplies Stem Cell and DNA Science gain."
                                return "Reward: Automatically bulk buy Sinusoidal, Sinusoidal is free, and the number of milestones multiplies Stem Cell gain."
                        },
                }, // hasMilestone("cells", 12)
                13: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e94 Stem Cells"
                                return "1e96 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? 1e94 : 1e96)
                        },
                        unlocked(){
                                return true
                        },
                        onComplete(){
                                player.mu.buyables[11] = decimalZero
                                player.mu.buyables[12] = decimalZero
                                player.mu.buyables[13] = decimalZero
                                player.mu.buyables[21] = decimalZero
                                player.mu.buyables[22] = decimalZero
                                player.mu.buyables[23] = decimalZero
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Sinusoidal effect is x^sqrt(milestones) and add .1 to Primase base but remove the first two rows of µ buyables."
                                return "Reward: Sinusoidal effect is x^sqrt(milestones) but remove the first two rows of µ buyables."
                        },
                }, // hasMilestone("cells", 13)
                14: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e112 Stem Cells"
                                return "1e109 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? 1e112 : 1e109)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Unlock Stem Cell challenges, gain a free Cell reset per second, and square base Cell gain but you can only have 100% of your cells upon reset and you can no longer Cell reset."
                        },
                }, // hasMilestone("cells", 14)
                15: {
                        requirementDescription(){
                                return "1 Cell challenge completion"
                        },
                        done(){
                                return layerChallengeCompletions("cells") >= 1
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: If you are not in a Cell challenge after 1 second you gain .01% of your best Stem Cells."
                        },
                }, // hasMilestone("cells", 15)
                16: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e124 Stem Cells"
                                return "5e122 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? 1e124 : 5e122)
                        },
                        unlocked(){
                                return true
                        },
                        effect(){
                                let amt = new Decimal(player.cells.milestones.length)
                                return amt.div(100).plus(1).pow(amt)
                        },
                        effectDescription(){
                                let a = "Reward: Per milestone multiply Stem Cell and Cell gain by 1 + milestones/100."
                                let b = br + "Currently: " + format(tmp.cells.milestones[16].effect)
                                return a + b
                        },
                }, // hasMilestone("cells", 16)
                17: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e148 Stem Cells"
                                return "1e138 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? 1e148 : 1e138)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: The number of upgrades multiplies Stem Cell and DNA Science gain. If you are in a Cell challenge this is applied again."
                                return "Reward: The square root of the number of upgrades multiplies Stem Cell gain."
                        },
                }, // hasMilestone("cells", 17)
                18: {
                        requirementDescription(){
                                if (player.extremeMode) return "5e206 Stem Cells"
                                return "1e167 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? 5e206 : 1e167)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: The square root of the number of Omnipotent levels adds to rRNA base and DNA gain exponent."
                        },
                }, // hasMilestone("cells", 18)
                19: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e221 Stem Cells"
                                return "1e178 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? 1e221 : 1e178) 
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: siRNA's base is Stem Cells and ncRNA's base is Cells."
                        },
                }, // hasMilestone("cells", 19)
                20: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e233 Stem Cells"
                                return "1e180 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? 1e233 : 1e180)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Remove Omnipotent's base cost and Cells gain exponent is 1/500."
                        },
                }, // hasMilestone("cells", 20)
                21: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e262 Stem Cells"
                                return "1e236 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? 1e262 : 1e236)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Unlock M<sub>C</sub>, Mu is always active, and permanently keep µ and Phosphorus content."
                        },
                }, // hasMilestone("cells", 21)
                22: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e108 Mu"
                                return "3e72 Mu"
                        },
                        done(){
                                return player.cells.mu.points.gte(player.extremeMode ? 1e108 : 3e72)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Omnipotent levels + 1 multiply Mu and Stem Cell gain."
                        },
                }, // hasMilestone("cells", 22)
                23: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e387 Stem Cells"
                                return "1.80e308 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e387" : "1.8e308") 
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: log10(Best Mu) multiplies Stem Cell gain."
                        },
                }, // hasMilestone("cells", 23)
                24: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e417 Stem Cells"
                                return "1e355 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e417" : "1e355")
                        },
                        unlocked(){
                                return true
                        },
                        onComplete(){
                                tmp.tokens.buyables[21].effect = decimalOne
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Visible effects Stem Cell gain but its base is 1.03."
                                return "Reward: Visible effects Stem Cell gain but its base is 1.11."
                        },
                }, // hasMilestone("cells", 24)
                25: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e444 Stem Cells"
                                return "1e416 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e444" : "1e416")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Infrared effects shRNA's base."
                                return "Reward: Infrared effects shRNA's base and per milestone you have one less token for prestige purposes."
                        },
                }, // hasMilestone("cells", 25)
                26: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e447 Stem Cells"
                                return "1e430 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e447" : "1e430")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Tokens multiply Stem Cell gain and per milestone add .001 to Visible base."
                                return "Reward: Tokens multiply Stem Cell gain and per milestone add .002 to Visible base."
                        },
                }, // hasMilestone("cells", 26)
                27: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e507 Stem Cells"
                                return "1e495 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e507" : "1e495")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Remove Totipotent's base cost and bulk buy 20x Life buyables."
                        },
                }, // hasMilestone("cells", 27)
                28: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e577 Stem Cells"
                                return "1e572 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e577" : "1e572") 
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Totipotent cost base is 1e9 and bulk buy 20x Life buyables."
                        },
                }, // hasMilestone("cells", 28)
                29: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e748 Stem Cells"
                                return "1e781 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e748" : "1e781")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: miRNA base is µ<sup>.1</sup>, Omnipotent doesn't cost anything, and once per tick buy Omnipotent."
                                return "Reward: miRNA base is µ, Omnipotent doesn't cost anything, and once per tick buy Omnipotent."
                        },
                }, // hasMilestone("cells", 29)
                30: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e872 Stem Cells"
                                return "1e899 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e872" : "1e899")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Life buyable exponents are 2.3 and bulk buy 1000x but Constant base is 2 and nullify prior boosts to it."
                        },
                }, // hasMilestone("cells", 30)
                31: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e884 Stem Cells"
                                return "1e916 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e884" : "1e916")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Logarithmic effects crRNA, per token multiply DNA Science gain by 1.1, and DNA gain base is log10(Amino Acid), but Logarithmic initial base is 1."
                                return "Reward: Logarithmic effects crRNA and DNA gain base is log10(Amino Acid)."
                        },
                }, // hasMilestone("cells", 31)
                32: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e1052 Stem Cells"
                                return "1e1177 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e1052" : "1e1177")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: " + makePurple("C") + "log10(Lambda) multiplies Stem Cell gain and Lambda is always active."
                                return "Reward: log10(Lambda) multiplies Stem Cell gain and Lambda is always active."
                        },
                }, // hasMilestone("cells", 32)
                33: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e1295 Stem Cells"
                                return "1e1249 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e1295" : "1e1249")
                        },
                        unlocked(){
                                return true
                        },
                        effect(){
                                return tmp.l.buyables[23].effect.max(10).log10().sub(7).max(1).log10().max(0)
                        },
                        effectDescription(){
                                let a = "Reward: log10(log10(β → ∂𝛾)-7) adds to Omnipotent base"
                                if (player.extremeMode) a += " and keep DNA Science upgrades and buyables"
                                let b = br + "Currently: " + format(tmp.cells.milestones[33].effect)
                                return a + "." + b
                        },
                }, // hasMilestone("cells", 33)
                34: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e1487 Stem Cells"
                                return "1e1483 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e1487" : "1e1483")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: " + makePurple("F") + " multiplies Stem Cell gain and 𝛾 → ∂α, 𝛾 → ∂β, and 𝛾 → ∂𝛾 cost bases are 2."
                                return "Reward: 𝛾 → ∂α, 𝛾 → ∂β, and 𝛾 → ∂𝛾 cost bases are 2."
                        },
                }, // hasMilestone("cells", 34)
                35: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e1631 Stem Cells"
                                return "1e1567 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e1631" : "1e1567")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Omnipotent multiplies rRNA base instead of adding its square root and α → ∂β base is best Lambda."
                        },
                }, // hasMilestone("cells", 35)
                36: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e1661 Stem Cells"
                                return "1e1628 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e1661" : "1e1628")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: β → ∂α base is 2^tokens and tetrational token costs scale 20x slower."
                        },
                }, // hasMilestone("cells", 36)
                37: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e1677 Stem Cells"
                                return "1e1710 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e1677" : "1e1710")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Kappa is always active, tokens multiply 𝛾 → ∂𝛾's exponential divider, and you can bulk buy Omnipotent."
                        },
                }, // hasMilestone("cells", 37)
                38: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e1902 Stem Cells"
                                return "1e1789 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e1902" : "1e1789")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Iota is always active and instead based on total time played and log10(DNA) multiplies Stem Cell gain."
                        },
                }, // hasMilestone("cells", 38)
                39: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e2029 Stem Cells"
                                return "1e1929 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e2029" : "1e1929")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: 𝛾 → ∂β's base is Near-ultraviolet and log10(µ) multiplies Stem Cell gain."
                        },
                }, // hasMilestone("cells", 39)
                40: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e2193 Stem Cells"
                                return "1e2064 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e2193" : "1e2064")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Best Cells^.01 multiplies Stem Cell gain and best Stem Cells^.01 multiplies Cell gain."
                                return "Reward: Best Cells^.02 multiplies Stem Cell gain and best Stem Cells^.01 multiplies Cell gain."
                        },
                }, // hasMilestone("cells", 40)
                41: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e2403 Stem Cells"
                                return "1e2258 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e2403" : "1e2258")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Totipotent's log10 becomes log6 and Radio Wave levels multiply Stem Cell gain but Secondary is 1000x harder."
                                return "Reward: Totipotent's log10 becomes log6 and Radio Wave levels multiply Stem Cell gain."
                        },
                }, // hasMilestone("cells", 41)
                42: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e2755 Stem Cells"
                                return "1e2687 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e2755" : "1e2687")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Totipotent's log6 becomes log4."
                        },
                }, // hasMilestone("cells", 42)
                43: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e3170 Stem Cells"
                                return "1e3156 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e3170" : "1e3156") 
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Totipotent's log4 becomes ln but Secondary is 1e32x harder."
                                return "Reward: Totipotent's log4 becomes ln."
                        },
                }, // hasMilestone("cells", 43)
                44: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e3810 Stem Cells"
                                return "1e3906 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e3810" : "1e3906") 
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Totipotent's ln becomes log2 and remove milestone 41 and 43's nerfs."
                                return "Reward: Totipotent's ln becomes log2."
                        },
                }, // hasMilestone("cells", 44)
                45: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e4686 Stem Cells"
                                return "1e4966 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e4686" : "1e4966")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Totipotent's cost base is 5e8."
                        },
                }, // hasMilestone("cells", 45)
                46: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e5692 Stem Cells"
                                return "1e6141 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e5692" : "1e6141")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Totipotent's cost base is 3e8 but Secondary is 1e23x harder."
                                return "Reward: Totipotent's cost base is 3e8."
                        },
                }, // hasMilestone("cells", 46)
                47: {
                        requirementDescription(){
                                if (player.extremeMode) return "2e2840 DNA Science"
                                return "10 Secondary Challenge Completions"
                        },
                        done(){
                                if (player.extremeMode) return player.sci.dna_science.points.gte("2e2840")
                                return player.cells.challenges[12] >= 10
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Totipotent's cost base is 1e8 but Secondary is 1e42x harder."
                                return "Reward: Totipotent's cost base is 1e8."
                        },
                }, // hasMilestone("cells", 47)
                48: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e9,366 Stem Cells"
                                return "1e11,611 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e9366" : "1e11611")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Autobuy Squeeze, you can buy max Totipotent, Protein and Iota buyables are free, reduce Secondary goal to 1e891, and keep DNA Science on Cell reset."
                                return "Reward: Autobuy Squeeze, you can buy max Totipotent, Protein and Iota buyables are free, and constant base is doubled per milestone."
                        },
                }, // hasMilestone("cells", 48)
                49: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e9,768 Stem Cells"
                                return "1e11,666 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e9768" : "1e11666")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Secondary base is (1+x)<sup>3</sup> as opposed to 1+x<sup>2</sup> and bulk 100x N → Δµ but nullify µ III."
                                return "Reward: Secondary base is (1+x)<sup>3</sup> as opposed to 1+x<sup>2</sup> but nullify µ III."
                        },
                }, // hasMilestone("cells", 49)
                50: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e10,527 Stem Cells"
                                return "1e12,127 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e10527" : "1e12127")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Double-exponential effects Omnipotent base and token cost formula is<br>max(0, x<sup>.4</sup>-1)."
                        },
                }, // hasMilestone("cells", 50)
                51: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e11,819 Stem Cells"
                                return "1e15,500 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e11819" : "1e15500")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Double-exponential formula is x/500 and token tetrational scaling is 3x slower."
                        },
                }, // hasMilestone("cells", 51)
                52: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e12,725 Stem Cells"
                                return "1e16,011 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e12725" : "1e16011")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Add .0001 to tRNA base and per Cell challenge completion add .005 to Visible base."
                                return "Reward: Add .0001 to tRNA base and per Cell challenge completion add .015 to Visible base."
                        },
                }, // hasMilestone("cells", 52)
                53: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e13,037 Stem Cells"
                                return "1e16,471 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e13037" : "1e16471")
                        },
                        unlocked(){
                                return true
                        },
                        effect(){
                                let m = player.cells.milestones.length - 44
                                if (hasUpgrade("cells", 55)) m += 44
                                return player.a.protein.best.max(10).log10().max(10).log10().pow(m)
                        },
                        effectDescription(){
                                let a = "Reward: Add .0001 to tRNA base and per milestones - 44<br>log10(log10(Protein)) multiplies Stem Cell gain."
                                let b = br + "Currently: " + format(tmp.cells.milestones[53].effect)
                                return a + b
                        },
                }, // hasMilestone("cells", 53)
                54: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e13,416 Stem Cells"
                                return "1e16,895 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e13416" : "1e16895")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Add .0001 to tRNA base, token exponent is .39, rRNA base is log10(Lives) and 𝛾 → ∂α's base is Lambda."
                                return "Reward: Add .0001 to tRNA base, token exponent is .39, per Secondary completion it's goal is 1000x less, rRNA base is log10(Lives) and 𝛾 → ∂α's base is Lambda."
                        },
                }, // hasMilestone("cells", 54)
                55: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e13,605 Stem Cells"
                                return "1e17,301 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e13605" : "1e17301") 
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Add .0001 to tRNA base, token exponent is .38, and Life buyable exponents are 2.2."
                                return "Reward: Add .0001 to tRNA base, token exponent is .38, Life buyable exponents are 2.2, and per challenge completion Secondary's goal is 10x less."
                        },
                }, // hasMilestone("cells", 55)
                56: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e14,212 Stem Cells"
                                return "1e18,131 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e14212" : "1e18131")
                        },
                        unlocked(){
                                return true
                        },
                        effect(){
                                let base = new Decimal(1.001)
                                let exp = player.cells.milestones.length * layerChallengeCompletions("cells")
                                return base.pow(exp)
                        },
                        effectDescription(){
                                let a = "Reward: Add .0001 to tRNA base, token exponent is .37, and per challenge per milestone dilate point gain ^1.001."
                                let b = br + "Currently: ^" + format(tmp.cells.milestones[56].effect)
                                return a + b
                        },
                }, // hasMilestone("cells", 56)
                57: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e14,403 Stem Cells"
                                return "1e18,364 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e14403" : "1e18364")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Add .0001 to tRNA base, token exponent is .36, and bulk unlimited µ buyables."
                        },
                }, // hasMilestone("cells", 57)
                58: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e14,577 Stem Cells"
                                return "1e19,289 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e14577" : "1e19289")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Add .0001 to tRNA base, token exponent is .35, and unlock an Anti- challenge."
                        },
                }, // hasMilestone("cells", 58)
                59: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e15,471 Stem Cells"
                                return "1e21,555 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e15471" : "1e21555")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Add .0001 to tRNA base, buy max Life buyables, and token exponent is .34."
                                return "Reward: Buy max Life buyables, token exponent is .34, and the number of challenge completions squared multiplies Stem Cell gain."
                        },
                }, // hasMilestone("cells", 59)
                60: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e15,853 Stem Cells"
                                return "1e22,621 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e15853" : "1e22621")
                        },
                        unlocked(){
                                return true
                        },
                        onComplete(){
                                player.cells.everMilestone60 = true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Double Primary base and permanently keep Protein Science upgrades."
                                return "Reward: Double Primary base."
                        },
                }, // hasMilestone("cells", 60)
                61: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e16,241 Stem Cells"
                                return "1e22,984 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e16241" : "1e22984") 
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Token exponent is .33 and primary base is 45."
                        },
                }, // hasMilestone("cells", 61)
                62: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e16,751 Stem Cells"
                                return "1e23,309 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e16751" : "1e23309")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Token exponent is .32 and primary base is 63."
                        },
                }, // hasMilestone("cells", 62)
        },
        challenges:{
                onEnter(){
                        let ids = [11, 12, 13, 21, 22, 23, 31, 32, 33]
                        for (i in ids) {
                                let id = ids[i]
                                player.cells.buyables[id] = decimalZero
                        }
                        player.cells.stem_cells.points = decimalZero
                        updateTemp()
                        tmp.cells.stem_cells.getResetGain = decimalZero
                },
                11: {
                        name: "Primary",
                        goal(){
                                let c = player.cells.challenges[11]
                                let exp = 59

                                if (player.extremeMode) exp = 85
                                
                                if (hasUpgrade("t", 75) && c >= 10) {
                                        if (player.extremeMode) exp += 513
                                        if (!hasMilestone("t", 19)) {
                                                exp += Math.pow(c, c/5) + 655
                                                if (c >= 15) exp += 50
                                        } else {
                                                exp += Math.pow(c, 3) * 1.2 + 53
                                        }
                                }

                                if (hasUpgrade("t", 55)) exp -= 6
                                if (hasUpgrade("t", 101) && !player.extremeMode) {
                                        if (hasMilestone("cells", 54) && !player.extremeMode) {
                                                                        exp -= 3 * player.cells.challenges[12]
                                        }
                                        if (hasMilestone("cells", 55) && !player.extremeMode) {
                                                                        exp -= layerChallengeCompletions("cells")
                                        }
                                        if (hasChallenge("l", 112) && !hasMilestone("or", 15)) {
                                                                        exp -= 4
                                        }
                                        if (hasUpgrade("t", 101)) {
                                                let per = player.extremeMode ? 2.3010299956639813 : 1 //2.3010299956639813 = Math.log10(200)
                                                exp -= player.cells.challenges[11] * per 
                                        }
                                        if (hasUpgrade("cells", 51))    exp -= 2
                                        if (hasUpgrade("t", 121)) {
                                                exp -= 7
                                                if (hasUpgrade("t", 122)) exp -= 6
                                                if (hasUpgrade("t", 123)) exp -= 6
                                                if (hasUpgrade("t", 124)) exp -= 6
                                                if (hasUpgrade("t", 125)) exp -= 6
                                        }
                                        if (hasUpgrade("sci", 551))     exp += -9 * tmp.sci.upgrades[551].lvls
                                        if (hasUpgrade("t", 102))       exp -= 25
                                }
                                if (hasMilestone("t", 14)) {
                                        let per = player.extremeMode ? 7.698970004336019 : 9.778151250383644
                                                                        exp -= per * player.t.milestones.length
                                }
                                if (hasUpgrade("cells", 51)) {
                                        let lvls = player.cells.upgrades.length * player.t.upgrades.length
                                                                        exp -= Math.log10(1.91) * lvls
                                }
                                if (hasUpgrade("t", 122))               exp -= 150
                                if (hasUpgrade("t", 125))               exp -= 951
                                if (hasUpgrade("t", 133))               exp = Math.min(8500, exp)
                                if (hasUpgrade("sci", 554))             exp -= tmp.sci.upgrades.dnaUpgradesLength * 6.698970004336019 // Math.log10(5e6)
                                if (player.extremeMode) {
                                        if (hasMilestone("t", 12))      exp -= player.t.milestones.length ** 2
                                        if (hasUpgrade("t", 84))        exp -= player.t.upgrades.length * 2.6989700043360187 // Math.log10(500)
                                }
                                
                                return Decimal.pow(10, exp)
                        },
                        canComplete: () => player.cells.stem_cells.points.gte(tmp.cells.challenges[11].goal),
                        challengeEffect(){
                                let ret = decimalOne.plus(player.cells.challenges[11])

                                if (ret.eq(25)) ret = new Decimal(25.67)

                                if (hasUpgrade("t", 83) && ret.gt(10)) ret = ret.log10().times(10)

                                return ret
                        },
                        fullDisplay(){
                                let func = hasUpgrade("t", 83) ? format : formatWhole
                                let a = "Subtract " + func(tmp.cells.challenges[11].challengeEffect) + " from Omnipotent base"
                                let b = "Goal: " + format(tmp.cells.challenges[11].goal) + " Stem Cells"
                                let c = "Reward: Multiply Stem Cell gain per Cell challenge completion"
                                if (player.extremeMode) c = c.replace("Cell", "Cell and DNA Science")
                                let d = "Currently: *" + format(tmp.cells.challenges[11].rewardBase) + " per challenge<br>"
                                let e = "netting a *" + format(tmp.cells.challenges[11].rewardEffect) + " multiplier"
                                let f = br + "Completion count: " + player.cells.challenges[11] + "/" + formatWhole(tmp.cells.challenges[11].completionLimit)
                                
                                return a + br + b + br + c + br + d + e + f
                        },
                        onEnter(){
                                if (layers.cells.buyables[11].base().lte(0)) player.cells.activeChallenge = undefined
                        },
                        rewardEffect(){
                                let comps = layerChallengeCompletions("cells")
                                return tmp.cells.challenges[11].rewardBase.pow(comps)
                        },
                        rewardBase(){
                                if (hasUpgrade("t", 93))        return new Decimal(player.extremeMode ? 12e3 : 1e4)
                                if (hasUpgrade("t", 73))        return new Decimal(200)
                                if (hasUpgrade("t", 65))        return new Decimal(140)
                                if (hasUpgrade("t", 62))        return new Decimal(105)
                                if (hasMilestone("cells", 62))  return new Decimal(63)
                                if (hasMilestone("cells", 61))  return new Decimal(45)
                                let mult = 1
                                if (hasMilestone("cells", 60)) mult *= 2
                                return new Decimal(player.cells.challenges[11]).plus(3).times(mult)
                        },
                        unlocked(){
                                return true
                        },
                        onEnter(){
                                layers.cells.challenges.onEnter()
                        },
                        completionLimit(){
                                if (hasUpgrade("t", 75)) return 25
                                return 10
                        },
                        countsAs: [],
                }, // inChallenge("cells", 11) hasChallenge("cells", 11)
                12: {
                        name: "Secondary",
                        goal(){
                                let exp = 916
                                let comps = player.cells.challenges[12]

                                if (player.extremeMode) {
                                        exp = 897
                                        if (hasMilestone("cells", 41) && !hasMilestone("ch", 13)) exp += 3
                                        if (hasMilestone("cells", 43)) exp += 32
                                        if (hasMilestone("cells", 44)) exp += -35
                                        if (hasMilestone("cells", 46)) exp += 23
                                        if (hasMilestone("cells", 47)) exp += 42
                                        if (hasMilestone("cells", 48)) exp = 891
                                        if (comps >= 20) exp += 3 * (comps - 19)
                                        if (comps >= 25) exp += 3 * (comps - 19)
                                        if (hasUpgrade("sci", 551)) exp += -9 * tmp.sci.upgrades[551].lvls
                                }
                                
                                if (hasMilestone("cells", 54) && !player.extremeMode) {
                                                                exp -= 3 * comps
                                }
                                if (hasMilestone("cells", 55) && !player.extremeMode) {
                                                                exp -= layerChallengeCompletions("cells")
                                }
                                if (hasChallenge("l", 112) && !hasMilestone("or", 15)) {
                                                                exp -= 4
                                }
                                if (hasUpgrade("t", 55))        exp -= 6
                                if (hasUpgrade("t", 101)) {
                                        let per = player.extremeMode ? 2.3010299956639813 : 1 //2.3010299956639813 = Math.log10(200)
                                        exp -= player.cells.challenges[11] * per 
                                }
                                if (hasUpgrade("cells", 51))    exp -= 2
                                if (hasUpgrade("t", 121)) {
                                        exp -= 7
                                        if (hasUpgrade("t", 122)) exp -= 6
                                        if (hasUpgrade("t", 123)) exp -= 6
                                        if (hasUpgrade("t", 124)) exp -= 6
                                        if (hasUpgrade("t", 125)) exp -= 6
                                }
                                if (hasMilestone("t", 22) && comps == 94) {
                                                                exp -= 15
                                }
                                if (hasUpgrade("t", 102))       exp -= 25
                                if (hasMilestone("t", 16))      exp -= 22.69897000433602 // Math.log10(5e22)
                                if (hasUpgrade("t", 104))       exp -= 20.3010299956639813 // 22.3010299956639813 = Math.log10(2e20)
                                if (hasUpgrade("sci", 565))     exp += 5
                                if (hasUpgrade("cells", 31))    exp += 7
                                if (hasUpgrade("cells", 41))    exp -= 26
                                if (hasUpgrade("sci", 571))     exp -= 15 * (player.t.milestones.length - 15)
                                if (hasMilestone("t", 17))      exp -= 1
                                if (hasUpgrade("cells", 43) && player.extremeMode) {
                                                                exp -= 40
                                }

                                return Decimal.pow(10, exp)
                        },
                        canComplete: () => player.cells.stem_cells.points.gte(tmp.cells.challenges[12].goal),
                        challengeEffect(){
                                return new Decimal(.97).sub(player.cells.challenges[12]/100)
                        },
                        fullDisplay(){
                                let a = "Raise Stem Cell gain ^" + formatWhole(tmp.cells.challenges[12].challengeEffect)
                                let b = "Goal: " + format(tmp.cells.challenges[12].goal) + " Stem Cells"
                                let c = "Reward: Multiply Cell gain per Cell challenge completion"
                                let d = "Currently: *" + format(tmp.cells.challenges[12].rewardBase) + " per challenge<br>"
                                let e = "netting a *" + format(tmp.cells.challenges[12].rewardEffect) + " multiplier"
                                let f = br + "Completion count: " + player.cells.challenges[12] + "/95"

                                if (player.extremeMode) a +=  "<sup>*</sup>"
                                
                                return a + br + b + br + c + br + d + e + f
                        },
                        rewardEffect(){
                                let comps = layerChallengeCompletions("cells")
                                return tmp.cells.challenges[12].rewardBase.pow(comps)
                        },
                        rewardBase(){
                                let amt = player.cells.challenges[12]
                                if (hasMilestone("cells", 49)) {
                                        let add = 1
                                        if (hasMilestone("t", 6)) add = 5
                                        let exp = 3
                                        if (hasUpgrade("t", 93)) {
                                                exp = (amt-5)/10
                                                if (player.extremeMode) exp ++
                                        }
                                        return new Decimal(amt).plus(add).pow(exp)
                                }
                                return new Decimal(amt).pow(2).plus(1)
                        },
                        unlocked(){
                                return player.cells.challenges[11] >= 10 || player.or.unlocked
                        },
                        onEnter(){
                                layers.cells.challenges.onEnter()
                        },
                        completionLimit: 95,
                        countsAs: [],
                }, // inChallenge("cells", 12) hasChallenge("cells", 12)
                21: {
                        name: "Tertiary",
                        goal(){
                                let exp = new Decimal(167)

                                let c = player.cells.challenges[21]

                                exp = exp.times(Decimal.pow(5, c)).plus(6508)
                                if (c >= 4) exp = Decimal.pow(10, c+2)

                                return Decimal.pow(10, exp)
                        },
                        canComplete: () => player.cells.stem_cells.points.gte(tmp.cells.challenges[21].goal),
                        fullDisplay(){
                                let a = "Disable the first" 
                                if (player.cells.challenges[21] > 0) a += " " + formatWhole(player.cells.challenges[21]+1) 
                                a += " Stem Cell buyable" + (player.cells.challenges[21] > 0 ? "s" : "")
                                let b = "Goal: " + format(tmp.cells.challenges[21].goal) + " Stem Cells"
                                let c = "Reward: To see all rewards go to the info tab"
                                let d = "Next: "
                                if (player.cells.challenges[21] == 0) {
                                        d += "Per Cell upgrade log10(log10(Points)) multiplies DNA gain"
                                } else if (player.cells.challenges[21] == 1) {
                                        d += "Per completion log10(9+log10(10+Best Tissues)) multiplies Tissue gain"
                                } else if (player.cells.challenges[21] == 2) {
                                        d += "Unlock Heart and another Cell buyable"
                                } else if (player.cells.challenges[21] == 3) {
                                        d += "Tokens II buyables' cost is ceil(x<sup>.9</sup>)"
                                } else {
                                        d += "REMOVE"
                                }
                                d = d.replace("Next: REMOVE", "")
                                let e = br + "Completion count: " + player.cells.challenges[21] + "/" + formatWhole(tmp.cells.challenges[21].completionLimit)
                                
                                return a + br + b + br + c + br + d + e
                        },
                        unlocked(){
                                return hasUpgrade("cells", 62) || player.cells.challenges[21] >= 1
                        },
                        onEnter(){
                                layers.cells.challenges.onEnter()
                        },
                        completionLimit(){
                                return hasUpgrade("or", 13) || player.an.unlocked ? 4 : 3
                        },
                        countsAs: [],
                }, // inChallenge("cells", 21) hasChallenge("cells", 21)
        },
        buyables: {
                rows: 10,
                cols: 5,
                11: {
                        title: "Omnipotent",
                        cost(){
                                let amt = getBuyableAmount("cells", 11)
                                let exp = amt.pow(1.05)
                                let base = new Decimal(10)
                                let init = new Decimal(10)
                                if (hasUpgrade("t", 33))        base = new Decimal(9.9)
                                if (hasUpgrade("cells", 21))    base = new Decimal(9.8)
                                if (hasUpgrade("cells", 22))    base = new Decimal(9.7)
                                if (hasUpgrade("cells", 23))    base = new Decimal(9.6)
                                if (hasUpgrade("cells", 24))    base = new Decimal(9.5)
                                if (hasUpgrade("cells", 25))    base = new Decimal(player.extremeMode ? 9.4 : 9.42)
                                if (hasUpgrade("cells", 31))    base = new Decimal(player.extremeMode ? 9.2 : 9.34)
                                if (hasUpgrade("cells", 32))    base = new Decimal(player.extremeMode ? 9.05 : 9.25)
                                if (hasUpgrade("cells", 33))    base = new Decimal(player.extremeMode ? 8.85 : 9.19)
                                if (hasUpgrade("cells", 34))    base = new Decimal(player.extremeMode ? 8.69 : 9.12)
                                if (hasUpgrade("cells", 35))    base = new Decimal(player.extremeMode ? 8.55 : 9.1)
                                if (hasUpgrade("cells", 41))    base = new Decimal(player.extremeMode ? 8.5 : 9.04)
                                if (hasUpgrade("cells", 42))    base = new Decimal(player.extremeMode ? 8.5 : 9)
                                if (hasMilestone("cells", 20))  init = decimalOne
                                return init.times(base.pow(exp))
                        },
                        unlocked(){
                                return true
                        },
                        maxAfford(){
                                let init = new Decimal(10)
                                if (hasMilestone("cells", 20)) init = decimalOne
                                let pts = player.cells.stem_cells.points
                                if (pts.lt(init)) return decimalZero
                                let base = new Decimal(10)
                                if (hasUpgrade("t", 33))        base = new Decimal(9.9)
                                if (hasUpgrade("cells", 21))    base = new Decimal(9.8)
                                if (hasUpgrade("cells", 22))    base = new Decimal(9.7)
                                if (hasUpgrade("cells", 23))    base = new Decimal(9.6)
                                if (hasUpgrade("cells", 24))    base = new Decimal(9.5)
                                if (hasUpgrade("cells", 25))    base = new Decimal(player.extremeMode ? 9.4 : 9.42)
                                if (hasUpgrade("cells", 31))    base = new Decimal(player.extremeMode ? 9.2 : 9.34)
                                if (hasUpgrade("cells", 32))    base = new Decimal(player.extremeMode ? 9.05 : 9.25)
                                if (hasUpgrade("cells", 33))    base = new Decimal(player.extremeMode ? 8.85 : 9.19)
                                if (hasUpgrade("cells", 34))    base = new Decimal(player.extremeMode ? 8.69 : 9.12)
                                if (hasUpgrade("cells", 35))    base = new Decimal(player.extremeMode ? 8.55 : 9.1)
                                if (hasUpgrade("cells", 41))    base = new Decimal(player.extremeMode ? 8.5 : 9.04)
                                if (hasUpgrade("cells", 42))    base = new Decimal(player.extremeMode ? 8.5 : 9)
                                return pts.div(init).log(base).root(1.05).plus(1).floor()
                        },
                        canAfford:() => player.cells.stem_cells.points.gte(tmp.cells.buyables[11].cost),
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.cells
                                let data2 = data.stem_cells
                                let id = 11

                                let ma = tmp.cells.buyables[id].maxAfford
                                let canBulk = hasMilestone("cells", 37) || hasMilestone("t", 3) || player.or.milestone2Ever
                                let up = canBulk || player.easyMode ? ma.sub(data.buyables[id]).max(1) : 1
                                data.buyables[id] = data.buyables[id].plus(up)
                                if (!hasMilestone("cells", 29)) {
                                        data2.points = data2.points.sub(tmp.cells.buyables[id].cost)
                                }
                        },
                        baseConstant(){
                                if (hasMilestone("an", 35)) return tmp.tokens.buyables[101].effect.max(1)
                                let ret = new Decimal(9)

                                if (inChallenge("cells", 11))   ret = ret.sub(tmp.cells.challenges[11].challengeEffect)
                                if (hasMilestone("cells", 33))  ret = ret.plus(tmp.cells.milestones[33].effect)
                                if (hasMilestone("cells", 50))  ret = ret.plus(tmp.tokens.buyables[63].effect)
                                if (hasMilestone("t", 7) && !hasMilestone("nu", 7)) {
                                                                ret = ret.plus(getBuyableAmount("cells", 13).cbrt().times(.05))
                                }
                                if (hasMilestone("t", 12)) {
                                        let per = player.extremeMode ? .001 * layerChallengeCompletions("cells") : .03
                                        if (hasUpgrade("t", 94) && !player.extremeMode) per += .02
                                                                ret = ret.plus(per * player.t.milestones.length)
                                }
                                if (hasMilestone("t", 15)) {
                                        let per = player.extremeMode ? .021 : .013
                                                                ret = ret.plus(per * player.t.upgrades.length)
                                }
                                                                ret = ret.plus(tmp.tokens.buyables[101].effect)
                                if (hasUpgrade("t", 133))       ret = ret.plus(player.tokens.tokens2.total.times(.002))
                                if (hasUpgrade("cells", 64))    ret = ret.plus(.022 * player.cells.upgrades.length)
                                if (hasUpgrade("sci", 531))     ret = ret.plus(.01 * tmp.sci.upgrades.dnaUpgradesLength)

                                return ret
                        },
                        base(){
                                if (player.cells.challenges[21] >= 0 && inChallenge("cells", 21)) return decimalOne
                                if (hasMilestone("ch", 18)) return tmp.cells.buyables[11].baseConstant
                                return player.cells.points.max(10).log10().log10().plus(tmp.cells.buyables[11].baseConstant)
                        },
                        effect(){
                                return tmp.cells.buyables[11].base.pow(getBuyableAmount("cells", 11))
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.cells.buyables[11]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.cells.buyables[11].effect) + " to Stem Cell gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("cells", 11)) + " Stem Cells</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.cells.buyables[11].baseConstant, 3) + "+log10(log10(Cells)^x<br>" 
                                if (hasMilestone("ch", 18)) eformula = eformula.replace("+log10(log10(Cells)", "")
                                if (hasMilestone("an", 35)) eformula = "Up Quark effect^x<br>"
                                eformula += format(tmp.cells.buyables[11].base, 3) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "10*10^(x<sup>1.05</sup>)" 
                                if (hasMilestone("cells", 20))  cost2 = cost2.slice(3,)
                                let base = new Decimal(10)
                                if (hasUpgrade("t", 33))        base = new Decimal(9.9)
                                if (hasUpgrade("cells", 21))    base = new Decimal(9.8)
                                if (hasUpgrade("cells", 22))    base = new Decimal(9.7)
                                if (hasUpgrade("cells", 23))    base = new Decimal(9.6)
                                if (hasUpgrade("cells", 24))    base = new Decimal(9.5)
                                if (hasUpgrade("cells", 25))    base = new Decimal(player.extremeMode ? 9.4 : 9.42)
                                if (hasUpgrade("cells", 31))    base = new Decimal(player.extremeMode ? 9.2 : 9.34)
                                if (hasUpgrade("cells", 32))    base = new Decimal(player.extremeMode ? 9.05 : 9.25)
                                if (hasUpgrade("cells", 33))    base = new Decimal(player.extremeMode ? 8.85 : 9.19)
                                if (hasUpgrade("cells", 34))    base = new Decimal(player.extremeMode ? 8.69 : 9.12)
                                if (hasUpgrade("cells", 35))    base = new Decimal(player.extremeMode ? 8.55 : 9.1)
                                if (hasUpgrade("cells", 41))    base = new Decimal(player.extremeMode ? 8.5 : 9.04)
                                if (hasUpgrade("cells", 42))    base = new Decimal(player.extremeMode ? 8.5 : 9)
                                cost2 = cost2.replace("10^", formatWhole(base) + "^")
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                12: {
                        title: "Totipotent",
                        cost(){
                                let amt = getBuyableAmount("cells", 12)
                                let exp = amt.pow(1.1)
                                if (hasMilestone("ch", 14)) exp = amt.pow(1.08)
                                let base = new Decimal(1e10)
                                let init = new Decimal(1e28)
                                if (hasMilestone("cells", 27)) init = decimalOne
                                if (hasMilestone("cells", 28)) base = new Decimal(1e9)
                                if (hasMilestone("cells", 45)) base = new Decimal(5e8)
                                if (hasMilestone("cells", 46)) base = new Decimal(3e8)
                                if (hasMilestone("cells", 47)) base = new Decimal(1e8)
                                if (hasMilestone("ch", 14))    base = new Decimal(1e9)
                                if (hasMilestone("nu", 10)) {
                                        base = new Decimal(1e23)
                                        exp = amt.pow(1.05)
                                }
                                if (hasUpgrade("nu", 15))      base = new Decimal(1e21)
                                return init.times(base.pow(exp))
                        },
                        unlocked(){
                                return hasUpgrade("cells", 214)
                        },
                        canAfford:() => player.cells.stem_cells.points.gte(tmp.cells.buyables[12].cost),
                        maxAfford(){
                                let init = new Decimal(10)
                                if (hasMilestone("cells", 27)) init = decimalOne
                                let pts = player.cells.stem_cells.points
                                if (pts.lt(init)) return decimalZero
                                let base = new Decimal(1e10)
                                if (hasMilestone("cells", 28)) base = new Decimal(1e9)
                                if (hasMilestone("cells", 45)) base = new Decimal(5e8)
                                if (hasMilestone("cells", 46)) base = new Decimal(3e8)
                                if (hasMilestone("cells", 47)) base = new Decimal(1e8)
                                let exp = 1.1
                                if (hasMilestone("ch", 14)) {
                                        exp = 1.08
                                        base = new Decimal(1e9)
                                }
                                if (hasMilestone("nu", 10)) {
                                        base = new Decimal(1e23)
                                        exp = 1.05
                                }
                                if (hasUpgrade("nu", 15))       base = new Decimal(1e21)
                                return pts.div(init).log(base).root(exp).plus(1).floor()
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.cells
                                let data2 = data.stem_cells
                                let id = 12

                                let ma = tmp.cells.buyables[id].maxAfford
                                let canBulk = hasMilestone("cells", 48) || hasMilestone("t", 3) || player.or.milestone3Ever
                                let up = canBulk || player.easyMode ? ma.sub(data.buyables[id]).max(1) : 1
                                data.buyables[id] = data.buyables[id].plus(up)
                                if (!hasMilestone("t", 23)) {
                                        data2.points = data2.points.sub(tmp.cells.buyables[id].cost)
                                }
                        },
                        base(){
                                if (player.cells.challenges[21] >= 1 && inChallenge("cells", 21)) return decimalOne
                                let ret = player.cells.stem_cells.points.max(10).log10()

                                if (hasMilestone("an", 15)) return ret

                                if (hasMilestone("cells", 41)) ret = ret.div(Math.log10(6))
                                if (hasMilestone("cells", 42)) ret = ret.times(Math.log10(6)/Math.log10(4))
                                if (hasMilestone("cells", 43)) ret = ret.times(Math.log10(4)/Math.log10(Math.E))
                                if (hasMilestone("cells", 44)) ret = ret.times(Math.log10(Math.E)/Math.log10(2))

                                return ret
                        },
                        effect(){
                                let amt = getBuyableAmount("cells", 12)
                                return tmp.cells.buyables[12].base.pow(amt)
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.cells.buyables[12]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.cells.buyables[12].effect) + " to Stem Cell gain</b><br>"
                                        if (player.extremeMode) eff2 = eff2.replace("gain", "and DNA Science gain")
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("cells", 12)) + " Stem Cells</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(Stem Cells)^x<br>" + format(tmp.cells.buyables[12].base) + "^x"
                                if (!hasMilestone("an", 15)) {
                                        if (hasMilestone("cells", 41)) eformula = eformula.replace("10", "6")
                                        if (hasMilestone("cells", 42)) eformula = eformula.replace("6", "4")
                                        if (hasMilestone("cells", 43)) eformula = eformula.replace("log4", "ln")
                                        if (hasMilestone("cells", 44)) eformula = eformula.replace("ln", "log2")
                                }

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "2e28*1e10^(x<sup>1.1</sup>)" 
                                if (hasMilestone("cells", 27)) cost2 = cost2.slice(5,)
                                if (hasMilestone("cells", 28)) cost2 = cost2.replace("10", "9")
                                if (hasMilestone("cells", 45)) cost2 = cost2.replace("1e9", "5e8")
                                if (hasMilestone("cells", 46)) cost2 = cost2.replace("5e8", "3e8")
                                if (hasMilestone("cells", 47)) cost2 = cost2.replace("3e8", "1e8")
                                if (hasMilestone("ch", 14)) {
                                        cost2 = cost2.replace("1e8", "1e9")
                                        cost2 = cost2.replace("1.1", "1.08")
                                }
                                if (hasMilestone("nu", 10)) cost2 = cost2.replace("1e9^(x<sup>1.08</sup>)", "1e23^(x<sup>1.05</sup>)")
                                if (hasUpgrade("nu", 15)) cost2 = cost2.replace("23", "21")
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                if (!player.extremeMode) return br + end
                                return br + end
                        },
                },
                13: {
                        title: "Pluripotent",
                        cost(){
                                let amt = getBuyableAmount("cells", 13)
                                let exp = amt.pow(1.1)
                                let base = new Decimal(1e30)
                                if (hasUpgrade("t", 85))        base = new Decimal(1e28)
                                if (hasUpgrade("t", 91))        base = new Decimal(1e27)
                                if (hasUpgrade("t", 102))       base = new Decimal(1e25)
                                if (hasMilestone("t", 16))      base = new Decimal(5e22)
                                if (hasUpgrade("t", 103))       base = new Decimal(2e21)
                                if (hasUpgrade("t", 104))       base = new Decimal(2e20)
                                if (hasUpgrade("t", 105))       base = new Decimal(1e20)
                                if (player.extremeMode) {
                                        if (hasUpgrade("cells", 23)) {
                                                                base = new Decimal(1e19)
                                        }
                                }
                                if (hasMilestone("nu", 4))      base = new Decimal(1e19)

                                if (hasMilestone("ch", 18))     exp = amt.pow(1.09)
                                let init = new Decimal(1e100)
                                if (hasMilestone("t", 8)) init = decimalOne
                                return init.times(base.pow(exp))
                        },
                        unlocked(){
                                return hasUpgrade("t", 72)
                        },
                        canAfford:() => player.cells.stem_cells.points.gte(tmp.cells.buyables[13].cost),
                        maxAfford(){
                                let init = new Decimal(1e100)
                                if (hasMilestone("t", 8)) init = decimalOne
                                let pts = player.cells.stem_cells.points
                                if (pts.lt(init)) return decimalZero
                                let base = new Decimal(1e30)
                                if (hasUpgrade("t", 85))        base = new Decimal(1e28)
                                if (hasUpgrade("t", 91))        base = new Decimal(1e27)
                                if (hasUpgrade("t", 102))       base = new Decimal(1e25)
                                if (hasMilestone("t", 16))      base = new Decimal(5e22)
                                if (hasUpgrade("t", 103))       base = new Decimal(2e21)
                                if (hasUpgrade("t", 104))       base = new Decimal(2e20)
                                if (hasUpgrade("t", 105))       base = new Decimal(1e20)
                                if (player.extremeMode) {
                                        if (hasUpgrade("cells", 23)) {
                                                                base = new Decimal(1e19)
                                        }
                                }
                                if (hasMilestone("nu", 4))      base = new Decimal(1e19)

                                let exp = 1.1 
                                if (hasMilestone("ch", 18))     exp = 1.09
                                return pts.div(init).log(base).root(exp).plus(1).floor()
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.cells
                                let data2 = data.stem_cells
                                let id = 13

                                let ma = tmp.cells.buyables[id].maxAfford
                                let up = hasUpgrade("t", 73) || player.easyMode ? ma.sub(data.buyables[id]).max(1) : 1
                                data.buyables[id] = data.buyables[id].plus(up)
                                if (!hasMilestone("t", 23)) {
                                        data2.points = data2.points.sub(tmp.cells.buyables[id].cost)
                                }
                        },
                        base(){
                                if (player.cells.challenges[21] >= 2 && inChallenge("cells", 21)) return decimalOne
                                let ret = tmp.t.effectAmt.max(10).log10()

                                if (hasMilestone("an", 15)) return ret

                                if (hasUpgrade("t", 81))        ret = ret.times(Math.log(10)/Math.log(4))
                                if (hasUpgrade("t", 82))        ret = ret.times(2)

                                return ret
                        },
                        effect(){
                                let amt = getBuyableAmount("cells", 13)
                                return tmp.cells.buyables[13].base.pow(amt)
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.cells.buyables[13]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.cells.buyables[13].effect) + " to Stem Cell gain</b><br>"
                                        if (hasUpgrade("sci", 553)) eff2 = eff2.replace("gain", "and DNA gain")
                                        if (hasUpgrade("t", 85)) eff2 = eff2.replace(" and", ", DNA Science, and")
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("cells", 13)) + " Stem Cells</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(Tissues XXIX)^x<br>" + format(tmp.cells.buyables[13].base) + "^x"
                                if (hasUpgrade("t", 81)) eformula = eformula.replace("log10", "log4")
                                if (hasUpgrade("t", 82)) eformula = eformula.replace("log4", "log2")
                                if (hasMilestone("an", 15)) {
                                        eformula = eformula.replace("log2", "log10")
                                        eformula = eformula.replace("Tissues XXIX", "Tissues")
                                }

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e100*1e30^(x<sup>1.1</sup>)" 
                                if (hasMilestone("t", 8))       cost2 = cost2.slice(6,)
                                if (hasUpgrade("t", 85))        cost2 = cost2.replace("30", "28")
                                if (hasUpgrade("t", 91))        cost2 = cost2.replace("28", "27")
                                if (hasUpgrade("t", 102))       cost2 = cost2.replace("27", "25")
                                if (hasMilestone("t", 16))      cost2 = cost2.replace("1e25", "5e22")
                                if (hasUpgrade("t", 103))       cost2 = cost2.replace("5e22", "2e21")
                                if (hasUpgrade("t", 104))       cost2 = cost2.replace("21", "20")
                                if (hasUpgrade("t", 105))       cost2 = cost2.replace("2", "1")
                                if (player.extremeMode) {
                                        if (hasUpgrade("cells", 23)) {
                                                                cost2 = cost2.replace("20", "19")
                                        }
                                }
                                if (hasMilestone("nu", 4))      cost2 = cost2.replace("20", "19")
                                if (hasMilestone("ch", 18))     cost2 = cost2.replace("1.1", "1.09")
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                21: {
                        title: "Multipotent",
                        cost(){
                                let amt = getBuyableAmount("cells", 21)
                                let exp = amt.pow(1.05)
                                let base = new Decimal(1e40)
                                let init = new Decimal("1e1120e3")
                                if (hasUpgrade("t", 152)) {
                                        init = decimalOne
                                        base = new Decimal(1e60)
                                }
                                if (hasUpgrade("t", 153)) base = new Decimal(1e50)
                                if (hasUpgrade("t", 154)) base = new Decimal(1e40)
                                if (player.an.achActive[14] && hasAchievement("an", 14)) base = new Decimal(1e39)
                                if (hasAchievement("an", 24)) base = new Decimal(1e38)
                                return init.times(base.pow(exp))
                        },
                        unlocked(){
                                return hasUpgrade("t", 142)
                        },
                        canAfford:() => player.cells.stem_cells.points.gte(tmp.cells.buyables[21].cost),
                        maxAfford(){
                                let init = new Decimal("1e1120e3")
                                if (hasUpgrade("t", 152)) init = decimalOne
                                let pts = player.cells.stem_cells.points
                                if (pts.lt(init)) return decimalZero
                                let base = new Decimal(1e40)
                                if (hasUpgrade("t", 152)) base = new Decimal(1e60)
                                if (hasUpgrade("t", 153)) base = new Decimal(1e50)
                                if (hasUpgrade("t", 154)) base = new Decimal(1e40)
                                if (player.an.achActive[14] && hasAchievement("an", 14)) base = new Decimal(1e39)
                                if (hasAchievement("an", 24)) base = new Decimal(1e38)
                                return pts.div(init).log(base).root(1.05).plus(1).floor()
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.cells
                                let data2 = data.stem_cells
                                let id = 21

                                let ma = tmp.cells.buyables[id].maxAfford
                                let up = hasMilestone("t", 23) || player.easyMode ? ma.sub(data.buyables[id]).max(1) : 1
                                data.buyables[id] = data.buyables[id].plus(up)
                                if (!hasMilestone("t", 23)) {
                                        data2.points = data2.points.sub(tmp.cells.buyables[id].cost)
                                }
                        },
                        base(){
                                if (player.cells.challenges[21] >= 3 && inChallenge("cells", 21)) return decimalOne
                                return player.tokens.tokens2.total.max(1)
                        },
                        effect(){
                                let amt = getBuyableAmount("cells", 21)
                                return tmp.cells.buyables[21].base.pow(amt)
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.cells.buyables[21]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.cells.buyables[21].effect) + " to Stem Cell gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("cells", 21)) + " Stem Cells</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "Tokens II^x<br>" + format(tmp.cells.buyables[21].base) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e1,120,000*1e40^(x<sup>1.05</sup>)" 
                                if (hasUpgrade("t", 152)) cost2 = "1e60^(x<sup>1.05</sup>)"
                                let base = "1e60"
                                if (hasUpgrade("t", 153)) base = "1e50"
                                if (hasUpgrade("t", 154)) base = "1e40"
                                if (player.an.achActive[14] && hasAchievement("an", 14)) base = "1e39"
                                if (hasAchievement("an", 24)) base = "1e38"
                                cost2 = cost2.replace("1e60", base)
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                22: {
                        title: "Oligopotent",
                        cost(){
                                let amt = getBuyableAmount("cells", 22)
                                let exp = amt.pow(1.05)
                                let base = new Decimal(1e100)
                                if (hasUpgrade("or", 13))       base = new Decimal(1e90)
                                if (hasMilestone("an", 25))     base = new Decimal(1e80)
                                if (hasUpgrade("an", 34))       base = new Decimal(1e75)
                                if (hasUpgrade("ch", 24))       base = new Decimal(1e70)
                                if (!player.an.achActive[14] && hasAchievement("an", 14)) base = new Decimal(1e69)
                                if (hasMilestone("nu", 11))     base = new Decimal(1e55)
                                let init = new Decimal("1e5283e3")
                                if (hasUpgrade("or", 114)) init = decimalOne
                                return init.times(base.pow(exp))
                        },
                        unlocked(){
                                return player.cells.challenges[21] >= 3
                        },
                        canAfford:() => player.cells.stem_cells.points.gte(tmp.cells.buyables[22].cost),
                        maxAfford(){
                                let init = new Decimal("1e5283e3")
                                if (hasUpgrade("or", 114)) init = decimalOne
                                let pts = player.cells.stem_cells.points
                                if (pts.lt(init)) return decimalZero
                                let base = new Decimal(1e100)
                                if (hasUpgrade("or", 13))       base = new Decimal(1e90)
                                if (hasMilestone("an", 25))     base = new Decimal(1e80)
                                if (hasUpgrade("an", 34))       base = new Decimal(1e75)
                                if (hasUpgrade("ch", 24))       base = new Decimal(1e70)
                                if (!player.an.achActive[14] && hasAchievement("an", 14)) base = new Decimal(1e69)
                                if (hasMilestone("nu", 11))     base = new Decimal(1e55)
                                return pts.div(init).log(base).root(1.05).plus(1).floor()
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.cells
                                let data2 = data.stem_cells
                                let id = 22

                                let ma = tmp.cells.buyables[id].maxAfford
                                let up = hasMilestone("t", 23) || player.easyMode ? ma.sub(data.buyables[id]).max(1) : 1
                                data.buyables[id] = data.buyables[id].plus(up)
                                if (!hasMilestone("t", 23)) {
                                        data2.points = data2.points.sub(tmp.cells.buyables[id].cost)
                                }
                        },
                        base(){
                                if (player.cells.challenges[21] >= 4 && inChallenge("cells", 21)) return decimalOne
                                if (hasUpgrade("an", 24))       return player.or.contaminants.points.max(10).log10()
                                if (hasMilestone("an", 15))     return player.or.air.points.max(10).log10()
                                if (hasUpgrade("or", 234))      return Decimal.pow(3, player.cells.challenges[21])
                                return new Decimal(player.cells.challenges[21]).plus(1)
                        },
                        effect(){
                                let amt = getBuyableAmount("cells", 22)
                                return tmp.cells.buyables[22].base.pow(amt)
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.cells.buyables[22]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.cells.buyables[22].effect) + " to Stem Cell gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("cells", 22)) + " Stem Cells</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "(Tertiary Completions + 1)^x<br>" + format(tmp.cells.buyables[22].base) + "^x"
                                if (hasUpgrade("or", 234)) eformula = eformula.replace("Tertiary Completions + 1", "3^Tertiary Completions")
                                if (hasMilestone("an", 15)) eformula = eformula.replace("(3^Tertiary Completions)", "log10(Air)")
                                if (hasUpgrade("an", 24)) eformula = eformula.replace("Air", "Contaminants")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e5,283,000*1e100^(x<sup>1.05</sup>)" 
                                if (hasUpgrade("or", 114)) cost2 = "1eBASE^(x<sup>1.05</sup>)"
                                let base = "100"
                                if (hasUpgrade("or", 13)) base = "90"
                                if (hasMilestone("an", 25)) base = "80"
                                if (hasUpgrade("an", 34)) base = "75"
                                if (hasUpgrade("ch", 24)) base = "70"
                                if (!player.an.achActive[14] && hasAchievement("an", 14)) base = "69"
                                if (hasMilestone("nu", 11)) base = "55"
                                cost2 = cost2.replace("BASE", base)
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                111: {
                        title: "Sinusoidal (Mu)",
                        cost(){
                                let amt = getBuyableAmount("cells", 111)
                                let exp = amt.pow(1.1)
                                let base = new Decimal(1.1)
                                let init = new Decimal(3)
                                return init.times(base.pow(exp))
                        },
                        unlocked(){
                                return true
                        },
                        canAfford:() => player.cells.mu.points.gte(tmp.cells.buyables[111].cost),
                        maxAfford(){
                                let init = new Decimal(3)
                                let base = new Decimal(1.1)
                                let exp2 = new Decimal(1.1)
                                let amt = player.cells.mu.points
                                if (amt.lt(init)) return decimalZero
                                return amt.div(init).log(base).root(exp2).plus(1).floor()
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.cells
                                let ma = tmp.cells.buyables[111].maxAfford
                                let max = hasMilestone("cells", 12) || player.easyMode ? ma.sub(data.buyables[111]).max(1) : 1
                                data.buyables[111] = data.buyables[111].plus(max)
                                if (!hasMilestone("cells", 12) && !hasMilestone("t", 1)) {
                                        data.mu.points = data.mu.points.sub(tmp.cells.buyables[111].cost)
                                }
                        },
                        effect(){
                                let amt = getBuyableAmount("cells", 111)
                                if (amt.eq(0)) return decimalOne
                                if (hasUpgrade("cells", 115))   return amt.pow(player.cells.milestones.length)
                                if (hasMilestone("cells", 13))  return amt.pow(player.cells.milestones.length ** .5)
                                let init = amt
                                if (hasUpgrade("cells", 114)) init = init.times(2)
                                return init.plus(amt.div(20).sin().times(30))
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.cells.buyables[111]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.cells.buyables[111].effect) + " to Mu gain</b><br>"
                                        if (hasUpgrade("sci", 545)) eff2 = eff2.replace("Mu", "Mu and DNA Science")
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("cells", 111)) + " Mu</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "x+sin(x/20)*30<br>"
                                if (hasUpgrade("cells", 114)) eformula = eformula.replace("x", "2x")
                                if (hasMilestone("cells", 13)) eformula = "x^sqrt(Cell milestones)"
                                if (hasUpgrade("cells", 115)) eformula = "x^Cell milestones"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "3*1.1^(x<sup>1.1</sup>)" 
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                112: {
                        title: "Squeeze (Mu)",
                        cost(){
                                let amt = getBuyableAmount("cells", 112)
                                let exp = amt.pow(1.1)
                                let base = new Decimal(1e3)
                                let init = new Decimal(1e15)
                                if (hasUpgrade("sci", 541)) exp = amt.pow(1.09)
                                return init.times(base.pow(exp))
                        },
                        unlocked(){
                                return hasUpgrade("cells", 113)
                        },
                        canAfford:() => player.cells.mu.points.gte(tmp.cells.buyables[112].cost),
                        maxAfford(){
                                let init = new Decimal(1e15)
                                let base = new Decimal(1e3)
                                let exp2 = new Decimal(1.1)
                                if (hasUpgrade("sci", 541)) exp2 = new Decimal(1.09)
                                let amt = player.cells.mu.points
                                if (amt.lt(init)) return decimalZero
                                return amt.div(init).log(base).root(exp2).plus(1).floor()
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.cells
                                let ma = tmp.cells.buyables[112].maxAfford
                                let max = hasUpgrade("t", 12) || player.easyMode ? ma.sub(data.buyables[112]).max(1) : 1
                                data.buyables[112] = data.buyables[112].plus(max)
                                if (!false) {
                                        data.mu.points = data.mu.points.sub(tmp.cells.buyables[112].cost)
                                }
                        },
                        base(){
                                return player.d.points.max(10).log10()
                        },
                        effect(){
                                let amt = getBuyableAmount("cells", 112)
                                let base = tmp.cells.buyables[112].base
                                if (base.eq(1)) return decimalOne
                                if (hasUpgrade("sci", 545)) return base.times(3.321928094887362).pow(amt)
                                // 3.321928094887362 = Math.log2(10)
                                return base.pow(amt.sub(amt.div(20).sin().times(10)))
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.cells.buyables[112]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.cells.buyables[112].effect) + " to Mu gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("cells", 112)) + " Mu</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(DNA)^(x-sin(x/20)*10)<br>" + format(tmp.cells.buyables[112].base) + "^(x-sin(x/20)*10)"
                                if (hasUpgrade("sci", 545)) {
                                        eformula = eformula.replaceAll("(x-sin(x/20)*10)", "x")
                                        eformula = eformula.replace("10", "2")
                                }

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e15*1e3^(x<sup>1.1</sup>)"
                                if (hasUpgrade("sci", 541)) cost2 = "1e15*1e3^(x<sup>1.09</sup>)"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                411: {
                        title: "Prime (Iota)",
                        cost(){
                                let amt = getBuyableAmount("cells", 411)
                                let exp = amt.pow(1.1)
                                let base = new Decimal(2)
                                let init = new Decimal(3)
                                return init.times(base.pow(exp))
                        },
                        unlocked(){
                                return true
                        },
                        maxAfford(){
                                let pts = player.cells.iota.points
                                let init = new Decimal(3)
                                let base = new Decimal(2)
                                let exp = new Decimal(1.1) 
                                if (pts.lt(init)) return decimalZero
                                return pts.div(init).log(base).root(exp).plus(1).floor()
                        },
                        canAfford:() => player.cells.iota.points.gte(tmp.cells.buyables[411].cost),
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.cells
                                let ma = tmp.cells.buyables[411].maxAfford
                                let max = hasUpgrade("cells", 213) || player.easyMode ? ma.sub(data.buyables[411]).max(1) : 1
                                data.buyables[411] = data.buyables[411].plus(max)
                                if (!hasMilestone("cells", 48)) {
                                        data.iota.points = data.iota.points.sub(tmp.cells.buyables[411].cost)
                                }
                        },
                        base(){
                                let time = Math.floor(player.cells.timeInMinigame)
                                let primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61]
                                let maxTime = 61
                                let base = .8 + 1.2 * (primes.includes(time) || hasUpgrade("cells", 414))
                                if (hasUpgrade("cells", 12)) base += .3
                                if (hasMilestone("t", 1)) base = Math.max(base, 1)
                                return new Decimal(base)
                        },
                        effect(){
                                let amt = getBuyableAmount("cells", 411)
                                return tmp.cells.buyables[411].base.pow(amt)
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.cells.buyables[411]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.cells.buyables[411].effect) + " to Iota gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("cells", 411)) + " Iota</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "(2 if time = prime, .8 otherwise)^x<br>" + format(tmp.cells.buyables[411].base) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "3*2^(x<sup>1.1</sup>)" 
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                412: {
                        title: "Even (Iota)",
                        cost(){
                                let amt = getBuyableAmount("cells", 412)
                                let exp = amt.pow(1.2)
                                let base = new Decimal(2)
                                let init = new Decimal(3)
                                return init.times(base.pow(exp))
                        },
                        unlocked(){
                                return true
                        },
                        maxAfford(){
                                let pts = player.cells.iota.points
                                let init = new Decimal(3)
                                let base = new Decimal(2)
                                let exp = new Decimal(1.2) 
                                if (pts.lt(init)) return decimalZero
                                return pts.div(init).log(base).root(exp).plus(1).floor()
                        },
                        canAfford:() => player.cells.iota.points.gte(tmp.cells.buyables[412].cost),
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.cells
                                let ma = tmp.cells.buyables[412].maxAfford
                                let max = hasUpgrade("cells", 213) || player.easyMode ? ma.sub(data.buyables[412]).max(1) : 1
                                data.buyables[412] = data.buyables[412].plus(max)
                                if (!hasMilestone("cells", 48)) {
                                        data.iota.points = data.iota.points.sub(tmp.cells.buyables[412].cost)
                                }
                        },
                        base(){
                                let time = Math.floor(player.cells.timeInMinigame)
                                if (hasMilestone("cells", 38) || hasMilestone("or", 4)) time = Math.floor(player.timePlayed)
                                let base = .8 + 1.7 * ((1 - time % 2) || hasUpgrade("t", 15))
                                if (hasUpgrade("cells", 12)) base += .3
                                if (hasMilestone("t", 1)) base = Math.max(base, 1)
                                return new Decimal(base)
                        },
                        effect(){
                                let amt = getBuyableAmount("cells", 412)
                                return tmp.cells.buyables[412].base.pow(amt)
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.cells.buyables[412]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.cells.buyables[412].effect) + " to Iota gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("cells", 412)) + " Iota</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "(2.5 if time = even, .8 otherwise)^x<br>" + format(tmp.cells.buyables[412].base) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "3*2^(x<sup>1.2</sup>)" 
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                413: {
                        title: "Odd (Iota)",
                        cost(){
                                let amt = getBuyableAmount("cells", 413)
                                let exp = amt.pow(1.1)
                                let base = new Decimal(4)
                                let init = new Decimal(5)
                                return init.times(base.pow(exp))
                        },
                        unlocked(){
                                return true
                        },
                        maxAfford(){
                                let pts = player.cells.iota.points
                                let init = new Decimal(5)
                                let base = new Decimal(4)
                                let exp = new Decimal(1.1) 
                                if (pts.lt(init)) return decimalZero
                                return pts.div(init).log(base).root(exp).plus(1).floor()
                        },
                        canAfford:() => player.cells.iota.points.gte(tmp.cells.buyables[413].cost),
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.cells
                                let ma = tmp.cells.buyables[413].maxAfford
                                let max = hasUpgrade("cells", 213) || player.easyMode ? ma.sub(data.buyables[413]).max(1) : 1
                                data.buyables[413] = data.buyables[413].plus(max)
                                if (!hasMilestone("cells", 48)) {
                                        data.iota.points = data.iota.points.sub(tmp.cells.buyables[413].cost)
                                }
                        },
                        base(){
                                let time = Math.floor(player.cells.timeInMinigame)
                                if (hasMilestone("cells", 38) || hasMilestone("or", 4)) time = Math.floor(player.timePlayed)
                                let base = .8 + 1.2 * ((time % 2) || hasUpgrade("cells", 415))
                                if (hasUpgrade("cells", 12)) base += .3
                                if (hasMilestone("t", 1)) base = Math.max(1, base)
                                return new Decimal(base)
                        },
                        effect(){
                                let amt = getBuyableAmount("cells", 413)
                                return tmp.cells.buyables[413].base.pow(amt)
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.cells.buyables[413]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.cells.buyables[413].effect) + " to Iota gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("cells", 413)) + " Iota</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "(2 if time = odd, .8 otherwise)^x<br>" + format(tmp.cells.buyables[413].base) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "5*4^(x<sup>1.1</sup>)" 
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                421: {
                        title: "Slowdown",
                        unlocked(){
                                return true
                        },
                        canAfford:() => true,
                        buy(){
                                player.cells.slowTime += 5
                                if (player.shiftAlias) player.cells.slowTime = 0
                        },
                        display(){
                                let a = "Slow down the game by 100x for five (real-time) seconds"
                                let b = "Real time left: " + formatTime(player.cells.slowTime)
                                return a + br + b + br2 + br2 + "(shift-click to clear)"
                        },
                },
        },
        microtabs: {
                stem_content: {
                        "Buyables": { 
                                content: [
                                        ["buyables", [1,2,3]],
                                ],
                                unlocked(){
                                        return true
                                },
                                shouldNotify(){
                                        x = [11, 12, 13, 21, 22, 23, 31, 32, 33]
                                        for (let i = 0; i < x.length; i++){
                                                id = x[i]
                                                if (layers.cells.buyables[id] == undefined) continue
                                                if (!tmp.cells.buyables[id].unlocked) continue
                                                if (getBuyableAmount("cells", id).gt(0)) continue
                                                if (player.cells.stem_cells.points.lt(tmp.cells.buyables[id].cost)) continue
                                                return true
                                        }
                                        return false
                                },
                        },
                        "Challenges": { 
                                content: [
                                        ["display-text", "Starting a challenge resets all Stem Cell content"],
                                        ["display-text", "If Omnipotent's base is less than 0, you automatically leave the challenge"],
                                        ["challenges", [1,2,3]],
                                ],
                                unlocked(){
                                        return hasMilestone("cells", 14) || player.t.unlocked
                                },
                        },
                },
        },
        tabFormat: {
                "Upgrades": {
                        content: [
                                "main-display",
                                ["prestige-button", "", function (){ return hasMilestone("cells", 14) ? {'display': 'none'} : {}}],
                                ["display-text", function (){ return hasMilestone("cells", 14) ? "Cell gain is capped at " + format(tmp.cells.getResetGain) : ""}], 
                                ["upgrades", [1,2,3,4,5,6,7]],
                                "blank",
                                ["clickables", function(){return hasMilestone("cells", 21) || hasMilestone("or", 4) ? [] : [1]}],
                        ],
                        unlocked(){
                                return true
                        },
                },
                "Milestones": {
                        content: [
                                "main-display",
                                ["display-text", function(){
                                        return "You have done " + formatWhole(player.cells.times) + " Cell resets"
                                }],
                                "milestones",
                        ],
                        unlocked(){
                                return true
                        },
                },
                "Mu": {
                        content: [
                                "main-display",
                                ["secondary-display", "mu"],
                                ["display-text", function(){
                                        return "You are getting " + format(tmp.cells.mu.getResetGain) + " Mu per second"
                                }],
                                ["upgrades", [11, 12]],
                                ["buyables", [11]],
                        ],
                        unlocked(){
                                return player.cells.currentMinigame == 11 && !(hasMilestone("cells", 21) || hasMilestone("or", 4))
                        },
                },
                "Lambda": {
                        content: [
                                "main-display",
                                ["secondary-display", "lambda"],
                                ["display-text", function(){
                                        return "You are getting " + format(tmp.cells.lambda.getResetGain) + " Lambda per second"
                                }],
                                ["upgrades", [21, 22]],
                                ["clickables", [21]],
                        ],
                        unlocked(){
                                return player.cells.currentMinigame == 12 && !(hasMilestone("cells", 21) || hasMilestone("or", 4))
                        },
                },
                "Kappa": {
                        content: [
                                "main-display",
                                ["secondary-display", "kappa"],
                                ["display-text", function(){
                                        return "You are getting " + format(tmp.cells.kappa.getResetGain) + " Kappa per second"
                                }],
                                ["bar", "kappa"],
                                ["upgrades", [31, 32]],
                        ],
                        unlocked(){
                                return player.cells.currentMinigame == 13 && !(hasMilestone("cells", 21) || hasMilestone("or", 4))
                        },
                },
                "Iota": {
                        content: [
                                "main-display",
                                ["secondary-display", "iota"],
                                ["display-text", function(){
                                        return "You have spent " + formatTime(player.cells.timeInMinigame) + " in Iota"
                                }],
                                ["display-text", function(){
                                        return "You are getting " + format(tmp.cells.iota.getResetGain) + " Iota per second"
                                }],
                                ["upgrades", [41, 42]],
                                ["buyables", [41, 42]],
                        ],
                        unlocked(){
                                return player.cells.currentMinigame == 14 && !(hasMilestone("cells", 21) || hasMilestone("or", 4))
                        },
                },
                "Stem": {
                        content: [
                                "main-display",
                                ["secondary-display", "stem_cells"],
                                ["display-text", function(){
                                        return "Currently you are gaining " + format(tmp.cells.stem_cells.getResetGain) + " Stem Cells/s"
                                }],
                                ["microtabs", "stem_content"],
                        ],
                        unlocked(){
                                return hasUpgrade("cells", 13) || player.t.unlocked
                        },
                        shouldNotify(){
                                x = [11, 12, 13, 21, 22, 23, 31, 32, 33]
                                for (let i = 0; i < x.length; i++){
                                        id = x[i]
                                        if (layers.cells.buyables[id] == undefined) continue
                                        if (!tmp.cells.buyables[id].unlocked) continue
                                        if (getBuyableAmount("cells", id).gt(0)) continue
                                        if (player.cells.stem_cells.points.lt(tmp.cells.buyables[id].cost)) continue
                                        return true
                                }
                                if (player.cells.activeChallenge != undefined) {
                                        if (canCompleteChallenge("cells", player.cells.activeChallenge)) return true
                                }
                                return false
                        },
                },
                "Info": {
                        content: [
                                "main-display",
                                ["display-text", function(){
                                        let a1 = "Initial Cell gain: (DNA/1e582)<sup>1/1,960</sup>"
                                        let a2 = "Current Cell gain: (DNA/1e582)<sup>1/" + formatWhole(tmp.cells.getGainExp.pow(-1))
                                        let a = a1 + br + a2 + "</sup>"
                                        if (player.extremeMode) a = a.replaceAll("582", "1228")
                                        a += br2 + "Cell effect: (Cells+9)<sup>" + format(tmp.cells.effectExp) + "</sup>"
                                        let b = "Cell resets (in order) DNA content, Amino Acid content, Life buyables and gems."
                                        b += br + "Note that Anti- challenges are never reset."
                                        let c = "For unlocking Cells permanently keep Dilation completions<br>add 10 to base Life Point gain, and gems from C55 and easier challenges."
                                        if (player.extremeMode) c = c.replace("completions,", "completions, protein science upgrades,")
                                        c += br + "Additionally, you permanently autobuy tokens and Radio Waves."

                                        let part1 = a + br2 + b + br2 + c

                                        if (!hasChallenge("l", 102) && !hasUpgrade("or", 135)) return part1

                                        let d = "Entering a minigame unlocks a tab for said minigame."
                                        let e = "The only thing kept upon resetting a minigame is upgrades, unless otherwise stated."
                                        let f = "Initially there is a 60 second timer for the minigame,<br>at which point your progress is reset and you are kicked out of the tab."
                                        let g = "Your total point gain in each minigame is kept track of, and the basis of some upgrades."

                                        let part3 = part1 + (player.or.unlocked ? "" : br2 + d + br + e + br + f + br + g)

                                        if (!hasUpgrade("cells", 13)) return part3

                                        let h = "log10(10+Stem cells) multiplies Cells and all minigame gain"

                                        if (player.extremeMode) h += br2 + "Single-Strand DNA-binding protein effect on Stem Cell gain is disabled while in Secondary if you have at least 10 Secondary completions"

                                        if (player.cells.challenges[21] == 0) return part3 + br2 + h

                                        let tertReward = br2 + "Current Tertiary rewards:" + br
                                        if (player.cells.challenges[21] >= 1) {
                                                tertReward += "1: Per Cell upgrade log10(log10(Points)) multiplies DNA gain" + br
                                        }
                                        if (player.cells.challenges[21] >= 2) {
                                                tertReward += "2: Per completion log10(9+log10(10+Best Tissues)) multiplies Tissue gain" + br
                                        }
                                        if (player.cells.challenges[21] >= 3) {
                                                tertReward += "3: Unlock Heart and another Cell buyable" + br
                                        }
                                        if (player.cells.challenges[21] >= 4) {
                                                tertReward += "4: Tokens II buyables' cost is ceil(x<sup>.9</sup>)" + br
                                        }
                                        tertReward += br + "Note that Tertiary completions are never reset"

                                        let part4 = part3 + tertReward

                                        return part4
                                }],
                        ],
                        unlocked(){
                                return true
                        },
                },
        },
        onPrestige(){
                let add = 1
                if (hasMilestone("t", 1)) add *= 3
                if (hasMilestone("or", 1)) add *= 3
                if (player.easyMode) add *= 2
                player.cells.times += add
                player.cells.time = 0
                if (player.cells.milestone2Best != 0) {
                        player.cells.milestone2Best = Math.max(player.cells.milestone2Best, player.cells.times)
                }
        },
        resetsNothing(){
                return hasUpgrade("cells", 24)
        },
        doReset(layer){
                if (layer != "cells") return
                player.cells.time = 0

                /*
                1. DNA content
                2. Amino Acid content
                3. Life content
                */

                let data1 = player.d
                let data2 = player.a
                let data3 = player.l

                // 1 DNA content
                if (!player.nu.unlocked) {
                        let dKeptMilestones = 0
                        if (hasMilestone("cells", 1)) dKeptMilestones += player.cells.times
                        if (!false) {
                                sortStrings(data1.milestones)
                                data1.milestones = data1.milestones.slice(0, dKeptMilestones)
                        }

                        let dKeptUpgrades = 0
                        if (hasMilestone("cells", 5)) dKeptUpgrades += player.cells.times
                        if (!false) {
                                sortStrings(data1.upgrades)
                                data1.upgrades = data1.upgrades.slice(0, dKeptUpgrades)
                        }

                        let dKeptTimes = 0
                        if (hasMilestone("cells", 3)) dKeptTimes += player.cells.times

                        if (!false) data1.times = Math.min(data1.times, dKeptTimes)
                }

                data1.points = decimalZero
                data1.best = decimalZero
                data1.total = decimalZero

                // 2 Amino Acid content
                if (!false) {
                        let aKeptMilestones = 0
                        if (hasMilestone("d", 2)) aKeptMilestones += 3 * player.d.times
                        if (!false){
                                sortStrings(data2.milestones)
                                data2.milestones = data2.milestones.slice(0, aKeptMilestones)
                        }

                        data2.buyables[11] = decimalZero
                        data2.buyables[12] = decimalZero
                        data2.buyables[13] = decimalZero
                        data2.buyables[21] = decimalZero
                        data2.buyables[22] = decimalZero
                        data2.buyables[23] = decimalZero
                        data2.buyables[31] = decimalZero
                        data2.buyables[32] = decimalZero
                        data2.buyables[33] = decimalZero

                        let aKeptUpgrades = 0
                        if (hasMilestone("d", 7)) aKeptUpgrades += player.d.times * 2
                        if (!false) {
                                sortStrings(data2.upgrades)
                                data2.upgrades = data2.upgrades.slice(0, aKeptUpgrades)
                        }

                        if (!hasMilestone("d", 5)) data2.times = 0
                }

                data2.points = decimalZero
                data2.best = decimalZero
                data2.total = decimalZero
                data2.protein.best = decimalZero
                data2.protein.total = decimalZero
                data2.protein.points = decimalZero

                // 3 Life content
                if (!false) {
                        let lKeptMilestones = 0
                        if (hasMilestone("a", 1)) lKeptMilestones += 4 * player.a.times
                        if (!false) {
                                sortStrings(data3.milestones)
                                data3.milestones = data3.milestones.slice(0, lKeptMilestones)
                        }

                        let startingBuyableAmount = decimalZero
                        if (hasMilestone("cells", 1)) startingBuyableAmount = new Decimal(500)

                        data3.buyables[11] = startingBuyableAmount
                        data3.buyables[12] = startingBuyableAmount
                        data3.buyables[13] = startingBuyableAmount
                        data3.buyables[21] = startingBuyableAmount
                        data3.buyables[22] = startingBuyableAmount
                        data3.buyables[23] = startingBuyableAmount
                        data3.buyables[31] = startingBuyableAmount // buyables
                        data3.buyables[32] = startingBuyableAmount
                        data3.buyables[33] = startingBuyableAmount

                        //gems
                        if (!hasMilestone("d", 12)) {
                                let x = getResetGemIDs()

                                let gData = player.l.grid

                                for (i in x) {
                                        id = x[i]
                                        let thisKeep = decimalZero
                                        if (hasMilestone("a", 12) && id < 400 && (id % 100 < 4)) {
                                                thisKeep = thisKeep.max(1000)
                                        }
                                        gData[id].gems = gData[id].gems.min(thisKeep)
                                }
                        }

                        //reset times
                        if (!hasMilestone("a", 9) && !hasMilestone("cells", 2)) data3.times = 0
                }

                data3.points = decimalZero
                data3.best = decimalZero
                data3.total = decimalZero

                player.mu.buyables[11] = decimalZero
                player.mu.buyables[12] = decimalZero
                player.mu.buyables[13] = decimalZero
                player.mu.buyables[21] = decimalZero
                player.mu.buyables[22] = decimalZero
                player.mu.buyables[23] = decimalZero
                player.mu.buyables[31] = decimalZero // buyables
                player.mu.buyables[32] = decimalZero
                player.mu.buyables[33] = decimalZero

                player.p.best_over_amino = decimalZero

                resetPreLifeCurrencies()
        },
})

addLayer("t", {
        name: "Tissues", 
        symbol: "T", 
        position: 4, 
        startData(){ return {
                unlocked: false,
		points: decimalZero,
                best: decimalZero,
                total: decimalZero,
                abtime: 0,
                time: 0,
                times: 0,
                passiveTime: 0,
                bestOnReset: decimalZero,
        }},
        color: "#A82450",
        branches: [],
        requires:() => new Decimal(player.extremeMode ? "1e813" : "1e1385"), 
        resource: "Tissues", 
        baseResource: "Cells", 
        baseAmount(){return player.cells.points},
        type: "custom",
        getResetGain(){
                let ret = tmp.t.getBaseGain.times(tmp.t.getGainMult)
                
                if (player.extremeMode) ret = ret.pow(.75)
                
                return ret.floor()
        },
        getBaseGain(){
                let pts = player.cells.points
                if (pts.lt(player.extremeMode ? "1e813" : "1e1385")) return decimalZero

                let exp = tmp.t.getGainExp
                if (exp.gte(1)) exp = decimalZero

                if (hasUpgrade("t", 71)) return pts.pow(exp)

                return pts.times(player.extremeMode ? "1e1187" : "1e615").pow(exp).sub(9).max(0)
        },
        getGainMult(){ // t gain tissuegain tgain tissue gain tissuesgain tissues gain
                let ret = decimalOne

                if (!hasMilestone("ch", 14)) {
                        if (hasUpgrade("t", 83)) {
                                let base = new Decimal(player.cells.challenges[12]).max(10).log10()
                                let exp = Math.max(0, player.cells.challenges[11] - 10)
                                                        ret = ret.times(base.pow(exp))
                        }
                        if (hasUpgrade("t", 131))       ret = ret.times(Decimal.pow(2, tmp.t.upgrades.endUpgradeAmount))
                        if (hasUpgrade("t", 155))       ret = ret.times(Decimal.pow(1.11, player.tokens.tokens2.total))
                }
                if (hasUpgrade("cells", 44) && !hasMilestone("ch", 15)) {
                                                ret = ret.times(player.tokens.tokens2.total.max(1))
                }
                if (!hasUpgrade("or", 43))      ret = ret.times(tmp.tokens.buyables[122].effect)
                if (player.cells.challenges[21] >= 2) {
                                                ret = ret.times(player.t.best.plus(10).log10().plus(9).log10().pow(player.cells.challenges[21]))
                }
                                                ret = ret.times(tmp.or.effect)
                                                ret = ret.times(tmp.an.effect)
                if (hasMilestone("or", 10))     ret = ret.times(Decimal.pow(2, player.or.milestones.length))
                if (player.easyMode)            ret = ret.times(2)
                if (hasUpgrade("sci", 552))     ret = ret.times(Decimal.pow(2, tmp.sci.upgrades[552].lvls))
                if (hasUpgrade("or", 143))      ret = ret.times(player.or.buyables[202].max(1).pow(player.or.upgrades.length))
                if (hasUpgrade("sci", 563))     ret = ret.times(2)
                                                ret = ret.times(tmp.or.challenges[32].reward)
                if (hasUpgrade("or", 155))      ret = ret.times(player.or.energy.points.max(1))
                if (hasUpgrade("an", 14))       ret = ret.times(player.an.grid[608].extras.plus(1).pow(player.an.milestones.length ** 2))
                if (hasUpgrade("an", 34))       ret = ret.times(tmp.tokens.buyables[102].effect)
                if (hasMilestone("nu", 2))      ret = ret.times(player.t.points.plus(10).log10().pow(player.nu.points))
                if (hasMilestone("an", 39))     ret = ret.times(player.an.grid[307].extras.plus(1).pow(player.ch.points.pow(3)))
                
                return ret.max(1)
        },
        getGainExp(){
                let ret = new Decimal(2000)

                if (hasUpgrade("t", 72)) {
                        let amt = Math.min(50, player.t.upgrades.length)
                        ret = ret.sub(20 * amt)
                }
                if (hasUpgrade("or", 324)) {
                        let lvls = Math.min(100, player.or.upgrades.length)
                        ret = ret.sub(lvls * 2)
                } else if (hasUpgrade("t", 111)) {
                        let amt = player.tokens.tokens2.total.sqrt().times(3).min(100)
                        ret = ret.sub(amt)
                }
                if (hasUpgrade("an", 11)) ret = ret.sub(100)
                if (hasUpgrade("ch", 11)) ret = ret.sub(player.ch.points.min(200))

                return ret.pow(-1)
        },
        getNextAt(){
                let gain = tmp.t.getResetGain.plus(1)

                if (player.extremeMode) gain = gain.root(.75)

                let reqInit = gain.div(tmp.t.getGainMult).max(1)
                if (hasUpgrade("t", 71)) return reqInit.root(tmp.t.getGainExp).max(player.extremeMode ? "1e813" : "1e1385")
                return reqInit.plus(9).root(tmp.t.getGainExp).div(player.extremeMode ? "1e1187" : "1e615").max(player.extremeMode ? "1e813" : "1e1385")
        },
        canReset(){
                return tmp.t.getResetGain.gt(0) && !hasUpgrade("t", 132) && player.cells.challenges[12] >= 25
        },
        resetsNothing(){
                return hasUpgrade("or", 153)
        },
        effectAdd(){
                if (hasUpgrade("cells", 44)) return decimalZero
                let ret = decimalOne
                
                if (hasUpgrade("t", 21)) ret = ret.plus(2)

                return ret
        },
        effectMult(){
                if (hasUpgrade("cells", 44)) return decimalOne
                let ret = decimalOne

                if (hasUpgrade("t", 22)) ret = ret.times(2)

                return ret
        },
        effectExp(){
                let ret = decimalOne

                if (hasUpgrade("t", 23))        ret = ret.plus(.5)
                if (hasUpgrade("t", 24)) {
                        let per = .06
                        if (hasUpgrade("t", 71))        per = .1
                        if (hasUpgrade("t", 82))        per = .11
                        if (hasUpgrade("t", 84))        per = .13
                        if (hasUpgrade("t", 85))        per = .14
                        if (hasUpgrade("t", 93))        per = .16
                        if (hasUpgrade("t", 114))       per = .165
                        if (hasUpgrade("t", 115))       per = .17
                        if (hasUpgrade("t", 133))       per = .18
                        if (hasUpgrade("t", 134))       per = .19
                        if (hasUpgrade("or", 122))      per = .2

                        let count = player.t.upgrades.length
                        if (hasMilestone("or", 13)) count += player.or.milestones.length * (hasMilestone("or", 14) ? 1 : .75)
                        if (hasUpgrade("or", 104))  count += player.or.upgrades.length
                                                ret = ret.plus(per * count)
                }
                if (hasUpgrade("t", 81))        ret = ret.plus(player.extremeMode ? 1 : .5)
                if (hasMilestone("t", 13)) {
                        let per = player.extremeMode ? .12 : .03
                                                ret = ret.plus(per * player.t.milestones.length)
                }
                                                ret = ret.plus(tmp.tokens.buyables[111].effect.min(100))
                if (hasUpgrade("cells", 53))    ret = ret.plus(player.cells.upgrades.length * .008)
                if (hasUpgrade("an", 11))       ret = ret.plus(5)
                if (hasUpgrade("or", 45))       ret = ret.plus(.91)
                if (hasUpgrade("ch", 12))       ret = ret.plus(player.ch.upgrades.length)
                if (hasUpgrade("an", 43))       ret = ret.plus(1)

                return ret
        },
        effectAmt(){
                if (hasUpgrade("t", 131)) {
                        return tmp.t.getResetGain.max(player.t.bestOnReset)
                }
                if (hasUpgrade("t", 64)) {
                        return tmp.t.getResetGain.max(player.t.bestOnReset).times(100)
                }
                return player.t.total
        },
        effect(){
                let data = tmp.t

                let ret = data.effectAmt.times(data.effectMult).plus(data.effectAdd).pow(data.effectExp)

                return ret.max(1)
        },
        effectDescription(){
                let start = " multiplying all prior currency gain by " 
                return start + format(tmp.t.effect) + "."
        },
        update(diff){
                let data = player.t
                
                if (data.points.gt(0) || hasUpgrade("cells", 415)) data.unlocked = true
                data.best = data.best.max(data.points)

                data.time += diff
                if (hasMilestone("t", 4)) data.passiveTime += diff
                if (data.passiveTime > 1) {
                        data.passiveTime += -1
                        data.times ++
                }
                if (data.passiveTime > 10) data.passiveTime = 10

                if (hasUpgrade("t", 105) || hasUpgrade("t", 132)) {
                        let onR = tmp.t.getResetGain
                        data.bestOnReset = data.bestOnReset.max(onR)

                        let gain = onR.div(hasUpgrade("t", 132) ? 1 : 100).times(diff)
                        data.points = data.points.plus(gain)
                        data.total = data.total.plus(gain)
                }

                let forceAbContent = hasMilestone("or", 1) || false

                if (hasUpgrade("t", 123) || forceAbContent)     layers.cells.buyables[13].buy()
                if (hasUpgrade("t", 145) || forceAbContent)     layers.cells.buyables[21].buy()
                if(hasUpgrade("or", 104)||hasMilestone("or", 1))layers.cells.buyables[22].buy()
        },
        row: 2, 
        prestigeButtonText(){
                if (player.cells.challenges[12] < 25) return "You need to have 25 Secondary completions to reset"

                let b = ""
                if (tmp.t.getResetGain.lt(1e3)) b = "<br>Next: " + format(tmp.t.getNextAt) + " Cells."

                return "Reset for <b>" + formatWhole(tmp.t.getResetGain) + "</b> Tissues" + b
        },
        layerShown(){
                if (tmp.t.deactivated) return false
                return hasUpgrade("cells", 415) || player.t.unlocked
        },
        upgrades: {
                rows: 10,
                cols: 5,
                11: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues I"
                        },
                        description(){
                                if (player.extremeMode) return "All minigame gain ^1.01 and autobuy Topoisomerase"
                                return "All minigame gain ^1.01"
                        },
                        cost:() => decimalOne,
                        unlocked(){
                                return true
                        }, // hasUpgrade("t", 11)
                },
                12: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues II"
                        },
                        description(){
                                return "Gain 100x Mu and bulk Squeeze"
                        },
                        cost:() => decimalOne,
                        unlocked(){
                                return true
                        }, // hasUpgrade("t", 12)
                },
                13: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues III"
                        },
                        description(){
                                if (player.extremeMode) return "Gain 100x Lambda and autobuy DNA helicase"
                                return "Gain 100x Lambda"
                        },
                        cost:() => decimalOne,
                        unlocked(){
                                return true
                        }, // hasUpgrade("t", 13)
                },
                14: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues IV"
                        },
                        description(){
                                if (player.extremeMode) return "Gain 100x Kappa and autobuy DNA polymerase"
                                return "Gain 100x Kappa"
                        },
                        cost:() => decimalOne,
                        unlocked(){
                                return true
                        }, // hasUpgrade("t", 14)
                },
                15: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues V"
                        },
                        description(){
                                return "Gain 100x Iota and Even is always active"
                        },
                        cost:() => decimalOne,
                        unlocked(){
                                return true
                        }, // hasUpgrade("t", 15)
                },
                21: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues VI"
                        },
                        description(){
                                if (player.extremeMode) return "Add 2 to base Tissue effect and autobuy DNA clamp"
                                return "Add 2 to base Tissue effect"
                        },
                        cost:() => decimalOne,
                        unlocked(){
                                return true
                        }, // hasUpgrade("t", 21)
                },
                22: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues VII"
                        },
                        description(){
                                return "Double Tissues in base Tissue effect"
                        },
                        cost:() => decimalOne,
                        unlocked(){
                                return true
                        }, // hasUpgrade("t", 22)
                },
                23: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues VIII"
                        },
                        description(){
                                return "Add .5 to Tissue effect exponent"
                        },
                        cost:() => decimalOne,
                        unlocked(){
                                return true
                        }, // hasUpgrade("t", 23)
                },
                24: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues IX"
                        },
                        description(){
                                return "Add .06 to Tissue effect exponent per upgrade"
                        },
                        cost:() => decimalOne,
                        unlocked(){
                                return true
                        }, // hasUpgrade("t", 24)
                },
                25: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues X"
                        },
                        description(){
                                if (player.extremeMode) return "Per upgrade Tissues effect exponentiates Phosphorus gain and autobuy DNA ligase"
                                return "Per upgrade Tissues effect exponentiates Phosphorus gain"
                        },
                        effect(){
                                return tmp.t.effect.pow(player.t.upgrades.length)
                        },
                        cost:() => decimalOne,
                        unlocked(){
                                return true
                        }, // hasUpgrade("t", 25)
                },
                31: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XI"
                        },
                        description(){
                                if (player.extremeMode) return "Gain 3x Stem Cells and autobuy primase"
                                return "Gain 3x Stem Cells"
                        },
                        cost:() => decimalOne,
                        unlocked(){
                                return true
                        }, // hasUpgrade("t", 31)
                },
                32: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XII"
                        },
                        description(){
                                if (player.extremeMode) return "Gain 10x Stem Cells in challenges and autobuy DNA gyrase"
                                return "Gain 10x Stem Cells in challenges"
                        },
                        cost:() => decimalOne,
                        unlocked(){
                                return true
                        }, // hasUpgrade("t", 32)
                },
                33: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XIII"
                        },
                        description(){
                                return "Omnipotent cost base is 9.9"
                        },
                        cost:() => decimalOne,
                        unlocked(){
                                return true
                        }, // hasUpgrade("t", 33)
                },
                34: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XIV"
                        },
                        description(){
                                return "cbrt(log10(10+Cells)) multiplies Stem Cell gain<br>Currently: " + format(tmp.t.upgrades[34].effect)
                        },
                        cost:() => decimalOne,
                        effect(){
                                return player.cells.points.plus(10).log10().cbrt()
                        },
                        unlocked(){
                                return true
                        }, // hasUpgrade("t", 34)
                },
                35: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XV"
                        },
                        description(){
                                return "Stem Cell gain ^1.001"
                        },
                        cost:() => decimalOne,
                        unlocked(){
                                return true
                        }, // hasUpgrade("t", 35)
                },
                41: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XVI"
                        },
                        description(){
                                if (player.extremeMode) return "Keep a Cell milestone per Tissue reset and autobuy Telomerase"
                                return "Keep a Cell milestone per Tissue reset"
                        },
                        cost:() => decimalOne,
                        unlocked(){
                                return true
                        }, // hasUpgrade("t", 41)
                },
                42: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XVII"
                        },
                        description(){
                                if (player.extremeMode) return "Keep a Cell upgrade per Tissue upgrade and autobuy Single-strand DNA-binding protein"
                                return "Keep a Cell upgrade per Tissue upgrade"
                        },
                        cost:() => decimalOne,
                        unlocked(){
                                return true
                        }, // hasUpgrade("t", 42)
                },
                43: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XVIII"
                        },
                        description(){
                                return "Keep three Cell milestones per Tissue upgrade in this column"
                        },
                        cost:() => decimalOne,
                        unlocked(){
                                return true
                        }, // hasUpgrade("t", 43)
                },
                44: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XIX"
                        },
                        description(){
                                return "Keep a Cell reset per Tissue reset"
                        },
                        cost:() => decimalOne,
                        unlocked(){
                                return true
                        }, // hasUpgrade("t", 44)
                },
                45: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XX"
                        },
                        description(){
                                return "Keep a Cell challenge per Tissue reset (primary first)"
                        },
                        cost:() => decimalOne,
                        unlocked(){
                                return true
                        }, // hasUpgrade("t", 45)
                },
                51: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XXI"
                        },
                        description(){
                                return "Unlock an Anti-challenge with a free goal<br>Requires: 24 Tissue upgrades"
                        },
                        canAfford(){
                                return player.t.upgrades.length >= 24
                        },
                        cost:() => decimalOne,
                        unlocked(){
                                return true
                        }, // hasUpgrade("t", 51)
                },
                52: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XXII"
                        },
                        description(){
                                if (player.extremeMode) return "Multiply Cell gain exponent by 100/99<br>Requires: 1e850 Cells"
                                return "Multiply Cell gain exponent by 100/99<br>Requires: 1e1441 Cells"
                        },
                        cost:() => decimalOne,
                        canAfford(){
                                return player.cells.points.gte(player.extremeMode ? "1e850" : "1e1441")
                        },
                        unlocked(){
                                return true
                        }, // hasUpgrade("t", 52)
                },
                53: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XXIII"
                        },
                        description(){
                                return "Subtract .01 from µ gain exponent<br>Requires: Best Tissues at least 3"
                        },
                        cost:() => decimalOne,
                        canAfford(){
                                return player.t.best.gte(3)
                        },
                        unlocked(){
                                return true
                        }, // hasUpgrade("t", 53)
                },
                54: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XXIV"
                        },
                        description(){
                                return "Subtract .1 from Life buyables cost exponent<br>Requires: 26 Secondary completions"
                        },
                        cost:() => decimalOne,
                        canAfford(){
                                return player.cells.challenges[12] >= 26
                        },
                        unlocked(){
                                return true
                        }, // hasUpgrade("t", 54)
                },
                55: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XXV"
                        },
                        description(){
                                return "Stem Cell challenges are 1,000,000x easier<br>Requires: Tissue effect is at least 100"
                        },
                        cost:() => decimalOne,
                        canAfford(){
                                return tmp.t.effect.gte(100)
                        },
                        unlocked(){
                                return true
                        }, // hasUpgrade("t", 55)
                },
                61: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XXVI"
                        },
                        description(){
                                return "Cells multiply Lambda and Kappa gain and add .011 to Logarithmic base but disable and remove all coin upgrades"
                        },
                        onPurchase(){
                                player.tokens.upgrades = []
                        },
                        cost:() => new Decimal(10),
                        unlocked(){
                                return hasMilestone("t", 6) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 61)
                },
                62: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XXVII"
                        },
                        description(){
                                let a = "Visible effects Cells and Primary base is 105"
                                let b = "<br>Requires: e6.598e23 Protein<br>(" + format(player.a.protein.points,4) + ")"
                                if (player.extremeMode) b = b.replace("6.598e23", "6.407e20")
                                if (!hasUpgrade("t", 62)) return a + b
                                return a
                        },
                        canAfford(){
                                return player.a.protein.points.gte(player.extremeMode ? "e6.407e20" : "e6.598e23")
                        },
                        cost:() => new Decimal(10),
                        unlocked(){
                                return hasUpgrade("t", 61) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 62)
                },
                63: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XXVIII"
                        },
                        description(){
                                let a = "Tissue effect additionally affects Stem cell after Secondary nerf"
                                let b = "<br>Requires: 28 Secondary completions"
                                if (!hasUpgrade("t", 63)) return a + b
                                return a
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 28
                        },
                        cost:() => new Decimal(10),
                        unlocked(){
                                return hasUpgrade("t", 62) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 63)
                },
                64: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XXIX"
                        },
                        description(){
                                let a = "Tissue effect is based on 100*max(best ever on reset, current on reset)"
                                let b = "<br>Requires: 1e7 Tissue effect"
                                if (!hasUpgrade("t", 64)) return a + b
                                return a + "<br>Currently based on:<br>" + formatWhole(tmp.t.effectAmt) 
                        },
                        canAfford(){
                                return tmp.t.effect.gte(1e7)
                        },
                        cost:() => new Decimal(10),
                        unlocked(){
                                return hasUpgrade("t", 63) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 64)
                },
                65: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XXX"
                        },
                        description(){
                                return "Token cost exponent is .3 and Primary base is 140" 
                        },
                        cost:() => new Decimal(10),
                        unlocked(){
                                return hasUpgrade("t", 64) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 65)
                },
                71: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XXXI"
                        },
                        description(){
                                let a = "Tissue initial gain formula is (Cells)^(gain exponent) and Tissues IX becomes .1 per"
                                let b = "<br>Requires: 30 Secondary completions"
                                if (!hasUpgrade("t", 71)) return a + b
                                return a
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 30
                        },
                        cost:() => new Decimal(20),
                        unlocked(){
                                return hasUpgrade("t", 65) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 71)
                },
                72: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XXXII"
                        },
                        description(){
                                let a = "Per upgrade (up to 50) subtract 20 from the gain exponent divider and unlock Pluripotent"
                                if (player.extremeMode) {
                                        a = "<bdi style='font-size: 80%'>Per upgrade (up to 50) subtract 20 from the gain exponent divider, log10(Cells) multiplies Stem Cell gain, and unlock Pluripotent</bdi>"
                                }
                                let b = "<br>Requires: 31 Secondary completions"
                                if (!hasUpgrade("t", 72)) return a + b
                                return a
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 31
                        },
                        cost:() => new Decimal(20),
                        unlocked(){
                                return hasUpgrade("t", 71) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 72)
                },
                73: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XXXIII"
                        },
                        description(){
                                let a = "Buy max Pluripotent and Primary base is 200"
                                let b = "<br>Requires: 32 Secondary completions"
                                if (!hasUpgrade("t", 73)) return a + b
                                return a
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 32
                        },
                        cost:() => new Decimal(20),
                        unlocked(){
                                return hasUpgrade("t", 72) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 73)
                },
                74: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XXXIV"
                        },
                        description(){
                                let a = "The number of upgrades multiplies DNA gain exponent and add .101 to Visible base"
                                if (player.extremeMode) a = "The number of upgrades multiplies DNA gain exponent and add .24 to Visible base"
                                let b = "<br>Requires: 33 Secondary completions"
                                if (!hasUpgrade("t", 74)) return a + b
                                return a
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 33
                        },
                        cost:() => new Decimal(20),
                        unlocked(){
                                return hasUpgrade("t", 73) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 74)
                },
                75: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XXXV"
                        },
                        description(){
                                let a = "Primary can now be completed 25 times, but its goal gets progressively harder"
                                let b = "<br>Requires: 34 Secondary completions"
                                if (!hasUpgrade("t", 75)) return a + b
                                return a
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 34
                        },
                        cost:() => new Decimal(20),
                        unlocked(){
                                return hasUpgrade("t", 74) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 75)
                },
                81: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XXXVI"
                        },
                        description(){
                                let a = "Add .5 to Tissue effect exponent and Pluripotent's log10 becomes log4"
                                if (player.extremeMode) a = a.replace(".5", "1")
                                let b = "<br>Requires: 35 Secondary completions"
                                if (!hasUpgrade("t", 81)) return a + b
                                return a
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 35
                        },
                        cost:() => new Decimal(200),
                        unlocked(){
                                return hasUpgrade("t", 75) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 81)
                },
                82: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XXXVII"
                        },
                        description(){
                                let a = "Pluripotent's log4 becomes log2 and Tissues IX becomes .11 per"
                                let b = "<br>Requires: 36 Secondary completions"
                                if (!hasUpgrade("t", 82)) return a + b
                                return a
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 36
                        },
                        cost:() => new Decimal(200),
                        unlocked(){
                                return hasUpgrade("t", 81) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 82)
                },
                83: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XXXVIII"
                        },
                        description(){
                                let a = "<bdi style='font-size: 80%'>Per primary completion past 10 log10(Secondary completions) multiplies Tissue gain and Primary nerf is reduced x -> 10log10(x)"
                                let b = "<br>Requires: 37 Secondary completions</bdi>"
                                if (!hasUpgrade("t", 83)) return a + b
                                return a + "</bdi>"
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 37
                        },
                        cost:() => new Decimal(200),
                        unlocked(){
                                return hasUpgrade("t", 82) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 83)
                },
                84: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XXXIX"
                        },
                        description(){
                                let a = "Tissues IX becomes .13 per and Tissue milestone 4 is based on milestones squared"
                                if (player.extremeMode) a = a.replace("per", "per, Primary goal is 500x easier per upgrade,")
                                let b = "<br>Requires: 39 Secondary completions</bdi>"
                                if (!hasUpgrade("t", 84)) return a + b
                                return a + "</bdi>"
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 39
                        },
                        cost:() => new Decimal(200),
                        unlocked(){
                                return hasUpgrade("t", 83) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 84)
                },
                85: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XL"
                        },
                        description(){
                                let a = "Tissues IX becomes .14 per and Pluripotent cost base is 1e28"
                                if (player.extremeMode) a += " and effects DNA Science gain"
                                let b = "<br>Requires: 40 Secondary completions</bdi>"
                                if (!hasUpgrade("t", 85)) return a + b
                                return a + "</bdi>"
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 40
                        },
                        cost:() => new Decimal(200),
                        unlocked(){
                                return hasUpgrade("t", 84) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 85)
                },
                91: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XLI"
                        },
                        description(){
                                let a = "Pluripotent cost base is 1e27 but nullify Microwaves"
                                if (player.extremeMode) a = a.replace("27", "27 and per this row upgrade per upgrade gain 4.4x Stem Cells")
                                let b = "<br>Requires: 46 Secondary completions</bdi>"
                                if (!hasUpgrade("t", 91)) return a + b
                                return a + "</bdi>"
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 46
                        },
                        effect(){
                                if (!player.extremeMode) return decimalOne
                                let a = 1
                                if (hasUpg("t", 92)) a ++
                                if (hasUpg("t", 93)) a ++
                                if (hasUpg("t", 94)) a ++
                                if (hasUpg("t", 95)) a ++
                                return Decimal.pow(4.4, player.t.upgrades.length * a)
                        },
                        cost:() => new Decimal(2000),
                        unlocked(){
                                return hasMilestone("t", 13) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 91)
                },
                92: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XLII"
                        },
                        description(){
                                let a = "<bdi style='font-size: 80%'>Tokens<sup>π</sup> multiply DNA effect exponent<sup>*</sup> and Stem Cell gain and DNA primary effect affects Amino Acid gain but nullify Infrared</bdi>"
                                let b = "<br>Requires: 47 Secondary completions</bdi>"
                                if (!hasUpgrade("t", 92)) return a + b
                                return a + "</bdi>"
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 47
                        },
                        cost:() => new Decimal(2000),
                        unlocked(){
                                return hasUpgrade("t", 91) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 92)
                },
                93: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XLIII"
                        },
                        description(){
                                let a = "Primary base is 1e4, Secondary base is (x+5)<sup>(x-5)/10</sup> and Tissues IX is .16 per but nullify Visible"
                                if (player.extremeMode) {
                                        a = a.replace("1e4", "12e3")
                                        a = a.replace("-", "+")
                                }
                                let b = "<br>Requires: 48 Secondary completions</bdi>"
                                if (!hasUpgrade("t", 93)) return a + b
                                return a + "</bdi>"
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 48
                        },
                        cost:() => new Decimal(2000),
                        unlocked(){
                                return hasUpgrade("t", 92) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 93)
                },
                94: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XLIV"
                        },
                        description(){
                                let a = "𝛾 → ∂β base is Stem Cells and add .02 to Tissue exponent per milestone but nullify Near-ultraviolet"
                                if (player.extremeMode) a = a.replace("and add .02 to Tissue exponent per milestone", "")
                                let b = "<br>Requires: 49 Secondary completions</bdi>"
                                if (!hasUpgrade("t", 94)) return a + b
                                return a + "</bdi>"
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 49
                        },
                        cost:() => new Decimal(2000),
                        unlocked(){
                                return hasUpgrade("t", 93) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 94)
                },
                95: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XLV"
                        },
                        description(){
                                let a = "<bdi style='font-size: 80%'>Per upgrade per milestone add .05 to Cell effect formula exponent but nullify Ultraviolet</bdi>"
                                if (player.extremeMode) {
                                        a = a.replace("exponent", "exponent and Topoisomerase base")
                                        a = a.replace(".05", ".08")
                                }
                                let b = "<br>Requires: 50 Secondary completions</bdi>"
                                if (!hasUpgrade("t", 95)) return a + b
                                return a + "</bdi>"
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 50
                        },
                        cost:() => new Decimal(2000),
                        unlocked(){
                                return hasUpgrade("t", 94) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 95)
                },
                101: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XLVI"
                        },
                        description(){
                                let a = "<bdi style='font-size: 80%'>Per primary completion Secondary is 10x easier, and everything that reduces Secondary goal also reduces Primary goal but nullify X-rays</bdi>"
                                let b = "<br>Requires: 51 Secondary completions</bdi>"
                                if (player.extremeMode) {
                                        b = b.replace("51", "52")
                                        a = "Per primary completion Secondary is 200x easier but nullify X-rays"
                                }
                                if (!hasUpgrade("t", 101)) return a + b
                                return a + "</bdi>"
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= (player.extremeMode ? 52 : 51)
                        },
                        cost:() => new Decimal(player.extremeMode ? 2e4 : 1e5),
                        unlocked(){
                                return hasUpgrade("t", 95) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 101)
                },
                102: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XLVII"
                        },
                        description(){
                                let a = "Pluripotent cost base is 1e25 but nullify Gamma Rays"
                                let b = "<br>Requires: 52 Secondary completions</bdi>"
                                if (player.extremeMode) {
                                        b = b.replace("52", "53")
                                        a = a.replace("25", "25 and Secondary is 1e25x easier")
                                }
                                if (!hasUpgrade("t", 102)) return a + b
                                return a + "</bdi>"
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= (player.extremeMode ? 53 : 52)
                        },
                        cost:() => new Decimal(player.extremeMode ? 2e4 : 1e5),
                        unlocked(){
                                return hasUpgrade("t", 101) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 102)
                },
                103: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XLVIII"
                        },
                        description(){
                                let a = "Pluripotent cost base is 2e21 but nullify Semi-exponential"
                                let b = "<br>Requires: 56 Secondary completions</bdi>"
                                if (!hasUpgrade("t", 103)) return a + b
                                return a + "</bdi>"
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 56
                        },
                        cost:() => new Decimal(player.extremeMode ? 2e4 : 1e5),
                        unlocked(){
                                return hasUpgrade("t", 102) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 103)
                },
                104: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues XLIX"
                        },
                        description(){
                                let a = "Pluripotent cost base is 2e20 but nullify Polynomial"
                                let b = "<br>Requires: 57 Secondary completions</bdi>"
                                if (player.extremeMode) a = a.replace("20", "20 and Secondary is 2e20x easier")
                                if (!hasUpgrade("t", 104)) return a + b
                                return a + "</bdi>"
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 57
                        },
                        cost:() => new Decimal(player.extremeMode ? 2e4 : 1e5),
                        unlocked(){
                                return hasUpgrade("t", 103) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 104)
                },
                105: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues L"
                        },
                        description(){
                                let a = "Pluripotent cost base is 1e20 and gain 1% of Tissues on reset per second but nullify Cubic"
                                let b = "<br>Requires: 58 Secondary completions</bdi>"
                                if (!hasUpgrade("t", 105)) return a + b
                                return a + "</bdi>"
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 58
                        },
                        cost:() => new Decimal(player.extremeMode ? 2e4 : 1e5),
                        unlocked(){
                                return hasUpgrade("t", 104) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 105)
                },
                endUpgradeAmount(){
                        let a = 0
                        for (id in player.t.upgrades) {
                                if (player.t.upgrades[id] > 110 && player.t.upgrades[id] < 160) a ++ 
                        }
                        return a
                },
                111: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues LI"
                        },
                        description(){
                                let a = "<bdi style='font-size: 80%'>Tissue gain root is 3*sqrt(Token II) less (up to 500), gain 5x Stem Cells, and Token II via Stem Cell scales at half the speed</bdi>"
                                let b = "<br>Requires: 82 Secondary completions</bdi>"
                                if (!hasUpgrade("t", 111)) return a + b
                                return a + "</bdi>"
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 82
                        },
                        cost:() => new Decimal(1e18),
                        unlocked(){
                                return hasUpgrade("cells", 55) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 111)
                },
                112: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues LII"
                        },
                        description(){
                                let a = "Per upgrade Tissue effect affects DNA gain"
                                let b = "<br>Requires: 83 Secondary completions</bdi>"
                                if (!hasUpgrade("t", 112)) return a + b
                                return a + "</bdi>"
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 83
                        },
                        cost:() => new Decimal(1e19),
                        unlocked(){
                                return hasUpgrade("t", 111) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 112)
                },
                113: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues LIII"
                        },
                        description(){
                                let a = "Per token multiply Stem Cell gain by 1 + Token II / 69"
                                let b = "<br>Requires: 84 Secondary completions</bdi>"
                                if (!hasUpgrade("t", 113)) return a + b
                                return a + "</bdi>"
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 84
                        },
                        cost:() => new Decimal(2e19),
                        unlocked(){
                                return hasUpgrade("t", 112) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 113)
                },
                114: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues LIV"
                        },
                        description(){
                                let a = "Tissues IX becomes .165 and the number of upgrades dilates point gain"
                                let b = "<br>Requires: 85 Secondary completions</bdi>"
                                if (!hasUpgrade("t", 114)) return a + b
                                return a + "</bdi>"
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 85
                        },
                        cost:() => new Decimal(4e19),
                        unlocked(){
                                return hasUpgrade("t", 113) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 114)
                },
                115: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues LV"
                        },
                        description(){
                                let a = "Tissues IX becomes .17"
                                let b = "<br>Requires: 86 Secondary completions</bdi>"
                                if (!hasUpgrade("t", 115)) return a + b
                                return a + "</bdi>"
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 86
                        },
                        cost:() => new Decimal(1e20),
                        unlocked(){
                                return hasUpgrade("t", 114) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 115)
                },
                121: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues LVI"
                        },
                        description(){
                                let a = "Secondary is 10x easier and per upgrade in this row Secondary is 1e6 easier"
                                let b = "<br>Requires: 87 Secondary completions</bdi>"
                                if (!hasUpgrade("t", 121)) return a + b
                                return a + "</bdi>"
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 87
                        },
                        cost:() => new Decimal(2e20),
                        unlocked(){
                                return hasUpgrade("t", 115) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 121)
                },
                122: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues LVII"
                        },
                        description(){
                                let a = "Primary is 1e150 easier"
                                let b = "<br>Requires: 88 Secondary completions</bdi>"
                                if (!hasUpgrade("t", 122)) return a + b
                                return a + "</bdi>"
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 88
                        },
                        cost:() => new Decimal(5e20),
                        unlocked(){
                                return hasUpgrade("t", 121) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 122)
                },
                123: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues LVIII"
                        },
                        description(){
                                let a = "Autobuy Pluripotent"
                                let b = "<br>Requires: 90 Secondary completions</bdi>"
                                if (!hasUpgrade("t", 123)) return a + b
                                return a + "</bdi>"
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 90
                        },
                        cost:() => new Decimal(1e22),
                        unlocked(){
                                return hasUpgrade("t", 122) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 123)
                },
                124: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues LIX"
                        },
                        description(){
                                let a = "Primary completions<sup>2.5</sup> dilate point gain and multiply Stem Cell gain after Secondary nerf"
                                let b = "<br>Requires: 91 Secondary completions</bdi>"
                                if (!hasUpgrade("t", 124)) return a + b
                                return a + "</bdi>"
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 91
                        },
                        cost:() => new Decimal(3e22),
                        unlocked(){
                                return hasUpgrade("t", 123) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 124)
                },
                125: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues LX"
                        },
                        description(){
                                let a = "Primary is 1e951 times easier"
                                let b = "<br>Requires: 92 Secondary completions"
                                if (!hasUpgrade("t", 125)) return a + b
                                return a + "</bdi>"
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 92
                        },
                        cost:() => new Decimal(5e22),
                        unlocked(){
                                return hasUpgrade("t", 124) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 125)
                },
                131: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues LXI"
                        },
                        description(){
                                let a = "Per upgrade in this tab double Tissue gain but Tissues XXIX is based on best/current Tissues on reset"
                                let b = "<br>Requires: 95 Secondary completions"
                                if (!hasUpgrade("t", 131)) return a + b
                                return a
                        },
                        canAfford(){
                                return player.cells.challenges[12] >= 95
                        },
                        cost:() => new Decimal(3e24),
                        unlocked(){
                                return hasUpgrade("t", 125) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 131)
                },
                132: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues LXII"
                        },
                        description(){
                                if (player.shiftAlias) return "Gives you ten tissue resets on purchase"
                                return "Gain 99% of Tissue gained on reset per second but you can no longer reset for Tissues"
                        },
                        onPurchase(){
                                player.t.times += 10
                        },
                        cost:() => new Decimal(2e28),
                        unlocked(){
                                return hasUpgrade("t", 131) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 132)
                },
                133: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues LXIII"
                        },
                        description(){
                                return "Tissues IX is .18 per, Primary goal is at most 1e8500, and per Token II add .01 to Omnipotent base"
                        },
                        cost:() => new Decimal(5e30),
                        unlocked(){
                                return hasUpgrade("t", 132) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 133)
                },
                134: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues LXIV"
                        },
                        description(){
                                return "<bdi style='font-size: 80%'>Tissues IX is .19 per, Strange Quark effect coefficient is .7 more, Down Quark effect is based on best and triple its base</bdi>"
                        },
                        cost:() => new Decimal(2e32),
                        unlocked(){
                                return hasUpgrade("t", 133) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 134)
                },
                135: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues LXV"
                        },
                        description(){
                                let a = "log10(log10(Points))<sup>.4</sup> multiplies Cell and Stem Cell gain"
                                return a + br + "Currently: " + format(tmp.t.upgrades[135].effect)
                        },
                        effect(){
                                return player.points.max(10).log10().max(10).log10().pow(.4)
                        },
                        cost:() => new Decimal(2e33),
                        unlocked(){
                                return hasUpgrade("t", 134) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 135)
                },
                141: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues LXVI"
                        },
                        description(){
                                return "Per upgrade you have one less token for prestige purposes"
                        },
                        cost:() => new Decimal(1e35),
                        unlocked(){
                                return hasUpgrade("t", 135) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 141)
                },
                142: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues LXVII"
                        },
                        description(){
                                return "Unlock a Cell buyable"
                        },
                        cost:() => new Decimal(2e36),
                        unlocked(){
                                return hasUpgrade("t", 141) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 142)
                },
                143: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues LXVIII"
                        },
                        description(){
                                return "Strange Quark effect is its best ever"
                        },
                        cost:() => new Decimal(2e40),
                        unlocked(){
                                return hasUpgrade("t", 142) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 143)
                },
                144: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues LXIX"
                        },
                        description(){
                                return "<bdi style='font-size: 80%'>Unlock two Token buyables, add 1.5 to Down and Strange Quark's coefficient, and per upgrade double Stem Cell gain</bdi>"
                        },
                        cost:() => new Decimal(2e42),
                        unlocked(){
                                return hasUpgrade("t", 143) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 144)
                },
                145: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues LXX"
                        },
                        description(){
                                return "Top Quark effect is its best ever and autobuy Multipotent"
                        },
                        cost:() => new Decimal(5e58),
                        unlocked(){
                                return hasUpgrade("t", 144) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 145)
                },
                151: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues LXXI"
                        },
                        description(){
                                return "miRNA base is e1e13 but deactivate and nullify Phosphorus and µ<sup>**</sup>"
                        },
                        onPurchase(){
                                player.p.upgrades = []
                                player.mu.upgrades = []
                                player.mu.buyables[31] = decimalZero
                                player.mu.buyables[32] = decimalZero
                                player.p.points = decimalZero
                                player.mu.points = decimalZero
                                player.p.currentGainPerSec = decimalZero
                                player.p.best_over_amino = decimalZero
                                tmp.mu.deactivated = true
                                tmp.mu.layerShown = false
                                tmp.p.deactivated = true
                                tmp.p.layerShown = false
                                updateTemp()
                        }, // the only thing that is changed is hasMilestone("cells", 39)
                        cost:() => new Decimal(5e64),
                        unlocked(){
                                return hasUpgrade("cells", 65) || hasUpgrade("t", 151) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 151)
                },
                152: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues LXXII"
                        },
                        description(){
                                return "Remove Multipotent's base cost but its cost base is 1e60"
                        },
                        cost:() => new Decimal(1e67),
                        unlocked(){
                                return hasUpgrade("t", 151) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 152)
                },
                153: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues LXXIII"
                        },
                        description(){
                                return "Multipotent cost base is 1e50"
                        },
                        cost:() => new Decimal(1e75),
                        unlocked(){
                                return hasUpgrade("t", 152) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 153)
                },
                154: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues LXXIV"
                        },
                        description(){
                                return "Multipotent cost base is 1e40"
                        },
                        cost:() => new Decimal(3e82),
                        unlocked(){
                                return hasUpgrade("t", 153) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 154)
                },
                155: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Tissues LXXV"
                        },
                        description(){
                                return "Unlock Organs, Charm is based on best, and per Token II gain 1.11x Tissues"
                        },
                        cost:() => new Decimal(5e95),
                        unlocked(){
                                return hasUpgrade("t", 154) || hasMilestone("or", 9)
                        }, // hasUpgrade("t", 155)
                },
        },
        milestones: {
                1: {
                        requirementDescription(){
                                return "1 Tissue reset"
                        },
                        done(){
                                return player.t.times >= 1
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Keep all prior autobuyer content, Iota buyables bases are at least 1, Sinusiodal is free, and gain 3x Cell resets."
                        },
                }, // hasMilestone("t", 1)
                2: {
                        requirementDescription(){
                                return "2 Tissue resets"
                        },
                        done(){
                                return player.t.times >= 2
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Autobuy Totipotent and per milestone you have one less effective token for prestige purposes."
                        },
                }, // hasMilestone("t", 2)
                3: {
                        requirementDescription(){
                                return "5 Tissue resets"
                        },
                        done(){
                                return player.t.times >= 5
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Bulk Totipotent and Omnipotent and per milestone you have one less effective token for prestige purposes."
                        },
                }, // hasMilestone("t", 3)
                4: {
                        requirementDescription(){
                                if (player.or.unlocked) return "10 Tissue resets"
                                if (player.hardMode) return "50 Tissue resets"
                                return "30 Tissue resets"
                        },
                        done(){
                                return player.t.times >= (player.or.unlocked ? 10 : player.hardMode ? 50 : 30)
                        },
                        unlocked(){
                                return true
                        },
                        effect(){
                                let m = new Decimal(player.t.milestones.length)
                                if (hasUpgrade("t", 84)) m = m.pow(2)
                                let base = m.div(100).plus(1)
                                let exp = player.t.upgrades.length
                                return base.pow(exp)
                        },
                        effectDescription(){
                                let a = "Reward: Gain a Tissue reset per second and per upgrade dilate point gain ^ 1 + milestones/100."
                                let b = br + "Currently: " + format(tmp.t.milestones[4].effect)
                                return a + b
                        },
                }, // hasMilestone("t", 4)
                5: {
                        requirementDescription(){
                                if (player.extremeMode) return "8e863 Cells"
                                return "5e1435 Cells"
                        },
                        done(){
                                return player.cells.points.gte(player.extremeMode ? "8e863" : "5e1435")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Uncap Mu II, Mu effects Iota via Mu II, Even effects Lambda, and the token cost exponent is .31."
                        },
                }, // hasMilestone("t", 5)
                6: {
                        requirementDescription(){
                                if (player.extremeMode) return "2.9e875 Cells"
                                return "1e1469 Cells"
                        },
                        done(){
                                return player.cells.points.gte(player.extremeMode ? "2.9e875" : "1e1469")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Unlock another free Anti- challenge, Secondary's reward base is (5+x)<sup>3</sup>, and unlock Middle."
                        },
                }, // hasMilestone("t", 6)
                7: {
                        requirementDescription(){
                                return "11 Primary Completions"
                        },
                        done(){
                                return player.cells.challenges[11] >= 11
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Add cbrt(Pluripotent)/20 to Omnipotent's base."
                        },
                }, // hasMilestone("t", 7)
                8: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e51,021 Stem Cells"
                                return "1e68,134 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e51021" : "1e68134")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Remove Pluripotent's base cost and token cost exponent is .29."
                                return "Reward: Remove Pluripotent's base cost, each Primary completion after 10 adds .1 to Visible base, and token cost exponent is .29."
                        },
                }, // hasMilestone("t", 8)
                9: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e54,738 Stem Cells"
                                return "1e75,231 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e54738" : "1e75231")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Each Primary completion after 10 adds .1 to Visible base and token cost exponent is .28."
                                return "Reward: Token cost exponent is .28."
                        },
                }, // hasMilestone("t", 9)
                10: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e60,600 Stem Cells"
                                return "1e76,571 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e60600" : "1e76571")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Token cost exponent is .27 and Pluripotent levels<sup>sqrt(Upgrades)</sup> multiply Stem Cell gain."
                        },
                }, // hasMilestone("t", 10)
                11: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e62,130 Stem Cells"
                                return "1e78,096 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e62130" : "1e78096")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Add .004 to Visible base per Cell challenge completion and per milestone Pluripotent levels multiply Stem Cell gain."
                                return "Reward: Per milestone Pluripotent levels multiply Stem Cell gain."
                        },
                }, // hasMilestone("t", 11)
                12: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e63,718 Stem Cells"
                                return "1e80,289 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e63718" : "1e80289")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Per milestone per Cell challenge completion add .001 to Omnipotent's base and per milestone Primary is 10x easier."
                                return "Reward: Per milestone add .03 to Omnipotent's base."
                        },
                }, // hasMilestone("t", 12)
                13: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e88,229 Stem Cells"
                                return "1e96,384 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e88229" : "1e96384")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Token cost exponent is .26 and each milestone adds .12 to Tissue effect exponent but nullify Radio Waves."
                                return "Reward: Token cost exponent is .26 and each milestone adds .03 to Tissue effect exponent but nullify Radio Waves."
                        },
                }, // hasMilestone("t", 13)
                14: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e124,683 Stem Cells"
                                return "1e138,397 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e124683" : "1e138397")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Per milestone Primary is 5e7x easier but nullify UHF Gamma Rays."
                                return "Reward: Per milestone Primary is 6e9x easier but nullify UHF Gamma Rays."
                        },
                }, // hasMilestone("t", 14)
                15: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e130,158 Stem Cells"
                                return "1e144,546 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e130158" : "1e144546")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Per upgrade add .021 to Omnipotent's base but nullify Double exponential."
                                return "Reward: Per upgrade add .013 to Omnipotent's base but nullify Double exponential."
                        },
                }, // hasMilestone("t", 15)
                16: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e153,149 Stem Cells"
                                return "1e158,463 Stem Cells"
                        },
                        done(){
                                return player.cells.stem_cells.points.gte(player.extremeMode ? "1e153149" : "1e158463")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Pluripotent's cost base is 5e22 and reduce Secondary goal by 5e22x but nullify Exponential."
                                return "Reward: Pluripotent's cost base is 5e22 but nullify Exponential."
                        },
                }, // hasMilestone("t", 16)
                17: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e11,228 Cells"
                                return "1e560,130 Stem Cells"
                        },
                        done(){
                                if (player.extremeMode) return player.cells.points.gte("1e11228")
                                return player.cells.stem_cells.points.gte("1e560130")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) "Reward: Per milestone multiply Cell and Stem Cell gain by total Token II, Secondary is 10x easier, and unlock a new way to gain Token II."
                                return "Reward: Per milestone multiply Cell and Stem Cell gain by total Token II and unlock a new way to gain Token II."
                        },
                }, // hasMilestone("t", 17)
                18: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e11,954 Cells"
                                return "1e592,633 Stem Cells"
                        },
                        done(){
                                if (player.extremeMode) return player.cells.points.gte("1e11954")
                                return player.cells.stem_cells.points.gte("1e592633")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Token costs scale 1 + milestones / 50 times slower and per token gain 1.08x Stem Cells."
                                return "Reward: Token costs scale 1 + milestones / 50 times slower and per token gain 1.05x Stem Cells."
                        },
                }, // hasMilestone("t", 18)
                19: {
                        requirementDescription(){
                                if (player.extremeMode) return "1e12,918 Cells"
                                return "1e611,726 Stem Cells"
                        },
                        done(){
                                if (player.extremeMode) return player.cells.points.gte("1e12918")
                                return player.cells.stem_cells.points.gte("1e611726")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Reduce Primary goal scaling."
                        },
                }, // hasMilestone("t", 19)
                20: {
                        requirementDescription(){
                                return "1e634,788 Stem Cells"
                        },
                        done(){
                                if (player.extremeMode) return false
                                return player.cells.stem_cells.points.gte("1e634788")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Per Token II multiply Stem Cell gain by 1.5, not effected by Secondary."
                        },
                }, // hasMilestone("t", 20)
                21: {
                        requirementDescription(){
                                return "1e17,204 Cells"
                        },
                        done(){
                                if (player.extremeMode) return false
                                return player.cells.points.gte("1e17204")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Milestones dilate point gain."
                        },
                }, // hasMilestone("t", 21)
                22: {
                        requirementDescription(){
                                return "1e18,741 Cells"
                        },
                        done(){
                                if (player.extremeMode) return false
                                return player.cells.points.gte("1e18741")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: The final Secondary challenge is 1e15x easier."
                        },
                }, // hasMilestone("t", 22)
                23: {
                        requirementDescription(){
                                return "1e23,701 Cells"
                        },
                        done(){
                                if (player.extremeMode) return false
                                return player.cells.points.gte("1e23701")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: You can buy max Multipotent and Stem Cell buyables no longer cost anything."
                        },
                }, // hasMilestone("t", 23)
        },
        tabFormat: {
                "Start": {
                        content: [
                                "main-display",
                                ["prestige-button", "", function (){ return hasUpgrade("t", 132) ? {'display': 'none'} : {}}],
                                ["display-text", function (){ return hasUpgrade("t", 132) ? "You can reset for " + formatWhole(tmp.t.getResetGain) + " Tissues" : ""}], 
                                "blank",
                                ["upgrades", [1,2,3,4,5]],
                        ],
                        unlocked(){
                                return true
                        },
                },
                "Middle": {
                        content: [
                                "main-display",
                                ["prestige-button", "", function (){ return hasUpgrade("t", 132) ? {'display': 'none'} : {}}],
                                ["display-text", function (){ return hasUpgrade("t", 132) ? "You can reset for " + formatWhole(tmp.t.getResetGain) + " Tissues" : ""}], 
                                "blank",
                                ["upgrades", [6,7,8,9,10]],
                        ],
                        unlocked(){
                                return hasMilestone("t", 6) || hasMilestone("or", 9)
                        },
                },
                "End": {
                        content: [
                                "main-display",
                                ["prestige-button", "", function (){ return hasUpgrade("t", 132) ? {'display': 'none'} : {}}],
                                ["display-text", function (){ return hasUpgrade("t", 132) ? "You can reset for " + formatWhole(tmp.t.getResetGain) + " Tissues" : ""}], 
                                "blank",
                                ["upgrades", [11,12,13,14,15]],
                        ],
                        unlocked(){
                                return hasUpgrade("cells", 55) || hasMilestone("or", 9)
                        },
                },
                "Milestones": {
                        content: [
                                "main-display",
                                ["display-text", function(){
                                        return "You have done " + formatWhole(player.t.times) + " Tissue resets"
                                }],
                                "milestones",
                        ],
                        unlocked(){
                                return true
                        },
                },
                "Info": {
                        content: [
                                "main-display",
                                ["display-text", function(){
                                        let a1 = "Initial Tissue gain: (Cells*1e615)<sup>1/2,000</sup>-9"
                                        let a2 = "Current Tissue gain: (Cells*1e615)<sup>1/"
                                        a2 += formatWhole(tmp.t.getGainExp.pow(-1)) + "</sup>-9"
                                        if (hasUpgrade("t", 71)) {
                                                a2 = a2.replace("(Cells*1e615)", "Cells")
                                                a2 = a2.replace("-9", "")
                                        }
                                        if (player.extremeMode) {
                                                a1 = a1.replace("615", "1187")
                                                a2 = a2.replace("615", "1187")
                                        }
                                        let a3 = "Initial Tissue effect: Tissues+1"
                                        let a4 = "Current Tissue effect: (" + format(tmp.t.effectMult) 
                                        a4 += "*Tissues+" + format(tmp.t.effectAdd) + ")<sup>" + format(tmp.t.effectExp, 3) + "</sup>"
                                        a4 = a4.replace("(1.00*Tissues+0.00)", "Tissues")
                                        let a = a1 + br + a2 + br2 + a3 + br + a4
                                        let b = "Tissue resets all prior content that is not permanently kept."
                                        let c = "Note that Anti- challenges and gems are never reset anymore."
                                        let d1 = "Tissue effect affects Phosphorus, Life, Amino Acid, Protein,"
                                        let d2 = "DNA, Cell, Stem Cell, Mu, Lambda, Kappa, and Iota gain."
                                        if (player.extremeMode) {
                                                d1 += " DNA Science,"
                                                d2 = "Protein Science, " + d2 
                                        }
                                        let d = d1 + br + d2

                                        let part1 = a + br2 + b + br + c + br2 + d

                                        if (!hasUpgrade("t", 91)) return part1

                                        let e = "<sup>*</sup> The effect to DNA effect exponent is maxed at 2e8."

                                        if (!hasUpgrade("cells", 65)) return part1 + br2 + e

                                        let f = "<sup>**</sup> Nullifies Phosphrous and µ upgrades, µ buyables, and sets Phosphorus and µ to zero."

                                        let part2 = part1 + br2 + e + br2 + f

                                        return part2
                                }],
                        ],
                        unlocked(){
                                return true
                        },
                },
        },
        onPrestige(g){
                let timesAdd = 1
                if (player.easyMode) timesAdd *= 2
                if (hasMilestone("or", 1)) timesAdd *= 3
                player.t.times += timesAdd
                player.t.time = 0
                player.t.bestOnReset = player.t.bestOnReset.max(g)
        },
        doReset(layer){
                if (layer != "t") return
                player.t.time = 0

                /*
                1. Cells content
                2. DNA content
                3. Amino Acid content
                4. Life content
                */

                let data1 = player.cells
                let data2 = player.d
                let data3 = player.a
                let data4 = player.l

                // 1 cell content
                if (!player.nu.unlocked) {
                        let cKeptMilestones = 0
                        if (hasUpgrade("t", 41)) cKeptMilestones += player.t.times
                        if (hasUpgrade("t", 43)) {
                                if (hasUpgrade("t", 13)) cKeptMilestones += 3
                                if (hasUpgrade("t", 23)) cKeptMilestones += 3
                                if (hasUpgrade("t", 33)) cKeptMilestones += 3
                                if (hasUpgrade("t", 43)) cKeptMilestones += 3
                                if (hasUpgrade("t", 53)) cKeptMilestones += 3
                        }
                        if (!false) {
                                sortStrings(data1.milestones)
                                data1.milestones = data1.milestones.slice(0, cKeptMilestones)
                        }

                        let cKeptUpgrades = 0
                        if (hasUpgrade("t", 42)) cKeptUpgrades += player.t.upgrades.length
                        if (hasMilestone("or", 3)) cKeptUpgrades += player.or.times
                        if (!false) {
                                sortStrings(data1.upgrades)
                                data1.upgrades = data1.upgrades.slice(0, cKeptUpgrades)
                        }

                        let cKeptTimes = 0
                        if (hasUpgrade("t", 44)) cKeptTimes += player.t.times
                        if (!false) data1.times = Math.min(data1.times, cKeptTimes)

                        // 1a: Stem
                        let cKeptChallenges = 0
                        if (hasUpgrade("t", 45)) cKeptChallenges += player.t.times
                        if (!false) {
                                let chData = data1.challenges
                                if (cKeptChallenges < chData[11]) {
                                        chData[11] = cKeptChallenges
                                        chData[12] = 0
                                } else {
                                        chData[12] = Math.min(chData[12], cKeptChallenges-chData[11])
                                }
                        }
                        // 1b: minigames
                        if (!false) {
                                // Mu:
                                data1.mu.points = decimalZero
                                data1.mu.best = decimalZero
                                data1.buyables[111] = decimalZero
                                data1.buyables[112] = decimalZero
                                data1.total11 = decimalZero

                                // Lambda:
                                data1.lambda.points = decimalZero
                                data1.lambda.best = decimalZero
                                data1.lambda.sacrificed = decimalZero
                                data1.total12 = decimalZero

                                // Kappa: 
                                data1.kappa.points = decimalZero
                                data1.kappa.best = decimalZero
                                data1.kappa.currentBarValue = decimalOne
                                data1.kappa.currentTime = 0
                                data1.total13 = decimalZero

                                // Iota:
                                data1.iota.points = decimalZero
                                data1.iota.best = decimalZero
                                data1.buyables[411] = decimalZero
                                data1.buyables[412] = decimalZero
                                data1.buyables[413] = decimalZero
                                data1.total14 = decimalZero
                        }
                }
                data1.buyables[11] = decimalZero
                data1.buyables[12] = decimalZero
                data1.buyables[13] = decimalZero
                data1.stem_cells.points = decimalZero
                data1.stem_cells.best = decimalZero
                data1.points = decimalZero
                data1.best = decimalZero
                data1.total = decimalZero
                data1.timeInMinigame = 0
                data1.currentMinigame = undefined

                // 2 DNA content
                if (!player.nu.unlocked) {
                        let dKeptMilestones = 0
                        if (hasMilestone("cells", 1)) dKeptMilestones += data1.times
                        if (!false) {
                                sortStrings(data2.milestones)
                                data2.milestones = data2.milestones.slice(0, dKeptMilestones)
                        }

                        let dKeptUpgrades = 0
                        if (hasMilestone("cells", 5)) dKeptUpgrades += data1.times
                        if (!false) {
                                sortStrings(data2.upgrades)
                                data2.upgrades = data2.upgrades.slice(0, dKeptUpgrades)
                        }

                        let dKeptTimes = 0
                        if (hasMilestone("cells", 3)) dKeptTimes += data1.times
                        if (!false) data2.times = Math.min(data2.times, dKeptTimes)
                }

                data2.points = decimalZero
                data2.best = decimalZero
                data2.total = decimalZero

                // 3 Amino Acid content
                if (!false) {
                        let aKeptMilestones = 0
                        if (hasMilestone("d", 2)) aKeptMilestones += 3 * data2.times
                        if (!false){
                                sortStrings(data3.milestones)
                                data3.milestones = data3.milestones.slice(0, aKeptMilestones)
                        }

                        data3.buyables[11] = decimalZero
                        data3.buyables[12] = decimalZero
                        data3.buyables[13] = decimalZero
                        data3.buyables[21] = decimalZero
                        data3.buyables[22] = decimalZero
                        data3.buyables[23] = decimalZero
                        data3.buyables[31] = decimalZero
                        data3.buyables[32] = decimalZero
                        data3.buyables[33] = decimalZero

                        let aKeptUpgrades = 0
                        if (hasMilestone("d", 7)) aKeptUpgrades += data2.times * 2
                        if (!false) {
                                sortStrings(data3.upgrades)
                                data3.upgrades = data3.upgrades.slice(0, aKeptUpgrades)
                        }

                        if (!hasMilestone("d", 5)) data3.times = 0
                }

                data3.points = decimalZero
                data3.best = decimalZero
                data3.total = decimalZero
                data3.protein.best = decimalZero
                data3.protein.total = decimalZero
                data3.protein.points = decimalZero

                // 4 Life content
                if (!false) {
                        let lKeptMilestones = 0
                        if (hasMilestone("a", 1)) lKeptMilestones += 4 * data3.times
                        if (!false) {
                                sortStrings(data4.milestones)
                                data4.milestones = data4.milestones.slice(0, lKeptMilestones)
                        }

                        let startingBuyableAmount = decimalZero
                        if (hasMilestone("cells", 1)) startingBuyableAmount = new Decimal(500)

                        data4.buyables[11] = startingBuyableAmount
                        data4.buyables[12] = startingBuyableAmount
                        data4.buyables[13] = startingBuyableAmount
                        data4.buyables[21] = startingBuyableAmount
                        data4.buyables[22] = startingBuyableAmount
                        data4.buyables[23] = startingBuyableAmount
                        data4.buyables[31] = startingBuyableAmount // buyables
                        data4.buyables[32] = startingBuyableAmount
                        data4.buyables[33] = startingBuyableAmount

                        //gems
                        if (!hasMilestone("d", 12)) {
                                let x = getResetGemIDs()

                                let gData = player.l.grid

                                for (i in x) {
                                        id = x[i]
                                        let thisKeep = decimalZero
                                        if (hasMilestone("a", 12) && id < 400 && (id % 100 < 4)) {
                                                thisKeep = thisKeep.max(1000)
                                        }
                                        gData[id].gems = gData[id].gems.min(thisKeep)
                                }
                        }

                        //reset times
                        if (!hasMilestone("a", 9) && !hasMilestone("cells", 2)) data4.times = 0
                }

                data4.points = decimalZero
                data4.best = decimalZero
                data4.total = decimalZero

                player.mu.buyables[11] = decimalZero
                player.mu.buyables[12] = decimalZero
                player.mu.buyables[13] = decimalZero
                player.mu.buyables[21] = decimalZero
                player.mu.buyables[22] = decimalZero
                player.mu.buyables[23] = decimalZero
                player.mu.buyables[31] = decimalZero // buyables
                player.mu.buyables[32] = decimalZero
                player.mu.buyables[33] = decimalZero

                player.p.best_over_amino = decimalZero

                if (player.extremeMode) layers.sci.doReset("t")

                resetPreLifeCurrencies()
        },
})

addLayer("or", {
        name: "Organs", 
        symbol: "O", 
        position: 5, 
        startData(){ return {
                unlocked: false,
		points: decimalZero,
                best: decimalZero,
                total: decimalZero,
                abtime: 0,
                time: 0,
                times: 0,
                passiveTime: 0,
                milestone2Ever: false,
                milestone3Ever: false,
                oxygenated_blood: {
                        points: decimalZero,
                        best: decimalZero,
                        total: decimalZero,
                },
                deoxygenated_blood: {
                        points: decimalZero,
                        best: decimalZero,
                        total: decimalZero,
                },
                filterLeftKidney: false,
                contaminants: {
                        points: decimalZero,
                        best: decimalZero,
                        total: decimalZero,
                },
                air: {
                        points: decimalZero,
                        best: decimalZero,
                        total: decimalZero,
                },
                kidneyABTime: 0,
                lungChallengesUnlocked: 0,
                bankedAir: {
                        11: decimalZero,
                        12: decimalZero,
                        21: decimalZero,
                        22: decimalZero,
                        31: decimalZero,
                        32: decimalZero,
                        41: decimalZero,
                        42: decimalZero,
                },
                challengeAir: decimalZero,
                energy: {
                        points: decimalZero,
                        best: decimalZero,
                        total: decimalZero,
                },
                extras: {
                        401: decimalZero,
                        402: decimalZero,
                        403: decimalZero,
                        411: decimalZero,
                        412: decimalZero,
                        413: decimalZero,
                        421: decimalZero,
                        422: decimalZero,
                        423: decimalZero,
                },
                intestineABTime: 0,
        }},
        color: "#F8C4F0",
        branches: [],
        requires:() => new Decimal("1e100"), 
        resource: "Organs", 
        baseResource: "Tissues", 
        baseAmount(){return player.t.points},
        type: "custom",
        getResetGain(){
                let ret = tmp.or.getBaseGain.times(tmp.or.getGainMult)
                
                if (player.extremeMode) ret = ret.pow(.75)
                
                return ret.floor()
        },
        getBaseGain(){
                let pts = player.t.points
                if (pts.lt("1e100")) return decimalZero

                if (hasMilestone("nu", 18))     return pts.log10().pow(.35).pow10().root(4).pow(tmp.or.getGainExp)
                if (hasMilestone("ch", 33))     return pts.log10().pow(.35).pow10().pow(tmp.or.getGainExp)
                if (!player.an.achActive[13] && hasAchievement("an", 13)) {
                                                return pts.log10().pow(.31).pow10().pow(tmp.or.getGainExp)
                }
                if (hasUpgrade("or", 41))       return pts.log10().pow(.3).pow10().pow(tmp.or.getGainExp)
                if (hasUpgrade("or", 235))      return pts.log10().pow(.25).pow10()
                if (hasUpgrade("or", 154))      return pts.log10().pow(.2).pow10()
                if (hasUpgrade("or", 114))      return pts.log10().pow(tmp.or.getGainExp).max(0)
                return pts.log10().pow(tmp.or.getGainExp).sub(9).max(0)
        },
        getGainMult(){ // o gain organgain ogain organ gain organsgain organs gain
                let ret = decimalOne

                if (player.easyMode)            ret = ret.times(2)
                if (hasUpgrade("or", 124))      ret = ret.times(tmp.or.upgrades[124].effect)
                if (hasUpgrade("or", 131))      ret = ret.times(player.or.milestones.length)
                if (hasUpgrade("or", 135))      ret = ret.times(player.or.upgrades.length)
                if (hasUpgrade("or", 14))       ret = ret.times(player.tokens.tokens2.total.max(1))
                if (hasUpgrade("or", 141) && !hasUpgrade("or", 41)) {
                        let lvls = Math.max(0, player.or.upgrades.length - 30)
                                                ret = ret.times(player.or.buyables[201].plus(10).log10().pow(lvls))
                }
                if (hasUpgrade("or", 313))      ret = ret.times(player.or.air.points.max(10).log10())
                if (hasMilestone("or", 20))     ret = ret.times(player.or.energy.points.max(10).log10())
                                                ret = ret.times(tmp.or.buyables[423].effect)
                if (hasUpgrade("or", 31))       ret = ret.times(Decimal.pow(1.03, player.tokens.tokens2.total))
                                                ret = ret.times(tmp.an.effect)
                if (hasUpgrade("an", 23))       ret = ret.times(player.an.grid[506].extras.plus(1))
                if (hasMilestone("ch", 7))      ret = ret.times(player.ch.points.pow(player.ch.points))
                if (player.an.achActive[13] && hasAchievement("an", 13) || hasAchievement("an", 23)) {
                                                ret = ret.times(player.an.grid[308].extras.plus(1).pow(player.ch.points.div(17)))
                }
                if (hasUpgrade("ch", 41))       ret = ret.times(player.an.grid[303].extras.plus(1).pow(player.nu.points))
                if (hasUpgrade("nu", 24))       ret = ret.times(player.an.grid[203].extras.plus(1).pow(player.ch.points))
                if (hasUpgrade("sp", 12))       ret = ret.times(tmp.sp.effect.pow(player.sp.times ** 2))

                return ret.max(1)
        },
        getGainExp(){
                let ret = new Decimal(.5)

                if (hasUpgrade("or", 112)) ret = ret.plus(.01 * player.or.upgrades.length)
                if (hasMilestone("ch", 9) && !hasMilestone("ch", 33)) {
                                                ret = ret.plus(player.ch.points.div(100))
                }
                ret = ret.plus(tmp.nu.effectSecondary)

                return ret
        },
        getNextAt(){
                let gain = tmp.or.getResetGain.plus(1)

                if (player.extremeMode) gain = gain.root(.75)

                let reqInit = gain.div(tmp.or.getGainMult).max(1)
                if (hasUpgrade("or", 114)) return reqInit.root(tmp.or.getGainExp).pow10()
                return reqInit.plus(9).root(tmp.or.getGainExp).pow10().max("1e100")
        },
        canReset(){
                return tmp.or.getResetGain.gt(0) && hasUpgrade("t", 155) && hasUpgrade("t", 151) && !hasUpgrade("or", 125)
        },
        resetsNothing(){
                return hasUpgrade("or", 153)
        },
        effect(){
                let pts = player.or.total
                if (hasUpgrade("or", 124)) pts = player.or.best

                let exp = pts.cbrt().div(5).min(99).plus(1)
                if (hasUpgrade("an", 12)) exp = exp.plus(player.tokens.tokens2.total)
                
                if (hasMilestone("an", 27))     exp = exp.times(player.ch.points.max(6).log(6))
                if (hasMilestone("nu", 8))      exp = exp.times(player.nu.points.plus(1))

                let ret = pts.plus(1).pow(exp)

                return ret.max(1)
        },
        effectDescription(){
                let start = " multiplying all prior currency gain by " 
                return start + format(tmp.or.effect) + "."
        },
        update(diff){
                let data = player.or
                
                if (data.points.gt(0) || hasUpgrade("t", 155)) data.unlocked = true
                data.best = data.best.max(data.points)

                data.time += diff
                if (hasUpgrade("or", 123)) data.passiveTime += diff

                if (data.passiveTime > 1) {
                        data.passiveTime += -1
                        data.times ++
                }
                if (data.passiveTime > 10) data.passiveTime = 10

                if (hasUpgrade("or", 105)) {
                        let gainPercentage = new Decimal(hasUpgrade("or", 125) ? 1 : .1)
                        if (!hasUpgrade("or", 124)) { // normal gain
                                let gain = tmp.or.getResetGain.times(gainPercentage).times(diff)
                                data.points = data.points.plus(gain)
                                data.total = data.total.plus(gain)
                        } else if (player.or.points.div(10).lt(tmp.or.getResetGain)) {
                                let gain = tmp.or.getResetGain.times(gainPercentage).times(diff)
                                data.points = data.points.plus(gain).min(tmp.or.getResetGain.times(10))
                                data.total = data.total.plus(gain)
                        }
                }

                if (hasMilestone("or", 1) && data.autobuya) {
                        let aKeys = ["11", "12", "13", "14", "15", 
                                     "21", "22", "23", "24", "25", 
                                     "31", "32", "33", "34", "35",
                                     "41", "42", "43", "44", "45", 
                                     "51", "52", "53", "54", "55", 
                                     "61", "62", "63", "64", "65",
                                     ]
                        let boughtYet = false
                        for (i in aKeys) {
                                if (boughtYet) break
                                id = aKeys[i]
                                boughtYet = buyUpg("a", id) 
                        }
                }

                if (hasMilestone("or", 2) && data.autobuyd) {
                        let dKeys = ["11", "12", "13", "14", "15", 
                                     "21", "22", "23", "24", "25", 
                                     "31", "32", "33", "34", "35"]
                        let boughtYet = false
                        for (i in dKeys) {
                                if (boughtYet) break
                                id = dKeys[i]
                                boughtYet = buyUpg("d", id) 
                        }
                }

                if (hasMilestone("or", 3) && data.autobuyc) {
                        let cellKeys = [11, 12, 13, 14, 15, 
                                        21, 22, 23, 24, 25, 
                                        31, 32, 33, 34, 35, 
                                        41, 42, 43, 44, 45, 
                                        51, 52, 53, 54, 55, 
                                        61, 62, 63, 64, 65, 
                                        111, 112, 113, 114, 
                                        115, 211, 212, 213, 
                                        214, 215, 311, 312, 
                                        313, 314, 315, 411, 
                                        412, 413, 414, 415]
                        let boughtYet = false
                        for (i in cellKeys) {
                                if (boughtYet) break
                                id = cellKeys[i]
                                boughtYet = buyUpg("cells", id)
                        }
                }

                if (hasMilestone("or", 4) && data.autobuyt) {
                        let tissueKeys = [11, 12, 13, 14, 15, 
                                          21, 22, 23, 24, 25, 
                                          31, 32, 33, 34, 35, 
                                          41, 42, 43, 44, 45, 
                                          51, 52, 53, 54, 55, 
                                          61, 62, 63, 64, 65, 
                                          71, 72, 73, 74, 75, 
                                          81, 82, 83, 84, 85, 
                                          91, 92, 93, 94, 95, 
                                          101, 102, 103, 104, 105, 
                                          111, 112, 113, 114, 115, 
                                          121, 122, 123, 124, 125, 
                                          131, 132, 133, 134, 135, 
                                          141, 142, 143, 144, 145, 
                                          151, 152, 153, 154, 155]
                        let boughtYet = false
                        for (i in tissueKeys) {
                                if (boughtYet) break
                                id = tissueKeys[i]
                                boughtYet = buyUpg("t", id)
                        }
                }

                if (hasMilestone("or", 6)) {
                        if (tmp.tokens.buyables[191].unlocked) {
                                if (tmp.tokens.buyables[191].canAfford) {
                                        layers.tokens.buyables[191].buy()
                                }
                        }
                }
                if (hasMilestone("or", 7)) {
                        if (tmp.tokens.buyables[192].unlocked) {
                                if (tmp.tokens.buyables[192].canAfford) {
                                        layers.tokens.buyables[192].buy()
                                }
                        }
                }

                if (hasMilestone("or", 8)) {
                        if (tmp.tokens.buyables[193].unlocked) {
                                if (tmp.tokens.buyables[193].canAfford) {
                                        layers.tokens.buyables[193].buy()
                                }
                        }
                }

                if (hasMilestone("or", 22)) {
                        if (player.or.autobuyupquark) {
                                if (tmp.tokens.buyables[101].canAfford) {
                                        layers.tokens.buyables[101].buy()
                                }
                        }
                }

                if (!data.milestone2Ever) data.milestone2Ever = hasMilestone("or", 2)
                if (!data.milestone3Ever) data.milestone3Ever = hasMilestone("or", 3)

                if (player.cells.challenges[21] >= 3)   layers.or.heart.update(diff)
                if (hasUpgrade("or", 14))               layers.or.kidney.update(diff)
                if (hasUpgrade("or", 215))              layers.or.lungs.update(diff)
                if (hasUpgrade("or", 315))              layers.or.intestine.update(diff)
        },
        row: 2, 
        prestigeButtonText(){
                let b = ""
                if (tmp.or.getResetGain.lt(1e3)) b = "<br>Next: " + format(tmp.or.getNextAt) + " Tissues."

                return "Reset for <b>" + formatWhole(tmp.or.getResetGain) + "</b> Organs" + b
        },
        layerShown(){
                if (tmp.or.deactivated) return false
                return hasUpgrade("t", 155) || player.or.unlocked
        },
        intestine: {
                update(diff){
                        let data = player.or
                        let subdata = data.energy

                        let resetGain = tmp.or.intestine.getResetGain
                        let gain = resetGain.times(diff)

                        subdata.points = subdata.points.plus(gain)
                        subdata.total = subdata.total.plus(gain)
                        subdata.best = subdata.best.max(subdata.points)
                        // deal with buyables producing other amounts
                        let ids = [401, 402, 403, 411, 412, 413, 421, 422, 423] 
                        for (i in ids) {
                                let id = ids[i]
                                let amtGain = tmp.or.buyables[id].amountGain
                                if (hasUpgrade("an", 13) && hasMilestone("or", 21)) {
                                        data.extras[id] = amtGain
                                } else if (hasMilestone("or", 21)) {
                                        let lossRate = .05
                                        if (hasMilestone("or", 24)) lossRate += .05
                                        if (hasMilestone("an", 3)) lossRate *= 10
                                        data.extras[id] = getLogisticAmount(data.extras[id], amtGain, lossRate, diff)
                                } else {
                                        data.extras[id] = data.extras[id].plus(amtGain.times(diff))
                                }
                        }

                        data.intestineABTime += diff * 20 // 20 times per second

                        if (data.intestineABTime > 1) {
                                data.intestineABTime += -1
                                if (data.intestineABTime > 10) data.intestineABTime = 10
                                let abKeys = []
                                if (!player.sp.unlocked) {
                                        if (hasUpgrade("or", 321) || hasMilestone("an", 1)) abKeys.push(401)
                                        if (hasMilestone("an", 2)) abKeys.push(402)
                                        if (hasMilestone("an", 3)) abKeys.push(403)
                                        if (hasMilestone("an", 4)) abKeys.push(411)
                                        if (hasMilestone("an", 5)) abKeys.push(412)
                                        if (hasMilestone("an", 6)) abKeys.push(413)
                                        if (hasMilestone("an", 7)) abKeys.push(421)
                                        if (hasMilestone("an", 8)) abKeys.push(422)
                                        if (hasMilestone("an", 9)) abKeys.push(423)
                                } else {
                                        abKeys = [401, 402, 403, 411, 412, 413, 421, 422, 423]
                                }

                                for (i in abKeys) {
                                        let id = abKeys[i]
                                        if (tmp.or.buyables[id].unlocked) {
                                                if (tmp.or.buyables[id].canAfford) layers.or.buyables[id].buy()
                                        }
                                }
                        } 
                },
                getResetGain(){ // energy gain energygain egain engain en gain e gain  egain
                        if (player.or.air.total.lt("1e2300")) return decimalZero
                        let data = player.or.extras
                        let ret = decimalOne

                        if (player.easyMode)            ret = ret.times(4)
                                                        ret = ret.times(data[401].plus(1))
                                                        ret = ret.times(data[402].plus(1))
                                                        ret = ret.times(data[403].plus(1))
                                                        ret = ret.times(data[411].plus(1))
                                                        ret = ret.times(data[412].plus(1))
                                                        ret = ret.times(data[413].plus(1))
                                                        ret = ret.times(data[421].plus(1))
                                                        ret = ret.times(data[422].plus(1))
                                                        ret = ret.times(data[423].plus(1))
                        if (hasMilestone("or", 20))     ret = ret.times(player.or.milestones.length)
                        if (hasUpgrade("or", 21))       ret = ret.times(player.d.points.max(10).log10())
                        if (hasUpgrade("or", 23))       ret = ret.times(tmp.or.upgrades[23].effect)
                        if (hasUpgrade("or", 323))      ret = ret.times(tmp.or.upgrades[323].effect)
                                                        ret = ret.times(tmp.an.effect)
                        if (hasUpgrade("an", 15))       ret = ret.times(player.an.grid[607].extras.plus(1))
                        if (hasUpgrade("or", 43))       ret = ret.times(tmp.tokens.buyables[122].effect)
                        if (hasMilestone("an", 23))     ret = ret.times(player.an.grid[404].extras.plus(1).pow(player.ch.points))

                        // BELOW IS EXPONENTIAL THINGS
                        if (player.extremeMode)         ret = ret.pow(.75) 
                        if (hasMilestone("or", 21)) {
                                let a = hasUpgrade("or", 151) + hasUpgrade("or", 152) + hasUpgrade("or", 153)
                                a += hasUpgrade("or", 154) + hasUpgrade("or", 155) 
                                                        ret = ret.pow(Decimal.pow(1.01, a))
                        }
                        if (hasUpgrade("nu", 21))       ret = ret.pow(player.ch.points.max(1234).div(1234).cbrt().min(1.01))
                        if (hasMilestone("an", 42))     ret = ret.pow(player.ch.points.max(1465).div(1465).sqrt().min(1.1))
                        
                        return ret
                },
        },
        lungs: {
                update(diff){
                        let data = player.or
                        let subdata = data.air

                        let resetGain = tmp.or.lungs.getResetGain
                        let gain = resetGain.times(diff)
                        if (hasUpgrade("or", 311) && resetGain.times(20).gt(subdata.points)) {
                                // first find how much 10x production we have left
                                if (resetGain.gt(0)) {
                                        let boostTime = Decimal.sub(2, resetGain.div(subdata.points).div(10))
                                        if (boostTime.gte(diff) && boostTime.gt(0)) {
                                                gain = gain.times(10) // we have enough 10x time left
                                        } else if (boostTime.gt(0)) {
                                                // we gain 10x for boostTime and 1x for diff-boostTime
                                                // so 9xboostTime + diff 
                                                gain = gain.plus(boostTime.times(resetGain).times(9))
                                        }
                                }
                        }

                        subdata.points = subdata.points.plus(gain)
                        subdata.total = subdata.total.plus(gain)
                        subdata.best = subdata.best.max(subdata.points)
                        if (player.or.activeChallenge) data.challengeAir = data.challengeAir.plus(gain)

                        let otherIds = []
                        if (hasMilestone("an", 1)) {
                                otherIds = [11, 12, 21, 22, 31, 32]
                        } else {
                                if (hasUpgrade("or", 302)) otherIds.push(11)
                                if (hasUpgrade("or", 303)) otherIds.push(12)
                                if (hasUpgrade("or", 304)) otherIds.push(21)
                                if (hasUpgrade("or", 305)) otherIds.push(22)
                                if (hasUpgrade("or", 222)) otherIds.push(31)
                                if (hasUpgrade("or", 154)) otherIds.push(32)
                        }

                        for (i in otherIds) {
                                let id = otherIds[i]
                                data.bankedAir[id] = data.bankedAir[id].plus(gain)
                        }

                        let reqs = tmp.or.lungs.reqs
                        if (subdata.points.gte(reqs[data.lungChallengesUnlocked])) {
                                if (data.lungChallengesUnlocked < reqs.length) {
                                        data.lungChallengesUnlocked ++
                                }
                        }
                },
                reqs(){
                        return ["10", "1e5", "1e13", "1e43", "1e117", "1e369"]
                },
                getResetGain(){ // air gain airgain again airgain a gain air gain a gain
                        let ret = decimalOne

                        if (player.hardMode)            ret = ret.div(4)
                        if (player.easyMode)            ret = ret.times(4)
                        if (!hasMilestone("ch", 11)) {
                                                        ret = ret.times(tmp.or.challenges[11].reward)
                                                        ret = ret.times(tmp.or.challenges[12].reward)
                                                        ret = ret.times(tmp.or.challenges[21].reward)
                                                        ret = ret.times(tmp.or.challenges[22].reward)
                                                        ret = ret.times(tmp.or.challenges[31].reward)
                                                        ret = ret.times(tmp.or.challenges[32].reward)
                        }
                        if (hasUpgrade("or", 224))      ret = ret.times(tmp.or.upgrades[224].effect)
                        if (hasMilestone("or", 17))     ret = ret.times(player.or.milestones.length)
                        if (hasUpgrade("or", 301))      ret = ret.times(tmp.or.upgrades[301].effect)
                        if (hasUpgrade("or", 221))      ret = ret.times(player.t.points.max(10).log10())
                        if (hasUpgrade("or", 312))      ret = ret.times(Decimal.pow(3, player.tokens.best_buyables[101].sub(30)).max(1))
                        if (hasMilestone("or", 20))     ret = ret.times(player.or.energy.points.max(10).log10())
                        if (hasUpgrade("or", 225))      ret = ret.times(tmp.or.buyables[412].effect)
                        if (hasUpgrade("or", 23))       ret = ret.times(tmp.or.upgrades[23].effect)
                        if (hasUpgrade("or", 233))      ret = ret.times(tmp.or.upgrades[323].effect)
                                                        ret = ret.times(tmp.an.effect)
                        if (hasMilestone("an", 16))     ret = ret.times(player.an.grid[808].extras.plus(1))
                        if (hasUpgrade("an", 22))       ret = ret.times(player.an.grid[505].extras.plus(1).pow(player.an.grid[508].buyables))
                        if (hasUpgrade("or", 43))       ret = ret.times(tmp.tokens.buyables[122].effect)
                        if (hasUpgrade("sp", 14))       ret = ret.times(tmp.sp.effect.pow(player.tokens.total.pow(.7)))

                        if (player.extremeMode)         ret = ret.pow(.75) 
                        if (hasMilestone("ch", 11))     ret = ret.pow(60)
                        if (hasMilestone("nu", 17))     ret = ret.pow(Decimal.pow(1.01, player.nu.points))
                        
                        return ret
                },
        },
        kidney: {
                update(diff){
                        let filterLeft = player.or.filterLeftKidney
                        let data = player.or
                        let dbData = data.deoxygenated_blood
                        let obData = data.oxygenated_blood
                        let subdata = data.contaminants

                        if (!hasUpgrade("or", 152)) {
                                if (filterLeft) {
                                        dbData.points = dbData.points.times(Decimal.pow(.95, diff))
                                } else {
                                        obData.points = obData.points.times(Decimal.pow(.95, diff))
                                }
                        }

                        let gain = tmp.or.kidney.getResetGain.times(diff)

                        if (!player.or.activeChallenge) {
                                subdata.points = subdata.points.plus(gain)
                                subdata.total = subdata.total.plus(gain)
                                subdata.best = subdata.best.max(subdata.points)
                        }

                        data.kidneyABTime += diff * 25 // 20 tim per second

                        if (data.kidneyABTime > 1) {
                                data.kidneyABTime += -1
                                if (data.kidneyABTime > 10) data.kidneyABTime = 10
                                let abKeys = []
                                if (hasMilestone("an", 1)) {
                                        abKeys = [201, 202, 203, 211, 212, 213, 221, 222, 223]
                                } else {
                                        if (hasUpgrade("or", 204)) abKeys.push(201)
                                        if (hasUpgrade("or", 205)) abKeys.push(202)
                                        if (hasUpgrade("or", 211)) abKeys.push(203)
                                        if (hasUpgrade("or", 142)) abKeys.push(211)
                                        if (hasUpgrade("or", 213)) abKeys.push(212)
                                        if (hasUpgrade("or", 214)) abKeys.push(213)
                                        if (hasUpgrade("or", 215)) abKeys.push(221)
                                        if (hasUpgrade("or", 301)) abKeys.push(222)
                                        if (hasUpgrade("or", 302)) abKeys.push(223)
                                }

                                for (i in abKeys) {
                                        let id = abKeys[i]
                                        if (tmp.or.buyables[id].unlocked) {
                                                if (tmp.or.buyables[id].canAfford) layers.or.buyables[id].buy()
                                        }
                                }
                        } 
                },
                getResetGain(){ // contaminant gain contaminantgain cgain contgain antgain cont gain
                        let ret = decimalOne

                        if (player.hardMode)            ret = ret.div(4)
                        if (player.easyMode)            ret = ret.times(4)
                        if (hasUpgrade("or", 201)) {
                                let base = hasUpgrade("or", 321) || player.an.unlocked ? 4 : 2
                                                        ret = ret.times(Decimal.pow(base, tmp.or.upgrades.kidneyUpgradesLength))
                        }
                                                        ret = ret.times(tmp.or.buyables[201].effect)
                                                        ret = ret.times(tmp.or.buyables[202].effect)
                                                        ret = ret.times(tmp.or.buyables[203].effect)
                                                        ret = ret.times(tmp.or.buyables[211].effect)
                                                        ret = ret.times(tmp.or.buyables[212].effect)
                                                        ret = ret.times(tmp.or.buyables[213].effect)
                                                        ret = ret.times(tmp.or.buyables[221].effect)
                                                        ret = ret.times(tmp.or.buyables[222].effect)
                                                        ret = ret.times(tmp.or.buyables[223].effect)
                                                        ret = ret.times(tmp.or.challenges[11].reward)
                        if (hasUpgrade("or", 142))      ret = ret.times(player.or.points.max(1))
                        if (hasUpgrade("or", 143))      ret = ret.times(player.or.buyables[202].max(1).pow(player.or.upgrades.length))
                        if (hasMilestone("or", 16))     ret = ret.times(player.or.deoxygenated_blood.points.max(1))
                        if (hasUpgrade("or", 225))      ret = ret.times(player.or.energy.points.max(1).div(1e200).pow(player.or.upgrades.length))
                                                        ret = ret.times(tmp.an.effect)
                        if (hasMilestone("an", 5))      ret = ret.times(player.or.contaminants.points.plus(10).log10().sqrt().pow10())
                        if (hasUpgrade("an", 21))       ret = ret.times(player.an.grid[608].extras.plus(1).pow(tmp.an.grid.totalLevels))
                        if (hasMilestone("ch", 21))     ret = ret.times(player.an.grid[305].extras.plus(1).pow(player.ch.points.pow(4)))
                        if (hasUpgrade("sp", 15))       ret = ret.times(tmp.sp.effect.pow(player.or.buyables[201].pow(.8)))
                        if (hasUpgrade("sp", 44))       ret = ret.times(player.an.grid[206].extras.plus(1).pow(player.nu.points.pow(6)))

                        if (player.extremeMode)         ret = ret.pow(.75) 
                        
                        return ret
                },
        },
        heart: {
                update(diff){
                        let beatingIn = tmp.or.bars.heart.beatingIn
                        let data = player.or
                        let dbData = data.deoxygenated_blood
                        let obData = data.oxygenated_blood

                        if (!player.or.activeChallenge) {
                                if (beatingIn) { // gain OB
                                        let gain = tmp.or.heart.getOBGain
                                        let netgain = gain.times(diff)
                                        obData.points = obData.points.plus(netgain)
                                        obData.total = obData.total.plus(netgain)
                                } else { // gain DB
                                        let gain = tmp.or.heart.getDBGain
                                        let netgain = gain.times(diff)
                                        dbData.points = dbData.points.plus(netgain)
                                        dbData.total = dbData.total.plus(netgain)
                                }
                        
                                if (hasUpgrade("or", 115)) {
                                        let gainOB = tmp.or.heart.getOBGain
                                        let netOBgain = gainOB.times(diff).times(.01 * player.or.upgrades.length)
                                        obData.points = obData.points.plus(netOBgain)
                                        obData.total = obData.total.plus(netOBgain)

                                        let gainDB = tmp.or.heart.getDBGain
                                        let netDBgain = gainDB.times(diff).times(.01 * player.or.upgrades.length)
                                        dbData.points = dbData.points.plus(netDBgain)
                                        dbData.total = dbData.total.plus(netDBgain)
                                }
                        }
                        
                        dbData.best = dbData.best.max(dbData.points)
                        obData.best = obData.best.max(obData.points)
                },
                getOBGain(){ // ob gain oxygenated gain obgain oxygenatedgain
                        let ret = decimalOne

                        if (player.hardMode)            ret = ret.div(4)
                        if (player.easyMode)            ret = ret.times(4)
                        if (hasUpgrade("or", 101))      ret = ret.times(tmp.or.upgrades[101].base.pow(player.or.upgrades.length))
                        if (hasUpgrade("or", 103))      ret = ret.times(tmp.or.upgrades[103].ob_effect)
                        if (hasUpgrade("or", 202))      ret = ret.times(player.or.deoxygenated_blood.points.max(1).pow(.1))
                                                        ret = ret.times(tmp.or.challenges[22].reward)
                        if (hasUpgrade("or", 305))      ret = ret.times(player.or.air.points.max(10).log10().pow(tmp.or.upgrades.lungUpgradesLength))
                        if (hasUpgrade("or", 312))      ret = ret.times(tmp.or.challenges[31].reward)
                                                        ret = ret.times(tmp.an.effect)
                        if (hasMilestone("an", 18))     ret = ret.times(player.an.grid[708].extras.plus(1))
                        if (hasUpgrade("sp", 13))       ret = ret.times(tmp.sp.effect.pow(player.tokens.tokens2.total.pow(1.5)))

                        if (player.extremeMode)         ret = ret.pow(.75)

                        return ret
                },
                getDBGain(){ // db gain deoxygenated gain dbgain deoxygenatedgain
                        let ret = decimalOne

                        if (player.hardMode)            ret = ret.div(4)
                        if (player.easyMode)            ret = ret.times(4)
                        if (hasUpgrade("or", 101))      ret = ret.times(tmp.or.upgrades[101].base.pow(player.or.upgrades.length))
                        if (hasUpgrade("or", 105))      ret = ret.times(player.or.points.max(1))
                        if (hasUpgrade("or", 115))      ret = ret.times(player.t.points.max(10).log10())
                        if (hasUpgrade("or", 202))      ret = ret.times(player.or.oxygenated_blood.points.max(1).pow(.1))
                        if (hasUpgrade("or", 203))      ret = ret.times(player.or.buyables[201].max(1).pow(tmp.or.upgrades.kidneyUpgradesLength))
                                                        ret = ret.times(tmp.or.challenges[31].reward)
                        if (hasUpgrade("or", 314))      ret = ret.times(tmp.or.challenges[22].reward)
                                                        ret = ret.times(tmp.an.effect)
                        if (hasMilestone("an", 17))     ret = ret.times(player.an.grid[707].extras.plus(1))
                        if (hasUpgrade("sp", 13))       ret = ret.times(tmp.sp.effect.pow(player.tokens.tokens2.total.pow(1.5)))

                        if (player.extremeMode)         ret = ret.pow(.75)
                        
                        return ret
                },
        },
        challenges: {
                onEnter(){
                        player.or.air.points = decimalZero
                },
                11: {
                        name: "Larynx", 
                        canComplete(){ 
                                return true
                        },
                        reward(){
                                let pts = player.or.bankedAir[11]
                                if (hasUpgrade("or", 331)) return pts.max(10).log10().pow(tmp.or.upgrades.lungUpgradesLength).times(pts.plus(1).root(2))
                                if (hasUpgrade("or", 303)) return pts.max(10).log10().pow(Math.log2(tmp.or.upgrades.lungUpgradesLength)).times(pts.plus(1).root(2))
                                if (hasMilestone("or", 18)) return pts.max(10).log10().times(pts.plus(1).root(2))
                                return pts.plus(1).root(2)
                        },
                        onEnter(){
                                layers.or.challenges.onEnter()
                        },
                        onComplete(){
                                let data = player.or
                                data.challenges[11] = hasUpgrade("or", 302)
                                data.bankedAir[11] = data.bankedAir[11].plus(data.challengeAir)
                                data.challengeAir = decimalZero
                                data.air.points = decimalZero
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                let a = "Air gained in this challenge boosts Air and Contaminant gain"
                                let b = "Effect formula:<br>(1+x)<sup>.5</sup>"
                                if (hasMilestone("or", 18)) b += "log10(x)"
                                if (hasUpgrade("or", 303)) b = b.replace("10", "10<sup>log2(Lung upgrades)</sup>")
                                if (hasUpgrade("or", 331)) b = b.replace("log2(Lung upgrades)", "Lung upgrades")
                                let c = "Effect: " + format(tmp.or.challenges[11].reward)
                                let d = "Total Air in this challenge: " + format(player.or.bankedAir[11])
                                let e = "Note: You bank Air gained in this challenge only when completing it"

                                if (!hasUpgrade("or", 302)) return a + br + b + br + c + br + d + br2 + e

                                return a + br + b + br + c + br + d
                        },
                        unlocked(){
                                if (hasMilestone("or", 25) && player.or.dontshowairchall) return false
                                return player.or.lungChallengesUnlocked >= 1
                        },
                }, // inChallenge("or", 11)
                12: {
                        name: "Trachea", 
                        canComplete(){ 
                                return true
                        },
                        reward(){
                                return player.or.bankedAir[12].plus(1).root(4)
                        },
                        onEnter(){
                                layers.or.challenges.onEnter()
                        },
                        onComplete(){
                                let data = player.or
                                data.challenges[12] = hasUpgrade("or", 303)
                                data.bankedAir[12] = data.bankedAir[12].plus(data.challengeAir)
                                data.challengeAir = decimalZero
                                data.air.points = decimalZero
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                let a = "Air gained in this challenge boosts Air and Stem Cell gain"
                                let b = "Effect formula: (1+x)<sup>.25</sup>"
                                let c = "Effect: " + format(tmp.or.challenges[12].reward)
                                let d = "Total Air in this challenge: " + format(player.or.bankedAir[12])
                                let e = "Note: You bank Air gained in this challenge only when completing it"

                                if (!hasUpgrade("or", 303)) return a + br + b + br + c + br + d + br2 + e

                                return a + br + b + br + c + br + d
                        },
                        unlocked(){
                                if (hasMilestone("or", 25) && player.or.dontshowairchall) return false
                                return player.or.lungChallengesUnlocked >= 2
                        },
                }, // inChallenge("or", 12)
                21: {
                        name: "Primary Bronchi", 
                        canComplete(){ 
                                return true
                        },
                        reward(){
                                return player.or.bankedAir[21].plus(1).root(8)
                        },
                        onEnter(){
                                layers.or.challenges.onEnter()
                        },
                        onComplete(){
                                let data = player.or
                                data.challenges[21] = hasUpgrade("or", 304)
                                data.bankedAir[21] = data.bankedAir[21].plus(data.challengeAir)
                                data.challengeAir = decimalZero
                                data.air.points = decimalZero
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                let a = "Air gained in this challenge boosts Air and Cell gain"
                                let b = "Effect formula: (1+x)<sup>.125</sup>"
                                let c = "Effect: " + format(tmp.or.challenges[21].reward)
                                let d = "Total Air in this challenge: " + format(player.or.bankedAir[21])
                                let e = "Note: You bank Air gained in this challenge only when completing it"

                                if (!hasUpgrade("or", 304)) return a + br + b + br + c + br + d + br2 + e

                                return a + br + b + br + c + br + d
                        },
                        unlocked(){
                                if (hasMilestone("or", 25) && player.or.dontshowairchall) return false
                                return player.or.lungChallengesUnlocked >= 3
                        },
                }, // inChallenge("or", 21)
                22: {
                        name: "Secondary Bronchi", 
                        canComplete(){ 
                                return true
                        },
                        reward(){
                                return player.or.bankedAir[22].plus(1).pow(.062)
                        },
                        onEnter(){
                                layers.or.challenges.onEnter()
                        },
                        onComplete(){
                                let data = player.or
                                data.challenges[22] = hasUpgrade("or", 305)
                                data.bankedAir[22] = data.bankedAir[22].plus(data.challengeAir)
                                data.challengeAir = decimalZero
                                data.air.points = decimalZero
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                let a = "Air gained in this challenge boosts Air and " + makePurple("OB") + " gain"
                                let b = "Effect formula: (1+x)<sup>.062</sup>"
                                let c = "Effect: " + format(tmp.or.challenges[22].reward)
                                let d = "Total Air in this challenge: " + format(player.or.bankedAir[22])
                                let e = "Note: You bank Air gained in this challenge only when completing it"

                                if (!hasUpgrade("or", 305)) return a + br + b + br + c + br + d + br2 + e

                                return a + br + b + br + c + br + d
                        },
                        unlocked(){
                                if (hasMilestone("or", 25) && player.or.dontshowairchall) return false
                                return player.or.lungChallengesUnlocked >= 4
                        },
                }, // inChallenge("or", 22)
                31: {
                        name: "Tertiary Bronchi", 
                        canComplete(){ 
                                return true
                        },
                        reward(){
                                return player.or.bankedAir[31].plus(1).pow(.031)
                        },
                        onEnter(){
                                layers.or.challenges.onEnter()
                        },
                        onComplete(){
                                let data = player.or
                                data.challenges[31] = hasUpgrade("or", 222)
                                data.bankedAir[31] = data.bankedAir[31].plus(data.challengeAir)
                                data.challengeAir = decimalZero
                                data.air.points = decimalZero
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                let a = "Air gained in this challenge boosts Air and " + makeBlue("DB") + " gain"
                                let b = "Effect formula: (1+x)<sup>.031</sup>"
                                let c = "Effect: " + format(tmp.or.challenges[31].reward)
                                let d = "Total Air in this challenge: " + format(player.or.bankedAir[31])
                                let e = "Note: You bank Air gained in this challenge only when completing it"

                                if (!hasUpgrade("or", 222)) return a + br + b + br + c + br + d + br2 + e

                                return a + br + b + br + c + br + d
                        },
                        unlocked(){
                                if (hasMilestone("or", 25) && player.or.dontshowairchall) return false
                                return player.or.lungChallengesUnlocked >= 5
                        },
                }, // inChallenge("or", 31)
                32: {
                        name: "Bronchioles", 
                        canComplete(){ 
                                return true
                        },
                        reward(){
                                return player.or.bankedAir[32].plus(1).pow(.015)
                        },
                        onEnter(){
                                layers.or.challenges.onEnter()
                        },
                        onComplete(){
                                let data = player.or
                                data.challenges[32] = hasUpgrade("or", 154)
                                data.bankedAir[32] = data.bankedAir[32].plus(data.challengeAir)
                                data.challengeAir = decimalZero
                                data.air.points = decimalZero
                        },
                        completionLimit: 1,
                        fullDisplay(){
                                let a = "Air gained in this challenge boosts Air and Tissue gain"
                                let b = "Effect formula: (1+x)<sup>.015</sup>"
                                let c = "Effect: " + format(tmp.or.challenges[32].reward)
                                let d = "Total Air in this challenge: " + format(player.or.bankedAir[32])
                                let e = "Note: You bank Air gained in this challenge only when completing it"

                                if (!hasUpgrade("or", 154)) return a + br + b + br + c + br + d + br2 + e

                                return a + br + b + br + c + br + d
                        },
                        unlocked(){
                                if (hasMilestone("or", 25) && player.or.dontshowairchall) return false
                                return player.or.lungChallengesUnlocked >= 6
                        },
                }, // inChallenge("or", 32)
        },
        upgrades: {
                rows: 10,
                cols: 5,
                kidneyUpgradesLength(){
                        let ids = [201, 202, 203, 204, 205, 
                                   211, 212, 213, 214, 215,
                                   221, 222, 223, 224, 225,
                                   231, 232, 233, 234, 235,
                                   241, 242, 243, 244, 245]
                        let a = 0
                        for (i in ids) {
                                if (hasUpgrade("or", ids[i])) a ++ 
                        }
                        if (a >= 25) console.log("update me please")
                        return a
                },
                lungUpgradesLength(){
                        let ids = [301, 302, 303, 304, 305, 
                                   311, 312, 313, 314, 315,
                                   321, 322, 323, 324, 325,
                                   331, 332, 333, 334, 335,
                                   341, 342, 343, 344, 345,
                                   351, 352, 353, 354, 355,]
                        let a = 0
                        for (i in ids) {
                                if (hasUpgrade("or", ids[i])) a ++ 
                        }
                        return a
                },
                11: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Organs I"
                        },
                        description(){
                                return "You bulk 5x Secondary completions and gain 1e10x of each minigame amount but disable coins"
                        },
                        cost:() => decimalOne,
                        onPurchase(){
                                player.tokens.upgrades = []
                        },
                        unlocked(){
                                return true
                        }, // hasUpgrade("or", 11)
                },
                12: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Organs II"
                        },
                        description(){
                                return "Add .0053 to tRNA's base and gain 100% of DNA and Amino Acid per second but disable C28 and C88"
                        },
                        cost:() => new Decimal(12210),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasMilestone("or", 14)
                        }, // hasUpgrade("or", 12)
                },
                13: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Organs III"
                        },
                        description(){
                                return "Oligopotent cost base is 1e90 and you can complete Tertiary 4 times"
                        },
                        cost:() => new Decimal(1098e4),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 135)
                        }, // hasUpgrade("or", 13)
                },
                14: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Organs IV"
                        },
                        description(){
                                return "Tokens II multiplies Organ gain and unlock Kidneys"
                        },
                        cost:() => new Decimal(13.44e6),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 13)
                        }, // hasUpgrade("or", 14)
                },
                15: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Organs V"
                        },
                        description(){
                                return "Token II buyables' cost exponent is .8"
                        },
                        cost:() => new Decimal(1.07e14),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 145)
                        }, // hasUpgrade("or", 15)
                },
                21: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Organs VI"
                        },
                        description(){
                                return "DNA base gain is 4^[Token II] and log10(DNA) multiplies Energy gain"
                        },
                        cost:() => new Decimal(2.2e44),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 154)
                        }, // hasUpgrade("or", 21)
                },
                22: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Organs VII"
                        },
                        description(){
                                return "Subtract 1 from Token II buyable costs (minimum 0)"
                        },
                        cost:() => new Decimal(4e46),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 21)
                        }, // hasUpgrade("or", 22)
                },
                23: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Organs VIII"
                        },
                        description(){
                                let a = "Per upgrade - 62 upgrades multiply Air and Energy gain" + br
                                return a + "Currently: " + format(tmp.or.upgrades[23].effect)
                        },
                        effect(){
                                let upgs = player.or.upgrades.length
                                return Decimal.pow(upgs, upgs-62).max(1)
                        },
                        cost:() => new Decimal(2.12e52),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 22)
                        }, // hasUpgrade("or", 23)
                },
                24: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Organs IX"
                        },
                        description(){
                                return "<u>in</u>TEStine's log7 becomes log6 and Token II buyables' cost exponent is .58"
                        },
                        cost:() => new Decimal(1.43e60),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 23)
                        }, // hasUpgrade("or", 24)
                },
                25: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Organs X"
                        },
                        description(){
                                return "in<u>TES</u>tine's log8 becomes log7 and Token II buyables' cost exponent is .56"
                        },
                        cost:() => new Decimal(1.87e70),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 24)
                        }, // hasUpgrade("or", 25)
                },
                31: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Organs XI"
                        },
                        description(){
                                return "IN<u>tes</u>tine's log7 becomes log6 and per Token II gain 1.03x Organs"
                        },
                        cost:() => new Decimal(1.3e87),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 25)
                        }, // hasUpgrade("or", 31)
                },
                32: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Organs XII"
                        },
                        description(){
                                return "Unlock Animals"
                        },
                        cost:() => new Decimal(1.98e98),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 31)
                        }, // hasUpgrade("or", 32)
                },
                33: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Organs XIII"
                        },
                        description(){
                                return "Remove the -99 in the Animal gain formula but Animal effect is based on best"
                        },
                        cost:() => new Decimal(2.66e135),
                        unlocked(){
                                return hasUpgrade("an", 12)
                        }, // hasUpgrade("or", 33)
                },
                34: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Organs XIV"
                        },
                        description(){
                                return "intes<u>TINE</u>'s log4 becomes log3 and Token tetrational cost base is 7.5"
                        },
                        cost:() => new Decimal(1.6e138),
                        unlocked(){
                                return hasUpgrade("or", 33)
                        }, // hasUpgrade("or", 34)
                },
                35: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Organs XV"
                        },
                        description(){
                                return "intes<u>TINE</u>'s log3 becomes ln and Token tetrational cost base is 7"
                        },
                        cost:() => new Decimal(2.54e145),
                        unlocked(){
                                return hasUpgrade("or", 34)
                        }, // hasUpgrade("or", 35)
                },
                41: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Organs XVI"
                        },
                        description(){
                                return "Organ base gain double exponent is .3 and Organ gain exponent affects base Organ gain but disable Heart XXI"
                        },
                        cost:() => new Decimal(1.74e194),
                        unlocked(){
                                return hasUpgrade("an", 13)
                        }, // hasUpgrade("or", 41)
                },
                42: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Organs XVII"
                        },
                        description(){
                                return "INtes<u>tine</u>'s log5 becomes log4 and Token II buyables' cost exponent is .49 but Bottom Quark base is (1+C/1000)"
                        },
                        cost:() => new Decimal(2.4e235),
                        onPurchase(){
                                player.tokens.bestBottom = decimalOne
                        },
                        unlocked(){
                                return hasUpgrade("or", 41)
                        }, // hasUpgrade("or", 42)
                },
                43: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Organs XVIII"
                        },
                        description(){
                                return "<bdi style='font-size: 90%'>IN<u>tes</u>tine's log5 becomes log4, Token II buyables' cost exponent is .48, and Bottom Quark only affects Energy and Air gain</bdi>"
                        },
                        cost:() => new Decimal("1e316"),
                        unlocked(){
                                return hasUpgrade("or", 42)
                        }, // hasUpgrade("or", 43)
                },
                44: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Organs XIX"
                        },
                        description(){
                                return "IN<u>tes</u>tine's log4 becomes log3 and Token II via Cell double exponent is 9+x/500"
                        },
                        cost:() => new Decimal("9.36e334"),
                        unlocked(){
                                return hasUpgrade("or", 43)
                        }, // hasUpgrade("or", 44)
                },
                45: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Organs XX"
                        },
                        description(){
                                return "IN<u>tes</u>tine's log3 becomes log2, Charm Quark coefficient is .1, and add .91 from Tissue effect exponent"
                        },
                        cost:() => new Decimal("1e348"),
                        unlocked(){
                                return hasUpgrade("or", 44)
                        }, // hasUpgrade("or", 45)
                },
                
                101: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Heart I"
                        },
                        description(){
                                let a = "Per Organ upgrade multiply " + makePurple("OB") + " and " + makeBlue("DB") + " gain by log10(log10(Tissues))"
                                return a + br + " Currently: *" + format(tmp.or.upgrades[101].base) + " per upgrade"
                        },
                        base(){
                                return player.t.points.max(10).log10().max(10).log10()
                        },
                        cost(){
                                return new Decimal(25)
                        },
                        currencyLocation:() => player.or.deoxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makeBlue("DB"),
                        unlocked(){
                                return true
                        }, // hasUpgrade("or", 101)
                },
                102: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Heart II"
                        },
                        description(){
                                return "Per Organ upgrade " + makePurple("OB") + " multiplies Cell gain and " + makeBlue("DB") + " multiplies Stem Cell gain" 
                        },
                        stem_cell_effect(){
                                return player.or.deoxygenated_blood.points.max(1).pow(player.or.upgrades.length)
                        },
                        cell_effect(){
                                return player.or.oxygenated_blood.points.max(1).pow(player.or.upgrades.length)
                        },
                        cost(){
                                return new Decimal(150)
                        },
                        currencyLocation:() => player.or.oxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makePurple("OB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 101)
                        }, // hasUpgrade("or", 102)
                },
                103: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Heart III"
                        },
                        description(){
                                return "Per Token II after 73 double " + makePurple("OB") + " gain and Token II effect amounts are based on best levels"
                        },
                        ob_effect(){
                                return Decimal.pow(2, player.tokens.tokens2.total.sub(hasUpgrade("or", 212) ? 0 : 73)).max(1)
                        },
                        cost(){
                                return new Decimal(350)
                        },
                        currencyLocation:() => player.or.deoxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makeBlue("DB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 102)
                        }, // hasUpgrade("or", 103)
                },
                104: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Heart IV"
                        },
                        description(){
                                return "Autobuy Oligopotent and Organ upgrades count towards Tissues IX" 
                        },
                        cost(){
                                return new Decimal(1.5e5)
                        },
                        currencyLocation:() => player.or.oxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makePurple("OB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 103)
                        }, // hasUpgrade("or", 104)
                },
                105: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Heart V"
                        },
                        description(){
                                return "Organs multiply " + makeBlue("DB") + " gain and gain 10% of your Organs on reset per second" 
                        },
                        cost(){
                                return new Decimal(5e3)
                        },
                        currencyLocation:() => player.or.deoxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makeBlue("DB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 104)
                        }, // hasUpgrade("or", 105)
                },
                111: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Heart VI"
                        },
                        description(){
                                return "Right Column Token II buyable's total column amount is based on best but Strange Quark coefficient is 10" 
                        },
                        cost(){
                                return new Decimal(1e6)
                        },
                        currencyLocation:() => player.or.oxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makePurple("OB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 105)
                        }, // hasUpgrade("or", 111)
                },
                112: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Heart VII"
                        },
                        description(){
                                return "Per Organ upgrade add .01 to Organ gain exponent and best Token II amounts are synchronized" 
                        },
                        cost(){
                                return new Decimal(1e6)
                        },
                        currencyLocation:() => player.or.deoxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makeBlue("DB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 111)
                        }, // hasUpgrade("or", 112)
                },
                113: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Heart VIII"
                        },
                        description(){
                                return "Left Column Token II buyable's total column amount is based on best" 
                        },
                        cost(){
                                return new Decimal(2e8)
                        },
                        currencyLocation:() => player.or.oxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makePurple("OB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 112)
                        }, // hasUpgrade("or", 113)
                },
                114: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Heart IX"
                        },
                        description(){
                                return "Remove Oligopotent's base cost and remove the -9 from the Organ base gain formula" 
                        },
                        cost(){
                                return new Decimal(2e7)
                        },
                        currencyLocation:() => player.or.deoxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makeBlue("DB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 113)
                        }, // hasUpgrade("or", 114)
                },
                115: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Heart X"
                        },
                        description(){
                                return "<bdi style='font-size: 80%'>log10(Tissues) multiplies " + makeBlue("DB") + " gain and per Organ upgrade you gain 1% of your " + makePurple("OB") + "/s while beating out and 1% of your " + makeBlue("DB") + "/s while beating in</bdi>"
                        },
                        cost(){
                                return new Decimal(2e12)
                        },
                        currencyLocation:() => player.or.oxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makePurple("OB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 114)
                        }, // hasUpgrade("or", 115)
                },
                121: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>" + (player.shiftAlias ? "Pro-Hydrogen" : "Heart XI")
                        },
                        description(){
                                return "Per Organ upgrade add 1 to Cell effect exponent but disable Anti-Hydrogen's positive effects"
                        },
                        cost(){
                                return new Decimal(4e10)
                        },
                        currencyLocation:() => player.or.deoxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makeBlue("DB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 115)
                        }, // hasUpgrade("or", 121)
                },
                122: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>" + (player.shiftAlias ? "Pro-Minigame" : "Heart XII")
                        },
                        description(){
                                return "Tissues IX becomes .2 per but disable Anti-Minigame's positive effects"
                        },
                        cost(){
                                return new Decimal(1e14)
                        },
                        currencyLocation:() => player.or.oxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makePurple("OB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 121)
                        }, // hasUpgrade("or", 122)
                },
                123: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>" + (player.shiftAlias ? "Pro-Carbon" : "Heart XIII")
                        },
                        description(){
                                return "Gain an DNA and Organ reset per second but disable Anti-Carbon's positive effects"
                        }, 
                        cost(){
                                return new Decimal(5e11)
                        },
                        currencyLocation:() => player.or.deoxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makeBlue("DB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 122)
                        }, // hasUpgrade("or", 123)
                },
                124: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>" + (player.shiftAlias ? "Pro-Oxygen" : "Heart XIV")
                        },
                        description(){
                                return "<bdi style='font-size: 70%'>Double Organ gain per this row upgrade but max passive gain at 10x of Organs on reset, effect is based on best, and disable Anti-Oxygen's positive effects</bdi>"
                        },
                        cost(){
                                return new Decimal(5e14)
                        },
                        effect(){
                                let a = 1
                                if (hasUpgrade("or", 121)) a ++ 
                                if (hasUpgrade("or", 122)) a ++ 
                                if (hasUpgrade("or", 123)) a ++ 
                                if (hasUpgrade("or", 125)) a ++ 
                                return Decimal.pow(2, a)
                        },
                        currencyLocation:() => player.or.oxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makePurple("OB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 123)
                        }, // hasUpgrade("or", 124)
                },
                125: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>" + (player.shiftAlias ? "Pro-Nitrogen" : "Heart XV")
                        },
                        description(){
                                return "<bdi style='font-size: 80%'>Gain 90% of your Organs on reset per second but remove the ability to DNA or Organ reset and disable Anti-Nitrogen's positive effects</bdi>"
                        },
                        cost(){
                                return new Decimal(1e13)
                        },
                        currencyLocation:() => player.or.deoxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makeBlue("DB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 124)
                        }, // hasUpgrade("or", 125)
                },
                131: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>" + (player.shiftAlias ? "Pro-Pi" : "Heart XVI")
                        },
                        description(){
                                return "The number of milestones multiplies Organ gain but remove Anti-Pi's positive effects"
                        }, // EFFECTS DNA CLAMP SO BE CAREFUL ABOUT THIS NERFING THINGS
                        cost(){
                                return new Decimal(2e16)
                        },
                        currencyLocation:() => player.or.oxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makePurple("OB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 12)
                        }, // hasUpgrade("or", 131)
                },
                132: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Heart XVII"
                        },
                        description(){
                                return "Per Organ upgrade you have three less tokens for prestige purposes but disable C33, C54, C64, C17, C73, and C18 gems"
                        },
                        cost(){
                                return new Decimal(5e16)
                        },
                        currencyLocation:() => player.or.deoxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makeBlue("DB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 131)
                        }, // hasUpgrade("or", 132)
                },
                133: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Heart XVIII"
                        },
                        description(){
                                return "Down Quark base becomes Tokens<sup>C</sup> but disable C61 Gems"
                        },
                        cost(){
                                return new Decimal(5e17)
                        },
                        currencyLocation:() => player.or.oxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makePurple("OB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 132)
                        }, // hasUpgrade("or", 133)
                },
                134: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Heart XIX"
                        },
                        description(){
                                return "Add .0002 to tRNA's base but remove Gems, Customizable, and Selection"
                        },
                        cost(){
                                return new Decimal(5e17)
                        },
                        onPurchase(){
                                player.l.activeChallenge = null
                        },
                        currencyLocation:() => player.or.deoxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makeBlue("DB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 133)
                        }, // hasUpgrade("or", 134)
                },
                135: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Heart XX"
                        },
                        description(){
                                if (player.shiftAlias) return "<sup>*</sup>Base Amino Acid gain is 1"
                                return "The number of Organ upgrades multiplies Organ gain but remove Lives<sup>*</sup>"
                        },
                        cost(){
                                return new Decimal(3e18)
                        },
                        onPurchase(){
                                player.l.activeChallenge = null
                                tmp.l.deactivated = true
                                tmp.l.layerShown = false
                        },
                        currencyLocation:() => player.or.oxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makePurple("OB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 134)
                        }, // hasUpgrade("or", 135)
                },
                141: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Heart XXI"
                        },
                        description(){
                                return "Per Organ upgrade - 30 multiply Organ gain by log10(10 + I'm levels)"
                        },
                        cost(){
                                return new Decimal(1e56)
                        },
                        currencyLocation:() => player.or.deoxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makeBlue("DB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 211)
                        }, // hasUpgrade("or", 141)
                },
                142: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Heart XXII"
                        },
                        description(){
                                return "Organs multiply Contaminant gain and autobuy him"
                        },
                        cost(){
                                return new Decimal(1e42)
                        },
                        currencyLocation:() => player.or.oxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makePurple("OB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 141)
                        }, // hasUpgrade("or", 142)
                },
                143: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Heart XXIII"
                        },
                        description(){
                                return "Per Organ upgrade gonna levels multiply Contaminant and Tissue gain"
                        },
                        cost(){
                                return new Decimal(2e59)
                        },
                        currencyLocation:() => player.or.deoxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makeBlue("DB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 142)
                        }, // hasUpgrade("or", 143)
                },
                144: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Heart XXIV"
                        },
                        description(){
                                return "Add .03 * Organ upgrades to I'm's base but remove the +1 from I'm base"
                        },
                        cost(){
                                return new Decimal(2e44)
                        },
                        currencyLocation:() => player.or.oxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makePurple("OB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 143)
                        }, // hasUpgrade("or", 144)
                },
                145: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Heart XXV"
                        },
                        description(){
                                return "Double DNA gain exponent and DNA base gain is log10(Amino Acid)"
                        },
                        cost(){
                                return new Decimal(1e73)
                        },
                        currencyLocation:() => player.or.deoxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makeBlue("DB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 144)
                        }, // hasUpgrade("or", 145)
                },
                151: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Heart XXVI"
                        },
                        description(){
                                return "Token II buyables' cost exponent is .75"
                        },
                        cost(){
                                return new Decimal(2e77)
                        },
                        currencyLocation:() => player.or.oxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makePurple("OB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 145)
                        }, // hasUpgrade("or", 151)
                },
                152: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Heart XXVII"
                        },
                        description(){
                                return "Square can't base and filtering no longer costs " + makeBlue("DB") + " or " + makePurple("OB")
                        },
                        cost(){
                                return new Decimal(5e127)
                        },
                        currencyLocation:() => player.or.deoxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makeBlue("DB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 151)
                        }, // hasUpgrade("or", 152)
                },
                153: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Heart XXVIII"
                        },
                        description(){
                                return "Organs and Tissues reset nothing and Token II via Token cost formula is x<sup>2</sup>"
                        },
                        cost(){
                                return new Decimal(1e300)
                        },
                        currencyLocation:() => player.or.oxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makePurple("OB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 152)
                        }, // hasUpgrade("or", 153)
                },
                154: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Heart XXIX"
                        },
                        description(){
                                return "Base Organ gain is 10^(log10(Tissues)<sup>.2</sup>) and you always bank air to Bronchioles"
                        },
                        cost(){
                                return new Decimal("1e600")
                        },
                        currencyLocation:() => player.or.deoxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makeBlue("DB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 153)
                        }, // hasUpgrade("or", 154)
                },
                155: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Heart XXX"
                        },
                        description(){
                                return "Energy multiplies Tissue gain and Contaminant buyables no longer cost anything"
                        },
                        cost(){
                                return new Decimal("1e665")
                        },
                        currencyLocation:() => player.or.oxygenated_blood,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => makePurple("OB"),
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 154)
                        }, // hasUpgrade("or", 155)
                },

                201: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Kidney I"
                        },
                        description(){
                                return "Per Kidney upgrade double Contaminant gain and unlock a buyable (up to 9)"
                        },
                        cost(){
                                return new Decimal(30)
                        },
                        currencyLocation:() => player.or.contaminants,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Contaminants",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return true
                        }, // hasUpgrade("or", 201)
                },
                202: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Kidney II"
                        },
                        description(){
                                return makePurple("OB") + "<sup>.1</sup> multiplies " + makeBlue("DB") + " gain and " + makeBlue("DB") + "<sup>.1</sup> multiplies " + makePurple("OB") + " gain"
                        },
                        cost(){
                                return new Decimal(1000)
                        },
                        currencyLocation:() => player.or.contaminants,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Contaminants",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 201)
                        }, // hasUpgrade("or", 202)
                },
                203: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Kidney III"
                        },
                        description(){
                                return "Per Kidney upgrade I'm levels multiply " + makeBlue("DB") + " gain"
                        },
                        cost(){
                                return new Decimal(1e21)
                        },
                        currencyLocation:() => player.or.contaminants,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Contaminants",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 202)
                        }, // hasUpgrade("or", 203)
                },
                204: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Kidney IV"
                        },
                        description(){
                                return "Autobuy I'm and Token II buyables' cost exponent is .85"
                        },
                        cost(){
                                return new Decimal(1e149)
                        },
                        currencyLocation:() => player.or.contaminants,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Contaminants",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 203)
                        }, // hasUpgrade("or", 204)
                },
                205: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Kidney V"
                        },
                        description(){
                                return "Autobuy gonna and if you are filtering from your left kidney then gain ^1.001 Stem Cells"
                        },
                        cost(){
                                return new Decimal("1e1276")
                        },
                        currencyLocation:() => player.or.contaminants,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Contaminants",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 204)
                        }, // hasUpgrade("or", 205)
                },
                211: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Kidney VI"
                        },
                        description(){
                                return "Autobuy make and if you are filtering from your right kidney then raise base Cell gain ^(99/98)"
                        },
                        cost(){
                                return new Decimal("1e6031")
                        },
                        currencyLocation:() => player.or.contaminants,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Contaminants",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 205)
                        }, // hasUpgrade("or", 211)
                },
                212: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Kidney VII"
                        },
                        description(){
                                return "Heart III counts every Token II and bulk up to 10 Kidney buyables"
                        },
                        cost(){
                                return new Decimal("1e30480")
                        },
                        currencyLocation:() => player.or.contaminants,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Contaminants",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 144)
                        }, // hasUpgrade("or", 212)
                },
                213: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Kidney VIII"
                        },
                        description(){
                                return "Square base DNA gain, bulk 5x Kidney buyables, and autobuy an"
                        },
                        cost(){
                                return new Decimal("1e70574")
                        },
                        currencyLocation:() => player.or.contaminants,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Contaminants",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 15)
                        }, // hasUpgrade("or", 213)
                },
                214: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Kidney IX"
                        },
                        description(){
                                return "Autobuy offer and if you are filtering from you right kidney then gain ^1.001 Stem Cells"
                        },
                        cost(){
                                return new Decimal("1e153016")
                        },
                        currencyLocation:() => player.or.contaminants,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Contaminants",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 213)
                        }, // hasUpgrade("or", 214)
                },
                215: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Kidney X"
                        },
                        description(){
                                return "Autobuy he, bulk 4x Kidney buyables, and unlock Lungs"
                        },
                        cost(){
                                return new Decimal("1e299600")
                        },
                        currencyLocation:() => player.or.contaminants,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Contaminants",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 214)
                        }, // hasUpgrade("or", 215)
                },
                221: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Kidney XI"
                        },
                        description(){
                                return "Token II buyables' costs are rounded instead of ceiled and log10(Tissues) multiplies Air gain"
                        },
                        cost(){
                                return new Decimal("1e750500")
                        },
                        currencyLocation:() => player.or.contaminants,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Contaminants",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 305)
                        }, // hasUpgrade("or", 221)
                },
                222: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Kidney XII"
                        },
                        description(){
                                return "Base DNA gain is 2^[Token II] and you always bank air to Tertiary Bronchi"
                        }, // care DNA Science
                        cost(){
                                return new Decimal("1e1170e3")
                        },
                        currencyLocation:() => player.or.contaminants,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Contaminants",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 221)
                        }, // hasUpgrade("or", 222)
                },
                223: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Kidney XIII"
                        },
                        description(){
                                return "Token II buyable costs are floored instead of rounded and unlock 3 new layers but remove Amino Acid"
                        }, // care DNA Science again
                        cost(){
                                return new Decimal("1e1715e3")
                        },
                        onPurchase(){
                                tmp.a.layerShown = false 
                                tmp.a.deactivated = true
                                let data = player.a
                                data.points = decimalZero
                                data.total = decimalZero
                                data.best = decimalZero
                                data.protein.points = decimalZero
                                data.protein.total = decimalZero
                                data.protein.best = decimalZero
                                data.buyables[11] = decimalZero
                                data.buyables[12] = decimalZero
                                data.buyables[13] = decimalZero
                                data.buyables[21] = decimalZero
                                data.buyables[22] = decimalZero
                                data.buyables[23] = decimalZero
                                data.buyables[31] = decimalZero
                                data.buyables[32] = decimalZero
                                data.buyables[33] = decimalZero
                        },
                        currencyLocation:() => player.or.contaminants,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Contaminants",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 222)
                        }, // hasUpgrade("or", 223)
                },
                224: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Kidney XIV"
                        },
                        description(){
                                let a = "<bdi style='font-size: 80%'>Per Organ upgrade - 50 log10(Token II) multiplies Air gain and bulk 5x Kidney buyables"
                                return a + br + "Currently: " + format(tmp.or.upgrades[224].effect) + "</bdi>"
                        },
                        effect(){
                                let upgs = Math.max(0, player.or.upgrades.length - 50)
                                return player.tokens.tokens2.total.max(10).log10().pow(upgs)
                        },
                        cost(){
                                return new Decimal("1e2415e3")
                        },
                        currencyLocation:() => player.or.contaminants,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Contaminants",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 223)
                        }, // hasUpgrade("or", 224)
                },
                225: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Kidney XV"
                        },
                        description(){
                                return "<bdi style='font-size: 90%'>in<u>TES</u>tine effect multiplies Air gain and per Organ upgrade Energy/1e200 multiplies Contaminant gain</bdi>"
                        },
                        effect(){
                                let upgs = Math.max(0, player.or.upgrades.length - 50)
                                return player.tokens.tokens2.total.max(10).log10().pow(upgs)
                        },
                        cost(){
                                return new Decimal("1e3542e3")
                        },
                        currencyLocation:() => player.or.contaminants,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Contaminants",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 224)
                        }, // hasUpgrade("or", 225)
                },
                231: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Kidney XVI"
                        },
                        description(){
                                return "<u>in</u>TEStine's log10 becomes log9 and Token tetrational cost base is 8.5"
                        },
                        cost(){
                                return new Decimal("1e1206e4")
                        },
                        currencyLocation:() => player.or.contaminants,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Contaminants",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 331)
                        }, // hasUpgrade("or", 231)
                },
                232: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Kidney XVII"
                        },
                        description(){
                                return "<u>in</u>TEStine's log9 becomes log8 and Token tetrational cost base is 8"
                        },
                        cost(){
                                return new Decimal("1e1430e4")
                        },
                        currencyLocation:() => player.or.contaminants,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Contaminants",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 231)
                        }, // hasUpgrade("or", 232)
                },
                233: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Kidney XVIII"
                        },
                        description(){
                                return "INtes<u>tine</u>'s log10 becomes log9 and Lung XIII affects Air gain"
                        },
                        cost(){
                                return new Decimal("1e17802e3")
                        },
                        currencyLocation:() => player.or.contaminants,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Contaminants",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 232)
                        }, // hasUpgrade("or", 233)
                },
                234: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Kidney XIX"
                        },
                        description(){
                                return "INtes<u>tine</u>'s log9 becomes log8 and Oligopotent base is 3^[Tertiary completions]"
                        },
                        cost(){
                                return new Decimal("1e2068e4")
                        },
                        currencyLocation:() => player.or.contaminants,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Contaminants",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 233)
                        }, // hasUpgrade("or", 234)
                },
                235: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Kidney XX"
                        },
                        description(){
                                return "IN<u>tes</u>tine's log9 becomes log8 and Organ base gain double exponent is .25"
                        },
                        cost(){
                                return new Decimal("1e3146e4")
                        },
                        currencyLocation:() => player.or.contaminants,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Contaminants",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 234)
                        }, // hasUpgrade("or", 235)
                },

                301: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung I"
                        },
                        description(){
                                return "Per lung upgrade log10(<wbr>log10(Contaiminants)) multiplies Air gain and autobuy can't"
                        },
                        cost(){
                                return new Decimal("1e25")
                        },
                        effect(){
                                let base = player.or.contaminants.points.max(10).log10().max(10).log10()
                                return base.pow(tmp.or.upgrades.lungUpgradesLength)
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return player.or.lungChallengesUnlocked >= 3
                        }, // hasUpgrade("or", 301)
                },
                302: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung II"
                        },
                        description(){
                                return "You always bank air to Larynx and autobuy refuse"
                        },
                        cost(){
                                return new Decimal("1e33")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 301)
                        }, // hasUpgrade("or", 302)
                },
                303: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung III"
                        },
                        description(){
                                return "You always bank air to Trachea and Larynx's log10 is rasied to log2(Lung upgrades)"
                        },
                        cost(){
                                return new Decimal("1e79")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 302)
                        }, // hasUpgrade("or", 303)
                },
                304: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung IV"
                        },
                        description(){
                                return "You always bank air to Primary Bronchi and Token II buyables' cost exponent is .7"
                        },
                        cost(){
                                return new Decimal("1e238")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 303)
                        }, // hasUpgrade("or", 304)
                },
                305: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung V"
                        },
                        description(){
                                return "You always bank air to Secondary Bronchi and per Lung upgrade log10(Air) multiplies " + makePurple("OB") + " gain"
                        },
                        cost(){
                                return new Decimal("1e305")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 304)
                        }, // hasUpgrade("or", 305)
                },
                311: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung VI"
                        },
                        description(){
                                return "If you have 20 seconds or less of Air production, gain 10x more Air"
                        },
                        cost(){
                                return new Decimal("9e1009")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasMilestone("or", 19)
                        }, // hasUpgrade("or", 311)
                },
                312: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung VII"
                        },
                        description(){
                                return "Per best Up Quark - 30 (min 0) triple Air gain and Tertiary Bronchi effect affects " + makePurple("OB") + " gain" 
                        },
                        cost(){
                                return new Decimal("1e1150")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 311)
                        }, // hasUpgrade("or", 312)
                },
                313: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung VIII"
                        },
                        description(){
                                return "<bdi style='font-size: 90%'>Token II via Stem Cell cost double exponent is (50+x/5)<sup>.5</sup> and log10(Air) multiplies Organ gain</bdi>" 
                        },
                        cost(){
                                return new Decimal("1e1400")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 312)
                        }, // hasUpgrade("or", 313)
                },
                314: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung IX"
                        },
                        description(){
                                return "Secondary Bronchi multiplies " + makeBlue("DB") + " gain and Token II buyables' cost exponent is .66"  
                        },
                        cost(){
                                return new Decimal("1e1725")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 313)
                        }, // hasUpgrade("or", 314)
                },
                315: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung X"
                        },
                        description(){
                                return "Unlock intestine, unlock a new layer, and Token II buyables' cost exponent is .63"  
                        },
                        cost(){
                                return new Decimal("1e2050")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 314)
                        }, // hasUpgrade("or", 315)
                },
                321: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung XI"
                        },
                        description(){
                                return "Autobuy <u>IN</u>testine and Kidney I permanently becomes quadruple per upgrade"  
                        },
                        cost(){
                                return new Decimal("1e5821")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 22)
                        }, // hasUpgrade("or", 321)
                },
                322: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung XII"
                        },
                        description(){
                                return "<u>IN</u>testine's log10 becomes log9 and Intestine buyables no longer cost anything"  
                        },
                        cost(){
                                return new Decimal("1e5975")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 321)
                        }, // hasUpgrade("or", 322)
                },
                323: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung XIII"
                        },
                        description(){
                                return "Each Token II past 500 doubles Energy gain and <u>IN</u>testine's log9 becomes log8"  
                        },
                        effect(){
                                return Decimal.pow(2, player.tokens.tokens2.total.sub(500).max(0))
                        },
                        cost(){
                                return new Decimal("1e6547")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 322)
                        }, // hasUpgrade("or", 323)
                },
                324: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung XIV"
                        },
                        description(){
                                return "Per upgrade (up to 100) subtract 2 from Tissue gain root but disable Tissues LI's effect on Tissue gain root"  
                        },
                        cost(){
                                return new Decimal("1e6886")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 323)
                        }, // hasUpgrade("or", 324)
                },
                325: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung XV"
                        },
                        description(){
                                return "<u>IN</u>testine's log8 becomes log7 and bulk 5x Kidney buyables"  
                        },
                        cost(){
                                return new Decimal("1e7143")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 324)
                        }, // hasUpgrade("or", 325)
                },
                331: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung XVI"
                        },
                        description(){
                                return "<u>IN</u>testine's log7 becomes log6 and Larynx's log10 exponent is Lung upgrades"  
                        },
                        cost(){
                                return new Decimal("1e7419")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 325)
                        }, // hasUpgrade("or", 331)
                },
                332: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung XVII"
                        },
                        description(){
                                return "INtes<u>tine</u>'s log8 becomes log7 and per Organ upgrade Contaminants<sup>.01</sup> multiplies Stem Cell gain"
                        },
                        cost(){
                                return new Decimal("1e13605")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 331)
                        }, // hasUpgrade("or", 332)
                },
                333: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung XVIII"
                        },
                        description(){
                                return "INtes<u>tine</u>'s log7 becomes log6 and square he base but I'm base is Organ upgrades/4"
                        },
                        cost(){
                                return new Decimal("1e14580")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 332)
                        }, // hasUpgrade("or", 333)
                },
                334: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung XIX"
                        },
                        description(){
                                return "in<u>TES</u>tine's log9 becomes log8 and Token II buyables' cost exponent is .57"
                        },
                        cost(){
                                return new Decimal("1e15215")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 333)
                        }, // hasUpgrade("or", 334)
                },
                335: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung XX"
                        },
                        description(){
                                return "in<u>TES</u>tine's log7 becomes log6 and Token II buyables' cost exponent is .55"
                        },
                        cost(){
                                return new Decimal("1e17300")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                if (hasMilestone("an", 4)) return true
                                return hasUpgrade("or", 334)
                        }, // hasUpgrade("or", 335)
                },
                341: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung XXI"
                        },
                        description(){
                                return "Raise base Cell gain ^(49/48)"
                        },
                        cost(){
                                return new Decimal("100")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                return hasMilestone("an", 4) && hasUpgrade("or", 215)
                        }, // hasUpgrade("or", 341)
                },
                342: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung XXII"
                        },
                        description(){
                                return "intes<u>TINE</u>'s log9 becomes log8 but disable DNA effect"
                        },
                        cost(){
                                return new Decimal("1e25252")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                return hasMilestone("an", 12) || player.nu.best.gt(0)
                        }, // hasUpgrade("or", 342)
                },
                343: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung XXIII"
                        },
                        description(){
                                return "intes<u>TINE</u>'s log8 becomes log7 and Token II via Stem Cell double exponent is (75+x/10)<sup>.5</sup>"
                        },
                        cost(){
                                return new Decimal("1e25752")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                return hasUpgrade("or", 342) || player.nu.best.gt(0)
                        }, // hasUpgrade("or", 343)
                },
                344: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung XXIV"
                        },
                        description(){
                                return "intes<u>TINE</u>'s log7 becomes log6 and gain 100% of your Animals on reset per second"
                        },
                        cost(){
                                return new Decimal("1e26789")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                return hasUpgrade("or", 343) || player.nu.best.gt(0)
                        }, // hasUpgrade("or", 344)
                },
                345: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung XXV"
                        },
                        description(){
                                return "intes<u>TINE</u>'s log5 becomes log4 and square offer base"
                        },
                        cost(){
                                return new Decimal("1e27900")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                return hasUpgrade("or", 344) || player.nu.best.gt(0)
                        }, // hasUpgrade("or", 345)
                },
                351: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung XXVI"
                        },
                        description(){
                                return "intes<u>TINE</u>'s ln becomes log2 and per this row upgrade double Animal gain"
                        },
                        cost(){
                                return new Decimal("1e32023")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                return hasUpgrade("or", 35) || player.nu.best.gt(0)
                        }, // hasUpgrade("or", 351)
                },
                352: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung XXVII"
                        },
                        description(){
                                return "in<u>tes</u>TINE's inner log6 becomes log5 and unlock Taxonomy"
                        },
                        cost(){
                                return new Decimal("1e34543")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                return hasUpgrade("or", 351) || player.nu.best.gt(0)
                        }, // hasUpgrade("or", 352)
                },
                353: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung XXVIII"
                        },
                        description(){
                                return "in<u>tes</u>TINE's inner log5 becomes log4 and Token II buyables' cost exponent is .51"
                        },
                        cost(){
                                return new Decimal("1e36163")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                return hasUpgrade("or", 352) || player.nu.best.gt(0)
                        }, // hasUpgrade("or", 353)
                },
                354: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung XXIX"
                        },
                        description(){
                                return "in<u>tes</u>TINE's inner log4 becomes log3 and unlock a new row of Taxonomy"
                        },
                        cost(){
                                return new Decimal("1e38783")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                return hasUpgrade("or", 353) || player.nu.best.gt(0)
                        }, // hasUpgrade("or", 354)
                },
                355: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Lung XXX"
                        },
                        description(){
                                return "in<u>tes</u>TINE's inner log3 becomes ln and Token II buyables' cost exponent is .5"
                        },
                        cost(){
                                return new Decimal("1e39993")
                        },
                        currencyLocation:() => player.or.air,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Air",
                        unlocked(){
                                return hasUpgrade("or", 354) || player.nu.best.gt(0)
                        }, // hasUpgrade("or", 355)
                },
        },
        clickables: {
                201: {
                        title(){
                                return "Filter from your LEFT Kidney"
                        },
                        display(){
                                if (player.shiftAlias) return "Costs 5% of your " + makeBlue("DB") + "/s"
                                let x = player.or.filterLeftKidney
                                if (x) return "Filtering"
                                return "Not filtering"
                        },
                        unlocked(){
                                return !hasMilestone("or", 24) || !player.or.dontshowfilter
                        },
                        canClick(){
                                return true
                        },
                        onClick(){
                                player.or.filterLeftKidney = true
                        },
                },
                202: {
                        title(){
                                return "Filter from your RIGHT Kidney"
                        },
                        display(){
                                if (player.shiftAlias) return "Costs 5% of your " + makePurple("OB") + "/s"
                                let x = player.or.filterLeftKidney
                                if (!x) return "Filtering"
                                return "Not filtering"
                        },
                        unlocked(){
                                return !hasMilestone("or", 24) || !player.or.dontshowfilter
                        },
                        canClick(){
                                return true
                        },
                        onClick(){
                                player.or.filterLeftKidney = false
                        },
                },
        },
        buyables: {
                getMaxBulk(){
                        let ret = decimalOne
                        if (hasUpgrade("or", 212))      ret = ret.times(10)
                        if (hasUpgrade("or", 213))      ret = ret.times(5)
                        if (hasUpgrade("or", 215))      ret = ret.times(4)
                        if (hasUpgrade("or", 224))      ret = ret.times(5)
                        if (hasUpgrade("or", 325))      ret = ret.times(5)
                        if (hasMilestone("an", 1))      ret = new Decimal(5e3)
                        if (hasMilestone("an", 9))      ret = ret.times(4)
                        if (hasMilestone("an", 14))     ret = ret.times(5)
                        if (hasMilestone("an", 20))     ret = ret.times(5)
                        if (hasUpgrade("an", 32))       ret = ret.times(5)
                        if (hasUpgrade("an", 33)) {
                                let a = hasUpgrade("an", 31) + hasUpgrade("an", 32) + hasUpgrade("an", 33) + hasUpgrade("an", 34) + hasUpgrade("an", 35)
                                                        ret = ret.times(2**a)
                        }
                        return ret
                }, // tmp.or.buyables.getMaxBulk
                201: {
                        title: "I'm",
                        cost(){
                                let amt = getBuyableAmount("or", 201)
                                let base = new Decimal(100)
                                let exp = decimalOne
                                return amt.pow(amt.times(exp)).times(base)
                        },
                        unlocked(){
                                return hasUpgrade("or", 201) && hasUpgrade("or", 201)
                        },
                        canAfford() {
                                return player.or.contaminants.points.gte(tmp.or.buyables[201].cost)
                        },
                        getMaxAfford() {
                                let pts = player.or.contaminants.points.div(100)
                                if (pts.lt(1)) return decimalZero
                                if (pts.eq(1)) return new Decimal(2)
                                let exp = decimalOne // if y^y = e^x then y = x/W(x)
                                let logPts = pts.root(exp).ln()
                                return logPts.div(logPts.lambertw()).ceil()
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.or
                                let id = 201
                                let ma = tmp.or.buyables[id].getMaxAfford
                                let maxBulk = tmp.or.buyables.getMaxBulk
                                let up = hasUpgrade("ch", 22) || player.easyMode ? ma.sub(data.buyables[id]) : ma.sub(data.buyables[id]).min(maxBulk)
                                data.buyables[id] = data.buyables[id].plus(up.max(0))
                                if (!hasUpgrade("or", 155) && up.gt(0)) {
                                        data.contaminants.points = data.contaminants.points.sub(tmp.or.buyables[id].cost)
                                }
                        },
                        base(){
                                let add = tmp.nu.effectSecondary
                                if (hasMilestone("nu", 18)) return player.ch.points.div(100).plus(add)
                                if (hasUpgrade("ch", 22)) return player.ch.points.div(100).plus(25).plus(add)
                                if (hasUpgrade("or", 333)) return new Decimal(player.or.upgrades.length / 4).plus(add)
                                let ret = new Decimal(tmp.or.upgrades.kidneyUpgradesLength).plus(1).plus(add)

                                if (hasUpgrade("or", 144) && player.or.upgrades.length > 33) {
                                        ret = ret.plus(player.or.upgrades.length * .03 - 1)
                                }
                                
                                return ret
                        },
                        effect(){
                                return tmp.or.buyables[201].base.pow(player.or.buyables[201])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.or.buyables[201]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.or.buyables[201].effect) + " to Contaminant gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("or", 201)) + " Contaminants</b><br>"
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "(Kidney upgrades + 1)^x<br>" + format(tmp.or.buyables[201].base) + "^x"
                                if (hasUpgrade("or", 144)) eformula = eformula.replace("1", ".03 * Organ upgrades")
                                if (hasUpgrade("or", 333)) eformula = eformula.replace("Kidney upgrades + .03 * Organ upgrades", "Organ upgrades/4")
                                if (hasUpgrade("ch", 22)) eformula = eformula.replace("Organ upgrades/4", "25 + Chromosomes/100")
                                if (hasMilestone("nu", 18)) eformula = eformula.replace("25 + ", "")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "100*x<sup>x</sup>" 
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                202: {
                        title: "gonna",
                        cost(){
                                let amt = getBuyableAmount("or", 202)
                                let base = new Decimal(5e4)
                                let exp = new Decimal(2)
                                return amt.pow(amt.times(exp)).times(base)
                        },
                        unlocked(){
                                return hasUpgrade("or", 202) && hasUpgrade("or", 201)
                        },
                        canAfford() {
                                return player.or.contaminants.points.gte(tmp.or.buyables[202].cost)
                        },
                        getMaxAfford() {
                                let pts = player.or.contaminants.points.div(5e4)
                                if (pts.lt(1)) return decimalZero
                                if (pts.eq(1)) return new Decimal(2)
                                let exp = new Decimal(2) // if y^y = e^x then y = x/W(x)
                                let logPts = pts.root(exp).ln()
                                return logPts.div(logPts.lambertw()).ceil()
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.or
                                let id = 202
                                let ma = tmp.or.buyables[id].getMaxAfford
                                let maxBulk = tmp.or.buyables.getMaxBulk
                                let up = hasUpgrade("ch", 22) || player.easyMode ? ma.sub(data.buyables[id]) : ma.sub(data.buyables[id]).min(maxBulk)
                                data.buyables[id] = data.buyables[id].plus(up.max(0))
                                if (!hasUpgrade("or", 155) && up.gt(0)) {
                                        data.contaminants.points = data.contaminants.points.sub(tmp.or.buyables[id].cost)
                                }
                        },
                        base(){
                                let ret = player.or.buyables[201].max(1)
                                
                                return ret
                        },
                        effect(){
                                return tmp.or.buyables[202].base.pow(player.or.buyables[202])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.or.buyables[202]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.or.buyables[202].effect) + " to Contaminant gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("or", 202)) + " Contaminants</b><br>"
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "(I'm levels)^x<br>" + format(tmp.or.buyables[202].base) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "50,000*x<sup>2x</sup>" 
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                203: {
                        title: "make",
                        cost(){
                                let amt = getBuyableAmount("or", 203)
                                let base = new Decimal(5e45)
                                let exp = new Decimal(4)
                                return amt.pow(amt.times(exp)).times(base)
                        },
                        unlocked(){
                                return hasUpgrade("or", 203) && hasUpgrade("or", 201)
                        },
                        canAfford() {
                                return player.or.contaminants.points.gte(tmp.or.buyables[203].cost)
                        },
                        getMaxAfford() {
                                let pts = player.or.contaminants.points.div(5e45)
                                if (pts.lt(1)) return decimalZero
                                if (pts.eq(1)) return new Decimal(2)
                                let exp = new Decimal(4) // if y^y = e^x then y = x/W(x)
                                let logPts = pts.root(exp).ln()
                                return logPts.div(logPts.lambertw()).ceil()
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.or
                                let id = 203
                                let ma = tmp.or.buyables[id].getMaxAfford
                                let maxBulk = tmp.or.buyables.getMaxBulk
                                let up = hasUpgrade("ch", 22) || player.easyMode ? ma.sub(data.buyables[id]) : ma.sub(data.buyables[id]).min(maxBulk)
                                data.buyables[id] = data.buyables[id].plus(up.max(0))
                                if (!hasUpgrade("or", 155) && up.gt(0)) {
                                        data.contaminants.points = data.contaminants.points.sub(tmp.or.buyables[id].cost)
                                }
                        },
                        base(){
                                let ret = player.or.buyables[202].max(1).sqrt()
                                
                                return ret
                        },
                        effect(){
                                return tmp.or.buyables[203].base.pow(player.or.buyables[203])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.or.buyables[203]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.or.buyables[203].effect) + " to Contaminant gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("or", 203)) + " Contaminants</b><br>"
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "sqrt(gonna levels)^x<br>" + format(tmp.or.buyables[203].base) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "5e45*x<sup>4x</sup>" 
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                211: {
                        title: "him",
                        cost(){
                                let amt = getBuyableAmount("or", 211)
                                let base = new Decimal("5e442")
                                let exp = new Decimal(8)
                                return amt.pow(amt.times(exp)).times(base)
                        },
                        unlocked(){
                                return hasUpgrade("or", 204) && hasUpgrade("or", 201)
                        },
                        canAfford() {
                                return player.or.contaminants.points.gte(tmp.or.buyables[211].cost)
                        },
                        getMaxAfford() {
                                let pts = player.or.contaminants.points.div("5e442")
                                if (pts.lt(1)) return decimalZero
                                if (pts.eq(1)) return new Decimal(2)
                                let exp = new Decimal(8) // if y^y = e^x then y = x/W(x)
                                let logPts = pts.root(exp).ln()
                                return logPts.div(logPts.lambertw()).ceil()
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.or
                                let id = 211
                                let ma = tmp.or.buyables[id].getMaxAfford
                                let maxBulk = tmp.or.buyables.getMaxBulk
                                let up = hasUpgrade("ch", 22) || player.easyMode ? ma.sub(data.buyables[id]) : ma.sub(data.buyables[id]).min(maxBulk)
                                data.buyables[id] = data.buyables[id].plus(up.max(0))
                                if (!hasUpgrade("or", 155) && up.gt(0)) {
                                        data.contaminants.points = data.contaminants.points.sub(tmp.or.buyables[id].cost)
                                }
                        },
                        base(){
                                if (hasMilestone("nu", 7))  return player.or.buyables[203].max(1)
                                if (hasMilestone("nu", 6))  return player.or.buyables[203].max(1).pow(.91)
                                if (hasMilestone("ch", 17)) return player.or.buyables[203].max(1).pow(.8)
                                return player.or.buyables[203].max(1).sqrt()
                        },
                        effect(){
                                return tmp.or.buyables[211].base.pow(player.or.buyables[211])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.or.buyables[211]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.or.buyables[211].effect) + " to Contaminant gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("or", 211)) + " Contaminants</b><br>"
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "sqrt(make levels)^x<br>" + format(tmp.or.buyables[211].base) + "^x"
                                if (hasMilestone("ch", 17)) eformula = eformula.replace("sqrt(make levels)", "(make levels)<sup>.8</sup>")
                                if (hasMilestone("nu", 6)) eformula = eformula.replace(".8", ".91")
                                if (hasMilestone("nu", 7)) eformula = eformula.replace("(make levels)<sup>.91</sup>", "make levels")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "5e442*x<sup>8x</sup>" 
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                212: {
                        title: "an",
                        cost(){
                                let amt = getBuyableAmount("or", 212)
                                let base = new Decimal("1e3486")
                                let exp = new Decimal(16)
                                return amt.pow(amt.times(exp)).times(base)
                        },
                        unlocked(){
                                return hasUpgrade("or", 205) && hasUpgrade("or", 201)
                        },
                        canAfford() {
                                return player.or.contaminants.points.gte(tmp.or.buyables[212].cost)
                        },
                        getMaxAfford() {
                                let pts = player.or.contaminants.points.div("1e3486")
                                if (pts.lt(1)) return decimalZero
                                if (pts.eq(1)) return new Decimal(2)
                                let exp = new Decimal(16) // if y^y = e^x then y = x/W(x)
                                let logPts = pts.root(exp).ln()
                                return logPts.div(logPts.lambertw()).ceil()
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.or
                                let id = 212
                                let ma = tmp.or.buyables[id].getMaxAfford
                                let maxBulk = tmp.or.buyables.getMaxBulk
                                let up = hasUpgrade("ch", 22) || player.easyMode ? ma.sub(data.buyables[id]) : ma.sub(data.buyables[id]).min(maxBulk)
                                data.buyables[id] = data.buyables[id].plus(up.max(0))
                                if (!hasUpgrade("or", 155) && up.gt(0)) {
                                        data.contaminants.points = data.contaminants.points.sub(tmp.or.buyables[id].cost)
                                }
                        },
                        base(){
                                if (hasUpgrade("an", 23)) return player.or.buyables[211].max(1)
                                return player.or.buyables[211].max(1).sqrt()
                        },
                        effect(){
                                return tmp.or.buyables[212].base.pow(player.or.buyables[212])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.or.buyables[212]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.or.buyables[212].effect) + " to Contaminant gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("or", 212)) + " Contaminants</b><br>"
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "sqrt(him levels)^x<br>" + format(tmp.or.buyables[212].base) + "^x"
                                if (hasUpgrade("an", 23)) eformula = eformula.replace("sqrt(him levels)", "him levels")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e3,486*x<sup>16x</sup>" 
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                213: {
                        title: "offer", // "I'm gonna make him an offer he can't refuse."
                        cost(){
                                let amt = getBuyableAmount("or", 213)
                                let base = new Decimal("1e17147")
                                let exp = new Decimal(32)
                                return amt.pow(amt.times(exp)).times(base)
                        },
                        unlocked(){
                                return hasUpgrade("or", 211) && hasUpgrade("or", 201)
                        },
                        canAfford() {
                                return player.or.contaminants.points.gte(tmp.or.buyables[213].cost)
                        },
                        getMaxAfford() {
                                let pts = player.or.contaminants.points.div("1e17147")
                                if (pts.lt(1)) return decimalZero
                                if (pts.eq(1)) return new Decimal(2)
                                let exp = new Decimal(32) // if y^y = e^x then y = x/W(x)
                                let logPts = pts.root(exp).ln()
                                return logPts.div(logPts.lambertw()).ceil()
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.or
                                let id = 213
                                let ma = tmp.or.buyables[id].getMaxAfford
                                let maxBulk = tmp.or.buyables.getMaxBulk
                                let up = hasUpgrade("ch", 22) || player.easyMode ? ma.sub(data.buyables[id]) : ma.sub(data.buyables[id]).min(maxBulk)
                                data.buyables[id] = data.buyables[id].plus(up.max(0))
                                if (!hasUpgrade("or", 155) && up.gt(0)) {
                                        data.contaminants.points = data.contaminants.points.sub(tmp.or.buyables[id].cost)
                                }
                        },
                        base(){
                                if (hasUpgrade("or", 345)) return player.or.buyables[212].max(1)
                                return player.or.buyables[212].max(1).sqrt()
                        },
                        effect(){
                                return tmp.or.buyables[213].base.pow(player.or.buyables[213])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.or.buyables[213]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.or.buyables[213].effect) + " to Contaminant gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("or", 213)) + " Contaminants</b><br>"
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "sqrt(an levels)^x<br>" + format(tmp.or.buyables[213].base) + "^x"
                                if (hasUpgrade("or", 345)) eformula = eformula.replace("sqrt(an levels)", "an levels")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e17,147*x<sup>32x</sup>" 
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                221: {
                        title: "he", // "I'm gonna make him an offer he can't refuse."
                        cost(){
                                let amt = getBuyableAmount("or", 221)
                                let base = new Decimal("1e64100")
                                let exp = new Decimal(64)
                                return amt.pow(amt.times(exp)).times(base)
                        },
                        unlocked(){
                                return hasUpgrade("or", 212) && hasUpgrade("or", 201)
                        },
                        canAfford() {
                                return player.or.contaminants.points.gte(tmp.or.buyables[221].cost)
                        },
                        getMaxAfford() {
                                let pts = player.or.contaminants.points.div("1e64100")
                                if (pts.lt(1)) return decimalZero
                                if (pts.eq(1)) return new Decimal(2)
                                let exp = new Decimal(64) // if y^y = e^x then y = x/W(x)
                                let logPts = pts.root(exp).ln()
                                return logPts.div(logPts.lambertw()).ceil()
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.or
                                let id = 221
                                let ma = tmp.or.buyables[id].getMaxAfford
                                let maxBulk = tmp.or.buyables.getMaxBulk
                                let up = hasUpgrade("ch", 22) || player.easyMode ? ma.sub(data.buyables[id]) : ma.sub(data.buyables[id]).min(maxBulk)
                                data.buyables[id] = data.buyables[id].plus(up.max(0))
                                if (!hasUpgrade("or", 155) && up.gt(0)) {
                                        data.contaminants.points = data.contaminants.points.sub(tmp.or.buyables[id].cost)
                                }
                        },
                        base(){
                                if (hasUpgrade("or", 333)) return player.or.buyables[213].max(1)
                                return player.or.buyables[213].max(1).sqrt()
                        },
                        effect(){
                                return tmp.or.buyables[221].base.pow(player.or.buyables[221])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.or.buyables[221]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.or.buyables[221].effect) + " to Contaminant gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("or", 221)) + " Contaminants</b><br>"
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "sqrt(offer levels)^x<br>" + format(tmp.or.buyables[221].base) + "^x"
                                if (hasUpgrade("or", 333)) eformula = eformula.replace("sqrt(offer levels)", "offer levels")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e64,100*x<sup>64x</sup>" 
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                222: {
                        title: "can't", // "I'm gonna make him an offer he can't refuse."
                        cost(){
                                let amt = getBuyableAmount("or", 222)
                                let base = new Decimal("1e148127")
                                let exp = new Decimal(128)
                                return amt.pow(amt.times(exp)).times(base)
                        },
                        unlocked(){
                                return hasUpgrade("or", 213) && hasUpgrade("or", 201)
                        },
                        canAfford() {
                                return player.or.contaminants.points.gte(tmp.or.buyables[222].cost)
                        },
                        getMaxAfford() {
                                let pts = player.or.contaminants.points.div("1e148127")
                                if (pts.lt(1)) return decimalZero
                                if (pts.eq(1)) return new Decimal(2)
                                let exp = new Decimal(128) // if y^y = e^x then y = x/W(x)
                                let logPts = pts.root(exp).ln()
                                return logPts.div(logPts.lambertw()).ceil()
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.or
                                let id = 222
                                let ma = tmp.or.buyables[id].getMaxAfford
                                let maxBulk = tmp.or.buyables.getMaxBulk
                                let up = hasUpgrade("ch", 22) || player.easyMode ? ma.sub(data.buyables[id]) : ma.sub(data.buyables[id]).min(maxBulk)
                                data.buyables[id] = data.buyables[id].plus(up.max(0))
                                if (!hasUpgrade("or", 155) && up.gt(0)) {
                                        data.contaminants.points = data.contaminants.points.sub(tmp.or.buyables[id].cost)
                                }
                        },
                        base(){
                                if (hasUpgrade("or", 152)) return player.or.buyables[221].max(1)
                                return player.or.buyables[221].max(1).sqrt()
                        },
                        effect(){
                                return tmp.or.buyables[222].base.pow(player.or.buyables[222])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.or.buyables[222]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.or.buyables[222].effect) + " to Contaminant gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("or", 222)) + " Contaminants</b><br>"
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "sqrt(he levels)^x<br>" + format(tmp.or.buyables[222].base) + "^x"
                                if (hasUpgrade("or", 152)) eformula = eformula.replace("sqrt(he levels)", "he levels")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e148,127*x<sup>128x</sup>" 
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                223: {
                        title: "refuse", // "I'm gonna make him an offer he can't refuse."
                        cost(){
                                let amt = getBuyableAmount("or", 223)
                                let base = new Decimal("1e289805")
                                let exp = new Decimal(256)
                                return amt.pow(amt.times(exp)).times(base)
                        },
                        unlocked(){
                                return hasUpgrade("or", 214) && hasUpgrade("or", 201)
                        },
                        canAfford() {
                                return player.or.contaminants.points.gte(tmp.or.buyables[223].cost)
                        },
                        getMaxAfford() {
                                let pts = player.or.contaminants.points.div("1e289805")
                                if (pts.lt(1)) return decimalZero
                                if (pts.eq(1)) return new Decimal(2)
                                let exp = new Decimal(256) // if y^y = e^x then y = x/W(x)
                                let logPts = pts.root(exp).ln()
                                return logPts.div(logPts.lambertw()).ceil()
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.or
                                let id = 223
                                let ma = tmp.or.buyables[id].getMaxAfford
                                let maxBulk = tmp.or.buyables.getMaxBulk
                                let up = hasUpgrade("ch", 22) || player.easyMode ? ma.sub(data.buyables[id]) : ma.sub(data.buyables[id]).min(maxBulk)
                                data.buyables[id] = data.buyables[id].plus(up.max(0))
                                if (!hasUpgrade("or", 155) && up.gt(0)) {
                                        data.contaminants.points = data.contaminants.points.sub(tmp.or.buyables[id].cost)
                                }
                        },
                        base(){
                                return player.or.buyables[222].max(1)
                        },
                        effect(){
                                return tmp.or.buyables[223].base.pow(player.or.buyables[223])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.or.buyables[223]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.or.buyables[223].effect) + " to Contaminant gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("or", 223)) + " Contaminants</b><br>"
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "can't levels^x<br>" + format(tmp.or.buyables[223].base) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e259,805*x<sup>256x</sup>" 
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                getIntestineMaxBulk(){
                        let ret = decimalOne
                        if (hasMilestone("an", 10))     ret = ret.times(5)
                        if (hasUpgrade("nu", 13))       ret = ret.times(4)
                        if (player.sp.unlocked)         ret = ret.times(5)
                        return ret 
                }, // tmp.or.buyables.getIntestineMaxBulk
                401: {
                        title: "<u>IN</u>testine",
                        bases(){
                                let a = new Decimal(10)
                                let b = new Decimal(5)
                                let c = new Decimal(1.01)
                                return [a,b,c]
                        },
                        cost(){
                                let amt = getBuyableAmount("or", 401)
                                let bases = tmp.or.buyables[401].bases
                                return bases[0].times(bases[1].pow(amt)).times(bases[2].pow(amt.pow(2)))
                        },
                        unlocked(){
                                return hasUpgrade("or", 315)
                        },
                        canAfford() {
                                return player.or.energy.points.gte(tmp.or.buyables[401].cost)
                        },
                        getMaxAfford() {
                                let pts = player.or.energy.points
                                let bases = tmp.or.buyables[401].bases
                                // take everything to log base bases[2]
                                if (pts.lt(bases[0])) return decimalZero
                                let lb0 = bases[0].div(pts).log(bases[2])
                                let lb1 = bases[1].log(bases[2])
                                // we want to solve x^2 + lb1 x + lb0 = 0
                                // for the larger solution, so take the positive square root
                                // note that lb0 <= 0, so discrim >= 0
                                let discrim = lb1.pow(2).sub(lb0.times(4))
                                return discrim.sqrt().sub(lb1).div(2).ceil()
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.or
                                let id = 401
                                let ma = tmp.or.buyables[id].getMaxAfford
                                let maxBulk = tmp.or.buyables.getIntestineMaxBulk
                                let up = false ? ma.sub(data.buyables[id]) : ma.sub(data.buyables[id]).min(maxBulk)
                                data.buyables[id] = data.buyables[id].plus(up.max(0))
                                if (!hasUpgrade("or", 322) && up.gt(0)) {
                                        data.energy.points = data.energy.points.sub(tmp.or.buyables[id].cost)
                                }
                        },
                        amountGain(){
                                let ret = player.or.buyables[401].pow(1+hasMilestone("nu", 1)).div(10)
                                if (hasMilestone("an", 3)) ret = ret.times(10)

                                let ids = [402, 403, 411, 421]
                                for (i in ids) {
                                        ret = ret.times(player.or.extras[ids[i]].plus(1))
                                }
                                ret = ret.times(tmp.or.buyables[401].effect)
                                if (hasUpgrade("ch", 13)) ret = ret.times(player.an.grid[407].extras.plus(1).pow(7))
                                if (hasUpgrade("sp", 21)) ret = ret.times(tmp.sp.effect.pow(player.or.buyables[401].sqrt()))

                                return ret
                        },
                        base(){
                                if (hasMilestone("ch", 29))     return player.tokens.tokens2.total.max(1)
                                if (hasMilestone("nu", 12))     return player.tokens.tokens2.total.max(1).sqrt()
                                if (hasAchievement("an", 24) && player.an.achActive[24]) return player.tokens.tokens2.total.max(1).cbrt()
                                let logBase = new Decimal(10)
                                if (hasUpgrade("or", 322)) logBase = new Decimal(9)
                                if (hasUpgrade("or", 323)) logBase = new Decimal(8)
                                if (hasUpgrade("or", 325)) logBase = new Decimal(7)
                                if (hasUpgrade("or", 331)) logBase = new Decimal(6)
                                if (hasUpgrade("an", 25))  logBase = new Decimal(5)
                                if (hasMilestone("ch", 4)) logBase = new Decimal(4)
                                if (hasMilestone("an", 22))logBase = new Decimal(3)
                                if (hasMilestone("ch", 5)) logBase = new Decimal(2)
                                let ret = player.tokens.tokens2.total.max(logBase).log(logBase)
                                
                                return ret
                        },
                        effect(){
                                return tmp.or.buyables[401].base.pow(player.or.buyables[401])
                        },
                        display(){
                                let id = 401
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.or.buyables[id]) + "</b><br>"
                                        let amt = "<b><h2>Amount</h2>: " + formatWhole(player.or.extras[id]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.or.buyables[id].effect) + " to "
                                        eff2 += tmp.or.buyables[id].title + " amount gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("or", id)) + " Energy</b><br>"
                                
                                        return br + lvl + amt + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(Tokens II)^x<br>" + format(tmp.or.buyables[id].base) + "^x"
                                let logBase = new Decimal(10)
                                if (hasUpgrade("or", 322)) logBase = new Decimal(9)
                                if (hasUpgrade("or", 323)) logBase = new Decimal(8)
                                if (hasUpgrade("or", 325)) logBase = new Decimal(7)
                                if (hasUpgrade("or", 331)) logBase = new Decimal(6)
                                if (hasUpgrade("an", 25))  logBase = new Decimal(5)
                                if (hasMilestone("ch", 4)) logBase = new Decimal(4)
                                if (hasMilestone("an", 22))logBase = new Decimal(3)
                                if (hasMilestone("ch", 5)) logBase = new Decimal(2)
                                eformula = eformula.replace("10", formatWhole(logBase))
                                eformula = eformula.replace("log2.72", "ln")
                                if (hasAchievement("an", 24) && player.an.achActive[24]) eformula = eformula.replace("log2", "cbrt")
                                if (hasMilestone("nu", 12)) {
                                        eformula = eformula.replace("log2", "sqrt")
                                        eformula = eformula.replace("cbrt", "sqrt")
                                }
                                if (hasMilestone("ch", 29)) eformula = eformula.replace("sqrt(Tokens II)", "Token II")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "10*5<sup>x</sup>*1.01<sup>x<sup>2</sup></sup>" 
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost

                                let start = "Amount gain/s: " + format(tmp.or.buyables[id].amountGain)

                                return br + start + br + end
                        },
                },
                402: {
                        title: "<u>in</u>TEStine",
                        bases(){
                                let a = new Decimal(2e6)
                                let b = new Decimal(1000)
                                let c = new Decimal(1.1)
                                return [a,b,c]
                        },
                        cost(){
                                let amt = getBuyableAmount("or", 402)
                                let bases = tmp.or.buyables[402].bases
                                return bases[0].times(bases[1].pow(amt)).times(bases[2].pow(amt.pow(2)))
                        },
                        unlocked(){
                                return player.or.energy.total.gte(1e6)
                        },
                        canAfford() {
                                return player.or.energy.points.gte(tmp.or.buyables[402].cost)
                        },
                        getMaxAfford() {
                                let pts = player.or.energy.points
                                let bases = tmp.or.buyables[402].bases
                                // take everything to log base bases[2]
                                if (pts.lt(bases[0])) return decimalZero
                                let lb0 = bases[0].div(pts).log(bases[2])
                                let lb1 = bases[1].log(bases[2])
                                // we want to solve x^2 + lb1 x + lb0 = 0
                                // for the larger solution, so take the positive square root
                                // note that lb0 <= 0, so discrim >= 0
                                let discrim = lb1.pow(2).sub(lb0.times(4))
                                return discrim.sqrt().sub(lb1).div(2).ceil()
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.or
                                let id = 402
                                let ma = tmp.or.buyables[id].getMaxAfford
                                let maxBulk = tmp.or.buyables.getIntestineMaxBulk
                                let up = false ? ma.sub(data.buyables[id]) : ma.sub(data.buyables[id]).min(maxBulk)
                                data.buyables[id] = data.buyables[id].plus(up.max(0))
                                if (!hasUpgrade("or", 322) && up.gt(0)) {
                                        data.energy.points = data.energy.points.sub(tmp.or.buyables[id].cost)
                                }
                        },
                        amountGain(){
                                let ret = player.or.buyables[402].pow(1+hasMilestone("nu", 1)).div(10)
                                if (hasMilestone("an", 3)) ret = ret.times(10)

                                let ids = [403, 412, 422]
                                for (i in ids) {
                                        ret = ret.times(player.or.extras[ids[i]].plus(1))
                                }
                                ret = ret.times(tmp.or.buyables[402].effect)
                                if (!hasUpgrade("nu", 25)) ret = ret.times(tmp.an.effect)
                                if (hasUpgrade("an", 31)) ret = ret.times(player.an.grid[507].extras.plus(1))
                                if (hasUpgrade("sp", 21)) ret = ret.times(tmp.sp.effect.pow(player.or.buyables[402].sqrt()))

                                return ret
                        },
                        base(){
                                if (hasMilestone("an", 37)) return player.an.points.max(10).log10()
                                let logBase = new Decimal(10)
                                if (hasUpgrade("or", 231)) logBase = new Decimal(9)
                                if (hasUpgrade("or", 232)) logBase = new Decimal(8)
                                if (hasMilestone("or", 22))logBase = new Decimal(7)
                                if (hasUpgrade("or", 24))  logBase = new Decimal(6)
                                if (hasMilestone("ch", 6)) logBase = new Decimal(5)
                                if (hasUpgrade("an", 31))  logBase = new Decimal(4)
                                if (hasMilestone("an", 23))logBase = new Decimal(3)
                                if (hasUpgrade("an", 32))  logBase = new Decimal(2)
                                let ret = player.or.air.points.max(logBase).log(logBase).max(logBase).log(logBase)
                                
                                return ret
                        },
                        effect(){
                                return tmp.or.buyables[402].base.pow(player.or.buyables[402])
                        },
                        display(){
                                let id = 402
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.or.buyables[id]) + "</b><br>"
                                        let amt = "<b><h2>Amount</h2>: " + formatWhole(player.or.extras[id]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.or.buyables[id].effect) + " to "
                                        eff2 += tmp.or.buyables[id].title + " amount gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("or", id)) + " Energy</b><br>"
                                
                                        return br + lvl + amt + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(log10(Air)^x<br>" + format(tmp.or.buyables[id].base) + "^x"
                                let logBase = new Decimal(10)
                                if (hasUpgrade("or", 231)) logBase = new Decimal(9)
                                if (hasUpgrade("or", 232)) logBase = new Decimal(8)
                                if (hasMilestone("or", 22))logBase = new Decimal(7)
                                if (hasUpgrade("or", 24))  logBase = new Decimal(6)
                                if (hasMilestone("ch", 6)) logBase = new Decimal(5)
                                if (hasUpgrade("an", 31))  logBase = new Decimal(4)
                                if (hasMilestone("an", 23))logBase = new Decimal(3)
                                if (hasUpgrade("an", 32))  logBase = new Decimal(2)
                                eformula = eformula.replaceAll("10", formatWhole(logBase))
                                eformula = eformula.replaceAll("log2.72", "ln")
                                if (hasMilestone("an", 37)) eformula = eformula.replace("log2(log2(Air)", "log10(Animals)")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "2e6*1000<sup>x</sup>*1.1<sup>x<sup>2</sup></sup>" 
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost

                                let start = "Amount gain/s: " + format(tmp.or.buyables[id].amountGain)

                                return br + start + br + end
                        },
                },
                403: {
                        title: "<u>in</u>tesTINE",
                        bases(){
                                let a = new Decimal(1e195)
                                let b = new Decimal(1e10)
                                let c = new Decimal(9)
                                if (hasMilestone("ch", 26)) {
                                        a = decimalOne
                                        b = decimalOne
                                        c = new Decimal(5)
                                }
                                if (hasMilestone("an", 43)) c = new Decimal(3)
                                return [a,b,c]
                        },
                        cost(){
                                let amt = getBuyableAmount("or", 403)
                                let bases = tmp.or.buyables[403].bases
                                return bases[0].times(bases[1].pow(amt)).times(bases[2].pow(amt.pow(2)))
                        },
                        unlocked(){
                                return player.or.energy.total.gte(1e190)
                        },
                        canAfford() {
                                return player.or.energy.points.gte(tmp.or.buyables[403].cost)
                        },
                        getMaxAfford() {
                                let pts = player.or.energy.points
                                let bases = tmp.or.buyables[403].bases
                                // take everything to log base bases[2]
                                if (pts.lt(bases[0])) return decimalZero
                                let lb0 = bases[0].div(pts).log(bases[2])
                                let lb1 = bases[1].log(bases[2])
                                // we want to solve x^2 + lb1 x + lb0 = 0
                                // for the larger solution, so take the positive square root
                                // note that lb0 <= 0, so discrim >= 0
                                let discrim = lb1.pow(2).sub(lb0.times(4))
                                return discrim.sqrt().sub(lb1).div(2).ceil()
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.or
                                let id = 403
                                let ma = tmp.or.buyables[id].getMaxAfford
                                let maxBulk = tmp.or.buyables.getIntestineMaxBulk
                                let up = false ? ma.sub(data.buyables[id]) : ma.sub(data.buyables[id]).min(maxBulk)
                                data.buyables[id] = data.buyables[id].plus(up.max(0))
                                if (!hasUpgrade("or", 322) && up.gt(0)) {
                                        data.energy.points = data.energy.points.sub(tmp.or.buyables[id].cost)
                                }
                        },
                        amountGain(){
                                let ret = player.or.buyables[403].pow(1+hasMilestone("nu", 1)).div(10)
                                if (hasMilestone("an", 3)) ret = ret.times(10)

                                let ids = [413, 423]
                                for (i in ids) {
                                        ret = ret.times(player.or.extras[ids[i]].plus(1))
                                }
                                ret = ret.times(tmp.or.buyables[403].effect)
                                if (hasUpgrade("sp", 21)) ret = ret.times(tmp.sp.effect.pow(player.or.buyables[403].sqrt()))
                                if (hasUpgrade("sp", 43)) ret = ret.times(player.an.grid[206].extras.plus(1).pow(player.tokens.token2.total.sqrt()))

                                return ret
                        },
                        base(){
                                let ret = tmp.tokens.buyables[111].effect.plus(1)
                                
                                return ret
                        },
                        effect(){
                                return tmp.or.buyables[403].base.pow(player.or.buyables[403])
                        },
                        display(){
                                let id = 403
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.or.buyables[id]) + "</b><br>"
                                        let amt = "<b><h2>Amount</h2>: " + formatWhole(player.or.extras[id]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.or.buyables[id].effect) + " to "
                                        eff2 += tmp.or.buyables[id].title + " amount gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("or", id)) + " Energy</b><br>"
                                
                                        return br + lvl + amt + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "(Charm Quark effect + 1)^x<br>" + format(tmp.or.buyables[id].base) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e195*1e10<sup>x</sup>*9<sup>x<sup>2</sup></sup>" 
                                if (hasMilestone("ch", 26)) cost2 = "5<sup>x<sup>2</sup></sup>"
                                if (hasMilestone("an", 43)) cost2 = cost2.replace("5", "3")
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost

                                let start = "Amount gain/s: " + format(tmp.or.buyables[id].amountGain)

                                return br + start + br + end
                        },
                },
                411: {
                        title: "IN<u>tes</u>tine",
                        bases(){
                                let a = new Decimal(1e28)
                                let b = new Decimal(1e5)
                                let c = new Decimal(2)
                                if (hasMilestone("an", 39)) {
                                        a = decimalOne
                                        b = decimalOne
                                        c = new Decimal(1.5)
                                }
                                return [a,b,c]
                        },
                        cost(){
                                let amt = getBuyableAmount("or", 411)
                                let bases = tmp.or.buyables[411].bases
                                return bases[0].times(bases[1].pow(amt)).times(bases[2].pow(amt.pow(2)))
                        },
                        unlocked(){
                                return player.or.energy.total.gte(1e27)
                        },
                        canAfford() {
                                return player.or.energy.points.gte(tmp.or.buyables[411].cost)
                        },
                        getMaxAfford() {
                                let pts = player.or.energy.points
                                let bases = tmp.or.buyables[411].bases
                                // take everything to log base bases[2]
                                if (pts.lt(bases[0])) return decimalZero
                                let lb0 = bases[0].div(pts).log(bases[2])
                                let lb1 = bases[1].log(bases[2])
                                // we want to solve x^2 + lb1 x + lb0 = 0
                                // for the larger solution, so take the positive square root
                                // note that lb0 <= 0, so discrim >= 0
                                let discrim = lb1.pow(2).sub(lb0.times(4))
                                return discrim.sqrt().sub(lb1).div(2).ceil()
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.or
                                let id = 411
                                let ma = tmp.or.buyables[id].getMaxAfford
                                let maxBulk = tmp.or.buyables.getIntestineMaxBulk
                                let up = false ? ma.sub(data.buyables[id]) : ma.sub(data.buyables[id]).min(maxBulk)
                                data.buyables[id] = data.buyables[id].plus(up.max(0))
                                if (!hasUpgrade("or", 322) && up.gt(0)) {
                                        data.energy.points = data.energy.points.sub(tmp.or.buyables[id].cost)
                                }
                        },
                        amountGain(){
                                let ret = player.or.buyables[411].pow(1+hasMilestone("nu", 1)).div(10)
                                if (hasMilestone("an", 3)) ret = ret.times(10)

                                let ids = [412, 413, 421]
                                for (i in ids) {
                                        ret = ret.times(player.or.extras[ids[i]].plus(1))
                                }
                                ret = ret.times(tmp.or.buyables[411].effect)
                                if (!hasUpgrade("nu", 25)) ret = ret.times(tmp.an.effect)
                                if (hasUpgrade("sp", 21)) ret = ret.times(tmp.sp.effect.pow(player.or.buyables[411].sqrt()))

                                return ret
                        },
                        base(){
                                if (hasMilestone("ch", 15)) return player.ch.best.max(1)
                                let logBase = new Decimal(10)
                                if (hasMilestone("or", 24)) logBase = new Decimal(9)
                                if (hasUpgrade("or", 235))  logBase = new Decimal(8)
                                if (hasMilestone("or", 25)) logBase = new Decimal(7)
                                if (hasUpgrade("or", 31))   logBase = new Decimal(6)
                                if (hasUpgrade("an", 23))   logBase = new Decimal(5)
                                if (hasUpgrade("or", 43))   logBase = new Decimal(4)
                                if (hasUpgrade("or", 44))   logBase = new Decimal(3)
                                if (hasUpgrade("or", 45))   logBase = new Decimal(2)
                                let ret = player.tokens.total.max(logBase).log(logBase)
                                
                                return ret
                        },
                        effect(){
                                return tmp.or.buyables[411].base.pow(player.or.buyables[411])
                        },
                        display(){
                                let id = 411
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.or.buyables[id]) + "</b><br>"
                                        let amt = "<b><h2>Amount</h2>: " + formatWhole(player.or.extras[id]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.or.buyables[id].effect) + " to "
                                        eff2 += tmp.or.buyables[id].title + " amount gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("or", id)) + " Energy</b><br>"
                                
                                        return br + lvl + amt + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(Tokens)^x<br>" + format(tmp.or.buyables[id].base) + "^x"
                                let logBase = new Decimal(10)
                                if (hasMilestone("or", 24)) logBase = new Decimal(9)
                                if (hasUpgrade("or", 235))  logBase = new Decimal(8)
                                if (hasMilestone("or", 25)) logBase = new Decimal(7)
                                if (hasUpgrade("or", 31))   logBase = new Decimal(6)
                                if (hasUpgrade("an", 23))   logBase = new Decimal(5)
                                if (hasUpgrade("or", 43))   logBase = new Decimal(4)
                                if (hasUpgrade("or", 44))   logBase = new Decimal(3)
                                if (hasUpgrade("or", 45))   logBase = new Decimal(2)
                                eformula = eformula.replaceAll("10", formatWhole(logBase))
                                eformula = eformula.replaceAll("log2.72", "ln")
                                if (hasMilestone("ch", 15)) eformula = eformula.replace("log2(Tokens)", "Chromosomes")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e28*1e5<sup>x</sup>*2<sup>x<sup>2</sup></sup>" 
                                if (hasMilestone("an", 39)) cost2 = "1.5<sup>x<sup>2</sup></sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost

                                let start = "Amount gain/s: " + format(tmp.or.buyables[id].amountGain)

                                return br + start + br + end
                        },
                },
                412: {
                        title: "in<u>TES</u>tine",
                        bases(){
                                let a = new Decimal(1e58)
                                let b = new Decimal(1e8)
                                let c = new Decimal(4)
                                if (hasMilestone("ch", 33)) {
                                        a = decimalOne
                                        b = decimalOne
                                        c = new Decimal(1.71)
                                }
                                if (hasMilestone("an", 42)) c = new Decimal(1.25)
                                return [a,b,c]
                        },
                        cost(){
                                let amt = getBuyableAmount("or", 412)
                                let bases = tmp.or.buyables[412].bases
                                return bases[0].times(bases[1].pow(amt)).times(bases[2].pow(amt.pow(2)))
                        },
                        unlocked(){
                                return player.or.energy.total.gte(1e27)
                        },
                        canAfford() {
                                return player.or.energy.points.gte(tmp.or.buyables[412].cost)
                        },
                        getMaxAfford() {
                                let pts = player.or.energy.points
                                let bases = tmp.or.buyables[412].bases
                                // take everything to log base bases[2]
                                if (pts.lt(bases[0])) return decimalZero
                                let lb0 = bases[0].div(pts).log(bases[2])
                                let lb1 = bases[1].log(bases[2])
                                // we want to solve x^2 + lb1 x + lb0 = 0
                                // for the larger solution, so take the positive square root
                                // note that lb0 <= 0, so discrim >= 0
                                let discrim = lb1.pow(2).sub(lb0.times(4))
                                return discrim.sqrt().sub(lb1).div(2).ceil()
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.or
                                let id = 412
                                let ma = tmp.or.buyables[id].getMaxAfford
                                let maxBulk = tmp.or.buyables.getIntestineMaxBulk
                                let up = false ? ma.sub(data.buyables[id]) : ma.sub(data.buyables[id]).min(maxBulk)
                                data.buyables[id] = data.buyables[id].plus(up.max(0))
                                if (!hasUpgrade("or", 322) && up.gt(0)) {
                                        data.energy.points = data.energy.points.sub(tmp.or.buyables[id].cost)
                                }
                        },
                        amountGain(){
                                let ret = player.or.buyables[412].pow(1+hasMilestone("nu", 1)).div(10)
                                if (hasMilestone("an", 3)) ret = ret.times(10)

                                let ids = [413, 422]
                                for (i in ids) {
                                        ret = ret.times(player.or.extras[ids[i]].plus(1))
                                }
                                ret = ret.times(tmp.or.buyables[412].effect)
                                if (hasUpgrade("ch", 21)) ret = ret.times(player.an.grid[405].extras.plus(1).pow(player.ch.upgrades.length))
                                if (hasUpgrade("sp", 21)) ret = ret.times(tmp.sp.effect.pow(player.or.buyables[412].sqrt()))

                                return ret
                        },
                        base(){
                                if (hasUpgrade("nu", 23))       return player.or.points.max(10).log10()
                                if (hasMilestone("ch", 24))     return player.or.points.max(10).log10().sqrt()
                                let logBase = new Decimal(10)
                                if (hasMilestone("or", 23)) logBase = new Decimal(9)
                                if (hasUpgrade("or", 334))  logBase = new Decimal(8)
                                if (hasUpgrade("or", 25))   logBase = new Decimal(7)
                                if (hasUpgrade("or", 335))  logBase = new Decimal(6)
                                if (hasUpgrade("an", 24))   logBase = new Decimal(5)
                                if (hasMilestone("ch", 1))  logBase = new Decimal(4)
                                if (hasMilestone("ch", 2))  logBase = new Decimal(3)
                                if (hasMilestone("ch", 3))  logBase = new Decimal(2)
                                let ret = player.or.contaminants.points.max(logBase).log(logBase).max(logBase).log(logBase)
                                
                                return ret
                        },
                        effect(){
                                return tmp.or.buyables[412].base.pow(player.or.buyables[412])
                        },
                        display(){
                                let id = 412
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.or.buyables[id]) + "</b><br>"
                                        let amt = "<b><h2>Amount</h2>: " + formatWhole(player.or.extras[id]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.or.buyables[id].effect) + " to "
                                        eff2 += tmp.or.buyables[id].title + " amount gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("or", id)) + " Energy</b><br>"
                                
                                        return br + lvl + amt + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(log10(Contaminants)^x<br>" + format(tmp.or.buyables[id].base) + "^x"
                                let logBase = new Decimal(10)
                                if (hasMilestone("or", 23)) logBase = new Decimal(9)
                                if (hasUpgrade("or", 334))  logBase = new Decimal(8)
                                if (hasUpgrade("or", 25))   logBase = new Decimal(7)
                                if (hasUpgrade("or", 335))  logBase = new Decimal(6)
                                if (hasUpgrade("an", 24))   logBase = new Decimal(5)
                                if (hasMilestone("ch", 1))  logBase = new Decimal(4)
                                if (hasMilestone("ch", 2))  logBase = new Decimal(3)
                                if (hasMilestone("ch", 3))  logBase = new Decimal(2)
                                eformula = eformula.replaceAll("10", formatWhole(logBase))
                                eformula = eformula.replaceAll("log2.72", "ln")
                                if (hasMilestone("ch", 24)) eformula = eformula.replace("log2(log2(Contaminants)", "sqrt(log10(Organs))")
                                if (hasUpgrade("nu", 23)) eformula = eformula.replace("sqrt(log10(Organs))", "log10(Organs)")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e58*1e8<sup>x</sup>*4<sup>x<sup>2</sup></sup>" 
                                if (hasMilestone("ch", 33)) cost2 = "1.71<sup>x<sup>2</sup></sup>"
                                if (hasMilestone("an", 42)) cost2 = cost2.replace("1.71", "1.25")
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost

                                let start = "Amount gain/s: " + format(tmp.or.buyables[id].amountGain)

                                return br + start + br + end
                        },
                },
                413: {
                        title: "in<u>tes</u>TINE",
                        bases(){
                                let a = new Decimal(1e300)
                                let b = new Decimal(1e17)
                                let c = new Decimal(3)
                                if (hasMilestone("an", 43)) {
                                        a = decimalOne 
                                        b = decimalOne
                                        c = new Decimal(1.75)
                                }
                                return [a,b,c]
                        },
                        cost(){
                                let amt = getBuyableAmount("or", 413)
                                let bases = tmp.or.buyables[413].bases
                                return bases[0].times(bases[1].pow(amt)).times(bases[2].pow(amt.pow(2)))
                        },
                        unlocked(){
                                return player.or.energy.total.gte(1e190)
                        },
                        canAfford() {
                                return player.or.energy.points.gte(tmp.or.buyables[413].cost)
                        },
                        getMaxAfford() {
                                let pts = player.or.energy.points
                                let bases = tmp.or.buyables[413].bases
                                // take everything to log base bases[2]
                                if (pts.lt(bases[0])) return decimalZero
                                let lb0 = bases[0].div(pts).log(bases[2])
                                let lb1 = bases[1].log(bases[2])
                                // we want to solve x^2 + lb1 x + lb0 = 0
                                // for the larger solution, so take the positive square root
                                // note that lb0 <= 0, so discrim >= 0
                                let discrim = lb1.pow(2).sub(lb0.times(4))
                                return discrim.sqrt().sub(lb1).div(2).ceil()
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.or
                                let id = 413
                                let ma = tmp.or.buyables[id].getMaxAfford
                                let maxBulk = tmp.or.buyables.getIntestineMaxBulk
                                let up = false ? ma.sub(data.buyables[id]) : ma.sub(data.buyables[id]).min(maxBulk)
                                data.buyables[id] = data.buyables[id].plus(up.max(0))
                                if (!hasUpgrade("or", 322) && up.gt(0)) {
                                        data.energy.points = data.energy.points.sub(tmp.or.buyables[id].cost)
                                }
                        },
                        amountGain(){
                                let ret = player.or.buyables[413].pow(1+hasMilestone("nu", 1)).div(10)
                                if (hasMilestone("an", 3)) ret = ret.times(10)

                                let ids = [423]
                                for (i in ids) {
                                        ret = ret.times(player.or.extras[ids[i]].plus(1))
                                }
                                ret = ret.times(tmp.or.buyables[413].effect)
                                if (hasUpgrade("sp", 21)) ret = ret.times(tmp.sp.effect.pow(player.or.buyables[413].sqrt()))
                                if (hasUpgrade("sp", 41)) ret = ret.times(player.an.grid[204].extras.plus(1).pow(player.nu.points.sqrt()))

                                return ret
                        },
                        base(){
                                if (hasMilestone("an", 34)) return player.nu.best.max(1)
                                let logBase = new Decimal(10)
                                if (hasMilestone("an", 6)) logBase = new Decimal(9)
                                if (hasMilestone("an", 7)) logBase = new Decimal(8)
                                if (hasMilestone("an", 8)) logBase = new Decimal(7)
                                if (hasMilestone("an", 9)) logBase = new Decimal(6)
                                if (hasUpgrade("or", 352)) logBase = new Decimal(5)
                                if (hasUpgrade("or", 353)) logBase = new Decimal(4)
                                if (hasUpgrade("or", 354)) logBase = new Decimal(3)
                                if (hasUpgrade("or", 355)) logBase = new Decimal(Math.E)
                                if (hasUpgrade("an", 13))  logBase = new Decimal(2)
                                let ret = player.or.energy.points.max(logBase).log(logBase).max(10).log10()
                                
                                return ret
                        },
                        effect(){
                                return tmp.or.buyables[413].base.pow(player.or.buyables[413])
                        },
                        display(){
                                let id = 413
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.or.buyables[id]) + "</b><br>"
                                        let amt = "<b><h2>Amount</h2>: " + formatWhole(player.or.extras[id]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.or.buyables[id].effect) + " to "
                                        eff2 += tmp.or.buyables[id].title + " amount gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("or", id)) + " Energy</b><br>"
                                
                                        return br + lvl + amt + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(log10(Energy)^x<br>" + format(tmp.or.buyables[id].base) + "^x"
                                let logBase = new Decimal(10)
                                if (hasMilestone("an", 6)) logBase = new Decimal(9)
                                if (hasMilestone("an", 7)) logBase = new Decimal(8)
                                if (hasMilestone("an", 8)) logBase = new Decimal(7)
                                if (hasMilestone("an", 9)) logBase = new Decimal(6)
                                if (hasUpgrade("or", 352)) logBase = new Decimal(5)
                                if (hasUpgrade("or", 353)) logBase = new Decimal(4)
                                if (hasUpgrade("or", 354)) logBase = new Decimal(3)
                                if (hasUpgrade("or", 355)) logBase = new Decimal(Math.E)
                                if (hasUpgrade("an", 13))  logBase = new Decimal(2)
                                eformula = eformula.replaceAll("(log10", "(log" + formatWhole(logBase))
                                eformula = eformula.replaceAll("log2.72", "ln")
                                if (hasMilestone("an", 34)) eformula = eformula.replace("log10(log2(Energy)", "Nucleuses")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e300*1e17<sup>x</sup>*3<sup>x<sup>2</sup></sup>" 
                                if (hasMilestone("an", 43)) cost2 = "1.75<sup>x<sup>2</sup></sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost

                                let start = "Amount gain/s: " + format(tmp.or.buyables[id].amountGain)

                                return br + start + br + end
                        },
                },
                421: {
                        title: "INtes<u>tine</u>",
                        bases(){
                                let a = new Decimal("1e672")
                                let b = new Decimal(1e19)
                                let c = new Decimal(20)
                                if (hasMilestone("ch", 29)) {
                                        a = decimalOne
                                        b = decimalOne
                                        c = new Decimal(2)
                                }
                                return [a,b,c]
                        },
                        cost(){
                                let amt = getBuyableAmount("or", 421)
                                let bases = tmp.or.buyables[421].bases
                                return bases[0].times(bases[1].pow(amt)).times(bases[2].pow(amt.pow(2)))
                        },
                        unlocked(){
                                return player.or.energy.total.gte("1e666")
                        },
                        canAfford() {
                                return player.or.energy.points.gte(tmp.or.buyables[421].cost)
                        },
                        getMaxAfford() {
                                let pts = player.or.energy.points
                                let bases = tmp.or.buyables[421].bases
                                // take everything to log base bases[2]
                                if (pts.lt(bases[0])) return decimalZero
                                let lb0 = bases[0].div(pts).log(bases[2])
                                let lb1 = bases[1].log(bases[2])
                                // we want to solve x^2 + lb1 x + lb0 = 0
                                // for the larger solution, so take the positive square root
                                // note that lb0 <= 0, so discrim >= 0
                                let discrim = lb1.pow(2).sub(lb0.times(4))
                                return discrim.sqrt().sub(lb1).div(2).ceil()
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.or
                                let id = 421
                                let ma = tmp.or.buyables[id].getMaxAfford
                                let maxBulk = tmp.or.buyables.getIntestineMaxBulk
                                let up = false ? ma.sub(data.buyables[id]) : ma.sub(data.buyables[id]).min(maxBulk)
                                data.buyables[id] = data.buyables[id].plus(up.max(0))
                                if (!hasUpgrade("or", 322) && up.gt(0)) {
                                        data.energy.points = data.energy.points.sub(tmp.or.buyables[id].cost)
                                }
                        },
                        amountGain(){
                                let ret = player.or.buyables[421].pow(1+hasMilestone("nu", 1)).div(10)
                                if (hasMilestone("an", 3)) ret = ret.times(10)

                                let ids = [422, 423]
                                for (i in ids) {
                                        ret = ret.times(player.or.extras[ids[i]].plus(1))
                                }
                                ret = ret.times(tmp.or.buyables[421].effect)
                                if (hasUpgrade("ch", 11)) ret = ret.times(player.an.grid[508].extras.plus(1))
                                if (hasUpgrade("sp", 21)) ret = ret.times(tmp.sp.effect.pow(player.or.buyables[421].sqrt()))

                                return ret
                        },
                        base(){
                                if (hasMilestone("nu", 8)) return player.tokens.total.max(1)
                                let logBase = new Decimal(10)
                                if (hasUpgrade("or", 233)) logBase = new Decimal(9)
                                if (hasUpgrade("or", 234)) logBase = new Decimal(8)
                                if (hasUpgrade("or", 332)) logBase = new Decimal(7)
                                if (hasUpgrade("or", 333)) logBase = new Decimal(6)
                                if (hasUpgrade("an", 14))  logBase = new Decimal(5)
                                if (hasUpgrade("or", 42))  logBase = new Decimal(4)
                                if (hasUpgrade("an", 21))  logBase = new Decimal(3)
                                if (hasUpgrade("an", 22))  logBase = new Decimal(Math.E)
                                if (hasMilestone("an", 20))logBase = new Decimal(2)
                                let ret = player.or.points.max(logBase).log(logBase)
                                
                                return ret
                        },
                        effect(){
                                return tmp.or.buyables[421].base.pow(player.or.buyables[421])
                        },
                        display(){
                                let id = 421
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.or.buyables[id]) + "</b><br>"
                                        let amt = "<b><h2>Amount</h2>: " + formatWhole(player.or.extras[id]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.or.buyables[id].effect) + " to "
                                        eff2 += tmp.or.buyables[id].title + " amount gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("or", id)) + " Energy</b><br>"
                                
                                        return br + lvl + amt + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(Organs)^x<br>" + format(tmp.or.buyables[id].base) + "^x"
                                let logBase = new Decimal(10)
                                if (hasUpgrade("or", 233)) logBase = new Decimal(9)
                                if (hasUpgrade("or", 234)) logBase = new Decimal(8)
                                if (hasUpgrade("or", 332)) logBase = new Decimal(7)
                                if (hasUpgrade("or", 333)) logBase = new Decimal(6)
                                if (hasUpgrade("an", 14))  logBase = new Decimal(5)
                                if (hasUpgrade("or", 42))  logBase = new Decimal(4)
                                if (hasUpgrade("an", 21))  logBase = new Decimal(3)
                                if (hasUpgrade("an", 22))  logBase = new Decimal(Math.E)
                                if (hasMilestone("an", 20))logBase = new Decimal(2)
                                eformula = eformula.replace("10", formatWhole(logBase))
                                eformula = eformula.replace("log2.72", "ln")
                                if (hasMilestone("nu", 8)) eformula = eformula.replace("log2(Organs)", "Tokens")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e672*1e19<sup>x</sup>*20<sup>x<sup>2</sup></sup>" 
                                if (hasMilestone("ch", 29)) cost2 = "2<sup>x<sup>2</sup></sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost

                                let start = "Amount gain/s: " + format(tmp.or.buyables[id].amountGain)

                                return br + start + br + end
                        },
                },
                422: {
                        title: "inTES<u>tine</u>",
                        bases(){
                                let a = new Decimal("1e925")
                                let b = new Decimal(1e52)
                                let c = new Decimal(50)
                                if (hasMilestone("ch", 30)) {
                                        a = decimalOne
                                        b = decimalOne
                                        c = new Decimal(5.6)
                                }
                                if (hasMilestone("ch", 31)) c = new Decimal(3.5)
                                return [a,b,c]
                        },
                        cost(){
                                let amt = getBuyableAmount("or", 422)
                                let bases = tmp.or.buyables[422].bases
                                return bases[0].times(bases[1].pow(amt)).times(bases[2].pow(amt.pow(2)))
                        },
                        unlocked(){
                                return player.or.energy.total.gte("1e666")
                        },
                        canAfford() {
                                return player.or.energy.points.gte(tmp.or.buyables[422].cost)
                        },
                        getMaxAfford() {
                                let pts = player.or.energy.points
                                let bases = tmp.or.buyables[422].bases
                                // take everything to log base bases[2]
                                if (pts.lt(bases[0])) return decimalZero
                                let lb0 = bases[0].div(pts).log(bases[2])
                                let lb1 = bases[1].log(bases[2])
                                // we want to solve x^2 + lb1 x + lb0 = 0
                                // for the larger solution, so take the positive square root
                                // note that lb0 <= 0, so discrim >= 0
                                let discrim = lb1.pow(2).sub(lb0.times(4))
                                return discrim.sqrt().sub(lb1).div(2).ceil()
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.or
                                let id = 422
                                let ma = tmp.or.buyables[id].getMaxAfford
                                let maxBulk = tmp.or.buyables.getIntestineMaxBulk
                                let up = false ? ma.sub(data.buyables[id]) : ma.sub(data.buyables[id]).min(maxBulk)
                                data.buyables[id] = data.buyables[id].plus(up.max(0))
                                if (!hasUpgrade("or", 322) && up.gt(0)) {
                                        data.energy.points = data.energy.points.sub(tmp.or.buyables[id].cost)
                                }
                        },
                        amountGain(){
                                let ret = player.or.buyables[422].pow(1+hasMilestone("nu", 1)).div(10)
                                if (hasMilestone("an", 3)) ret = ret.times(10)

                                let ids = [423]
                                for (i in ids) {
                                        ret = ret.times(player.or.extras[ids[i]].plus(1))
                                }
                                ret = ret.times(tmp.or.buyables[422].effect)
                                if (hasUpgrade("sp", 21)) ret = ret.times(tmp.sp.effect.pow(player.or.buyables[422].sqrt()))
                                if (hasUpgrade("sp", 42)) ret = ret.times(player.an.grid[205].extras.pow(8))

                                return ret
                        },
                        base(){
                                let ret = tmp.tokens.buyables[101].effect.plus(1)
                                
                                return ret
                        },
                        effect(){
                                return tmp.or.buyables[422].base.pow(player.or.buyables[422])
                        },
                        display(){
                                let id = 422
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.or.buyables[id]) + "</b><br>"
                                        let amt = "<b><h2>Amount</h2>: " + formatWhole(player.or.extras[id]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.or.buyables[id].effect) + " to "
                                        eff2 += tmp.or.buyables[id].title + " amount gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("or", id)) + " Energy</b><br>"
                                
                                        return br + lvl + amt + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "(Up Quark effect + 1)^x<br>" + format(tmp.or.buyables[id].base) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e925*1e52<sup>x</sup>*50<sup>x<sup>2</sup></sup>" 
                                if (hasMilestone("ch", 30)) cost2 = "5.6<sup>x<sup>2</sup></sup>"
                                if (hasMilestone("ch", 31)) cost2 = cost2.replace("5.6", "3.5")
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost

                                let start = "Amount gain/s: " + format(tmp.or.buyables[id].amountGain)

                                return br + start + br + end
                        },
                },
                423: {
                        title: "intes<u>TINE</u>",
                        bases(){
                                let a = new Decimal("1e1526")
                                let b = new Decimal(1e60)
                                let c = new Decimal(99)
                                if (hasMilestone("ch", 27)) {
                                        a = decimalOne
                                        b = decimalOne
                                        c = new Decimal(8)
                                }
                                if (hasUpgrade("nu", 24)) c = new Decimal(2.5)
                                return [a,b,c]
                        },
                        cost(){
                                let amt = getBuyableAmount("or", 423)
                                let bases = tmp.or.buyables[423].bases
                                return bases[0].times(bases[1].pow(amt)).times(bases[2].pow(amt.pow(2)))
                        },
                        unlocked(){
                                return player.or.energy.total.gte("1e666")
                        },
                        canAfford() {
                                return player.or.energy.points.gte(tmp.or.buyables[423].cost)
                        },
                        getMaxAfford() {
                                let pts = player.or.energy.points
                                let bases = tmp.or.buyables[423].bases
                                // take everything to log base bases[2]
                                if (pts.lt(bases[0])) return decimalZero
                                let lb0 = bases[0].div(pts).log(bases[2])
                                let lb1 = bases[1].log(bases[2])
                                // we want to solve x^2 + lb1 x + lb0 = 0
                                // for the larger solution, so take the positive square root
                                // note that lb0 <= 0, so discrim >= 0
                                let discrim = lb1.pow(2).sub(lb0.times(4))
                                return discrim.sqrt().sub(lb1).div(2).ceil()
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.or
                                let id = 423
                                let ma = tmp.or.buyables[id].getMaxAfford
                                let maxBulk = tmp.or.buyables.getIntestineMaxBulk
                                let up = false ? ma.sub(data.buyables[id]) : ma.sub(data.buyables[id]).min(maxBulk)
                                data.buyables[id] = data.buyables[id].plus(up.max(0))
                                if (!hasUpgrade("or", 322) && up.gt(0)) {
                                        data.energy.points = data.energy.points.sub(tmp.or.buyables[id].cost)
                                }
                        },
                        amountGain(){
                                let ret = player.or.buyables[423].pow(1+hasMilestone("nu", 1)).div(10)
                                if (hasMilestone("an", 3)) ret = ret.times(10)

                                let ids = []
                                for (i in ids) {
                                        ret = ret.times(player.or.extras[ids[i]].plus(1))
                                }
                                ret = ret.times(tmp.or.buyables[423].effect)
                                if (hasUpgrade("ch", 35)) ret = ret.times(player.an.grid[304].extras.plus(1))
                                if (hasUpgrade("sp", 21)) ret = ret.times(tmp.sp.effect.pow(player.or.buyables[423].sqrt()))

                                return ret
                        },
                        base(){
                                if (hasUpgrade("nu", 25)) return player.or.energy.points.max(2022).log(2022)
                                if (hasUpgrade("nu", 13))  return player.or.buyables[423].max(1)
                                if (hasMilestone("an", 24)) return player.or.buyables[423].max(1).sqrt()
                                let logBase = new Decimal(10)
                                if (hasMilestone("an", 12)) logBase = new Decimal(9)
                                if (hasUpgrade("or", 342)) logBase = new Decimal(8)
                                if (hasUpgrade("or", 343)) logBase = new Decimal(7)
                                if (hasUpgrade("or", 344)) logBase = new Decimal(6)
                                if (hasMilestone("an", 13)) logBase = new Decimal(5)
                                if (hasUpgrade("or", 345)) logBase = new Decimal(4)
                                if (hasUpgrade("or", 34)) logBase = new Decimal(3)
                                if (hasUpgrade("or", 35)) logBase = new Decimal(Math.E)
                                if (hasUpgrade("or", 351)) logBase = new Decimal(2)
                                let ret = player.or.buyables[412].max(logBase).log(logBase)
                                
                                return ret
                        },
                        effect(){
                                return tmp.or.buyables[423].base.pow(player.or.buyables[423])
                        },
                        display(){
                                let id = 423
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.or.buyables[id]) + "</b><br>"
                                        let amt = "<b><h2>Amount</h2>: " + formatWhole(player.or.extras[id]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.or.buyables[id].effect) + " to "
                                        eff2 += tmp.or.buyables[id].title + " amount and Organ gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("or", id)) + " Energy</b><br>"
                                
                                        return br + lvl + amt + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(in<u>TES</u>tine)^x<br>" + format(tmp.or.buyables[id].base) + "^x"
                                let logBase = new Decimal(10)
                                if (hasMilestone("an", 12)) logBase = new Decimal(9)
                                if (hasUpgrade("or", 342)) logBase = new Decimal(8)
                                if (hasUpgrade("or", 343)) logBase = new Decimal(7)
                                if (hasUpgrade("or", 344)) logBase = new Decimal(6)
                                if (hasMilestone("an", 13)) logBase = new Decimal(5)
                                if (hasUpgrade("or", 345)) logBase = new Decimal(4)
                                if (hasUpgrade("or", 34)) logBase = new Decimal(3)
                                if (hasUpgrade("or", 35)) logBase = new Decimal(Math.E)
                                if (hasUpgrade("or", 351)) logBase = new Decimal(2)
                                eformula = eformula.replace("10", formatWhole(logBase))
                                eformula = eformula.replace("log2.72", "ln")
                                if (hasMilestone("an", 24)) eformula = eformula.replace("log2(in<u>TES</u>tine)", "sqrt(intes<u>TINE</u>)")
                                if (hasUpgrade("nu", 13)) eformula = eformula.replace("sqrt", "")
                                if (hasUpgrade("nu", 25)) eformula = eformula.replace("(intes<u>TINE</u>)", "log2022(Energy)")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e1526*1e60<sup>x</sup>*99<sup>x<sup>2</sup></sup>" 
                                if (hasMilestone("ch", 27)) cost2 = "8<sup>x<sup>2</sup></sup>" 
                                if (hasUpgrade("nu", 24)) cost2 = cost2.replace("8", "2.5")
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost

                                let start = "Amount gain/s: " + format(tmp.or.buyables[id].amountGain)

                                return br + start + br + end
                        },
                },
        },
        milestones: {
                1: {
                        requirementDescription(){
                                return "1 Organ reset"
                        },
                        done(){
                                return player.or.times >= 1
                        },
                        unlocked(){
                                return true
                        },
                        toggles:() => [["or", "autobuya"]],
                        effectDescription(){
                                let a = "Reward: Keep all prior automation, gain 3x Tissue and Cell resets, and autobuy Amino Acid upgrades.<sup>*</sup>"
                                if (!player.shiftAlias) return a 
                                return "<sup>*</sup>The first four Organ milestones are always kept."
                        },
                }, // hasMilestone("or", 1)
                2: {
                        requirementDescription(){
                                return "2 Organ resets"
                        },
                        done(){
                                return player.or.times >= 2
                        },
                        unlocked(){
                                return true
                        },
                        toggles:() => [["or", "autobuyd"]],
                        effectDescription(){
                                return "Reward: Bulk buy tokens, token tetrational base is 9.5, permanently bulk Omnipotent, and autobuy DNA upgrades."
                        },
                }, // hasMilestone("or", 2)
                3: {
                        requirementDescription(){
                                return "3 Organ resets"
                        },
                        done(){
                                return player.or.times >= 3
                        },
                        unlocked(){
                                return true
                        },
                        toggles:() => [["or", "autobuyc"]],
                        effectDescription(){
                                return "Reward: Autobuy Cell upgrades, per reset keep a Cell upgrade, and permanently bulk Totipotent."
                        },
                }, // hasMilestone("or", 3)
                4: {
                        requirementDescription(){
                                if (player.hardMode) return "6 Organ resets"
                                return "4 Organ resets"
                        },
                        done(){
                                if (player.hardMode) return player.or.times >= 6
                                return player.or.times >= 4
                        },
                        unlocked(){
                                return true
                        },
                        toggles:() => [["or", "autobuyt"]],
                        effectDescription(){
                                return "Reward: Autobuy Tissue upgrades, per reset keep 2 Tissue upgrades, and all four minigames constantly run."
                        },
                }, // hasMilestone("or", 4)
                5: {
                        requirementDescription(){
                                if (player.hardMode) return "10 Organ resets"
                                return "5 Organ resets"
                        },
                        done(){
                                if (player.hardMode) return player.or.times >= 10
                                return player.or.times >= 5
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Bulk 5x Primary, keep best Down Quark amount, and token tetrational base is 9."
                        },
                }, // hasMilestone("or", 5)
                6: {
                        requirementDescription(){
                                if (player.hardMode) return "15 Organ resets"
                                return "6 Organ resets"
                        },
                        done(){

                                if (player.hardMode) return player.or.times >= 15
                                return player.or.times >= 6
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Autobuy Token II via Token and keep a Tissue reset per Organ reset<sup>2</sup>."
                        },
                }, // hasMilestone("or", 6)
                7: {
                        requirementDescription(){
                                if (player.hardMode) return "21 Organ resets"
                                return "7 Organ resets"
                        },
                        done(){
                                if (player.hardMode) return player.or.times >= 21
                                return player.or.times >= 7
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Autobuy Token II via Stem Cell and Top Quark effect becomes 4C<sup>.7</sup>*x."
                        },
                }, // hasMilestone("or", 7)
                8: {
                        requirementDescription(){
                                if (player.hardMode) return "28 Organ resets"
                                return "8 Organ resets"
                        },
                        done(){
                                if (player.hardMode) return player.or.times >= 28
                                return player.or.times >= 8
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Autobuy Token II via Cell and Bottom Quark base becomes 6+C."
                        },
                }, // hasMilestone("or", 8)
                9: {
                        requirementDescription(){
                                if (player.hardMode) return "36 Organ resets"
                                return "9 Organ resets"
                        },
                        done(){
                                if (player.hardMode) return player.or.times >= 36
                                return player.or.times >= 9
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Keep a Tissue milestone per reset and Down Quark initial base becomes tokens<sup>sqrt(1+C)</sup>."
                        },
                }, // hasMilestone("or", 9)
                10: {
                        requirementDescription(){
                                if (player.hardMode) return "45 Organ resets"
                                return "10 Organs"
                        },
                        done(){
                                if (player.hardMode) return player.or.times >= 45
                                return player.or.points.gte(10)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Strange Quark initial base is C<sup>.8</sup> and per milestone double Tissue gain."
                        },
                }, // hasMilestone("or", 10)
                11: {
                        requirementDescription(){
                                if (player.hardMode) return "55 Organs"
                                return "15 Organs"
                        },
                        done(){
                                if (player.hardMode) return player.or.points.gte(55)
                                return player.or.points.gte(15)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Charm Quark base is .1(C<sup>.6</sup>) and Token II buyables' cost formula is x."
                        },
                }, // hasMilestone("or", 11)
                12: {
                        requirementDescription(){
                                if (player.hardMode) return "66 Organs"
                                return "20 Organs"
                        },
                        done(){
                                if (player.hardMode) return player.or.points.gte(66)
                                return player.or.points.gte(20)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Up Quark base is (1+C)<sup>.5</sup>/40 and keep Token II content."
                        },
                }, // hasMilestone("or", 12)
                13: {
                        requirementDescription(){
                                if (player.hardMode) return "78 Organs"
                                return "50 Organs"
                        },
                        done(){
                                if (player.hardMode) return player.or.points.gte(78)
                                return player.or.points.gte(50)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Organ milestones*.75 count towards Tissues IX."
                        },
                }, // hasMilestone("or", 13)
                14: {
                        requirementDescription(){
                                return "12,200 Organs"
                        },
                        done(){
                                return player.or.points.gte(12150)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Milestone 13 becomes Organ milestones and per milestone you have three less tokens for prestige purposes but disable the positive effects of Anti-Inflammatory, Anti-Omega, Anti-Psi, Anti-Chi, Anti-Upsilon, Anti-Tau, and Anti-Sigma."
                        },
                }, // hasMilestone("or", 14)
                15: {
                        requirementDescription(){
                                return "221,300 Organs"
                        },
                        done(){
                                return player.or.points.gte(221300)
                        }, // WATCH OUT FOR ANTI-OMICRON
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Add .0005 to tRNA's base but disable the positive effects of Anti-Rho, Anti-Omicron, Anti-Xi, Anti-Theta, Anti-Eta, Anti-Hard, and Anti-Difficult."
                        },
                }, // hasMilestone("or", 15)
                16: {
                        requirementDescription(){
                                return "1e290,418 Contaminants"
                        },
                        done(){
                                return player.or.contaminants.points.gte("1e290418")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: " + makeBlue("DB") + " multiplies Contaminant gain."
                        },
                }, // hasMilestone("or", 16)
                17: {
                        requirementDescription(){
                                return "1e538,064 Contaminants"
                        },
                        done(){
                                return player.or.contaminants.points.gte("1e538064")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: The number of milestones mulitiplies Air gain."
                        },
                }, // hasMilestone("or", 17)
                18: {
                        requirementDescription(){
                                return "1e9 Air"
                        },
                        done(){
                                return player.or.air.points.gte("1e9")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Add a log10(x) term to Larynx effect."
                        },
                }, // hasMilestone("or", 18)
                19: {
                        requirementDescription(){
                                return "1e999 Air"
                        },
                        done(){
                                return player.or.air.points.gte("1e999")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: If you are filtering from your left Kidney then raise Cell gain ^(99/98) and Token II via Cell cost formula is 10^10^(5+x/40)."
                        },
                }, // hasMilestone("or", 19)
                20: {
                        requirementDescription(){
                                return "1e176 Energy"
                        },
                        done(){
                                return player.or.energy.points.gte("1e176")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: The number of milestones multiplies Energy gain and log10(Energy) multiplies Organ and Air gain."
                        },
                }, // hasMilestone("or", 20)
                21: {
                        requirementDescription(){
                                return "1e500 Energy"
                        },
                        done(){
                                return player.or.energy.points.gte("1e500")
                        },
                        unlocked(){
                                return true
                        },
                        onComplete(){
                                let data = player.or.extras
                                data[401] = decimalZero
                                data[402] = decimalZero
                                data[403] = decimalZero
                                data[411] = decimalZero
                                data[412] = decimalZero
                                data[413] = decimalZero
                                data[421] = decimalZero
                                data[422] = decimalZero
                                data[423] = decimalZero
                        },
                        effectDescription(){
                                return "Reward: Raise energy gain ^1.01 per sixth row Heart upgrade and Token II buyables' cost exponent is .6 but zero energy buyable extra amounts and you lose 5% of your extra amounts per second."
                        },
                }, // hasMilestone("or", 21)
                22: {
                        requirementDescription(){
                                return "1e2609 Energy"
                        },
                        done(){
                                return player.or.energy.points.gte("1e2609")
                        },
                        unlocked(){
                                return true
                        },
                        toggles(){
                                return [["or", "autobuyupquark"]]
                        },
                        effectDescription(){
                                return "Reward: <u>in</u>TEStine's log8 becomes log7 and autobuy Up Quark."
                        },
                }, // hasMilestone("or", 22)
                23: {
                        requirementDescription(){
                                return "1e3200 Energy"
                        },
                        done(){
                                return player.or.energy.points.gte("1e3200")
                        },
                        unlocked(){
                                return true
                        },
                        toggles(){
                                return [["or", "dontshoworgans"]]
                        },
                        effectDescription(){
                                return "Reward: in<u>TES</u>tine's log10 becomes log9, per milestone Energy<sup>.01</sup> dilates point gain and unlock a toggle for hiding the Organs subtab [doesn't affect gameplay]."
                        },
                }, // hasMilestone("or", 23)
                24: {
                        requirementDescription(){
                                return "1e3618 Energy"
                        },
                        done(){
                                return player.or.energy.points.gte("1e3618")
                        },
                        unlocked(){
                                return true
                        },
                        toggles(){
                                return [["or", "dontshowfilter"]]
                        },
                        onComplete(){
                                let data = player.or.extras
                                data[401] = decimalZero
                                data[402] = decimalZero
                                data[403] = decimalZero
                                data[411] = decimalZero
                                data[412] = decimalZero
                                data[413] = decimalZero
                                data[421] = decimalZero
                                data[422] = decimalZero
                                data[423] = decimalZero
                        },
                        effectDescription(){
                                let a = "Reward: IN<u>tes</u>tine's log10 becomes log9, "
                                a += "unlock a toggle for hiding the filter clickables [doesn't affect gameplay],"
                                a += " and Token II via Cell double exponent is 7+x/150, but zero energy buyable "
                                return a + "extra amounts and you lose another 5% of your extra amounts per second."
                        },
                }, // hasMilestone("or", 24)
                25: {
                        requirementDescription(){
                                return "1e3826 Energy"
                        },
                        done(){
                                return player.or.energy.points.gte("1e3826")
                        },
                        unlocked(){
                                return true
                        },
                        toggles(){
                                return [["or", "dontshowairchall"]]
                        },
                        effectDescription(){
                                let a = "Reward: IN<u>tes</u>tine's log8 becomes log7, "
                                a += "unlock a toggle for hiding the air challenges [doesn't affect gameplay],"
                                return a + " and Token II buyables' cost exponent is .54."
                        },
                }, // hasMilestone("or", 25)
        },
        bars: {
                heart: {
                        direction: RIGHT,
                        width: 600,
                        height: 60,
                        progress(){
                                return Math.sin(player.timePlayed / 30 * Math.PI) ** 2
                        },
                        beatingIn(){
                                return Math.sin(player.timePlayed / 30 * Math.PI * 2) > 0
                        },
                        display(){
                                return tmp.or.bars.heart.beatingIn ? "Heart beating in" : "Heart beating out"
                        },
                        unlocked(){
                                return true
                        },
                        fillStyle(){
                                return {
                                        "background": "#94B938"
                                }
                        },
                        textStyle(){
                                return {
                                        "color": "#940038"
                                }
                        },
                }
        },
        microtabs: {
                organ_content: {
                        "Heart": { 
                                content: [
                                        ["bar", "heart"],
                                        ["display-text", 
                                                function (){
                                                        if (player.or.deoxygenated_blood.points.gt(1e100)) return ""
                                                        let a = "When your heart is beating in you gain " + makePurple("Oxygenated Blood") 
                                                        a += " (" + makePurple("OB") + ") and while your heart is beating out you gain "
                                                        return a + makeBlue("Deoxygenated Blood") + " (" + makeBlue("DB") + ")"
                                                }
                                        ],
                                        "secondary-display-blood",
                                        ["display-text", 
                                                function (){
                                                        let a = "You can potentially gain " + format(tmp.or.heart.getOBGain)
                                                        a += " " + makePurple("OB") + " and " + format(tmp.or.heart.getDBGain)
                                                        return a + " " + makeBlue("DB") + " per second"
                                                }
                                        ],
                                        ["upgrades", [10, 11, 12, 13, 14, 15]],
                                ],
                                unlocked(){
                                        return true
                                },
                                shouldNotify(){
                                        let ids = [101, 102, 103, 104, 105, 
                                                   111, 112, 113, 114, 115, 
                                                   121, 122, 123, 124, 125, 
                                                   131, 132, 133, 134, 135, 
                                                   141, 142, 143, 144, 145, 
                                                   151, 152, 153, 154, 155]
                                        for (i in ids){
                                                let id = ids[i]
                                                if (!layers.or.upgrades[id]) continue
                                                if (hasUpgrade("or", id)) continue 
                                                if (!tmp.or.upgrades[id].unlocked) continue
                                                if (canAffordUpgrade("or", id)) return true
                                        }
                                },
                        },
                        "Kidney": { 
                                content: [
                                        ["secondary-display", "contaminants"],
                                        ["display-text", function(){
                                                let a = "Choose to filter " + makeBlue("DB") + " via your left Kidney, or filter " + makePurple("OB") + " by your right Kidney."
                                                let b = "You are gaining " + format(tmp.or.kidney.getResetGain) + " Contaminants/s"
                                                return a + br + b
                                        }],
                                        ["clickables", [20]],
                                        ["upgrades", [20, 21, 22, 23]],
                                        ["buyables", [20, 21, 22]],
                                ],
                                unlocked(){
                                        return hasUpgrade("or", 14)
                                },
                                shouldNotify(){
                                        let ids = [201, 202, 203, 204, 205, 
                                                   211, 212, 213, 214, 215, 
                                                   221, 222, 223, 224, 225, 
                                                   231, 232, 233, 234, 235, 
                                                   241, 242, 243, 244, 245, 
                                                   251, 252, 253, 254, 255]
                                        for (i in ids){
                                                let id = ids[i]
                                                if (!layers.or.upgrades[id]) continue
                                                if (hasUpgrade("or", id)) continue 
                                                if (!tmp.or.upgrades[id].unlocked) continue
                                                if (canAffordUpgrade("or", id)) return true
                                        }
                                },
                        },
                        "Lung": { 
                                content: [
                                        ["secondary-display", "air"],
                                        ["display-text", function(){
                                                let a = "While in a challenge you do not gain Contaminants, " + makeBlue("DB") + ", or " + makePurple("OB") + "." 
                                                let b = "You are gaining " + format(tmp.or.lungs.getResetGain) + " Air/s"
                                                if (tmp.or.lungs.reqs.length > player.or.lungChallengesUnlocked) {
                                                        return a + br + b + br + "Get " + format(tmp.or.lungs.reqs[player.or.lungChallengesUnlocked]) + " Air to unlock the next challenge"
                                                }
                                                return a + br + b
                                        }],
                                        ["challenges", [1, 2, 3]],
                                        ["upgrades", [30, 31, 32, 33, 34, 35, 36]],
                                ],
                                unlocked(){
                                        return hasUpgrade("or", 215)
                                },
                                shouldNotify(){
                                        let ids = [301, 302, 303, 304, 305, 
                                                311, 312, 313, 314, 315, 
                                                321, 322, 323, 324, 325, 
                                                331, 332, 333, 334, 335, 
                                                341, 342, 343, 344, 345, 
                                                351, 352, 353, 354, 355]
                                        for (i in ids){
                                                let id = ids[i]
                                                if (!layers.or.upgrades[id]) continue
                                                if (hasUpgrade("or", id)) continue 
                                                if (!tmp.or.upgrades[id].unlocked) continue
                                                if (canAffordUpgrade("or", id)) return true
                                        }
                                },
                        },
                        "Intestine": { 
                                content: [
                                        ["secondary-display", "energy"],
                                        ["display-text", function(){
                                                if (player.or.air.total.lt("1e2300")) return "You can begin Energy production at 1e2300 Air"
                                                if (player.shiftAlias) return "Base gain amount is [buyables]/10"
                                                let a = "Buyable amounts (plus 1) multiply energy gain and the production<br>of buyable amounts directly above and to the left." 
                                                let b = "You are gaining " + format(tmp.or.intestine.getResetGain) + " Energy/s"
                                                return a + br + b
                                        }],
                                        ["buyables", [40, 41, 42]],
                                        ["upgrades", [40, 41, 42]],
                                ],
                                unlocked(){
                                        return hasUpgrade("or", 315)
                                },
                                shouldNotify(){
                                        let ids = [401, 402, 403, 404, 405, 
                                                411, 412, 413, 414, 415, 
                                                421, 422, 423, 424, 425, 
                                                431, 432, 433, 434, 435, 
                                                441, 442, 443, 444, 445, 
                                                451, 452, 453, 454, 455]
                                        for (i in ids){
                                                let id = ids[i]
                                                if (!layers.or.upgrades[id]) continue
                                                if (hasUpgrade("or", id)) continue 
                                                if (!tmp.or.upgrades[id].unlocked) continue
                                                if (canAffordUpgrade("or", id)) return true
                                        }
                                },
                        },
                },
        },
        tabFormat: {
                "Upgrades": {
                        content: [
                                "main-display",
                                ["prestige-button", "", function (){ return hasUpgrade("or", 125) ? {'display': 'none'} : {}}],
                                ["display-text", function (){
                                        if (!hasUpgrade("or", 125)) return ""
                                        let a = "You can reset for " + formatWhole(tmp.or.getResetGain, false, 3) + " Organs. "
                                        if (tmp.or.getResetGain.gt(1e5)) return a 
                                        return a + " Next at: " + format(tmp.or.getNextAt) + " Tissues"
                                }], 
                                "blank",
                                ["upgrades", [1,2,3,4,5]],
                        ],
                        unlocked(){
                                return true
                        },
                        shouldNotify(){
                                let ids = [11, 12, 13, 14, 15, 
                                           21, 22, 23, 24, 25, 
                                           31, 32, 33, 34, 35, 
                                           41, 42, 43, 44, 45, 
                                           51, 52, 53, 54, 55]
                                for (i in ids){
                                        let id = ids[i]
                                        if (!layers.or.upgrades[id]) continue
                                        if (hasUpgrade("or", id)) continue 
                                        if (!tmp.or.upgrades[id].unlocked) continue
                                        if (canAffordUpgrade("or", id)) return true
                                }
                        },
                },
                "Milestones": {
                        content: [
                                "main-display",
                                ["display-text", function(){
                                        return "You have done " + formatWhole(player.or.times) + " Organ resets"
                                }],
                                "milestones",
                        ],
                        unlocked(){
                                return true
                        },
                },
                "Organs": {
                        content: [
                                "main-display",
                                ["microtabs", "organ_content"],
                        ],
                        unlocked(){
                                if (hasMilestone("or", 23) && player.or.dontshoworgans) return false
                                return player.cells.challenges[21] >= 3
                        },
                },
                "Info": {
                        content: [
                                "main-display",
                                ["display-text", function(){
                                        let a1 = "Initial Organ gain: log10(Tissues)<sup>0.5</sup>-9"
                                        let a2 = "Current Organ gain: (log10(Tissues))<sup>EXP</sup>-9"
                                        if (hasUpgrade("or", 114)) a2 = a2.replace("-9", "")
                                        if (hasUpgrade("or", 154)) a2 = a2.replace("(log10(Tissues))<sup>EXP</sup>", "10<sup>log10(Tissues)<sup>.2</sup></sup>")
                                        if (hasUpgrade("or", 235)) a2 = a2.replace(".2", ".25")
                                        if (hasUpgrade("or", 41)) a2 = a2.replace("<sup>.25</sup>", "<sup>.3</sup>*EXP")
                                        if (!player.an.achActive[13] && hasAchievement("an", 13)) a2 = a2.replace(".3<",".31<")
                                        if (hasMilestone("ch", 33)) a2 = a2.replaceAll(".31<", ".35<")
                                        if (hasMilestone("nu", 18)) a2 = "Current Organ gain: 10<sup>log10(Tissues)<sup>.35</sup>/4*EXP</sup>"
                                        a2 = a2.replace("EXP", format(tmp.or.getGainExp))
                                        let a3 = "Initial Organ effect: (Organs+1)<sup>min(100, 1+cbrt(Organs)/5)</sup>"
                                        let a = a1 + br + a2 + br2 + a3
                                        let b = "Organ resets all prior content that is not permanently kept, including Token content."
                                        let c = "Note that Anti- challenges, Anti- gems, and Tertiary completions are never reset."
                                        let d1 = "Organ effect affects Phosphorus, Life, Amino Acid, Protein,"
                                        let d2 = "DNA, Cell, Stem Cell, Tissue, Mu, Lambda, Kappa, and Iota gain."
                                        let d3 = "For unlocking Organs, µ permanently resets nothing and automatically prestiges."
                                        let d = d1 + br + d2 + br2 + d3

                                        let part1 = a + br2 + b + br + c + br2 + d

                                        if (player.cells.challenges[21] <= 2) return part1

                                        let e1 = ["You have " + formatWhole(player.or.upgrades.length) + " Organ upgrades"]
                                        if (hasUpgrade("or", 14)) e1.push(br + formatWhole(tmp.or.upgrades.kidneyUpgradesLength) + " Kidney upgrades")
                                        if (hasUpgrade("or", 215)) e1.push(br + formatWhole(tmp.or.upgrades.lungUpgradesLength) + " Lung upgrades")
                                        let e
                                        if (e1.length == 1) e = e1[0] + "."
                                        if (e1.length == 2) e = e1[0] + " and " + e1[1] + "."
                                        if (e1.length == 3) e = e1[0] + "," + e1[1] + " and " + e1[2] + "."

                                        return part1 + br2 + e
                                }],
                        ],
                        unlocked(){
                                return true
                        },
                },
        },
        onPrestige(g){
                let timesAdd = 1
                if (player.easyMode) timesAdd *= 2
                if (hasMilestone("an", 1)) timesAdd *= 3
                player.or.times += timesAdd
                player.or.time = 0
        },
        doReset(layer){
                if (layer != "or") return
                player.or.time = 0

                /*
                1. Tissue content
                1.5 token II content
                2. Cells content
                3. DNA content
                4. Amino Acid content
                5. Life content
                */

                let data1 = player.t
                let data2 = player.cells
                let data3 = player.d
                let data4 = player.a
                let data5 = player.l

                // 1 Tissue content
                if (!player.nu.unlocked) {
                        let tKeptMilestones = 0
                        if (hasMilestone("or", 9)) tKeptMilestones += player.or.times
                        if (!false) {
                                sortStrings(data1.milestones)
                                data1.milestones = data1.milestones.slice(0, tKeptMilestones)
                        }

                        let tKeptUpgrades = 0
                        if (hasMilestone("or", 4)) tKeptUpgrades += player.or.times * 2
                        if (hasMilestone("an", 2)) tKeptUpgrades += player.an.times * 3
                        if (!false) {
                                sortStrings(data1.upgrades)
                                data1.upgrades = data1.upgrades.slice(0, tKeptUpgrades)
                        }

                        let tKeptTimes = 0
                        if (hasMilestone("or", 6)) tKeptTimes += player.or.times ** 2
                        if (!false) data1.times = Math.min(data1.times, tKeptTimes)
                }

                data1.points = decimalZero
                data1.best = decimalZero
                data1.total = decimalZero
                data1.bestOnReset = decimalZero

                // 1.5 Token II content
                if (!hasMilestone("or", 12)) {
                        let d = player.tokens
                        let d2 = d.tokens2
                        d.total = decimalZero
                        d.points = decimalZero
                        d2.total = decimalZero
                        d2.points = decimalZero

                        player.tokens.lastRespecDisplayFormula = "2<sup>x</sup>"

                        let resetIds = [
                                11, 12, 13,
                                21, 22, 23,
                                31, 32, 33,
                                41, 42, 43,
                                51, 52, 53, 
                                61, 62, 63,
                                101,102,103,
                                111,112,113,
                                121,122,123,
                                191,192,193,
                                ]
                        let resetbbids = [
                                11, 12, 13,
                                21, 22, 23,
                                31, 32, 33,
                                41, 42, 43,
                                51, 52, 53, 
                                61, 62, 63]
                        
                        if (!hasMilestone("or", 5)) resetbbids.push(102)

                        for (i in resetIds){
                                let id = resetIds[i]
                                d.buyables[id] = decimalZero
                                if (resetbbids.includes(id)) d.best_buyables[id] = decimalZero
                        }

                        player.subtabs.tokens.mainTabs = "Milestones"

                        d.bestStrange = decimalZero
                        d.bestTop = decimalZero
                        d.bestBottom = decimalOne
                        d.bestCharm = decimalZero
                }
                
                // 2 cell content
                if (!player.nu.unlocked) {
                        let cKeptMilestones = 0
                        if (hasUpgrade("t", 41)) cKeptMilestones += player.t.times
                        if (hasUpgrade("t", 43)) {
                                if (hasUpgrade("t", 13)) cKeptMilestones += 3
                                if (hasUpgrade("t", 23)) cKeptMilestones += 3
                                if (hasUpgrade("t", 33)) cKeptMilestones += 3
                                if (hasUpgrade("t", 43)) cKeptMilestones += 3
                                if (hasUpgrade("t", 53)) cKeptMilestones += 3
                        }
                        if (!false) {
                                sortStrings(data2.milestones)
                                data2.milestones = data2.milestones.slice(0, cKeptMilestones)
                        }

                        let cKeptUpgrades = 0
                        if (hasUpgrade("t", 42)) cKeptUpgrades += player.t.upgrades.length
                        if (hasMilestone("or", 3)) cKeptUpgrades += player.or.times
                        if (!false) {
                                sortStrings(data2.upgrades)
                                data2.upgrades = data2.upgrades.slice(0, cKeptUpgrades)
                        }

                        let cKeptTimes = 0
                        if (hasUpgrade("t", 44)) cKeptTimes += player.t.times
                        if (!false) data2.times = Math.min(data2.times, cKeptTimes)

                        // 2a: Stem
                        let cKeptChallenges = 0
                        if (hasUpgrade("t", 45)) cKeptChallenges += player.t.times
                        if (!false) {
                                let chData = data2.challenges
                                if (cKeptChallenges < chData[11]) {
                                        chData[11] = cKeptChallenges
                                        chData[12] = 0
                                } else {
                                        chData[12] = Math.min(chData[12], cKeptChallenges-chData[11])
                                }
                        }
                        // 2b: minigames
                        if (!false) {
                                // Mu:
                                data2.mu.points = decimalZero
                                data2.mu.best = decimalZero
                                data2.buyables[111] = decimalZero
                                data2.buyables[112] = decimalZero
                                data2.total11 = decimalZero

                                // Lambda:
                                data2.lambda.points = decimalZero
                                data2.lambda.best = decimalZero
                                data2.lambda.sacrificed = decimalZero
                                data2.total12 = decimalZero

                                // Kappa: 
                                data2.kappa.points = decimalZero
                                data2.kappa.best = decimalZero
                                data2.kappa.currentBarValue = decimalOne
                                data2.kappa.currentTime = 0
                                data2.total13 = decimalZero

                                // Iota:
                                data2.iota.points = decimalZero
                                data2.iota.best = decimalZero
                                data2.buyables[411] = decimalZero
                                data2.buyables[412] = decimalZero
                                data2.buyables[413] = decimalZero
                                data2.total14 = decimalZero
                        }
                }
                data2.buyables[11] = decimalZero
                data2.buyables[12] = decimalZero
                data2.buyables[13] = decimalZero
                data2.buyables[21] = decimalZero
                data2.stem_cells.points = decimalZero
                data2.stem_cells.best = decimalZero
                data2.points = decimalZero
                data2.best = decimalZero
                data2.total = decimalZero
                data2.timeInMinigame = 0
                data2.currentMinigame = undefined

                // 3 DNA content
                if (!player.nu.unlocked) {
                        let dKeptMilestones = 0
                        if (hasMilestone("cells", 1)) dKeptMilestones += player.cells.times
                        if (!false) {
                                sortStrings(data3.milestones)
                                data3.milestones = data3.milestones.slice(0, dKeptMilestones)
                        }

                        let dKeptUpgrades = 0
                        if (hasMilestone("cells", 5)) dKeptUpgrades += player.cells.times
                        if (!false) {
                                sortStrings(data3.upgrades)
                                data3.upgrades = data3.upgrades.slice(0, dKeptUpgrades)
                        }

                        let dKeptTimes = 0
                        if (hasMilestone("cells", 3)) dKeptTimes += player.cells.times
                        if (!false) data3.times = Math.min(data3.times, dKeptTimes)
                }

                data3.points = decimalZero
                data3.best = decimalZero
                data3.total = decimalZero

                // 4 Amino Acid content
                if (!false) {
                        let aKeptMilestones = 0
                        if (hasMilestone("d", 2)) aKeptMilestones += 3 * player.d.times
                        if (!false){
                                sortStrings(data4.milestones)
                                data4.milestones = data4.milestones.slice(0, aKeptMilestones)
                        }

                        data4.buyables[11] = decimalZero
                        data4.buyables[12] = decimalZero
                        data4.buyables[13] = decimalZero
                        data4.buyables[21] = decimalZero
                        data4.buyables[22] = decimalZero
                        data4.buyables[23] = decimalZero
                        data4.buyables[31] = decimalZero
                        data4.buyables[32] = decimalZero
                        data4.buyables[33] = decimalZero

                        let aKeptUpgrades = 0
                        if (hasMilestone("d", 7)) aKeptUpgrades += player.d.times * 2
                        if (!false) {
                                sortStrings(data4.upgrades)
                                data4.upgrades = data4.upgrades.slice(0, aKeptUpgrades)
                        }

                        if (!hasMilestone("d", 5)) data4.times = 0
                }

                data4.points = decimalZero
                data4.best = decimalZero
                data4.total = decimalZero
                data4.protein.best = decimalZero
                data4.protein.total = decimalZero
                data4.protein.points = decimalZero

                // 5 Life content
                if (!false) {
                        let lKeptMilestones = 0
                        if (hasMilestone("a", 1)) lKeptMilestones += 4 * player.a.times
                        if (!false) {
                                sortStrings(data5.milestones)
                                data5.milestones = data5.milestones.slice(0, lKeptMilestones)
                        }

                        let startingBuyableAmount = decimalZero
                        if (hasMilestone("cells", 1)) startingBuyableAmount = new Decimal(500)

                        data5.buyables[11] = startingBuyableAmount
                        data5.buyables[12] = startingBuyableAmount
                        data5.buyables[13] = startingBuyableAmount
                        data5.buyables[21] = startingBuyableAmount
                        data5.buyables[22] = startingBuyableAmount
                        data5.buyables[23] = startingBuyableAmount
                        data5.buyables[31] = startingBuyableAmount // buyables
                        data5.buyables[32] = startingBuyableAmount
                        data5.buyables[33] = startingBuyableAmount

                        //gems
                        if (!hasMilestone("d", 12)) {
                                let x = getResetGemIDs()

                                let gData = player.l.grid

                                for (i in x) {
                                        id = x[i]
                                        let thisKeep = decimalZero
                                        if (hasMilestone("a", 12) && id < 400 && (id % 100 < 4)) {
                                                thisKeep = thisKeep.max(1000)
                                        }
                                        gData[id].gems = gData[id].gems.min(thisKeep)
                                }
                        }

                        //reset times
                        if (!hasMilestone("a", 9) && !hasMilestone("cells", 2)) data5.times = 0
                }

                data5.points = decimalZero
                data5.best = decimalZero
                data5.total = decimalZero

                player.mu.buyables[11] = decimalZero
                player.mu.buyables[12] = decimalZero
                player.mu.buyables[13] = decimalZero
                player.mu.buyables[21] = decimalZero
                player.mu.buyables[22] = decimalZero
                player.mu.buyables[23] = decimalZero
                player.mu.buyables[31] = decimalZero // buyables
                player.mu.buyables[32] = decimalZero
                player.mu.buyables[33] = decimalZero

                player.p.best_over_amino = decimalZero

                resetPreLifeCurrencies()
        },
})

addLayer("an", {
        name: "Animals", 
        symbol: "A", 
        position: 2, 
        startData(){ return {
                unlocked: false,
		points: decimalZero,
                best: decimalZero,
                total: decimalZero,
                abtime: 0,
                time: 0,
                times: 0,
                passiveTime: 0,
                selectedId: 808,
                genes: {
                        points: decimalZero,
                        total: decimalZero,
                        best: decimalZero,
                },
                achActive: {
                        11: false,
                        12: false,
                        13: false,
                        14: false,
                        21: false,
                        22: false,
                        23: false,
                        24: false,
                        31: false,
                        32: false,
                        33: false,
                        34: false,
                },
                lastBought: undefined,
                hasSoldYet: false,
        }},
        color: "#FFEC13",
        branches: [],
        requires:() => new Decimal("1e100"), 
        resource: "Animals", 
        baseResource: "Organs", 
        baseAmount(){return player.or.points},
        type: "custom",
        getResetGain(){
                let ret = tmp.an.getBaseGain.times(tmp.an.getGainMult)
                
                if (player.extremeMode) ret = ret.pow(.75)
                
                return ret.floor()
        },
        getBaseGain(){
                let pts = player.or.points
                if (pts.lt("1e100")) return decimalZero
                let exp = tmp.an.getGainExp

                if (hasUpgrade("or", 33)) return pts.log10().pow(exp)
                return pts.log10().sub(99).pow(exp)
        },
        getGainMult(){ // a gain animalgain again animal gain animalsgain animals gain
                let ret = decimalOne

                if (player.easyMode)            ret = ret.times(2)
                if (hasMilestone("an", 13))     ret = ret.times(player.an.milestones.length)
                if (hasMilestone("an", 18))     ret = ret.times(player.an.genes.points.max(10).log10())
                else if (hasUpgrade("or", 351)) {
                        let a = 1
                        if (hasUpgrade("or", 352)) a ++
                        if (hasUpgrade("or", 353)) a ++
                        if (hasUpgrade("or", 354)) a ++
                        if (hasUpgrade("or", 355)) a ++
                                                ret = ret.times(Decimal.pow(2, a))
                }
                if (hasMilestone("an", 22))     ret = ret.times(player.an.grid[508].extras.plus(1).pow(.01))
                if (hasUpgrade("an", 35))       ret = ret.times(Decimal.pow(1.01, player.ch.points))
                if (hasAchievement("an", 23) && player.an.achActive[23]) {
                                                ret = ret.times(10)
                }
                if (hasUpgrade("an", 53))       ret = ret.times(Decimal.pow(1.01, player.tokens.tokens2.total.sub(hasMilestone("nu", 9) ? 0 : 7200).max(0)))
                if (hasMilestone("nu", 1))      ret = ret.times(2)
                if ((player.an.achActive[33] || hasMilestone("nu", 14)) && hasAchievement("an", 33)) {
                                                ret = ret.times(Decimal.pow(5, player.nu.points.times(tmp.an.clickables.rowThreeOff)))
                }
                if (hasUpgrade("sp", 11))       ret = ret.times(tmp.sp.effect)

                return ret.max(1)
        },
        getGainExp(){
                let ret = new Decimal(1/3)

                if (hasUpgrade("an", 12)) ret = new Decimal(1/2)
                if (hasUpgrade("ch", 14)) ret = new Decimal(1)

                if (hasUpgrade("ch", 24)) {
                        let times = hasAchievement("an", 23) && !player.an.achActive[23] ? 3 : 1
                        ret = ret.plus(player.ch.upgrades.length / 100 * times)
                }
                ret = ret.plus(tmp.nu.effectSecondary)

                return ret
        },
        getNextAt(){
                let gain = tmp.an.getResetGain.plus(1)

                if (player.extremeMode) gain = gain.root(.75)

                let reqInit = gain.div(tmp.an.getGainMult).max(1)
                if (hasUpgrade("or", 33)) return reqInit.root(tmp.an.getGainExp).pow10()
                return reqInit.root(tmp.an.getGainExp).plus(99).pow10()
        },
        canReset(){
                return tmp.an.getResetGain.gt(0) && hasUpgrade("or", 32) && !hasMilestone("an", 18)
        },
        resetsNothing(){
                return false
        },
        prestigeNotify(){
                return tmp.an.getResetGain.gt(0) && player.an.times < 20
        },
        effect(){
                let pts = player.an.total
                if (hasUpgrade("or", 33)) pts = player.an.best
                pts = pts.plus(tmp.nu.effectPrimary)

                let exp = pts.plus(99).log10().min(1000)
                if (!hasUpgrade("nu", 25)) exp = exp.min(300)
                if (!hasMilestone("nu", 9)) exp = exp.min(100)

                let ret = pts.plus(1).pow(exp)

                return ret.max(1)
        },
        effectDescription(){
                let start = " multiplying most prior currency gain by " 
                return start + format(tmp.an.effect) + "."
        },
        update(diff){
                let data = player.an
                
                if (data.points.gt(0) || hasUpgrade("or", 32)) data.unlocked = true
                data.best = data.best.max(data.points)

                data.time += diff
                if (hasMilestone("an", 14)) data.passiveTime += diff

                if (data.passiveTime > 1) {
                        data.passiveTime += -1
                        data.times ++
                }
                if (data.passiveTime > 10) data.passiveTime = 10

                if (hasUpgrade("or", 344)) {
                        let gain = tmp.an.getResetGain
                        if (!hasMilestone("an", 13)) {
                                let gainAmt = gain.times(diff)
                                data.total = data.total.plus(gainAmt)
                                data.points = data.points.plus(gainAmt)
                        } else {
                                let gainAmt = gain.times(diff).min(gain.times(10).sub(player.an.points)).max(0)
                                data.total = data.total.plus(gainAmt)
                                data.points = data.points.plus(gainAmt)
                        }
                }

                if (hasMilestone("an", 4) && player.an.autobuyor) {
                        let orKeys = [
                                '11', '12', '13', '14', '15', 
                                '21', '22', '23', '24', '25', 
                                '31', '32',

                                '101', '102', '103', '104', '105', 
                                '111', '112', '113', '114', '115', 
                                '121', '122', '123', '124', '125', 
                                '131', '132', '133', '134', '135', 
                                '141', '142', '143', '144', '145', 
                                '151', '152', '153', '154', '155', 
                                
                                '201', '202', '203', '204', '205', 
                                '211', '212', '213', '214', '215', 
                                '221', '222', '223', '224', '225', 
                                '231', '232', '233', '234', '235',

                                '301', '302', '303', '304', '305', 
                                '311', '312', '313', '314', '315', 
                                '321', '322', '323', '324', '325', 
                                '331', '332', '333', '334', '335']
                        if (hasMilestone("nu", 3)) orKeys = [
                                '11', '12', '13', '14', '15', 
                                '21', '22', '23', '24', '25', 
                                '31', '32', '33', '34', '35', 
                                '41', '42', '43', '44', '45', 
                                
                                '101', '102', '103', '104', '105', 
                                '111', '112', '113', '114', '115', 
                                '121', '122', '123', '124', '125', 
                                '131', '132', '133', '134', '135', 
                                '141', '142', '143', '144', '145', 
                                '151', '152', '153', '154', '155', 
                                
                                '201', '202', '203', '204', '205', 
                                '211', '212', '213', '214', '215', 
                                '221', '222', '223', '224', '225', 
                                '231', '232', '233', '234', '235',

                                '301', '302', '303', '304', '305', 
                                '311', '312', '313', '314', '315', 
                                '321', '322', '323', '324', '325', 
                                '331', '332', '333', '334', '335', 
                                '341', '342', '343', '344', '345', 
                                '351', '352', '353', '354', '355', ]

                        let boughtYet = false
                        for (i in orKeys) {
                                if (boughtYet) break
                                id = orKeys[i]
                                boughtYet = buyUpg("or", id) 
                        }
                }

                if (hasUpgrade("or", 352)) {
                        let getLevels = function(id){
                                return player.an.grid[id].buyables
                        }
                        let getExtras = function(id){
                                return player.an.grid[id].extras
                        }
                        let keys = [
                                101, 102, 103, 104, 105, 106, 107, 108,
                                202, 203, 204, 205, 206, 207, 208, 
                                303, 304, 305, 306, 307, 308, 
                                404, 405, 406, 407, 408, 
                                505, 506, 507, 508, 
                                606, 607, 608, 
                                707, 708, 
                                808]
                        // id-101 and id-100 affect id
                        let genesGain = tmp.an.gene.getResetGain
                        let contamRate = .01
                        if (hasMilestone("an", 19)) contamRate = .05
                        if (hasMilestone("an", 20)) contamRate = .25
                        if (hasMilestone("ch", 1))  contamRate = .33
                        if (hasMilestone("ch", 2))  contamRate = .39
                        if (hasMilestone("ch", 4))  contamRate = .75
                        if (hasMilestone("an", 22)) contamRate = 1
                        if (hasMilestone("sp", 1) && player.ch.points.lt(11)) contamRate = .01

                        data.genes.total = data.genes.total.plus(genesGain.times(diff))
                        data.genes.best = data.genes.best.max(data.genes.points)
                        data.genes.points = getLogisticAmount(data.genes.points, genesGain, contamRate, diff)
                        
                        for (i in keys) {
                                let id = keys[i]
                                let row = Math.floor(id/100)

                                let gain = Decimal.pow(tmp.ch.effect, getLevels(id)).sub(1)
                                if (id > 200) gain = gain.times(getExtras(id-100).plus(1)).times(getExtras(id-101).plus(1))
                                if ((data.achActive[12] || hasMilestone("ch", 16)) && hasAchievement("an", 12)) {
                                        let exp = (data.achActive[22] || hasUpgrade("ch", 41)) && hasAchievement("an", 22) ? 1.25 : 1
                                        gain = gain.times(getLevels(id).pow(exp).plus(2).log(2))
                                }

                                let spExp = decimalZero
                                if (hasUpgrade("sp", 22) && row == 8) {
                                        spExp = getLevels(808).div(15)
                                }
                                if (hasUpgrade("sp", 23) && row == 7) {
                                        spExp = player.ch.points.plus(10).sqrt()
                                }
                                if (hasUpgrade("sp", 24) && row == 6) {
                                        spExp = player.nu.points.plus(8).cbrt()
                                }
                                if (hasUpgrade("sp", 25) && row == 5) {
                                        spExp = new Decimal(player.sp.times).min(22).plus(3).sqrt()
                                }
                                if (hasUpgrade("sp", 31) && row == 4) {
                                        spExp = player.nu.points.div(50)
                                }
                                if (hasUpgrade("sp", 32) && row == 3) {
                                        spExp = player.ch.points.log(2).div(25)
                                }
                                if (hasUpgrade("sp", 33) && row == 2) {
                                        spExp = player.tokens.token2.total.log10().div(25)
                                }
                                gain = gain.times(tmp.sp.effect.pow(spExp))


                                if (hasAchievement("an", 33)) {
                                        data.grid[id].extras = gain
                                } else {
                                        data.grid[id].extras = getLogisticAmount(player.an.grid[id].extras, gain, contamRate, diff)
                                }
                        }
                }

                if (hasMilestone("an", 26) || (hasMilestone("an", 20) && player.nu.unlocked) || hasMilestone("nu", 2)) {
                        let subD = data.grid
                        let ml = tmp.an.grid.maxLevels
                        let keys = [
                                101, 102, 103, 104, 105, 106, 107, 108,
                                202, 203, 204, 205, 206, 207, 208, 
                                303, 304, 305, 306, 307, 308, 
                                404, 405, 406, 407, 408, 
                                505, 506, 507, 508, 
                                606, 607, 608, 
                                707, 708, 
                                808]

                        for (i in keys) {
                                if (data.achActive[11] && hasAchievement("an", 11)) break
                                let id = keys[i]
                                
                                let shouldAB = false 
                                if (subD[id].everMaxed == true) shouldAB = true
                                if (hasMilestone("nu", 6) && subD[id].ever400) shouldAB = true
                                if (!shouldAB) {
                                        if (subD[id].buyables.lt(100)) continue
                                        let canOver100 = hasMilestone("nu", 2) || hasAchievement("an", 14)
                                        let nuUnl = hasMilestone("an", 27) && player.nu.unlocked
                                        if (!canOver100 && !nuUnl && !(hasMilestone("an", 20) && player.sp.unlocked)) continue
                                }
                                if (subD[id].buyables.gte(ml)) continue 
                                
                                let costs = TAXONOMY_COSTS[id]
                                let pts = data.genes.points
                                let ma = decimalZero
                                if (pts.gte(costs[0])) {
                                        ma = pts.div(costs[0]).log(costs[1]).root(costs[2]).ceil()
                                }
                                ma = ma.min(ml)
                                let buy = ma.sub(subD[id].buyables).max(0)
                                
                                if (data.achActive[11] || !hasAchievement("an", 11)) {
                                        buy = buy.min(5)
                                        if (!player.shiftAlias) buy = buy.min(1)
                                }
                                if (subD[id].buyables.gte(400)) subD[id].ever400 = true
                                if (buy.gt(0)) {
                                        data.lastBought = id
                                        data.hasSoldYet = false
                                }

                                subD[id].buyables = subD[id].buyables.plus(buy)
                                if (buy.gt(0) && !hasAchievement("an", 13) && !hasMilestone("nu", 2)) break
                        }
                }
        },
        gene: {
                getResetGain(){ // genegain gene gain ggain g gain
                        let ret = player.an.grid[808].extras.plus(1)

                        if (player.easyMode)            ret = ret.times(4)

                        if (hasMilestone("an", 16)) {
                                let sub = hasMilestone("an", 22) ? 0 : 1000
                                                        ret = ret.times(Decimal.pow(1.01, player.tokens.tokens2.total.sub(sub).max(0)))
                        }
                        if (!hasUpgrade("ch", 44)) {
                                if (hasMilestone("an", 17)) {
                                        let base = player.or.deoxygenated_blood.points.max(10).log10().max(10).log10()
                                        let exp = player.nu.points.plus(player.an.upgrades.length)
                                                                ret = ret.times(base.pow(exp))
                                }
                                if (hasMilestone("an", 18))     ret = ret.times(player.an.points.max(10).log10())
                                if (hasMilestone("an", 19))     ret = ret.times(player.or.contaminants.points.max(10).log10())
                                if (hasMilestone("an", 20))     ret = ret.times(player.cells.points.max(10).log10())
                        }
                        if (hasMilestone("an", 21))     ret = ret.times(tmp.an.milestones[21].effect)
                        if (hasMilestone("ch", 5) && !hasUpgrade("an", 31)) {
                                                        ret = ret.times(Decimal.pow(.5, player.ch.points.sub(8)))
                        }
                        if (hasMilestone("ch", 6) && !hasMilestone("an", 24)) {
                                                        ret = ret.times(Decimal.pow(.5, player.ch.points))
                        }
                        if (hasMilestone("an", 23))     ret = ret.times(player.or.energy.points.div("1e14000").plus(1).pow(.002))
                        if (hasMilestone("ch", 7))      ret = ret.times(player.ch.points.div(67).plus(1).pow(player.ch.points))
                        if (!hasUpgrade("nu", 23)) {
                                if (hasMilestone("ch", 8))      ret = ret.times(player.ch.points.pow(player.ch.milestones.length/3).max(1))
                                if (hasMilestone("ch", 16))     ret = ret.times(player.ch.points.plus(1))
                                if (hasMilestone("ch", 17))     ret = ret.times(Decimal.pow(2, player.nu.points))
                        }
                        if (hasUpgrade("ch", 14) && !hasMilestone("ch", 30)) {
                                                        ret = ret.times(tmp.ch.upgrades[14].effect)
                        }
                        if (hasUpgrade("ch", 15)) {
                                let base = hasUpgrade("an", 34) ? 1.04 : 1.01
                                let sub = hasUpgrade("an", 43) ? 0 : 2600
                                let exp = player.tokens.tokens2.total.sub(sub).max(0)
                                                        ret = ret.times(Decimal.pow(base, exp))
                        }
                        if (hasUpgrade("ch", 23) && !hasUpgrade("nu", 14)) {
                                                        ret = ret.times(20)
                        }
                        if (hasMilestone("an", 28))     ret = ret.times(player.an.grid[306].extras.plus(1))
                        if (hasUpgrade("an", 43) && !hasMilestone("ch", 29)) {
                                                        ret = ret.div(1e42)
                        }
                        if (!player.an.achActive[11] && hasAchievement("an", 11)) {
                                if (!player.an.achActive[22]) {
                                                        ret = ret.times(Decimal.pow(hasMilestone("an", 36) ? 25 : 5, player.an.achievements.length + 4))
                                } else                  ret = ret.times(25)
                        }
                        if (hasAchievement("an", 12)) {
                                if ((player.an.achActive[12] || hasMilestone("ch", 16)) && !hasUpgrade("ch", 34)) {
                                                        ret = ret.div(4e49)
                                } 
                                if (!player.an.achActive[12] || hasAchievement("an", 22)) {
                                                        ret = ret.times(Decimal.pow(hasMilestone("an", 31) ? 2 : 4, player.ch.points.sub(hasUpgrade("nu", 12) ? 0 : 200).max(0)))
                                }
                        }
                        if (hasUpgrade("an", 51))       ret = ret.times(2)
                        if (hasMilestone("ch", 6))      ret = ret.times(player.ch.points.eq(14) ? 20 : 1)
                        if (hasAchievement("an", 21)) {
                                let l = player.ch.points.sub(235).max(0)
                                let aa = player.an.achActive
                                let r1o = !aa[11] + !aa[12] + !aa[13] + !aa[14]
                                if (player.an.achActive[21])    ret = ret.times(Decimal.pow(3.3, l.times(r1o)))
                                else                            ret = ret.times(Decimal.pow(100, l))
                        }
                        if (hasUpgrade("an", 53)) {
                                let sub = hasMilestone("nu", 9) ? 0 : 7200
                                let per = 1.05
                                                        ret = ret.times(Decimal.pow(per, player.tokens.tokens2.total.sub(sub).max(0)))
                        }
                        if (hasMilestone("nu", 1))      ret = ret.times(2)
                        if (hasUpgrade("ch", 32) && !hasUpgrade("nu", 14)) {
                                                        ret = ret.times(20)
                        }
                        if (hasMilestone("nu", 2))      ret = ret.times(Decimal.pow(hasMilestone("an", 43) ? 70 : 10, player.nu.points))
                        if (hasUpgrade("an", 54))       ret = ret.times(player.nu.points.div(4).plus(1).pow(player.an.upgrades.length))
                        if (hasAchievement("an", 31))   ret = ret.times(Decimal.pow(15, player.nu.milestones.length))
                        if (hasMilestone("an", 34) && !hasMilestone("an", 36)) {
                                                        ret = ret.times(10)
                        }
                        if (hasMilestone("ch", 10) && player.ch.points.eq(100)) {
                                                        ret = ret.times(20)
                        } 
                        if (player.ch.points.eq(410))   ret = ret.times(200)
                        if (player.ch.points.eq(425))   ret = ret.times(200)
                        if (player.ch.points.eq(426))   ret = ret.times(10)
                        if (player.ch.points.eq(1221))  ret = ret.times(1e6)
                        if (player.ch.points.eq(1435))  ret = ret.times(1e25)
                        if (hasMilestone("an", 16))     ret = ret.times(Decimal.pow(10, player.sp.times).min(1e22))
                        if (hasMilestone("an", 39))     ret = ret.times(1e3)

                        if (player.extremeMode)         ret = ret.pow(.75)

                        return ret
                },
        },
        row: 0, 
        prestigeButtonText(){
                let b = ""
                if (tmp.an.getResetGain.lt(1e3)) b = "<br>Next: " + format(tmp.an.getNextAt) + " Organs."

                return "Reset for <b>" + formatWhole(tmp.an.getResetGain) + "</b> Animals" + b
        },
        layerShown(){
                if (tmp.an.deactivated) return false
                return hasUpgrade("or", 32) || player.an.unlocked
        },
        upgrades: {
                rows: 10,
                cols: 5,
                11: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Animals I"
                        },
                        description(){
                                return "Subtract 100 from the Tissue gain exponent and add 5 to Tissue effect exponent"
                        },
                        cost:() => decimalOne,
                        unlocked(){
                                return true
                        }, // hasUpgrade("an", 11)
                },
                12: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Animals II"
                        },
                        description(){
                                return "Per Token II add 1 to the Organ effect exponent and the Animal gain formula's cbrt becomes sqrt"
                        },
                        cost:() => new Decimal(400),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return hasMilestone("an", 13) || hasMilestone("nu", 2)
                        }, // hasUpgrade("an", 12)
                },
                13: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Animals III"
                        },
                        description(){
                                return "Energy buyable extra amounts are set to their production in one second and in<u>tes</u>TINE's inner ln becomes log2"
                        },
                        cost:() => new Decimal(158e3),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return hasMilestone("an", 18) || hasMilestone("nu", 2)
                        }, // hasUpgrade("an", 13)
                },
                14: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Animals IV"
                        },
                        description(){
                                return "Hominidae amount multiplies Tissue gain per milestone<sup>2</sup> and INtes<u>tine</u>'s log6 becomes log5"
                        },
                        cost:() => new Decimal(215e3),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return hasUpgrade("an", 13) || hasMilestone("nu", 2)
                        }, // hasUpgrade("an", 14)
                },
                15: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Animals V"
                        },
                        description(){
                                return "Canidae amount multiplies Energy gain and base DNA gain becomes [Animal upgrades]^[Token II]"
                        },
                        cost:() => new Decimal(948e3),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return hasUpgrade("an", 14) || hasMilestone("nu", 2)
                        }, // hasUpgrade("an", 15)
                },
                21: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Animals VI"
                        },
                        description(){
                                return "Felidae amount multiplies Contaminant gain per Taxonomy level and INtes<u>tine</u>'s log4 becomes log3"
                        },
                        cost:() => new Decimal(1014e3),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return hasUpgrade("an", 15) || hasMilestone("nu", 2)
                        }, // hasUpgrade("an", 21)
                },
                22: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Animals VII"
                        },
                        description(){
                                return "Primates amount multiplies Air gain per Psittaciformes level and INtes<u>tine</u>'s log3 becomes ln"
                        },
                        cost:() => new Decimal(1152e3),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return hasUpgrade("an", 21) || hasMilestone("nu", 2)
                        }, // hasUpgrade("an", 22)
                },
                23: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Animals VIII"
                        },
                        description(){
                                return "Carnivora I amount multiplies Organ gain, square an base, and IN<u>tes</u>tine's log6 becomes log5"
                        },
                        cost:() => new Decimal(1743770),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return hasUpgrade("an", 22) || hasMilestone("nu", 2)
                        }, // hasUpgrade("an", 23)
                },
                24: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Animals IX"
                        },
                        description(){
                                return "in<u>TES</u>tine's log6 becomes log5, unlock a new layer, and Oligopotent's base is log10(Contaminants)"
                        },
                        cost:() => new Decimal(2132620),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return hasUpgrade("an", 23) || hasMilestone("nu", 2)
                        }, // hasUpgrade("an", 24)
                },
                25: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Animals X"
                        },
                        description(){
                                return "<u>IN</u>testine's log6 becomes log5 and per upgrade Air<sup>.01</sup> dilates point gain"
                        },
                        cost:() => new Decimal(3237330),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return hasUpgrade("an", 24) || hasMilestone("nu", 2)
                        }, // hasUpgrade("an", 25)
                },
                31: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Animals XI"
                        },
                        description(){
                                return "<bdi style='font-size: 80%'><u>in</u>TEStine's log5 becomes log4, disable Chromosome Milestone 5's nerfs, and Carnivora II amount multiplies <u>in</u>TEStine amount gain</bdi>"
                        },
                        cost:() => new Decimal(16942e3),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return hasUpgrade("an", 25) || hasMilestone("nu", 2)
                        }, // hasUpgrade("an", 31)
                },
                32: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Animals XII"
                        },
                        description(){
                                return "<u>in</u>TEStine's log3 becomes log2 and bulk 5x Kidney buyables"
                        },
                        cost:() => new Decimal(54208e3),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return hasUpgrade("an", 31) || hasMilestone("nu", 2)
                        }, // hasUpgrade("an", 32)
                },
                33: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Animals XIII"
                        },
                        description(){
                                return "DNA base gain is Chromosomes<sup>[Token II]</sup> and per this row upgrade double Kidney bulk buy amount"
                        },
                        cost:() => new Decimal(5.2e12),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return hasUpgrade("an", 32) || hasMilestone("nu", 2)
                        }, // hasUpgrade("an", 33)
                },
                34: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Animals XIV"
                        },
                        description(){
                                return "Down Quark now only affects Tissue gain, Chromosome V becomes 4% per, and Oligopotent base is 1e75"
                        },
                        cost:() => new Decimal(2.06e14),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return hasUpgrade("an", 33) || hasMilestone("nu", 2)
                        }, // hasUpgrade("an", 34)
                },
                35: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Animals XV"
                        },
                        description(){
                                return "Per Chromosome gain 1.01x Animals and autobuy Chromosomes"
                        },
                        cost:() => new Decimal(1.58e18),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return hasUpgrade("an", 34) || hasMilestone("nu", 2)
                        }, // hasUpgrade("an", 35)
                },
                41: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Animals XVI"
                        },
                        description(){
                                return "Mammalia III amount<sup>Carnivora II<sup>3</sup></sup> multiplies Cell gain and Animal Milestone 27 affects DNA"
                        },
                        cost:() => new Decimal(1.25e20),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return hasUpgrade("an", 35) || hasMilestone("nu", 2)
                        }, // hasUpgrade("an", 41)
                },
                42: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Animals XVII"
                        },
                        description(){
                                return "Token II via Stem Cell double exponent is (480+x/10)<sup>.4</sup>"
                        },
                        cost:() => new Decimal(4.59e23),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return hasUpgrade("an", 41) || hasMilestone("nu", 2)
                        }, // hasUpgrade("an", 42)
                },
                43: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Animals XVIII"
                        },
                        description(){
                                return "Chromosomes V counts every Token II and add 1 to the Tissue effect exponent but divide Gene gain by 1e42"
                        },
                        cost:() => new Decimal(4.09e24),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return hasUpgrade("an", 42) || hasMilestone("nu", 2)
                        }, // hasUpgrade("an", 43)
                },
                44: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Animals XIX"
                        },
                        description(){
                                return "Unlock Animal achievements and a clickable"
                        },
                        cost:() => new Decimal(1.39e26),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return hasUpgrade("an", 43) || hasMilestone("nu", 2)
                        }, // hasUpgrade("an", 44)
                },
                45: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Animals XX"
                        },
                        description(){
                                return "Disable Mu IV, Lambda IV, Kappa IV, and Iota IV effects on Stem Cells"
                        },
                        cost:() => new Decimal(6.95e27),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return hasUpgrade("an", 44) || hasMilestone("nu", 2)
                        }, // hasUpgrade("an", 45)
                },
                51: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Animals XXI"
                        },
                        description(){
                                return "Token II buyables' cost exponent is .45 and double Gene gain but disable Primary and Secondary reward"
                        },
                        cost:() => new Decimal(1.8e30),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return hasUpgrade("an", 45) || hasMilestone("nu", 2)
                        }, // hasUpgrade("an", 51)
                },
                52: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Animals XXII"
                        },
                        description(){
                                return "log74(max(74, Chromosomes)) multiplies Token tetrational divider"
                        },
                        cost:() => new Decimal(4.38e30),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return hasUpgrade("an", 51) || hasMilestone("nu", 2)
                        }, // hasUpgrade("an", 52)
                },
                53: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Animals XXIII"
                        },
                        description(){
                                return "Per Token II - 7200 gain 1.01x more Animals and 1.05x Genes"
                        },
                        cost:() => new Decimal(8.25e32),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return hasUpgrade("an", 52) || hasMilestone("nu", 2)
                        }, // hasUpgrade("an", 53)
                },
                54: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Animals XXIV"
                        },
                        description(){
                                return "Per upgrade 1+[Nucleuses]/4 multiplies Gene gain"
                        },
                        cost:() => new Decimal(1.47e39),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return player.nu.best.gte(2)
                        }, // hasUpgrade("an", 54)
                },
                55: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Animals XXV"
                        },
                        description(){
                                return "Per Chromosome - 291 increase the Taxonomy buyable cap by 1 up to 1510"
                        },
                        cost:() => new Decimal(5.38e43),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return player.nu.best.gte(3)
                        }, // hasUpgrade("an", 55)
                },
        },
        milestones: {
                1: {
                        requirementDescription(){
                                return "1 Animal reset"
                        },
                        done(){
                                return player.an.times >= 1
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Keep most prior automation, bulk 19x Secondary, and gain 3x Organ resets."
                        },
                }, // hasMilestone("an", 1)
                2: {
                        requirementDescription(){
                                return "2 Animal resets"
                        },
                        done(){
                                return player.an.times >= 2
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Per reset keep 3 Tissue upgrades, 1 Organ upgrade, and 1 Organ reset and autobuy <u>in</u>TEStine."
                        },
                }, // hasMilestone("an", 2)
                3: {
                        requirementDescription(){
                                return "3 Animal resets"
                        },
                        done(){
                                return player.an.times >= 3
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Autobuy <u>in</u>tesTINE and energy buyables extra base gain is [amount] but you decay 10x more extra amounts."
                        },
                }, // hasMilestone("an", 3)
                4: {
                        requirementDescription(){
                                return "4 Animal resets"
                        },
                        done(){
                                return player.an.times >= 4
                        },
                        unlocked(){
                                return true
                        },
                        toggles(){
                                return [["an", "autobuyor"]]
                        },
                        effectDescription(){
                                return "Reward: Autobuy IN<u>tes</u>tine, unlock a Lung upgrade, and autobuy Organ upgrades (only ones unlocked before Animals)."
                        }, // unlock all upgrades
                }, // hasMilestone("an", 4)
                5: {
                        requirementDescription(){
                                if (player.hardMode) return "6 Animal resets"
                                return "5 Animal resets"
                        },
                        done(){
                                if (player.hardMode) return player.an.times >= 6
                                return player.an.times >= 5
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Autobuy in<u>TES</u>tine, 10<sup>sqrt(log10(Contaminants))</sup> multiplies Contaminant gain, and per reset keep a Organ milestone."
                        },
                }, // hasMilestone("an", 5)
                6: {
                        requirementDescription(){
                                if (player.hardMode) return "9 Animals"
                                return "6 Animals"
                        },
                        done(){
                                if (player.hardMode) return player.an.points.gte(9)
                                return player.an.points.gte(6)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Autobuy in<u>tes</u>TINE and in<u>tes</u>TINE's inner log10 becomes log9."
                        },
                }, // hasMilestone("an", 6)
                7: {
                        requirementDescription(){
                                if (player.hardMode) return "13 Animals"
                                return "7 Animals"
                        },
                        done(){
                                if (player.hardMode) return player.an.points.gte(13)
                                return player.an.points.gte(7)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Autobuy INtes<u>tine</u>, per Animal reset keep an Organ upgrade, and in<u>tes</u>TINE's inner log9 becomes log8."
                        },
                }, // hasMilestone("an", 7)
                8: {
                        requirementDescription(){
                                if (player.hardMode) return "19 Animals"
                                return "8 Animals"
                        },
                        done(){
                                if (player.hardMode) return player.an.points.gte(19)
                                return player.an.points.gte(8)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Autobuy inTES<u>tine</u>, per Animal reset keep an Organ upgrade, and in<u>tes</u>TINE's inner log8 becomes log7."
                        },
                }, // hasMilestone("an", 8)
                9: {
                        requirementDescription(){
                                if (player.hardMode) return "28 Animals"
                                return "12 Animals"
                        },
                        done(){
                                if (player.hardMode) return player.an.points.gte(28)
                                return player.an.points.gte(12)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Autobuy intes<u>TINE</u>, bulk 4x Kidney buyables, and in<u>tes</u>TINE's inner log7 becomes log6."
                        },
                }, // hasMilestone("an", 9)
                10: {
                        requirementDescription(){
                                if (player.hardMode) return "41 Animals"
                                return "16 Animals"
                        },
                        done(){
                                if (player.hardMode) return player.an.points.gte(41)
                                return player.an.points.gte(16)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Per reset keep an Organ upgrade, bulk 5x Intestine buyables, and keep Contaminant buyables."
                        },
                }, // hasMilestone("an", 10)
                11: {
                        requirementDescription(){
                                if (player.hardMode) return "60 Animals"
                                return "25 Animals"
                        },
                        done(){
                                if (player.hardMode) return player.an.points.gte(60)
                                return player.an.points.gte(25)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Keep Intestine buyables and Token II buyables' cost exponent is .53."
                        },
                }, // hasMilestone("an", 11)
                12: {
                        requirementDescription(){
                                if (player.hardMode) return "88 Animals"
                                return "36 Animals"
                        },
                        done(){
                                if (player.hardMode) return player.an.points.gte(88)
                                return player.an.points.gte(36)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Keep Banked Air amounts and intes<u>TINE</u>'s log10 becomes log9."
                        },
                }, // hasMilestone("an", 12)
                13: {
                        requirementDescription(){
                                if (!hasUpgrade("or", 344)) return "Lung XXIV and ???"
                                return "169 Animals"
                        },
                        done(){
                                return player.an.points.gte(169) && hasUpgrade("or", 344)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: The number of milestone multiplies Animal gain and intes<u>TINE</u>'s log6 becomes log5 but max passive Animal gain at 10x what you can reset for."
                        },
                }, // hasMilestone("an", 13)
                14: {
                        requirementDescription(){
                                return "1e5676 Energy"
                        },
                        done(){
                                return player.or.energy.points.gte("1e5676")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Charm Quark effect becomes .07(C*x)<sup>.6</sup>, bulk 5x Kidney buyables, and gain a Animal reset per second."
                        },
                }, // hasMilestone("an", 14)
                15: {
                        requirementDescription(){
                                return "1e33133 Air"
                        },
                        done(){
                                return player.or.air.points.gte("1e33133")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Oligopotent's base is log10(Air) and Token II buyables' cost exponent is .52 but Totipotent's base log2 becomes log10 and Pluripotent's base becomes log10(Tissues)."
                        },
                }, // hasMilestone("an", 15)
                16: {
                        requirementDescription(){
                                if (player.sp.unlocked) return makePurple("1e9") + " Genes"
                                return "1e14 Genes"
                        },
                        done(){
                                return player.an.genes.points.gte(player.sp.unlocked ? "1e9" : "1e14")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let a = "Reward: Sapien amount multiplies Air gain"
                                if (player.sp.unlocked) a += makePurple(", each of the first 22 Species resets multiplies gene gain by 10,")
                                return a + " and each Token II past 1000 (multiplcatively) increases Gene gain by 1%."
                        },
                }, // hasMilestone("an", 16)
                17: {
                        requirementDescription(){
                                return "5e22 Genes"
                        },
                        done(){
                                return player.an.genes.points.gte("5e22")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let a = "Reward: Homo amount multiplies " + makeBlue("DB") + " gain and per upgrade log10(log10("
                                if (player.nu.unlocked) a = a.replace("upgrade", "upgrade " + makeRed("or Nucleus"))
                                return a + makeBlue("DB") + ")) multiplies Gene gain."
                        },
                }, // hasMilestone("an", 17)
                18: {
                        requirementDescription(){
                                return "1e49 Genes"
                        },
                        done(){
                                return player.an.genes.points.gte("1e49")
                        },
                        unlocked(){
                                return true
                        },
                        onComplete(){
                                player.an.points = player.an.points.min(tmp.an.getResetGain.times(10))
                        },
                        effectDescription(){
                                let a = "Reward: Canis amount multiplies " + makePurple("OB") + " gain, log10(Animals) multiplies Gene gain, and log10(Genes)"
                                return a + " multiplies Animal gain but disable Lung XXVI's affect on Animal gain and remove the ability to Animal reset"
                        },
                }, // hasMilestone("an", 18)
                19: {
                        requirementDescription(){
                                return "3e82 Genes"
                        },
                        done(){
                                return player.an.genes.points.gte("3e82")
                        },
                        unlocked(){
                                return true
                        },
                        onComplete(){
                                player.an.grid[606].extras = decimalZero
                                player.an.grid[607].extras = decimalZero
                                player.an.grid[608].extras = decimalZero
                                player.an.grid[707].extras = decimalZero
                                player.an.grid[708].extras = decimalZero
                                player.an.grid[808].extras = decimalZero
                        },
                        effectDescription(){
                                let a = "Reward: log10(Contaminants) multiplies Gene gain and unlock a new row of Taxonomy"
                                a += " but increase cross contamination to 5% and the first three rows extra amounts to 0."
                                return a
                        },
                }, // hasMilestone("an", 19)
                20: {
                        requirementDescription(){
                                return "1e413 Genes"
                        },
                        done(){
                                return player.an.genes.points.gte("1e413")
                        },
                        unlocked(){
                                return true
                        },
                        onComplete(){
                                player.an.grid[505].extras = decimalZero
                                player.an.grid[506].extras = decimalZero
                                player.an.grid[507].extras = decimalZero
                                player.an.grid[508].extras = decimalZero
                                player.an.grid[606].extras = decimalZero
                                player.an.grid[607].extras = decimalZero
                                player.an.grid[608].extras = decimalZero
                                player.an.grid[707].extras = decimalZero
                                player.an.grid[708].extras = decimalZero
                                player.an.grid[808].extras = decimalZero
                        },
                        effectDescription(){
                                let a = "Reward: log10(Cells) multiplies Gene gain, bulk 5x Kidney buyables, and INtes<u>tine</u>'s ln becomes log2"
                                a += " but increase cross contamination to 25% and the first four rows extra amounts to 0."
                                if (player.nu.unlocked) a += makeRed(" Activate milestone 26's autobuyer.")
                                if (player.sp.unlocked) a += makePurple(" Activate One reward.")
                                return a
                        },
                }, // hasMilestone("an", 20)
                21: {
                        requirementDescription(){
                                return "2.7e563 Genes"
                        },
                        done(){
                                return player.an.genes.points.gte("2.7e563")
                        },
                        unlocked(){
                                return true
                        },
                        effect(){
                                if (hasUpgrade("nu", 23)) return decimalOne
                                if (hasMilestone("an", 26) && !hasMilestone("an", 30)) return decimalOne
                                let m = player.an.milestones.length
                                let ret = Decimal.pow(m, m-19).max(1)
                                if (hasMilestone("an", 30) && !hasMilestone("an", 31)) ret = ret.cbrt()
                                return ret
                        },
                        effectDescription(){
                                return "Reward: Per milestone-19, milestones multiply Gene gain.<br>Currently: " + format(tmp.an.milestones[21].effect)  
                        },
                }, // hasMilestone("an", 21)
                22: {
                        requirementDescription(){
                                return "1.8e820 Genes"
                        },
                        done(){
                                return player.an.genes.points.gte("1.8e820")
                        },
                        unlocked(){
                                return true
                        },
                        onComplete(){
                                player.an.grid[505].extras = decimalZero
                                player.an.grid[506].extras = decimalZero
                                player.an.grid[507].extras = decimalZero
                                player.an.grid[508].extras = decimalZero
                                player.an.grid[606].extras = decimalZero
                                player.an.grid[607].extras = decimalZero
                                player.an.grid[608].extras = decimalZero
                                player.an.grid[707].extras = decimalZero
                                player.an.grid[708].extras = decimalZero
                                player.an.grid[808].extras = decimalZero
                        },
                        effectDescription(){
                                let a = "Reward: <u>IN</u>testine's log4 becomes log3, Animal milestone 16 counts every token,"
                                return a + " and Psittaciformes amount<sup>.01</sup> multiplies Animal gain, but the cross contamination rate is now 100% and the first four rows extra amounts to 0."
                        },
                }, // hasMilestone("an", 22)
                23: {
                        requirementDescription(){
                                return "8e1222 Genes"
                        },
                        done(){
                                return player.an.genes.points.gte("8e1222")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let a = "Reward: <u>in</u>TEStine's log4 becomes log3, Mammalia I amount multiplies Energy gain per Chromosome,"
                                return a + " and (Energy/1e14000+1)<sup>.002</sup> multiplies Gene gain."
                        },
                }, // hasMilestone("an", 23)
                24: {
                        requirementDescription(){
                                return "2.4e1507 Genes"
                        },
                        done(){
                                return player.an.genes.points.gte("2.4e1507")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: in<u>TES</u>tine's base becomes sqrt(in<u>TES</u>tine) and remove Chromosome milestone 6 nerfs."
                        },
                }, // hasMilestone("an", 24)
                25: {
                        requirementDescription(){
                                return "2.2e2932 Genes"
                        },
                        done(){
                                return player.an.genes.points.gte("2.2e2932")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Oligopotent base is 1e80 and Token II buyables' cost exponent is .47."
                        },
                }, // hasMilestone("an", 25)
                26: {
                        requirementDescription(){
                                return "8.7e2987 Genes"
                        },
                        done(){
                                return player.an.genes.points.gte("8.7e2987")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Autobuy every Taxonomy level that has ever been maxed at no cost and Chromosome cost exponent is 1.33 but disable Animal Milestone 21."
                        },
                }, // hasMilestone("an", 26)
                27: {
                        requirementDescription(){
                                return "3.4e4263 Genes"
                        },
                        done(){
                                return player.an.genes.points.gte("3.4e4263")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let a = "Reward: log6(Chromosomes) multiplies Organ effect exponent."
                                if (player.nu.unlocked) a += makeRed(" Activate One reward.")
                                return a
                        },
                }, // hasMilestone("an", 27)
                28: {
                        requirementDescription(){
                                return "6.2e8149 Genes"
                        },
                        done(){
                                return player.an.genes.points.gte("6.2e8149")
                        },
                        unlocked(){
                                return true
                        },
                        onComplete(){
                                player.d.upgrades = []
                        },
                        effectDescription(){
                                return "Reward: Chordata IV amount multiplies Gene gain and Genes multiply point gain but repeal and remove DNA upgrades."
                        },
                }, // hasMilestone("an", 28)
                29: {
                        requirementDescription(){
                                return "8.8e12049 Genes"
                        },
                        done(){
                                return player.an.genes.points.gte("8.8e12049")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Top Quark coefficient is .011 but disable Mu I, Lambda I, Kappa I, and Iota I."
                        },
                }, // hasMilestone("an", 29)
                30: {
                        requirementDescription(){
                                return "1e12708 Genes"
                        },
                        done(){
                                return player.an.genes.points.gte("1e12708")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Reinstate Animal Milestone 21 at a third the rate but disable DNA Milestone 18 and Tissue Milestones 4, 10, 11, 17, 18, 20, and 21."
                        },
                }, // hasMilestone("an", 30)
                31: {
                        requirementDescription(){
                                return "1e14125 Genes"
                        },
                        done(){
                                return player.an.genes.points.gte("1e14125")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Fully reinstate Animal Milestone 21 but Prime when toggled off becomes 2x per."
                        },
                }, // hasMilestone("an", 31)
                32: {
                        requirementDescription(){
                                return "2.9e14654 Genes"
                        },
                        done(){
                                return player.an.genes.points.gte("2.9e14654")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Remove the Chromosome effect exponent softcap and its effect formula is 1.002<sup>x</sup>*2.66."
                        },
                }, // hasMilestone("an", 32)
                33: {
                        requirementDescription(){
                                return "3e15111 Genes"
                        },
                        done(){
                                return player.an.genes.points.gte("3e15111")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: The first 101 Token II buyables are free and selling Token II buyables starts them all at 100."
                        },
                }, // hasMilestone("an", 33)
                34: {
                        requirementDescription(){
                                return "6e27961 Genes"
                        },
                        done(){
                                return player.an.genes.points.gte("6e27961")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Token II buyables' cost exponent is 1.35, gain 10x Genes, and in<u>tes</u>TINE's base is Nucleuses."
                        },
                }, // hasMilestone("an", 34)
                35: {
                        requirementDescription(){
                                return "2e99 Animals"
                        },
                        done(){
                                return player.an.points.gte("2e99")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Token II buyables' cost exponent is 1.34 and Chromosome cost base is 9.2e9 but Omnipotent base is Up Quark effect."
                        },
                }, // hasMilestone("an", 35)
                36: {
                        requirementDescription(){
                                return "2.22e157 Animals"
                        },
                        done(){
                                return player.an.points.gte("2.22e157")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Token Tetrational base is 6 and square PRO I effect but disable Animal Milestone 34's boost to Genes."
                        },
                }, // hasMilestone("an", 36)
                37: {
                        requirementDescription(){
                                return "2e327 Animals"
                        },
                        done(){
                                return player.an.points.gte("2e327")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: <u>in</u>TEStine base is log10(Animals)."
                        },
                }, // hasMilestone("an", 37)
                38: {
                        requirementDescription(){
                                return "1e402 Animals"
                        },
                        done(){
                                return player.an.points.gte("1e402")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Up Quark divider is 12."
                        },
                }, // hasMilestone("an", 38)
                39: {
                        requirementDescription(){
                                return "2.98e498 Animals"
                        },
                        done(){
                                return player.an.points.gte("2.98e498")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: IN<u>tes</u>tine cost is 1.5<sup>x<sup>2</sup></sup>, gain 1000x Genes, and Proteobacteria amount<sup>Chromosomes<sup>3</sup></sup> multiplies Tissue gain."
                        },
                }, // hasMilestone("an", 39)
                40: {
                        requirementDescription(){
                                return "7e518 Animals"
                        },
                        done(){
                                return player.an.points.gte("7e518")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Token II via Stem Cell double exponent is (9640+x/2)<sup>.3</sup>."
                        },
                }, // hasMilestone("an", 40)
                41: {
                        requirementDescription(){
                                return "2e592 Animals"
                        },
                        done(){
                                return player.an.points.gte("2e592")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Token II via Cell double exponent is 15+x/4300."
                        },
                }, // hasMilestone("an", 41)
                42: {
                        requirementDescription(){
                                return "1.7e654 Animals"
                        },
                        done(){
                                return player.an.points.gte("1.7e654")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: in<u>TES</u>tine cost base is 1.25, each of the 50 Nucleuses after the first 50 decrease its cost exponent by .0001, and sqrt(max(Chromosomes, 1465)/1465) exponentiates Energy gain (capped at 1.1)."
                        },
                }, // hasMilestone("an", 42)
                43: {
                        requirementDescription(){
                                return "5.4e884 Animals"
                        },
                        done(){
                                return player.an.points.gte("5.4e884")
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: in<u>tes</u>TINE cost is 1.75<sup>x<sup>2</sup></sup>, <u>in</u>tesTINE cost base is 4, and Nucleuse Milestone 2 permanently becomes 70x per. [need to code permanently]"
                        },
                }, // hasMilestone("an", 43)
        },
        clickables: {
                11: {
                        title(){
                                let id = player.an.selectedId
                                return TAXONOMY_NAMES[player.an.selectedId] + "<br>(" + Math.floor(id/100) + (id % 100) + ")"
                        },
                        display(){
                                let id = player.an.selectedId
                                let costs = TAXONOMY_COSTS[id]
                                let a = "Levels: " + formatWhole(player.an.grid[id].buyables) 
                                let b = "Amount: " + format(player.an.grid[id].extras)
                                let c = "Cost: " + format(tmp.an.clickables[11].cost) + " Genes"

                                let split = TAXONOMY_EFFECTS[id]().split(" per ")
                                let d
                                if (split.length == 1) {
                                        d = "Amount multiplies " + split[0] 
                                } else if (split.length == 2) {
                                        d = "Amount<sup>" + split[1] + "</sup> multiplies " + split[0]
                                } else if (split.length == 3) {
                                        d = "Amount<sup>" + split[1] + "*" + split[2] 
                                        d += "</sup> multiplies " + split[0]
                                }
                                if (id == 202) d = d.replace("multiplies", "adds")

                                if (costs == undefined) return br + a + br + b + br + c + br2 + d
                                if (player.an.grid[id].buyables.gte(tmp.an.grid.maxLevels) && !player.shiftAlias) {
                                        c = "Maxed levels!"
                                        return br + a + br + b + br + c + br2 + d
                                }
                                let e = "Cost formula:<br>" + formatWhole(costs[0]) + "(" + formatWhole(costs[1])
                                e += "<sup>x<sup>" + format(costs[2], 1) + "</sup></sup>)"
                                let ret = br + a + br + b + br + c + br2 + d + br2 + e + br2 + "(Press B to buy)"
                                return ret + (hasAchievement("an", 11) && player.an.lastBought != undefined && !player.an.hasSoldYet ? br + "(Press V to sell the last bought level but<br>reset amounts and Genes)" : "")
                        },
                        cost(){
                                let id = player.an.selectedId
                                let costs = TAXONOMY_COSTS[id]
                                let levels = player.an.grid[id].buyables
                                if (costs == undefined) return new Decimal("1ee99")
                                return costs[1].pow(levels.pow(costs[2])).times(costs[0])
                        },
                        unlocked(){
                                return true
                        },
                        canClick(){
                                let id = player.an.selectedId
                                if (player.an.grid[id].buyables.gte(tmp.an.grid.maxLevels)) return false
                                let pts = player.an.genes.points
                                let cost = tmp.an.clickables[11].cost 
                                return pts.gte(cost)
                        },
                        onClick(){
                                let id = player.an.selectedId
                                if (player.an.grid[id].buyables.gte(tmp.an.grid.maxLevels)) return
                                let costs = TAXONOMY_COSTS[id]
                                let pts = player.an.genes.points
                                let ma = decimalZero
                                if (pts.gte(costs[0])) {
                                        ma = pts.div(costs[0]).log(costs[1]).root(costs[2]).ceil()
                                }
                                ma = ma.min(tmp.an.grid.maxLevels)
                                let buy = ma.sub(player.an.grid[id].buyables).max(0)
                                
                                if (player.an.achActive[11] || !hasAchievement("an", 11)) {
                                        buy = buy.min(5)
                                        if (!player.shiftAlias) buy = buy.min(1)
                                }
                                if (buy.gt(0)) {
                                        player.an.lastBought = id
                                        player.an.hasSoldYet = false
                                }

                                player.an.grid[id].buyables = player.an.grid[id].buyables.plus(buy)
                                if (buy.gt(0)) {
                                        player.an.genes.points = player.an.genes.points.sub(tmp.an.clickables[11].cost)
                                        if (player.an.grid[id].buyables.gte(tmp.an.grid.maxLevels)) player.an.grid[id].everMaxed = true
                                }
                                if (player.an.grid[id].buyables.gte(400)) player.an.grid[id].ever400 = true
                        },
                },

                21: {
                        title(){
                                return "PRO I (" + (player.an.achActive[11] ? "ON" : "OFF") + ")"
                        },
                        display(){
                                if (player.an.achActive[11]) return "Disables gene buyable autobuyers"
                                return "Bulk buy Gene buyables and gain 25x Genes"
                        },
                        tooltip(){
                                let a = "When toggled ON disable gene buyale autobuyers" + br 
                                a += "When toggled OFF bulk buy Gene buyables and gain 25x Genes"
                                return a
                        },
                        unlocked(){
                                return hasAchievement("an", 11)
                        },
                        canClick(){
                                return true
                        },
                        onClick(){
                                player.an.achActive[11] = !player.an.achActive[11]
                        },
                },
                22: {
                        title(){
                                return "PRI I (" + (player.an.achActive[12] ? "ON" : "OFF") + ")"
                        },
                        display(){
                                if (player.an.achActive[12]) return "log2(levels+2) multiplies amount gain but you gain 4e49x less Genes"
                                if (hasMilestone("an", 31)) return "Gain 2x Genes per Chromosome past 200"
                                return "Gain 4x Genes per Chromosome past 200"
                        },
                        tooltip(){
                                let a = makeRed("Note: Toggling this zeroes Taxonomy amounts<br>")
                                a += "When toggled ON log2(levels+2) multiplies amount gain but you gain 4e49x less Genes" + br 
                                a += "When toggled OFF gain 4x Genes per Chromosome past 200"
                                if (hasMilestone("an", 31)) a = a.replace("4x", "2x")
                                return a
                        },
                        unlocked(){
                                return hasAchievement("an", 12)
                        },
                        canClick(){
                                return true
                        },
                        onClick(){
                                player.an.achActive[12] = !player.an.achActive[12]
                                layers.an.clickables[101].onClick(false)
                        },
                },
                23: {
                        title(){
                                return "COM I (" + (player.an.achActive[13] ? "ON" : "OFF") + ")"
                        },
                        display(){
                                if (player.an.achActive[13]) return "Proteobacteria II amount<sup>Chromosomes/17</sup> multiplies Organ gain"
                                return "Base Organ gain double exponent is .31"
                        },
                        tooltip(){
                                let a = ""
                                a += "When toggled ON Proteobacteria II amount<sup>Chromosomes/17</sup> multiplies Organ gain" + br 
                                a += "When toggled OFF base Organ gain double exponent is .31"
                                return a
                        },
                        unlocked(){
                                return hasAchievement("an", 13)
                        },
                        canClick(){
                                return true
                        },
                        onClick(){
                                player.an.achActive[13] = !player.an.achActive[13]
                                tmp.or.getBaseGain = decimalOne
                                tmp.or.getResetGain = decimalOne
                        },
                },
                24: {
                        title(){
                                return "ONE I (" + (player.an.achActive[14] ? "ON" : "OFF") + ")"
                        },
                        display(){
                                if (player.an.achActive[14]) return "Multipotent cost base is 1e39"
                                return "Oligopotent cost base is 1e69"
                        },
                        tooltip(){
                                let a = ""
                                a += "When toggled ON Multipotent cost base is 1e39" + br 
                                a += "When toggled OFF Oligopotent cost base is 1e69"
                                return a
                        },
                        unlocked(){
                                return hasAchievement("an", 14)
                        },
                        canClick(){
                                return true
                        },
                        onClick(){
                                player.an.achActive[14] = !player.an.achActive[14]
                        },
                },
                31: {
                        title(){
                                return "PRO II (" + (player.an.achActive[21] ? "ON" : "OFF") + ")"
                        },
                        display(){
                                if (player.an.achActive[21]) return "Gain 3.3x Genes per Chromosome - 235 per row one OFF achievement"
                                return "Gain 100x Genes per Chromosome - 235"
                        },
                        tooltip(){
                                let a = "When toggled ON gain 3.3x Genes per Chromosome - 235 per row one OFF achievement" + br 
                                a += "When toggled OFF gain 100x Genes per Chromosome - 235"
                                return a
                        },
                        unlocked(){
                                return hasAchievement("an", 21)
                        },
                        canClick(){
                                return true
                        },
                        onClick(){
                                player.an.achActive[21] = !player.an.achActive[21]
                        },
                },
                32: {
                        title(){
                                return "PRI II (" + (player.an.achActive[22] ? "ON" : "OFF") + ")"
                        },
                        display(){
                                if (player.an.achActive[22]) return "PRI I's ON formula becomes log2(levels<sup>1.25</sup>+2)"
                                return "PRO I's OFF boost to Genes becomes 5x per achievement + 4"
                        },
                        tooltip(){
                                let a = makeRed("Note: Toggling this zeroes Taxonomy amounts<br>")
                                a += "When toggled ON PRI I's ON formula becomes log2(levels<sup>1.25</sup>+2)" + br 
                                a += "When toggled OFF PRO I's OFF boost to Genes becomes 5x per achievement + 4"
                                return a
                        },
                        unlocked(){
                                return hasAchievement("an", 22)
                        },
                        canClick(){
                                return true
                        },
                        onClick(){
                                player.an.achActive[22] = !player.an.achActive[22]
                                layers.an.clickables[101].onClick(false)
                        },
                },
                33: {
                        title(){
                                return "COM II (" + (player.an.achActive[23] ? "ON" : "OFF") + ")"
                        },
                        display(){
                                if (player.an.achActive[23]) return "Gain 10x Animals"
                                return "Triple Chromosomes IX"
                        },
                        tooltip(){
                                let a = ""
                                a += "When toggled ON gain 10x Animals" + br 
                                a += "When toggled OFF triple Chromosomes IX"
                                return a
                        },
                        unlocked(){
                                return hasAchievement("an", 23)
                        },
                        canClick(){
                                return true
                        },
                        onClick(){
                                player.an.achActive[23] = !player.an.achActive[23]
                                player.an.points = decimalZero
                        },
                },
                34: {
                        title(){
                                return "ONE II (" + (player.an.achActive[24] ? "ON" : "OFF") + ")"
                        },
                        display(){
                                if (player.an.achActive[24]) return "<u>IN</u>testine base is cbrt(Tokens II)"
                                return "Unlock and you can prestige for Nucleuses"
                        },
                        tooltip(){
                                let a = ""
                                a += "When toggled ON <u>IN</u>testine base is cbrt(Tokens II)" + br 
                                a += "When toggled OFF unlock and you can prestige for Nucleuses"
                                return a
                        },
                        unlocked(){
                                return hasAchievement("an", 24)
                        },
                        canClick(){
                                return true
                        },
                        onClick(){
                                player.an.achActive[24] = !player.an.achActive[24]
                        },
                },
                rowThreeOff(){
                        let a = 0
                        a += hasAchievement("an", 31) && !player.an.achActive[31]
                        a += hasAchievement("an", 32) && !player.an.achActive[32]
                        a += hasAchievement("an", 33) && !player.an.achActive[33]
                        a += hasAchievement("an", 34) && !player.an.achActive[34]
                        return a
                },
                41: {
                        title(){
                                return "PRO III (" + (player.an.achActive[31] ? "ON" : "OFF") + ")"
                        },
                        display(){
                                if (player.an.achActive[31]) return "Per this row OFF (and unlocked) achievement you have one more Chromosome for effect purposes"
                                return ""
                        },
                        tooltip(){
                                let a = makeRed("Note: Toggling this zeroes Taxonomy amounts<br>")
                                a += "When toggled ON"
                                return a + " per this row OFF (and unlocked) achievement you have one more Chromosome for effect purposes"
                        },
                        unlocked(){
                                return hasAchievement("an", 31)
                        },
                        canClick(){
                                return true
                        },
                        onClick(){
                                player.an.achActive[31] = !player.an.achActive[31]
                                layers.an.clickables[101].onClick(false)
                        },
                },
                42: {
                        title(){
                                return "PRI III (" + (player.an.achActive[32] ? "ON" : "OFF") + ")"
                        },
                        display(){
                                if (player.an.achActive[32]) return "Per this row OFF (and unlocked) achievement decrease Token II buyables' cost exponent by .01"
                                return ""
                        },
                        tooltip(){
                                let a = makeRed("Note: Toggling this zeroes Taxonomy amounts<br>")
                                a += "When toggled ON"
                                return a + " per this row OFF (and unlocked) achievement decrease Token II buyables' cost exponent by .01"
                        },
                        unlocked(){
                                return hasAchievement("an", 32)
                        },
                        canClick(){
                                return true
                        },
                        onClick(){
                                player.an.achActive[32] = !player.an.achActive[32]
                                layers.an.clickables[101].onClick(false)
                        },
                },
                43: {
                        title(){
                                return "COM III (" + (player.an.achActive[33] ? "ON" : "OFF") + ")"
                        },
                        display(){
                                if (player.an.achActive[33]) return "Per this row OFF (and unlocked) achievement per Nucleus quintuple Animal gain"
                                return ""
                        },
                        tooltip(){
                                let a = makeRed("Note: Toggling this zeroes Taxonomy amounts<br>")
                                a += "When toggled ON"
                                return a + " per this row OFF (and unlocked) achievement per Nucleus quintuple Animal gain"
                        },
                        unlocked(){
                                return hasAchievement("an", 33)
                        },
                        canClick(){
                                return true
                        },
                        onClick(){
                                player.an.achActive[33] = !player.an.achActive[33]
                                layers.an.clickables[101].onClick(false)
                        },
                },
                44: {
                        title(){
                                return "ONE III (" + (player.an.achActive[34] ? "ON" : "OFF") + ")"
                        },
                        display(){
                                if (player.an.achActive[34]) return "Raise Bottom Quark base to this row OFF (and unlocked) achievements (min 1)"
                                return ""
                        },
                        tooltip(){
                                let a = makeRed("Note: Toggling this zeroes Taxonomy amounts<br>")
                                a += "When toggled ON"
                                return a + " raise Bottom Quark base to this row OFF (and unlocked) achievements (min 1)"
                        },
                        unlocked(){
                                return hasAchievement("an", 34)
                        },
                        canClick(){
                                return true
                        },
                        onClick(){
                                player.an.achActive[34] = !player.an.achActive[34]
                                layers.an.clickables[101].onClick(false)
                        },
                },

                101: {
                        title(){
                                return "Nullify"
                        },
                        display(){
                                return "Zeros Genes and Taxonomy buyables amounts and levels"
                        },
                        unlocked(){
                                return hasUpgrade("an", 44)
                        },
                        canClick(){
                                return true
                        },
                        onClick(resetBuys = true){
                                let data = player.an.grid

                                let keys = [
                                        101, 102, 103, 104, 105, 106, 107, 108,
                                        202, 203, 204, 205, 206, 207, 208, 
                                        303, 304, 305, 306, 307, 308, 
                                        404, 405, 406, 407, 408, 
                                        505, 506, 507, 508, 
                                        606, 607, 608, 
                                        707, 708, 
                                        808]

                                for (i in keys) {
                                        data[keys[i]].extras = decimalZero
                                        if (resetBuys === null) data[keys[i]].buyables = decimalZero
                                        // dont ask, its what it does
                                }
                                player.an.genes.points = decimalZero
                                tmp.an.gene.getResetGain = decimalZero
                                player.an.lastBought = undefined
                        },
                },
        },
        grid: {
                unlockedRows(){
                        //if (true) return 8
                        if (hasAchievement("an", 32))   return 7
                        if (hasMilestone("ch", 8))      return 6
                        if (hasMilestone("ch", 2))      return 5
                        if (hasMilestone("an", 19))     return 4
                        if (hasUpgrade("or", 354))      return 3 // etc
                        return 2
                },
                rows: 8,
                cols: 8,
                getStartData(id) {
                        return {everMaxed: false, 
                                buyables: decimalZero, 
                                extras: decimalZero, 
                                units: id % 100, 
                                hundreds: (id-id%100)/100, 
                                ever400: false}
                },
                maxLevels(){
                        let ret = new Decimal(400)

                        if (hasUpgrade("ch", 23)) {
                                let add = player.ch.points.times(3).min(700)
                                ret = ret.plus(add)
                        } else if (hasUpgrade("ch", 13)) {
                                let add = player.ch.points.sub(37).max(0).times(4)
                                ret = ret.plus(add.min(450))
                        }
                        if (hasMilestone("ch", 14)) {
                                let add = player.ch.points.sub(234).times(2).max(0)
                                ret = ret.plus(add.min(110))
                        }
                        if (hasUpgrade("an", 55)) {
                                let add = player.ch.points.sub(291).max(0)
                                ret = ret.plus(add.min(297))
                        }
                        if (hasMilestone("nu", 16)) {
                                ret = ret.plus(tmp.nu.effectPrimary)
                        } else {
                                if (hasMilestone("nu", 11))     ret = ret.plus(player.nu.points.div(2))
                                if (hasUpgrade("ch", 44))       ret = ret.plus(player.nu.points.div(2))
                        }
                        if (hasMilestone("ch", 29))     ret = player.nu.points.plus(1500)
                        if (hasMilestone("ch", 32))     ret = player.nu.points.plus(1200)

                        return ret.floor()
                }, // tmp.an.grid.maxLevels cap buyablecap buyable cap taxonomylimit taxnomoy limit
                getUnlocked(id) {
                        if (!hasUpgrade("or", 352)) return false
                        if (id % 100 < Math.floor(id/100)) return false
                        let unl = tmp.an.grid.unlockedRows
                        return id > 900 - 100 * unl
                },
                getCanClick(data, id) {
                        return true
                },
                onClick(data, id) {
                        player.an.selectedId = id
                },
                totalLevels(){
                        let keys = [
                                101, 102, 103, 104, 105, 106, 107, 108,
                                202, 203, 204, 205, 206, 207, 208, 
                                303, 304, 305, 306, 307, 308, 
                                404, 405, 406, 407, 408, 
                                505, 506, 507, 508, 
                                606, 607, 608, 
                                707, 708, 
                                808]
                        let a = decimalZero
                        for (i in keys) {
                                a = a.plus(player.an.grid[keys[i]].buyables)
                                //a = a.plus(player.an.grid[keys[i]].buyables.times(nCk(8-Math.floor(keys[i]/100), 8-keys[i]%100))) 
                                // above is the version where you take into account how much it boosts genes
                        }
                        return a
                }, // tmp.an.grid.totalLevels taxonomylevels taxonomy levels total levels 
                getStyle(data, id){
                        if (id == player.an.selectedId) {
                                return {"background-color": "#FFA225"}
                        }
                        let costs = TAXONOMY_COSTS[id]
                        if (costs != undefined && data.buyables.lt(tmp.an.grid.maxLevels)) {
                                let canAfford = player.an.genes.points.div(costs[0]).gt(  costs[1].pow( data.buyables.pow(costs[2]) )  )
                                if (!data.autobought && canAfford) {
                                        let x = ["#4F82A7", "#5D9094", "#6B9E82", "#79AC6F", "#86B95D",
                                                "#94C74A", "#A2D538", "#B0E325",]
                                        return {"background-color": x[data.hundreds-1]}
                                }
                        }
                        let x = ["#DA096F", "#C70E74", "#B51379", "#A2177D", "#901C82",
                                 "#7D2086", "#6B258B", "#582A90",]
                        return {"background-color": x[data.hundreds-1]}
                },
                getDisplay(data, id) {
                        return "Levels:<br>" + formatWhole(data.buyables) + "<br>Amount:<br>" + format(data.extras)
                }, // layers.l.grid.getGemEffect(id)
                getTitle(data, id){
                        if (id == 508 || id == 408 || id == 308 || id == 307) {
                                return "<bdi style='font-size: 60%'>" + TAXONOMY_NAMES[id] + "</bdi>"
                        }
                        return "<bdi style='font-size: 80%'>" + TAXONOMY_NAMES[id] + "</bdi>"
                },
        },
        achievements: {
                11: {
                        name: "Progression",
                        done(){
                                return player.an.genes.points.gte("1e11619")
                        },
                        tooltip(){
                                return "Get 1e11619 Genes"
                        }, // hasAchievement("an", 11)
                },
                12: {
                        name: "Prime",
                        done(){
                                let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139]
                                let keys = [
                                        101, 102, 103, 104, 105, 106, 107, 108,
                                        202, 203, 204, 205, 206, 207, 208, 
                                        303, 304, 305, 306, 307, 308, 
                                        404, 405, 406, 407, 408, 
                                        505, 506, 507, 508, 
                                        606, 607, 608, 
                                        707, 708, 
                                        808]
                                let a = 0
                                for (i in keys) {
                                        if (primes.includes(player.an.grid[keys[i]].buyables.round().toNumber())) a ++
                                        if (player.an.grid[keys[i]].buyables.gte(140)) return false
                                }
                                return a >= 17
                        },
                        tooltip(){
                                if (player.shiftAlias) return "2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139"
                                return "Have 17 Taxonomy buyables on prime levels. All Taxonomy buyables have to be less than 140 [shift for valid values]"
                        }, // hasAchievement("an", 12)
                },
                13: {
                        name: "Composite",
                        done(){
                                let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139]
                                let keys = [
                                        101, 102, 103, 104, 105, 106, 107, 108,
                                        202, 203, 204, 205, 206, 207, 208, 
                                        303, 304, 305, 306, 307, 308, 
                                        404, 405, 406, 407, 408, 
                                        505, 506, 507, 508, 
                                        606, 607, 608, 
                                        707, 708, 
                                        808]
                                let a = 0
                                for (i in keys) {
                                        let v = player.an.grid[keys[i]].buyables.round().toNumber()
                                        a ++
                                        if (primes.includes(v) || v < 4) a --
                                        if (v >= 134) return false
                                }
                                return a >= 17
                        },
                        tooltip(){
                                if (player.shiftAlias) return "A composite number is a number bigger than 3 that is NOT prime"
                                return "Have 17 Taxonomy buyables on composite levels. All Taxonomy buyables have to be less than 134<br>Reward: The taxonomy autobuyer can buy from every buyable"
                        }, // hasAchievement("an", 13)
                },
                14: {
                        name: "One",
                        done(){
                                let keys = [
                                        101, 102, 103, 104, 105, 106, 107, 108,
                                        202, 203, 204, 205, 206, 207, 208, 
                                        303, 304, 305, 306, 307, 308, 
                                        404, 405, 406, 407, 408, 
                                        505, 506, 507, 508, 
                                        606, 607, 608, 
                                        707, 708, 
                                        808]
                                let a = 0
                                for (i in keys) {
                                        let v = player.an.grid[keys[i]].buyables.round().toNumber()
                                        if (v == 1) a ++ 
                                        if (v > 1) return false
                                }
                                return a >= 13
                        },
                        tooltip(){
                                return "Have 13 Taxonomy buyables on 1 level and the rest on zero<br>Reward: Autobuy Taxonomy buyables which have 100 or more levels"
                        }, // hasAchievement("an", 14)
                },
                21: {
                        name: "Progression<br>II",
                        done(){
                                return player.tokens.tokens2.total.gte(6308)
                        },
                        tooltip(){
                                return "Get 6308 Token II"
                        }, // hasAchievement("an", 21)
                },
                22: {
                        name: "Prime<br>II",
                        done(){
                                let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103]
                                let keys = [
                                        101, 102, 103, 104, 105, 106, 107, 108,
                                        202, 203, 204, 205, 206, 207, 208, 
                                        303, 304, 305, 306, 307, 308, 
                                        404, 405, 406, 407, 408, 
                                        505, 506, 507, 508, 
                                        606, 607, 608, 
                                        707, 708, 
                                        808]
                                let a = 0
                                for (i in keys) {
                                        if (primes.includes(player.an.grid[keys[i]].buyables.round().toNumber())) a ++
                                        if (player.an.grid[keys[i]].buyables.gte(105)) return false
                                }
                                return a >= 17
                        },
                        tooltip(){
                                if (player.shiftAlias) return "2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103"
                                return "Have 17 Taxonomy buyables on prime levels. All Taxonomy buyables have to have less than 105 [shift for valid values]<br>Reward: PRI I's OFF effect is always active"
                        }, // hasAchievement("an", 22)
                },
                23: {
                        name: "Composite<br>II",
                        done(){
                                let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139]
                                let keys = [
                                        101, 102, 103, 104, 105, 106, 107, 108,
                                        202, 203, 204, 205, 206, 207, 208, 
                                        303, 304, 305, 306, 307, 308, 
                                        404, 405, 406, 407, 408, 
                                        505, 506, 507, 508, 
                                        606, 607, 608, 
                                        707, 708, 
                                        808]
                                let a = 0
                                for (i in keys) {
                                        let v = player.an.grid[keys[i]].buyables.round().toNumber()
                                        a ++
                                        if (primes.includes(v) || v < 4) a --
                                        if (v >= 99) return false
                                }
                                return a >= 17
                        },
                        tooltip(){
                                return "Have 17 Taxonomy buyables on composite levels. All Taxonomy buyables have to be less than 99<br>Reward: COM I's ON effect is always active"
                        }, // hasAchievement("an", 23)
                },
                24: {
                        name: "Six",
                        done(){
                                let keys = [
                                        101, 102, 103, 104, 105, 106, 107, 108,
                                        202, 203, 204, 205, 206, 207, 208, 
                                        303, 304, 305, 306, 307, 308, 
                                        404, 405, 406, 407, 408, 
                                        505, 506, 507, 508, 
                                        606, 607, 608, 
                                        707, 708, 
                                        808]
                                let a = 0
                                let b = 0
                                for (i in keys) {
                                        let v = player.an.grid[keys[i]].buyables.round().toNumber()
                                        if (v == 6) a ++ 
                                        if (v == 4) b ++
                                        if (player.an.grid[keys[i]].buyables.gte(7)) return false
                                }
                                return a >= 14 && b >= 1
                        },
                        tooltip(){
                                return "Have 14 Taxonomy buyables on 6 levels and 1 on 4 levels and every buyables is less than 7<br>Reward: Multipotent cost base is 1e38"
                        }, // hasAchievement("an", 24)
                },
                31: {
                        name: "Progression<br>III",
                        done(){
                                return player.an.genes.points.gte("1e36068")
                        },
                        tooltip(){
                                return "Get 1e36068 Genes.<br>Reward: Per Nucleus milestone Nucleus primary effect is 1% stronger (linear) and gain 15x Genes"
                        }, // hasAchievement("an", 31)
                },
                32: {
                        name: "Prime<br>III",
                        done(){
                                let primes = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59]
                                let keys = [
                                        101, 102, 103, 104, 105, 106, 107, 108,
                                        202, 203, 204, 205, 206, 207, 208, 
                                        303, 304, 305, 306, 307, 308, 
                                        404, 405, 406, 407, 408, 
                                        505, 506, 507, 508, 
                                        606, 607, 608, 
                                        707, 708, 
                                        808]
                                let a = 0
                                for (i in keys) {
                                        if (primes.includes(player.an.grid[keys[i]].buyables.round().toNumber())) a ++
                                }
                                return a >= 21
                        },
                        tooltip(){
                                if (player.shiftAlias) return "7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59"
                                return "Have 21 Taxonomy buyables on prime levels between 6 and 60 [shift for valid values]<br>Reward: Unlock a new row of Taxonomy"
                        }, // hasAchievement("an", 32)
                },
                33: {
                        name: "Composite<br>III",
                        done(){
                                let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73]
                                let keys = [
                                        101, 102, 103, 104, 105, 106, 107, 108,
                                        202, 203, 204, 205, 206, 207, 208, 
                                        303, 304, 305, 306, 307, 308, 
                                        404, 405, 406, 407, 408, 
                                        505, 506, 507, 508, 
                                        606, 607, 608, 
                                        707, 708, 
                                        808]
                                let a = 0
                                for (i in keys) {
                                        let v = player.an.grid[keys[i]].buyables.round().toNumber()
                                        a ++
                                        if (primes.includes(v) || v < 7) a --
                                        if (v >= 25) return false
                                }
                                return a >= 21
                        },
                        tooltip(){
                                return "Have 21 Taxonomy buyables on composite levels above 7. All Taxonomy buyables have to be less than 25<br>Reward: Taxonomy amounts are set to their gain limit immediately"
                        }, // hasAchievement("an", 33)
                },
                34: {
                        name: "Eight",
                        done(){
                                let keys = [
                                        101, 102, 103, 104, 105, 106, 107, 108,
                                        202, 203, 204, 205, 206, 207, 208, 
                                        303, 304, 305, 306, 307, 308, 
                                        404, 405, 406, 407, 408, 
                                        505, 506, 507, 508, 
                                        606, 607, 608, 
                                        707, 708, 
                                        808]
                                let a = 0
                                let b = 0
                                for (i in keys) {
                                        let v = player.an.grid[keys[i]].buyables.round().toNumber()
                                        if (v == 8) a ++ 
                                }
                                return a >= 21
                        },
                        tooltip(){
                                return "Have 21 Taxonomy buyables on 8 levels"
                        }, // hasAchievement("an", 34)
                },
        },
        tabFormat: {
                "Upgrades": {
                        content: [
                                "main-display",
                                ["prestige-button", "", function (){ return hasMilestone("an", 18) ? {'display': 'none'} : {}}],
                                ["display-text", function (){
                                        if (!hasMilestone("an", 18)) return ""
                                        let a = "You can reset for " + formatWhole(tmp.an.getResetGain, false, 3) + " Animals. "
                                        if (tmp.an.getResetGain.gt(1e5)) return a 
                                        return a + " Next at: " + format(tmp.an.getNextAt) + " Organs"
                                }], 
                                "blank",
                                ["upgrades", [1,2,3,4,5]],
                                ["clickables", [10]],
                        ],
                        unlocked(){
                                return true
                        },
                },
                "Milestones": {
                        content: [
                                "main-display",
                                ["display-text", function(){
                                        return "You have done " + formatWhole(player.an.times) + " Animals resets"
                                }],
                                "milestones",
                        ],
                        unlocked(){
                                return true
                        },
                },
                "Achievements": {
                        content: [
                                "main-display",
                                "blank",
                                "blank",
                                "blank",
                                "achievements",
                                ["clickablesBig", [2, 3, 4]],
                        ],
                        unlocked(){
                                return hasUpgrade("an", 44) || player.nu.unlocked
                        },
                },
                "Taxonomy": {
                        content: [
                                ["secondary-display", "genes"],
                                ["display-text", function(){
                                        return "You are gaining " + format(tmp.an.gene.getResetGain) + " Genes/s before cross contamination."
                                }],
                                "grid",
                                "blank",
                                ["clickablesBIG", [1]],
                                "blank",
                                "blank",
                                ["display-text", 
                                        function(){
                                                let a = "Gene gain is <b>Sapien</b> amount plus 1,<br>and amount gain is 2<sup><b>levels</b></sup>-1, multiplied by above<sup>*</sup> amounts plus 1.<br>"
                                                a += "Amounts and gene amount decays by PC per second due to genetic cross contamination."
                                                let pc = "1%"
                                                if (hasMilestone("an", 19)) pc = "5%"
                                                if (hasMilestone("an", 20)) pc = "25%"
                                                if (hasMilestone("ch", 1))  pc = "33%"
                                                if (hasMilestone("ch", 2))  pc = "39%"
                                                if (hasMilestone("ch", 4))  pc = "75%"
                                                if (hasMilestone("an", 22)) pc = "100%"
                                                if (hasMilestone("sp", 1) && player.ch.points.lt(11)) pc = "1%"
                                                a = a.replace("PC", pc)
                                                return a + br + "Press shift to bulk buy 5x."
                                        }
                                ],
                                "blank",
                                "blank"
                        ],
                        unlocked(){
                                return hasUpgrade("or", 352)
                        },
                },
                "Info": {
                        content: [
                                "main-display",
                                ["display-text", function(){
                                        let a1 = "Initial Animal gain: cbrt(log10(Organs)-99)"
                                        let a2 = "Current Animal gain: cbrt(log10(Organs)-99)"
                                        if (hasUpgrade("an", 12)) a2 = a2.replace("cbrt", "sqrt")
                                        if (hasUpgrade("or", 33)) a2 = a2.replace("-99", "")
                                        if (hasUpgrade("ch", 14)) a2 = "Current Animal gain: log10(Organs)<sup>" + format(tmp.an.getGainExp) + "</sup>"
                                        let a3 = "Initial Animal effect: (Animals+1)<sup>log10(99+Animals)</sup>"
                                        let a = a1 + br + a2 + br2 + a3
                                        let b = "Animals resets all prior content that is not permanently kept, including Token content."
                                        let c = "Note that Tertiary completions are never reset."
                                        let d1 = "Animal effect affects Organs, DNA, Cell, Stem Cell, Tissue, Mu, Lambda, Kappa, Iota, "
                                        let d2 = "Energy, Air, <u>in</u>TEStine amount, IN<u>tes</u>tine amount, Contaminants, " + makeBlue("DB")
                                        d2 += " and, " + makePurple("OB") + " gain."
                                        let d = d1 + br + d2

                                        let part1 = a + br2 + b + br + c + br2 + d

                                        if (!hasUpgrade("or", 352)) return part1

                                        let e = "<sup>*</sup> Above is the (at most) two entries that are above and touch the original entry."

                                        return part1
                                }],
                        ],
                        unlocked(){
                                return true
                        },
                },
        },
        onPrestige(g){
                let timesAdd = 1
                if (player.easyMode) timesAdd *= 2
                if (hasMilestone("nu", 1)) timesAdd *= 2
                player.an.times += timesAdd
                player.an.time = 0
        },
        doReset(layer){
                if (layer != "an") return
                player.an.time = 0

                /*
                1. Organ content
                1a. DB/OB
                1b. Contaminant
                1c. Air
                1d. Energy
                2. Tissue content
                3. token II content
                4. Cells content
                5. DNA content
                */

                
                let data1 = player.or 
                let data2 = player.t 
                let data3 = player.tokens 
                let data4 = player.cells
                let data5 = player.d
                
                // 1. Organ content
                if (!false) {
                        let oKeptMilestones = 0
                        if (hasMilestone("an", 5)) oKeptMilestones += player.an.times 
                        if (hasMilestone("nu", 4)) oKeptMilestones += player.nu.best.round().toNumber()
                        if (!false) {
                                oKeptMilestones = Math.max(4, oKeptMilestones)
                                sortStrings(data1.milestones)
                                data1.milestones = data1.milestones.slice(0, oKeptMilestones)
                        }

                        let oKeptUpgrades = 0
                        if (hasMilestone("an", 2)) oKeptUpgrades += player.an.times 
                        if (hasMilestone("an", 7)) oKeptUpgrades += player.an.times
                        if (hasMilestone("an", 8)) oKeptUpgrades += player.an.times
                        if (hasMilestone("an", 10)) oKeptUpgrades += player.an.times
                        if (hasMilestone("nu", 4)) oKeptUpgrades += player.nu.best.round().toNumber()
                        if (!false) {
                                //sortStrings(data1.upgrades)
                                //commented out on purpose, if it breaks this you can add it back
                                data1.upgrades = data1.upgrades.slice(0, oKeptUpgrades)
                        }

                        let oKeptTimes = 0
                        if (hasMilestone("an", 2)) oKeptTimes += player.an.times
                        if (!false) data1.times = Math.min(data1.times, oKeptTimes)

                        // 1b
                        if (!hasMilestone("an", 10)) {
                                let data = data1.buyables 
                                data[201] = decimalZero
                                data[202] = decimalZero
                                data[203] = decimalZero
                                data[211] = decimalZero
                                data[212] = decimalZero
                                data[213] = decimalZero
                                data[221] = decimalZero
                                data[222] = decimalZero
                                data[223] = decimalZero
                        }

                        // 1c
                        if (!hasMilestone("an", 12)) {
                                let data = data1.bankedAir
                                data[11] = decimalZero
                                data[12] = decimalZero
                                data[21] = decimalZero
                                data[22] = decimalZero
                                data[31] = decimalZero
                                data[32] = decimalZero
                        }

                        // 1d
                        if (!false) {
                                let data = data1.buyables 
                                if (!hasMilestone("an", 11)) {
                                        data[401] = decimalZero
                                        data[402] = decimalZero
                                        data[403] = decimalZero
                                        data[411] = decimalZero
                                        data[412] = decimalZero
                                        data[413] = decimalZero
                                        data[421] = decimalZero
                                        data[422] = decimalZero
                                        data[423] = decimalZero
                                }
                                let dataAlt = data1.extras 
                                dataAlt[401] = decimalZero
                                dataAlt[402] = decimalZero
                                dataAlt[403] = decimalZero
                                dataAlt[411] = decimalZero
                                dataAlt[412] = decimalZero
                                dataAlt[413] = decimalZero
                                dataAlt[421] = decimalZero
                                dataAlt[422] = decimalZero
                                dataAlt[423] = decimalZero
                        }
                }
                
                data1.points = decimalZero
                data1.total = decimalZero
                data1.best = decimalZero
                data1.deoxygenated_blood.points = decimalZero
                data1.deoxygenated_blood.total = decimalZero
                data1.deoxygenated_blood.best = decimalZero
                data1.oxygenated_blood.points = decimalZero
                data1.oxygenated_blood.total = decimalZero
                data1.oxygenated_blood.best = decimalZero
                data1.air.points = decimalZero
                data1.air.total = decimalZero
                data1.air.best = decimalZero
                data1.contaminants.points = decimalZero
                data1.contaminants.total = decimalZero
                data1.contaminants.best = decimalZero
                data1.energy.points = decimalZero
                data1.energy.total = decimalZero
                data1.energy.best = decimalZero
                data1.challengeAir = decimalZero
                data1.challenges[11] = 0
                data1.challenges[12] = 0
                data1.challenges[21] = 0
                data1.challenges[22] = 0
                data1.challenges[31] = 0
                data1.challenges[32] = 0

                // 2. Tissue content
                if (!player.nu.unlocked) {
                        let tKeptMilestones = 0
                        if (hasMilestone("or", 9)) tKeptMilestones += player.or.times
                        if (!false) {
                                sortStrings(data2.milestones)
                                data2.milestones = data2.milestones.slice(0, tKeptMilestones)
                        }

                        let tKeptUpgrades = 0
                        if (hasMilestone("or", 4)) tKeptUpgrades += player.or.times * 2
                        if (hasMilestone("an", 2)) tKeptUpgrades += player.an.times * 3
                        if (!false) {
                                sortStrings(data2.upgrades)
                                data2.upgrades = data2.upgrades.slice(0, tKeptUpgrades)
                        }

                        let tKeptTimes = 0
                        if (hasMilestone("or", 6)) tKeptTimes += player.or.times ** 2
                        if (!false) data2.times = Math.min(data2.times, tKeptTimes)
                }

                data2.points = decimalZero
                data2.best = decimalZero
                data2.total = decimalZero
                data2.bestOnReset = decimalZero

                // 3. Token II content
                if (!hasMilestone("or", 12)) {
                        data3.total = decimalZero
                        data3.points = decimalZero
                        data3.tokens2.total = decimalZero
                        data3.tokens2.points = decimalZero

                        player.tokens.lastRespecDisplayFormula = "2<sup>x</sup>"

                        let resetIds = [
                                11, 12, 13,
                                21, 22, 23,
                                31, 32, 33,
                                41, 42, 43,
                                51, 52, 53, 
                                61, 62, 63,
                                101, 102,
                                111, 112,
                                121, 122,
                                191,192,193,]
                                
                        let resetbbids = [
                                11, 12, 13,
                                21, 22, 23,
                                31, 32, 33,
                                41, 42, 43,
                                51, 52, 53, 
                                61, 62, 63,
                                101, 102,
                                111, 112,
                                121, 122,]

                        for (i in resetIds){
                                let id = resetIds[i]
                                data3.buyables[id] = decimalZero
                                if (resetbbids.includes(id)) data3.best_buyables[id] = decimalZero
                        }

                        player.subtabs.tokens.mainTabs = "Milestones"

                        data3.bestStrange = decimalZero
                        data3.bestTop = decimalZero
                        data3.bestBottom = decimalOne
                        data3.bestCharm = decimalZero

                        data3.lastRespecDisplayFormula2ID = layers.tokens.buyables.costFormulaText2ID()
                }
                
                // 4 cell content
                if (!player.nu.unlocked) {
                        let cKeptMilestones = 0
                        if (hasUpgrade("t", 41)) cKeptMilestones += player.t.times
                        if (hasUpgrade("t", 43)) {
                                if (hasUpgrade("t", 13)) cKeptMilestones += 3
                                if (hasUpgrade("t", 23)) cKeptMilestones += 3
                                if (hasUpgrade("t", 33)) cKeptMilestones += 3
                                if (hasUpgrade("t", 43)) cKeptMilestones += 3
                                if (hasUpgrade("t", 53)) cKeptMilestones += 3
                        }
                        if (!false) {
                                sortStrings(data4.milestones)
                                data4.milestones = data4.milestones.slice(0, cKeptMilestones)
                        }

                        let cKeptUpgrades = 0
                        if (hasUpgrade("t", 42)) cKeptUpgrades += player.t.upgrades.length
                        if (hasMilestone("or", 3)) cKeptUpgrades += player.or.times
                        if (!false) {
                                sortStrings(data4.upgrades)
                                data4.upgrades = data4.upgrades.slice(0, cKeptUpgrades)
                        }

                        let cKeptTimes = 0
                        if (hasUpgrade("t", 44)) cKeptTimes += player.t.times
                        if (!false) data4.times = Math.min(data4.times, cKeptTimes)

                        // 2a: Stem
                        let cKeptChallenges = 0
                        if (hasUpgrade("t", 45)) cKeptChallenges += player.t.times
                        if (!false) {
                                let chData = data4.challenges
                                if (cKeptChallenges < chData[11]) {
                                        chData[11] = cKeptChallenges
                                        chData[12] = 0
                                } else {
                                        chData[12] = Math.min(chData[12], cKeptChallenges-chData[11])
                                }
                        }
                        // 2b: minigames
                        if (!false) {
                                // Mu:
                                data4.mu.points = decimalZero
                                data4.mu.best = decimalZero
                                data4.buyables[111] = decimalZero
                                data4.buyables[112] = decimalZero
                                data4.total11 = decimalZero

                                // Lambda:
                                data4.lambda.points = decimalZero
                                data4.lambda.best = decimalZero
                                data4.lambda.sacrificed = decimalZero
                                data4.total12 = decimalZero

                                // Kappa: 
                                data4.kappa.points = decimalZero
                                data4.kappa.best = decimalZero
                                data4.kappa.currentBarValue = decimalOne
                                data4.kappa.currentTime = 0
                                data4.total13 = decimalZero

                                // Iota:
                                data4.iota.points = decimalZero
                                data4.iota.best = decimalZero
                                data4.buyables[411] = decimalZero
                                data4.buyables[412] = decimalZero
                                data4.buyables[413] = decimalZero
                                data4.total14 = decimalZero
                        }
                }
                data4.buyables[11] = decimalZero
                data4.buyables[12] = decimalZero
                data4.buyables[13] = decimalZero
                data4.buyables[21] = decimalZero
                data4.buyables[22] = decimalZero
                data4.stem_cells.points = decimalZero
                data4.stem_cells.best = decimalZero
                data4.points = decimalZero
                data4.best = decimalZero
                data4.total = decimalZero
                data4.timeInMinigame = 0
                data4.currentMinigame = undefined

                // 5 DNA content
                if (!player.nu.unlocked) {
                        let dKeptMilestones = 0
                        if (hasMilestone("cells", 1)) dKeptMilestones += player.cells.times
                        if (!false) {
                                sortStrings(data5.milestones)
                                data5.milestones = data5.milestones.slice(0, dKeptMilestones)
                        }

                        let dKeptUpgrades = 0
                        if (hasMilestone("cells", 5)) dKeptUpgrades += player.cells.times
                        if (!false) {
                                sortStrings(data5.upgrades)
                                data5.upgrades = data5.upgrades.slice(0, dKeptUpgrades)
                        }

                        let dKeptTimes = 0
                        if (hasMilestone("cells", 3)) dKeptTimes += player.cells.times
                        if (!false) data5.times = Math.min(data5.times, dKeptTimes)
                }

                data5.points = decimalZero
                data5.best = decimalZero
                data5.total = decimalZero

                player.mu.buyables[11] = decimalZero
                player.mu.buyables[12] = decimalZero
                player.mu.buyables[13] = decimalZero
                player.mu.buyables[21] = decimalZero
                player.mu.buyables[22] = decimalZero
                player.mu.buyables[23] = decimalZero
                player.mu.buyables[31] = decimalZero // buyables
                player.mu.buyables[32] = decimalZero
                player.mu.buyables[33] = decimalZero

                player.p.best_over_amino = decimalZero

                resetPreLifeCurrencies()
        },
})

addLayer("ch", {
        name: "Chromosomes", 
        symbol: "X", 
        position: 3, 
        startData(){ return {
                unlocked: false,
		points: decimalZero,
                best: decimalZero,
                total: decimalZero,
                abtime: 0,
                time: 0,
                everUpgrade33: false
        }},
        color: "#F6582A",
        branches: [],
        requires:() => new Decimal(hasMilestone("ch", 20) ? 1 : "1e578"), 
        resource: "Chromosomes", 
        baseResource: "Genes", 
        baseAmount(){return player.an.genes.points},
        type: "static",
        canBuyMax(){
                return hasUpgrade("ch", 32) || hasMilestone("nu", 2)
        },
        base(){
                let ret = new Decimal(1e10)

                if (hasMilestone("ch", 13))     ret = new Decimal(9.9e9)
                if (hasUpgrade("ch", 25))       ret = new Decimal(9.8e9)
                if (hasMilestone("ch", 21))     ret = new Decimal(9.6e9)
                if (hasMilestone("an", 35))     ret = new Decimal(9.2e9)

                if (hasMilestone("ch", 27))     ret = new Decimal(1e10)

                return ret
        },
        exponent(){
                let ret = new Decimal(1.35)

                if (hasUpgrade("ch", 12)) ret = new Decimal(1.34)
                if (hasMilestone("an", 26)) ret = new Decimal(1.33)
                if (hasMilestone("ch", 10)) ret = new Decimal(1.32)

                if (hasMilestone("ch", 19)) ret = ret.sub(player.nu.points.sub(hasMilestone("nu", 13) ? 0 : 7).max(0).min(100).div(1e4))

                return ret
        },
        gainMult(){
                return decimalOne
        },
        autoPrestige(){
                return hasUpgrade("an", 35) || hasMilestone("nu", 2)
        },
        resetsNothing(){
                return player.ch.everUpgrade32
        },
        effectPoints(){
                let pts = player.ch.points.plus(tmp.nu.effectPrimary)

                if (hasUpgrade("nu", 11)) pts = pts.plus(player.nu.upgrades.length)
                if ((player.an.achActive[31] || hasMilestone("nu", 15)) && hasAchievement("ach", 31)) {
                        pts = pts.plus(tmp.an.clickables.rowThreeOff)
                }

                return pts
        },
        effect(){
                let pts = tmp.ch.effectPoints

                if (pts.gte(95) && !hasMilestone("an", 32)) pts = pts.times(190).sub(9025).sqrt()

                let ret = pts.div(100).plus(2)
                if (hasMilestone("ch", 10))     ret = Decimal.pow(1.004, pts).times(2)
                if (hasMilestone("an", 32))     ret = Decimal.pow(1.002, pts).times(hasMilestone("ch", 20) ? 2.605 : 2.66)

                if (pts.gte(910))               ret = pts.times(.03).sub(11.23)
                if (hasMilestone("ch", 32))     ret = pts.times(.03).plus(7.78)

                return ret
        },
        effectDescription(){
                let start = " making the Gene amount gain per level base " 
                return start + format(tmp.ch.effect, 4) + "."
        },
        update(diff){
                let data = player.ch
                
                if (data.points.gt(0) || hasUpgrade("an", 24)) data.unlocked = true
                data.best = data.best.max(data.points)

                data.time += diff
        },
        row: 0, 
        prestigeButtonText(){
                if (player.shiftAlias) {
                        let p1 = "Formula:" + br + format(tmp.ch.requires, 0) + "*"
                        p1 += formatWhole(tmp.ch.base) + "^(x<sup>" + format(tmp.ch.exponent, 4)
                        p1 += "</sup>)"
                        return p1.replace("1*", "")
                }

                let a = "Reset for <b>" + formatWhole(tmp.ch.resetGain) + "</b> " + tmp.ch.resource
                if (player.ch.points.gt(1e10)) return a
                let b = ""
                if (player.ch.points.lt(30)) {
                        let d = tmp.ch.canBuyMax
                        b = tmp.ch.baseAmount.gte(tmp.ch.nextAt) && (d !== undefined) && d ? "Next: " : "Req: "
                }
                let c = formatWhole(tmp.ch.baseAmount) + "/" + format(tmp.ch.nextAtDisp) + " " + tmp.ch.baseResource

                return a + br2 + b + c
        },
        layerShown(){
                if (tmp.ch.deactivated) return false
                return hasUpgrade("an", 24) || player.nu.unlocked
        },
        upgrades: {
                rows: 10,
                cols: 5,
                11: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Chromosomes I"
                        },
                        description(){
                                return "<bdi style='font-size: 80%'>Per Chromosome up to 200 subtract 1 from Tissue gain exponent divider and Gamma-<br>proteobacteria amount multiplies INtes<u>tine</u> gain</bdi>"
                        },
                        cost:() => new Decimal(34),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return hasMilestone("ch", 8) || player.nu.best.gte(1)
                        }, // hasUpgrade("ch", 11)
                },
                12: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Chromosomes II"
                        },
                        description(){
                                return "Chromosome gain exponent is 1.34 and per upgrade add 1 to Tissue effect exponent"
                        },
                        cost:() => new Decimal(35),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return player.an.grid[505].buyables.gte(52) || player.nu.best.gte(1)
                        }, // hasUpgrade("ch", 12)
                },
                13: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Chromosomes III"
                        },
                        description(){
                                return "<bdi style='font-size: 80%'>Per Chromosome - 37 increase the Taxonomy buyables max by 4, up to a max of 850 and Aves amount<sup>7</sup> multiplies in<u>TES</u>tine gain</bdi>"
                        },
                        cost:() => new Decimal(38),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return player.an.grid[607].buyables.gte(367) || player.nu.best.gte(1)
                        }, // hasUpgrade("ch", 13)
                },
                14: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Chromosomes IV"
                        },
                        description(){
                                if (player.shiftAlias) return "Effect is softcaped at 1e10,<br>x->log10(x)<sup>10</sup> <br>Currently: " + format(tmp.ch.upgrades[14].effect)
                                return "Square base Animal gain and (1+Organs/1e900)<sup>.08</sup> multiplies Gene gain"
                        },
                        cost:() => new Decimal(50),
                        effect(){
                                let ret = player.or.points.div("1e900").plus(1).pow(.08)
                                if (ret.gt(1e10)) ret = ret.log10().pow(10)
                                return ret
                        },
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return player.an.grid[507].buyables.gte(139) || player.nu.best.gte(1)
                        }, // hasUpgrade("ch", 14)
                },
                15: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Chromosomes V"
                        },
                        description(){
                                return "Add 13.75 to the Cell effect exponent and per Token II past 2600 gain 1% more Genes"
                        },
                        cost:() => new Decimal(57),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return player.an.grid[408].buyables.gte(438) || player.nu.best.gte(1)
                        }, // hasUpgrade("ch", 15)
                },
                21: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Chromosomes VI"
                        },
                        description(){
                                return "<bdi style='font-size: 80%'>Token II via Stem Cell double exponent becomes (x/5+330)<sup>.4</sup> and Mammalia II amount<sup>Chromosome upgrades</sup> multiplies in<u>TES</u>tine gain</bdi>"
                        },
                        cost:() => new Decimal(73),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return player.an.grid[506].buyables.gte(264) || player.nu.best.gte(1)
                        }, // hasUpgrade("ch", 21)
                },
                22: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Chromosomes VII"
                        },
                        description(){
                                return "I'm base becomes 25 + Chromosomes/100 and bulk unlimited Contaminant buyables"
                        },
                        cost:() => new Decimal(111),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return player.an.grid[405].buyables.gte(108) || player.nu.best.gte(1)
                        }, // hasUpgrade("ch", 22)
                },
                23: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Chromosomes VIII"
                        },
                        description(){
                                return "<bdi style='font-size: 70%'>Token II buyables' cost exponent is .46, gain 20x Genes, and per Chromosome increase the Taxonomy buyable max by 3 up to 1100, but disable Chromosomes III</bdi>"
                        },
                        cost:() => new Decimal(151),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return player.an.grid[506].buyables.gte(528) || player.nu.best.gte(1)
                        }, // hasUpgrade("ch", 23)
                },
                24: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Chromosomes IX"
                        },
                        description(){
                                return "Oligopotent cost base is 1e70 and per upgrade add .01 to the Animal gain exponent"
                        },
                        cost:() => new Decimal(178),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return player.an.grid[303].buyables.gte(424) || player.nu.best.gte(1)
                        }, // hasUpgrade("ch", 24)
                },
                25: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Chromosomes X"
                        },
                        description(){
                                return "Chromosomes keeps Genes and Chromosomes cost base is 9.8e9 but disable Kappa V and Mu III"
                        },
                        cost:() => new Decimal(234),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return player.ch.best.gte(234) || player.nu.best.gte(1)
                        }, // hasUpgrade("ch", 25)
                },
                31: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Chromosomes XI"
                        },
                        description(){
                                return "Token II via Cell double exponent is 12+x/2000"
                        },
                        cost:() => new Decimal(247),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return player.ch.best.gte(247) || player.nu.best.gte(1)
                        }, // hasUpgrade("ch", 31)
                },
                32: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Chromosomes XII"
                        },
                        description(){
                                return "You can buy max Chromosomes, Chromosomes permanently reset nothing, and gain 20x genes"
                        },
                        cost:() => new Decimal(264),
                        onPurchase(){
                                player.ch.everUpgrade32 = true
                        },
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return player.ch.best.gte(264) || player.nu.best.gte(1)
                        }, // hasUpgrade("ch", 32)
                },
                33: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Chromosomes XIII"
                        },
                        description(){
                                return "<bdi style='font-size: 80%'>Top Quark coefficient is .012 and Token II buyables permanently cost nothing and their cost formula is x<sup>1.36</sup></bdi>"
                        },
                        cost:() => new Decimal(292),
                        onPurchase(){
                                player.ch.everUpgrade33 = true
                        },
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return player.ch.best.gte(292) || player.nu.best.gte(3)
                        }, // hasUpgrade("ch", 33)
                },
                34: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Chromosomes XIV"
                        },
                        description(){
                                return "PRI I's ON effect's negative effect is nullified"
                        },
                        cost:() => new Decimal(302),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return player.ch.best.gte(302) || player.nu.best.gte(5)
                        }, // hasUpgrade("ch", 34)
                },
                35: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Chromosomes XV"
                        },
                        description(){
                                return "Chordata II amount multiplies intes<u>TINE</u> amount gain"
                        },
                        cost:() => new Decimal(316),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return player.ch.best.gte(316) || player.nu.best.gte(5)
                        }, // hasUpgrade("ch", 35)
                },
                41: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Chromosomes XVI"
                        },
                        description(){
                                return "Chordata I amount multiplies Organ gain per Nucleus and PRI II's ON effect is always active"
                        },
                        cost:() => new Decimal(390),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return player.ch.best.gte(390) || player.nu.best.gte(10)
                        }, // hasUpgrade("ch", 41)
                },
                42: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Chromosomes XVII"
                        },
                        description(){
                                return "Bottom Quark base is C and Top Quark coefficient is Nucleuses/1000"
                        },
                        cost:() => new Decimal(449),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return player.ch.best.gte(449) || player.nu.best.gte(16)
                        }, // hasUpgrade("ch", 42)
                },
                43: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Chromosomes XVIII"
                        },
                        description(){
                                return "You can always reset for Nucleuses and unlock a new row of Animal Achievements"
                        },
                        cost:() => new Decimal(488),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return player.ch.best.gte(488) || player.nu.best.gte(17)
                        }, // hasUpgrade("ch", 43)
                },
                44: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Chromosomes XIX"
                        },
                        description(){
                                return "<bdi style='font-size: 80%'>Per Nucleus increase the Taxonomy limit by .5 but disable Animal Milestones 17 through 20's effects on Gene gain</bdi>"
                        },
                        cost:() => new Decimal(514),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return player.ch.best.gte(514) || player.nu.best.gte(19)
                        }, // hasUpgrade("ch", 44)
                },
                45: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Chromosomes XX"
                        },
                        description(){
                                return "Token II via Stem Cell double exponent is (x/20+800)<sup>.4</sup>"
                        },
                        cost:() => new Decimal(650),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                return player.ch.best.gte(650) || player.nu.best.gte(27)
                        }, // hasUpgrade("ch", 45)
                },
        },
        milestones: {
                1: {
                        requirementDescription(){
                                return "1 Chromosome"
                        },
                        done(){
                                return player.ch.points.gte(1)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: The cross contamination rate is now 33% and in<u>TES</u>tine's log5 becomes log4."
                        },
                }, // hasMilestone("ch", 1)
                2: {
                        requirementDescription(){
                                return "3 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(3)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: The cross contamination rate is now 39%, in<u>TES</u>tine's log4 becomes log3, and unlock a new row of Taxonomy."
                        },
                }, // hasMilestone("ch", 2)
                3: {
                        requirementDescription(){
                                return "7 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(7)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: in<u>TES</u>tine's log3 becomes log2 and Token II via Stem Cell's double exponent is (103+x/20)<sup>.5</sup>."
                        },
                }, // hasMilestone("ch", 3)
                4: {
                        requirementDescription(){
                                return "11 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(11)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: <u>IN</u>testine's log5 becomes log4 but the cross contamination rate is now 75%."
                        },
                }, // hasMilestone("ch", 4)
                5: {
                        requirementDescription(){
                                return "13 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(13)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: <u>IN</u>testine's log3 becomes log2 but per Chromosome - 8 halve Gene gain."
                        },
                }, // hasMilestone("ch", 5)
                6: {
                        requirementDescription(){
                                return "14 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(14)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: <u>in</u>TEStine's log6 becomes log5 and gain 20x Genes if you have exactly 14 but per Chromosome halve Gene gain."
                        },
                }, // hasMilestone("ch", 6)
                7: {
                        requirementDescription(){
                                return "32 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(32)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Per Chromosome Chromosomes multiply Organ gain and 1+Chromosomes/67 multiplies Gene gain."
                        },
                }, // hasMilestone("ch", 7)
                8: {
                        requirementDescription(){
                                return "33 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(33)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Per milestone cbrt(Chromosomes) multiplies Gene gain and unlock Chromosome upgrades and a new Taxonomy row."
                        },
                }, // hasMilestone("ch", 8)
                9: {
                        requirementDescription(){
                                return "48 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(48)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Each Chromosome adds .01 to the Organ gain exponent."
                        },
                }, // hasMilestone("ch", 9)
                10: {
                        requirementDescription(){
                                return "76 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(76)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Chromosome effect becomes 1.004<sup>x</sup>*2 and Chromosome cost exponent is 1.32."
                        },
                }, // hasMilestone("ch", 10)
                11: {
                        requirementDescription(){
                                return "103 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(103)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Air Challenges no longer boost Air gain, but raise Air gain ^60."
                        },
                }, // hasMilestone("ch", 11)
                12: {
                        requirementDescription(){
                                return "104 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(104)
                        },
                        unlocked(){
                                return true
                        },
                        onComplete(){
                                player.tokens.bestTop = decimalOne
                                tmp.tokens.buyables[121].effect = decimalOne
                        },
                        effectDescription(){
                                return "Reward: Top Quark multiplies instead of adds to the tetrational divider but its coefficient is .007."
                        },
                }, // hasMilestone("ch", 12)
                13: {
                        requirementDescription(){
                                return "209 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(209)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Chromosome cost base is 9.9e9 but disable Cell Milestones 12, 16, 17, 22, 23, 24, 26, 32, 38, 39, 41, 49, 53, 56, and 59 (Lambda and Iota stay active)."
                        },
                }, // hasMilestone("ch", 13)
                14: {
                        requirementDescription(){
                                return "235 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(235)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let a = "Reward: Totipotent cost formula is 1e9^(x<sup>1.08</sup>) and per Chromosome - 234 increase the Taxonomy buyable cap by 2 up to 1210 but disable Tissues "
                                a += "XI, XIV, XXVIII, XXXVIII, XLII, LI, LIII, LIV, LIX, LXI, LXV, LXIX, and LXXV"
                                return a + " (Tissues XLII still multiplies DNA gain exponent and Tissues LXXV still makes Charm based on best)."
                        },
                }, // hasMilestone("ch", 14)
                15: {
                        requirementDescription(){
                                return "242 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(242)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let a = "Reward: IN<u>tes</u>tine's base is Chromosomes but disable Cells "
                                return a + "I, V, VI, VIII, IX, XVIII, XIX, XXII, and XXVI."
                        },
                }, // hasMilestone("ch", 15)
                16: {
                        requirementDescription(){
                                return "322 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(322)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: PRI I's ON effect is always active and Chromosomes+1 multiplies Gene gain."
                        },
                }, // hasMilestone("ch", 16)
                17: {
                        requirementDescription(){
                                return "329 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(329)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Raise him base ^ 1.6 and per Nucleus double gene gain."
                        },
                }, // hasMilestone("ch", 17)
                18: {
                        requirementDescription(){
                                return "380 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(380)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Pluripotent cost exponent is 1.09 and remove the +1 from Nucleuses' cost formula but remove the +log10(log10(Cells)) from Omnipotent's base."
                        },
                }, // hasMilestone("ch", 18)
                19: {
                        requirementDescription(){
                                return "392 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(392)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Each of the first 100 Nucleuses past 7 reduces Chromosome cost exponent by .0001."
                        },
                }, // hasMilestone("ch", 19)
                20: {
                        requirementDescription(){
                                return "421 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(421)
                        },
                        unlocked(){
                                return true
                        },
                        onComplete(){
                                let data = player.an.grid

                                let keys = [
                                        101, 102, 103, 104, 105, 106, 107, 108,
                                        202, 203, 204, 205, 206, 207, 208, 
                                        303, 304, 305, 306, 307, 308, 
                                        404, 405, 406, 407, 408, 
                                        505, 506, 507, 508, 
                                        606, 607, 608, 
                                        707, 708, 
                                        808]

                                for (i in keys) {
                                        data[keys[i]].extras = decimalZero
                                        data[keys[i]].buyables = decimalZero
                                }

                                player.an.genes.points = decimalZero
                                player.an.genes.best = decimalZero
                                player.an.genes.total = decimalZero
                        },
                        effectDescription(){
                                return "Reward: Reset Taxnomy levels and extras and Genes, remove Chromosome base cost, and Chromosome effect formula is 1.002<sup>x</sup>*2.605."
                        },
                }, // hasMilestone("ch", 20)
                21: {
                        requirementDescription(){
                                return "437 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(437)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Chordata III amount<sup>Chromosomes<sup>4</sup></sup> multiplies Contaminant gain and Chromosomes cost base is 9.6e9."
                        },
                }, // hasMilestone("ch", 21)
                22: {
                        requirementDescription(){
                                return "677 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(677)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: ONE III's ON effect is always active and Token II buyables' cost exponent is 1.29."
                        },
                }, // hasMilestone("ch", 22)
                23: {
                        requirementDescription(){
                                return "776 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(776)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: log2(Nucleuses) multiplies DNA gain exponent."
                        },
                }, // hasMilestone("ch", 23)
                24: {
                        requirementDescription(){
                                return "812 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(812)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: in<u>TES</u>tine base is sqrt(log10(Organs))."
                        },
                }, // hasMilestone("ch", 24)
                25: {
                        requirementDescription(){
                                return "975 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(975)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: sqrt(Nucleuses) multiplies DNA gain exponent (at least 1x)."
                        },
                }, // hasMilestone("ch", 25)
                26: {
                        requirementDescription(){
                                return "1014 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(1014)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Multiply DNA gain exponent by 1.31, Token II buyables' cost exponent is 1.28 and <u>in</u>tesTINE cost formula is 5<sup>x<sup>2</sup></sup>."
                        },
                }, // hasMilestone("ch", 26)
                27: {
                        requirementDescription(){
                                return "1125 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(1125)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: intes<u>TINE</u> cost formula is 8<sup>x<sup>2</sup></sup> but Chromosomes cost base is 1e10."
                        },
                }, // hasMilestone("ch", 27)
                28: {
                        requirementDescription(){
                                return "1171 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(1171)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Token II buyables' cost exponent is 1.274 and you can bulk 5x Token IIs."
                        },
                }, // hasMilestone("ch", 28)
                29: {
                        requirementDescription(){
                                return "1241 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(1241)
                        },
                        unlocked(){
                                return true
                        },
                        onComplete(){
                                let data = player.an.grid

                                let keys = [
                                        101, 102, 103, 104, 105, 106, 107, 108,
                                        202, 203, 204, 205, 206, 207, 208, 
                                        303, 304, 305, 306, 307, 308, 
                                        404, 405, 406, 407, 408, 
                                        505, 506, 507, 508, 
                                        606, 607, 608, 
                                        707, 708, 
                                        808]

                                for (i in keys) {
                                        data[keys[i]].extras = decimalZero
                                        data[keys[i]].buyables = decimalZero
                                }
                                
                                player.an.genes.points = decimalZero
                                player.an.genes.best = decimalZero
                                player.an.genes.total = decimalZero
                                player.an.points = decimalZero
                        },
                        effectDescription(){
                                return "Reward: Reset Genes, Animals, and Taxonomy amounts, disable Animals XVIII's nerfs, square <u>IN</u>testine base, and INtes<u>tine</u> cost formula is 2<sup>x<sup>2</sup></sup> but the Taxonomy limit is 1500+Nucleuses."
                        },
                }, // hasMilestone("ch", 29)
                30: {
                        requirementDescription(){
                                return "1377 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(1377)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: inTES<u>tine</u> cost formula is 5.6<sup>x<sup>2</sup></sup> but disable Chromosomes IV."
                        },
                }, // hasMilestone("ch", 30)
                31: {
                        requirementDescription(){
                                return "1401 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(1401)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: inTES<u>tine</u> cost formula is 3.5<sup>x<sup>2</sup></sup> and Token II buyables' cost exponent is 1.27."
                        },
                }, // hasMilestone("ch", 31)
                32: {
                        requirementDescription(){
                                return "1424 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(1424)
                        },
                        unlocked(){
                                return true
                        },
                        onComplete(){
                                let data = player.an.grid

                                let keys = [
                                        101, 102, 103, 104, 105, 106, 107, 108,
                                        202, 203, 204, 205, 206, 207, 208, 
                                        303, 304, 305, 306, 307, 308, 
                                        404, 405, 406, 407, 408, 
                                        505, 506, 507, 508, 
                                        606, 607, 608, 
                                        707, 708, 
                                        808]

                                for (i in keys) {
                                        data[keys[i]].extras = decimalZero
                                        data[keys[i]].buyables = decimalZero
                                }
                                
                                player.an.genes.points = decimalZero
                                player.an.genes.best = decimalZero
                                player.an.genes.total = decimalZero
                                player.an.points = decimalZero
                        },
                        effectDescription(){
                                return "Reward: Chromosomes effect is x*.03+7.78 and Token II via Stem Cells' adder is 9635 but the Taxonomy limit is 1200+Nucleuses and reset Taxonomy buyables and Animals."
                        },
                }, // hasMilestone("ch", 32)
                33: {
                        requirementDescription(){
                                return "1454 Chromosomes"
                        },
                        done(){
                                return player.ch.points.gte(1454)
                        },
                        unlocked(){
                                return true
                        },
                        onComplete(){
                                tmp.or.getGainExp = decimalZero
                        },
                        effectDescription(){
                                return "Reward: Organ base gain double exponent is .35 and in<u>TES</u>tine cost fomula is 1.71<sup>x<sup>2</sup></sup> but disable Chromosome milestone 9."
                        },
                }, // hasMilestone("ch", 33)
        },
        tabFormat: {
                "Upgrades": {
                        content: [
                                "main-display",
                                ["prestige-button", "", function (){ return false ? {'display': 'none'} : {}}],
                                "blank",
                                ["upgrades", [1,2,3,4,5]],
                        ],
                        unlocked(){
                                return true
                        },
                },
                "Milestones": {
                        content: [
                                "main-display",
                                "blank",
                                "milestones",
                        ],
                        unlocked(){
                                return true
                        },
                },
                "Info": {
                        content: [
                                "main-display",
                                ["display-text", function(){
                                        let a = "Chromosomes only resets Gene amounts."
                                        let b = "Chromosome effect is 2+x/100."
                                        if (hasMilestone("ch", 10))             b = b.replace("2+x/100", "1.004<sup>x</sup>*2")
                                        if (player.ch.points.gte(95) && !hasMilestone("an", 32)) b += br + "Effect after 95 is softcapped, x ⭢ (190*x-9025)<sup>.5</sup>"
                                        if (hasMilestone("an", 32))             b = b.replace("1.004<sup>x</sup>*2", "1.002<sup>x</sup>*2.66")
                                        if (hasMilestone("ch", 20))             b = b.replace(".66", ".605")
                                        if (tmp.ch.effectPoints.gte(910))       b = "When you have over 910 effective Chromosomes, the effect is .03*x-11.23"
                                        if (hasMilestone("ch", 32))             b = b.replace("-11.23", "+7.78")

                                        return a + br2 + b
                                }],
                        ],
                        unlocked(){
                                return true
                        },
                },
        },
        doReset(layer){
                if (layer != "ch") return
                player.ch.time = 0

                /*
                Only resets Gene amounts (not levels)
                */

                let data = player.an.grid

                let keys = [
                        101, 102, 103, 104, 105, 106, 107, 108,
                        202, 203, 204, 205, 206, 207, 208, 
                        303, 304, 305, 306, 307, 308, 
                        404, 405, 406, 407, 408, 
                        505, 506, 507, 508, 
                        606, 607, 608, 
                        707, 708, 
                        808]

                for (i in keys) {
                        data[keys[i]].extras = decimalZero
                }
                if (!hasUpgrade("ch", 25)) player.an.genes.points = decimalZero
        },
})

addLayer("nu", {
        name: "Nucleuses", 
        symbol: "N", 
        position: 4, 
        startData(){ return {
                unlocked: false,
		points: decimalZero,
                best: decimalZero,
                total: decimalZero,
                abtime: 0,
                time: 0,
        }},
        color: "#FF0EA2",
        branches: [],
        requires:() => new Decimal("257"), 
        resource: "Nucleuses", 
        baseResource: "Chromosomes", 
        baseAmount(){return player.ch.points},
        type: "custom",
        costAdd(){
                let ret = new Decimal(32)

                return ret
        },
        costExponent(){
                let ret = new Decimal(1.6)

                if (hasMilestone("an", 42)) ret = ret.sub(player.nu.points.sub(50).max(0).min(50).div(1e4))

                return ret
        },
        getNextAt(){
                if (hasMilestone("ch", 18)) return player.nu.points.plus(tmp.nu.costAdd).pow(tmp.nu.costExponent).sub(.000001)
                return player.nu.points.plus(tmp.nu.costAdd).pow(tmp.nu.costExponent).plus(.999999)
        },
        getResetGain(){
                return tmp.nu.baseAmount.gte(tmp.nu.getNextAt) ? decimalOne : decimalZero
        },
        canReset(){
                return tmp.nu.getResetGain.gt(0) && (!player.an.achActive[24] || hasUpgrade("ch", 43))
        },
        resetsNothing(){
                return hasUpgrade("nu", 15)
        },
        effectPrimary(){
                let pts = player.nu.points

                if (hasMilestone("sp", 1)) pts = pts.plus(Math.floor(Math.min(4, Math.cbrt(player.sp.times))))

                let ret = pts

                if (hasAchievement("an", 31)) ret = ret.times(1 + player.nu.milestones.length / 100)

                return ret
        },
        effectSecondary(){
                let pts = player.nu.points

                if (hasMilestone("sp", 1)) pts = pts.plus(Math.floor(Math.min(4, Math.cbrt(player.sp.times))))
                
                let ret = pts.div(10)

                if (hasMilestone("nu", 18)) ret = ret.times(5)

                return ret
        },
        effectDescription(){
                let start = " adding " + format(tmp.nu.effectPrimary) + " to effective Chromosomes and Animals for their effects and " 
                if (hasMilestone("nu", 16)) start = start.replace("Animals for their effects", "the Taxonomy limit")
                if (hasMilestone("ch", 29)) start = start.replace("and the Taxonomy limit", "")
                return start + format(tmp.nu.effectSecondary) + " to Organ and Animal gain exponents and I'm base."
        },
        update(diff){
                let data = player.nu
                
                if (hasAchievement("an", 24)) data.unlocked = true
                data.best = data.best.max(data.points)

                data.time += diff

                if (data.autobuyanch && hasMilestone("nu", 6)) {
                        let anKeys = [
                                '11', '12', '13', '14', '15', 
                                '21', '22', '23', '24', '25', 
                                '31', '32', '33', '34', '35', 
                                '41', '42', '43', '44', '45', 
                                '51', '52', '53', '54', '55', ]
                        let chKeys = [
                                '11', '12', '13', '14', '15', 
                                '21', '22', '23', '24', '25', 
                                '31', '32', '33', '34', '35', ]
                        let boughtYet = false
                        for (i in anKeys) {
                                if (boughtYet) break
                                id = anKeys[i]
                                boughtYet = buyUpg("an", id) 
                        }
                        for (i in chKeys) {
                                if (boughtYet) break
                                id = chKeys[i]
                                boughtYet = buyUpg("ch", id) 
                        }
                }
        },
        row: 0, 
        prestigeNotify(){
                return tmp.nu.getResetGain.gt(0)
        },
        prestigeButtonText(){
                if (player.shiftAlias) {
                        let p1 = "Formula:" + br + "(" + format(tmp.nu.costAdd, 0) + "+x)"
                        p1 += "^(x<sup>" + format(tmp.nu.costExponent, 4) + "</sup>)"
                        if (hasMilestone("ch", 18)) return p1
                        return p1 + " + 1"
                }

                let a = "Reset for <b>" + formatWhole(tmp.nu.resetGain) + "</b> " + tmp.nu.resource
                if (player.nu.points.gt(1e10)) return a
                let b = ""
                if (player.nu.points.lt(30)) {
                        let d = tmp.nu.canBuyMax
                        b = tmp.nu.baseAmount.gte(tmp.nu.getNextAt) && (d !== undefined) && d ? "Next: " : "Req: "
                }
                let c = formatWhole(tmp.nu.baseAmount) + "/" + formatWhole(tmp.nu.getNextAt.ceil()) + " " + tmp.nu.baseResource

                return a + br2 + b + c
        },
        layerShown(){
                if (tmp.nu.deactivated) return false
                return player.nu.unlocked
        },
        upgrades: {
                rows: 10,
                cols: 5,
                11: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nucleuses I"
                        },
                        description(){
                                return "Per upgrade you have one more effective Chromosomes for effect purposes and Charm Quark coefficient is 1"
                        },
                        cost:() => new Decimal(17),
                        onPurchase(){
                                doReset("nu", true)
                        },
                        unlocked(){
                                if (player.sp.unlocked) return true
                                if (hasUpgrade("nu", 11)) return true
                                return player.ch.best.gte(496)
                        }, // hasUpgrade("nu", 11)
                },
                12: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nucleuses II"
                        },
                        description(){
                                return "PRI I's ON effect counts every Chromosome and Up Quark divider is 14"
                        },
                        cost:() => new Decimal(26),
                        onPurchase(){
                                doReset("nu", true)
                        },
                        unlocked(){
                                if (player.sp.unlocked) return true
                                if (hasUpgrade("nu", 12)) return true
                                return player.ch.best.gte(652)
                        }, // hasUpgrade("nu", 12)
                },
                13: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nucleuses III"
                        },
                        description(){
                                return "Square intes<u>TINE</u> base and bulk 4x intestine buyables"
                        },
                        cost:() => new Decimal(28),
                        onPurchase(){
                                doReset("nu", true)
                        },
                        unlocked(){
                                if (player.sp.unlocked) return true
                                if (hasUpgrade("nu", 13)) return true
                                return player.ch.best.gte(687)
                        }, // hasUpgrade("nu", 13)
                },
                14: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nucleuses IV"
                        },
                        description(){
                                return "Chromosomes VIII and XII no longer multiply gene gain"
                        },
                        cost:() => new Decimal(33),
                        onPurchase(){
                                doReset("nu", true)
                        },
                        unlocked(){
                                if (player.sp.unlocked) return true
                                if (hasUpgrade("nu", 14)) return true
                                return player.ch.best.gte(795)
                        }, // hasUpgrade("nu", 14)
                },
                15: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nucleuses V"
                        },
                        description(){
                                return "Totipotent cost base is 1e21 and Nucleuses reset nothing"
                        },
                        cost:() => new Decimal(48),
                        onPurchase(){
                                doReset("nu", true)
                        },
                        unlocked(){
                                if (player.sp.unlocked) return true
                                if (hasUpgrade("nu", 15)) return true
                                return player.ch.best.gte(1104)
                        }, // hasUpgrade("nu", 15)
                },
                21: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nucleuses VI"
                        },
                        description(){
                                return "Raise energy gain to cbrt(max(Chromosomes, 1234)/1234) up to 1.01"
                        },
                        cost:() => new Decimal(53),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                if (hasUpgrade("nu", 21)) return true
                                return player.ch.points.gte(1218)
                        }, // hasUpgrade("nu", 21)
                },
                22: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nucleuses VII"
                        },
                        description(){
                                return "Charm Quark exponent is .7 and Token II buyables' exponent is 1.272"
                        },
                        cost:() => new Decimal(57),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                if (hasUpgrade("nu", 22)) return true
                                return player.ch.points.gte(1307)
                        }, // hasUpgrade("nu", 22)
                },
                23: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nucleuses VIII"
                        },
                        description(){
                                return "in<u>TES</u>tine base is squared but disable Chromosome Milestones 8, 16, and 17 and Animal Milestone 21's boost to Genes"
                        },
                        cost:() => new Decimal(58),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                if (hasUpgrade("nu", 23)) return true
                                return player.ch.points.gte(1330)
                        }, // hasUpgrade("nu", 23)
                },
                24: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nucleuses IX"
                        },
                        description(){
                                return "Per Chromosome Animalia II multiplies Organ gain and intes<u>TINE</u> cost base is 2.5"
                        },
                        cost:() => new Decimal(63),
                        unlocked(){
                                if (player.sp.unlocked) return true
                                if (hasUpgrade("nu", 24)) return true
                                return player.ch.points.gte(1439)
                        }, // hasUpgrade("nu", 24)
                },
                25: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Nucleuses X"
                        },
                        description(){
                                return "<bdi style='font-size: 80%'>Animal effect no longer affects <u>in</u>TEStine or IN<u>tes</u>tine amount but its effect exponent limit is 1000 and intes<u>TINE</u> base is log2022(Energy)</bdi>"
                        },
                        cost:() => new Decimal(65),
                        onPurchase(){
                                let data = player.or.extras
                                data[401] = decimalZero
                                data[402] = decimalZero
                                data[403] = decimalZero
                                data[411] = decimalZero
                                data[412] = decimalZero
                                data[413] = decimalZero
                                data[421] = decimalZero
                                data[422] = decimalZero
                                data[423] = decimalZero
                                tmp.or.energy.getResetGain = decimalZero
                        },
                        unlocked(){
                                if (player.sp.unlocked) return true
                                if (hasUpgrade("nu", 25)) return true
                                return player.ch.points.gte(1494)
                        }, // hasUpgrade("nu", 25)
                },
        },
        milestones: {
                1: {
                        requirementDescription(){
                                return "1 Nucleuse"
                        },
                        done(){
                                return player.nu.best.gte(1)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Per Nucleus keep an Animal upgrade and an Animal reset, square energy buyables effect in their amount gain formula, and gain 2x Animal resets, Genes, and Animals."
                        },
                }, // hasMilestone("nu", 1)
                2: {
                        requirementDescription(){
                                return "2 Nucleuses"
                        },
                        done(){
                                return player.nu.best.gte(2)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Per Nucleus log10(Stem Cells) multiplies Tissue gain, per Nucleus you gain 10x genes, and keep Taxonomy and Chromosome autobuyer content."
                        },
                }, // hasMilestone("nu", 2)
                3: {
                        requirementDescription(){
                                return "3 Nucleuses"
                        },
                        done(){
                                return player.nu.best.gte(3)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Per Nucleus keep a Animal milestone and Animal milestone 4 buys every Organ upgrade."
                        },
                }, // hasMilestone("nu", 3)
                3: {
                        requirementDescription(){
                                return "3 Nucleuses"
                        },
                        done(){
                                return player.nu.best.gte(3)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Per Nucleus keep a Animal milestone and Animal milestone 4 buys every Organ upgrade."
                        },
                }, // hasMilestone("nu", 3)
                4: {
                        requirementDescription(){
                                return "4 Nucleuses"
                        },
                        done(){
                                return player.nu.best.gte(4)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Per Nucleus keep a Organ milestone and Organ upgrade and Pluripotent cost base is 1e19."
                        },
                }, // hasMilestone("nu", 4)
                5: {
                        requirementDescription(){
                                return "5 Nucleuses"
                        },
                        done(){
                                return player.nu.best.gte(5)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Keep Animal Achievements and keep an Animal reset per Nucleus."
                        },
                }, // hasMilestone("nu", 5)
                6: {
                        requirementDescription(){
                                return "7 Nucleuses"
                        },
                        done(){
                                return player.nu.best.gte(7)
                        },
                        unlocked(){
                                return true
                        },
                        toggles(){
                                return [["nu", "autobuyanch"]]
                        },
                        effectDescription(){
                                return "Reward: Him base is (make levels)<sup>.91</sup>, autobuy currently unlocked Animal and Chromosome upgrades, and autobuy Taxonomy buyables that were ever above 400 levels."
                        },
                }, // hasMilestone("nu", 6)
                7: {
                        requirementDescription(){
                                return "8 Nucleuses"
                        },
                        done(){
                                return player.nu.best.gte(8)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Up Quark divider is 25 and him base is (make levels) but disable Tissue Milestone 7."
                        },
                }, // hasMilestone("nu", 7)
                8: {
                        requirementDescription(){
                                return "10 Nucleuses"
                        },
                        done(){
                                return player.nu.best.gte(10)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Nucleuses+1 multiplies Organ effect exponent and INtes<u>tine</u> base becomes Tokens."
                        },
                }, // hasMilestone("nu", 8)
                9: {
                        requirementDescription(){
                                return "15 Nucleuses"
                        },
                        done(){
                                return player.nu.best.gte(15)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Animals XXIII counts every Token II and Animal effect exponent is hardcapped at 300."
                        },
                }, // hasMilestone("nu", 9)
                10: {
                        requirementDescription(){
                                return "18 Nucleuses"
                        },
                        done(){
                                return player.nu.best.gte(18)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Per Nucleus keep a Chromosome upgrade and milestone and Totipotent cost formula is 1e23^(x<sup>1.05</sup>)."
                        },
                }, // hasMilestone("nu", 10)
                11: {
                        requirementDescription(){
                                return "23 Nucleuses"
                        },
                        done(){
                                return player.nu.best.gte(23)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Per Nucleus increase the Taxonomy limit by .5 and Oligopotent cost base is 1e55."
                        },
                }, // hasMilestone("nu", 11)
                12: {
                        requirementDescription(){
                                return "25 Nucleuses"
                        },
                        done(){
                                return player.nu.best.gte(25)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: PRI III's ON effect is always active and <u>IN</u>testine base is sqrt(Token II)."
                        },
                }, // hasMilestone("nu", 12)
                13: {
                        requirementDescription(){
                                return "27 Nucleuses"
                        },
                        done(){
                                return player.nu.best.gte(27)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Chromosome Milestone 19 counts every Nucleuse."
                        },
                }, // hasMilestone("nu", 13)
                14: {
                        requirementDescription(){
                                return "38 Nucleuses"
                        },
                        done(){
                                return player.nu.best.gte(38)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: COM III's ON effect is always active."
                        },
                }, // hasMilestone("nu", 14)
                15: {
                        requirementDescription(){
                                return "43 Nucleuses"
                        },
                        done(){
                                return player.nu.best.gte(43)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: PRO III's ON effect is always active and Token II buyables' cost exponent is 1.286."
                        },
                }, // hasMilestone("nu", 15)
                16: {
                        requirementDescription(){
                                return "45 Nucleuses"
                        },
                        done(){
                                return player.nu.best.gte(45)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                let a = "Reward: Nucleus primary effect affects Taxonomy limit instead of Animals but "
                                return a + "disable Nucleus Milestone 11 and Chromosomes XIX's effects on Taxonomy limit."
                        },
                }, // hasMilestone("nu", 16)
                17: {
                        requirementDescription(){
                                return "65 Nucleuses"
                        },
                        done(){
                                return player.nu.best.gte(65)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Token buyables' cost exponent is 1.26 and per Nucleus multiply DNA and Air gain exponents by 1.01."
                        },
                }, // hasMilestone("nu", 17)
                18: {
                        requirementDescription(){
                                return "66 Nucleuses"
                        },
                        done(){
                                return player.nu.best.gte(66)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Nucleuses' second effect is five times stronger but fourth root the initial Organ gain and remove the + 25 from I'm's base."
                        },
                }, // hasMilestone("nu", 18)
                19: {
                        requirementDescription(){
                                return "68 Nucleuses"
                        },
                        done(){
                                return player.nu.best.gte(68)
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Unlock Species and Token II via Cell's divider is 4444.4."
                        },
                }, // hasMilestone("nu", 19)
        },
        tabFormat: {
                "Upgrades": {
                        content: [
                                "main-display",
                                ["prestige-button", "", function (){ return false ? {'display': 'none'} : {}}],
                                "blank",
                                ["upgrades", [1,2,3,4,5]],
                        ],
                        unlocked(){
                                return true
                        },
                },
                "Milestones": {
                        content: [
                                "main-display",
                                "blank",
                                "milestones",
                        ],
                        unlocked(){
                                return true
                        },
                },
                "Info": {
                        content: [
                                "main-display",
                                ["display-text", function(){
                                        let a = "Nucleuses resets all prior content not permanently kept."
                                        let b = "For unlocking Nucleuses you permanently keep DNA, Cell, and Tissue content."
                                        let c = "Buying any upgrade forces a Nucleus reset."

                                        return a + br2 + b + br2 + c
                                }],
                        ],
                        unlocked(){
                                return true
                        },
                },
        },
        doReset(layer){
                if (layer != "nu") return
                player.nu.time = 0

                /*
                1. Chromosomes content
                2. Animals content
                3. Gene content
                4. Organ content
                4a. DB/OB
                4b. Contaminant
                4c. Air
                4d. Energy
                5. Token II content
                */

                
                let data1 = player.ch 
                let data2 = player.an
                let data3 = player.or 
                let data4 = player.tokens 
                
                // 1. Chromosomes content
                if (!false) {
                        let chKeptMilestones = 0 
                        if (hasMilestone("nu", 10)) chKeptMilestones += player.nu.best.round().toNumber()
                        if (hasMilestone("sp", 1)) chKeptMilestones += player.sp.times
                        if (!false) {
                                data1.milestones = data1.milestones.slice(0, chKeptMilestones)
                        }

                        let chKeptUpgrades = 0 
                        if (hasMilestone("nu", 10)) chKeptUpgrades += player.nu.best.round().toNumber()
                        if (!false) {
                                data1.upgrades = data1.upgrades.slice(0, chKeptUpgrades)
                        }
                }
                data1.total = decimalZero
                data1.best = decimalZero
                data1.points = decimalZero

                // 2. Animals content
                if (!false) {
                        let anKeptMilestones = 0 
                        if (hasMilestone("nu", 3)) anKeptMilestones += player.nu.best.round().toNumber()
                        if (hasMilestone("sp", 1)) anKeptMilestones += player.sp.times
                        if (!false) {
                                sortStrings(data2.milestones)
                                data2.milestones = data2.milestones.slice(0, anKeptMilestones)
                        }

                        let anKeptUpgrades = 0 
                        if (hasMilestone("nu", 1)) anKeptUpgrades += player.nu.best.toNumber()
                        if (!false) {
                                data2.upgrades = data2.upgrades.slice(0, anKeptUpgrades)
                        }

                        let anKeptAchievements = 0
                        if (!hasMilestone("nu", 5)) {
                                data2.achievements = data2.achievements.slice(0, anKeptAchievements)
                        }

                        let anKeptTimes = 0
                        if (hasMilestone("nu", 1)) anKeptTimes += player.nu.best.toNumber()
                        if (hasMilestone("nu", 5)) anKeptTimes += player.nu.best.toNumber()
                        if (!false) data2.times = Math.min(data2.times, anKeptTimes)
                }
                data2.total = decimalZero
                data2.best = decimalZero
                data2.points = decimalZero

                // 3. Gene content
                if (!false) {
                        let data = data2.grid

                        let keys = [
                                101, 102, 103, 104, 105, 106, 107, 108,
                                202, 203, 204, 205, 206, 207, 208, 
                                303, 304, 305, 306, 307, 308, 
                                404, 405, 406, 407, 408, 
                                505, 506, 507, 508, 
                                606, 607, 608, 
                                707, 708, 
                                808]

                        for (i in keys) {
                                data[keys[i]].extras = decimalZero
                                data[keys[i]].buyables = decimalZero
                        }
                }
                data2.genes.points = decimalZero
                data2.genes.best = decimalZero
                data2.genes.total = decimalZero
                
                // 4. Organ content
                if (!false) {
                        let oKeptMilestones = 0
                        if (hasMilestone("an", 5)) oKeptMilestones += player.an.times 
                        if (hasMilestone("nu", 4)) oKeptMilestones += player.nu.best.round().toNumber()
                        if (!false) {
                                oKeptMilestones = Math.max(4, oKeptMilestones)
                                sortStrings(data3.milestones)
                                data3.milestones = data3.milestones.slice(0, oKeptMilestones)
                        }

                        let oKeptUpgrades = 0
                        if (hasMilestone("an", 2)) oKeptUpgrades += player.an.times 
                        if (hasMilestone("an", 7)) oKeptUpgrades += player.an.times
                        if (hasMilestone("an", 8)) oKeptUpgrades += player.an.times
                        if (hasMilestone("an", 10)) oKeptUpgrades += player.an.times
                        if (hasMilestone("nu", 4)) oKeptUpgrades += player.nu.best.round().toNumber()
                        if (!false) {
                                //sortStrings(data1.upgrades)
                                //commented out on purpose, if it breaks this you can add it back
                                data3.upgrades = data3.upgrades.slice(0, oKeptUpgrades)
                        }

                        let oKeptTimes = 0
                        if (hasMilestone("an", 2)) oKeptTimes += player.an.times
                        if (!false) data3.times = Math.min(data3.times, oKeptTimes)

                        // 4b
                        if (!hasMilestone("an", 10)) {
                                let data = data3.buyables 
                                data[201] = decimalZero
                                data[202] = decimalZero
                                data[203] = decimalZero
                                data[211] = decimalZero
                                data[212] = decimalZero
                                data[213] = decimalZero
                                data[221] = decimalZero
                                data[222] = decimalZero
                                data[223] = decimalZero
                        }

                        // 4c
                        if (!hasMilestone("an", 12)) {
                                let data = data3.bankedAir
                                data[11] = decimalZero
                                data[12] = decimalZero
                                data[21] = decimalZero
                                data[22] = decimalZero
                                data[31] = decimalZero
                                data[32] = decimalZero
                        }

                        // 4d
                        if (!false) {
                                let data = data3.buyables 
                                if (!hasMilestone("an", 11)) {
                                        data[401] = decimalZero
                                        data[402] = decimalZero
                                        data[403] = decimalZero
                                        data[411] = decimalZero
                                        data[412] = decimalZero
                                        data[413] = decimalZero
                                        data[421] = decimalZero
                                        data[422] = decimalZero
                                        data[423] = decimalZero
                                }
                                let dataAlt = data3.extras 
                                dataAlt[401] = decimalZero
                                dataAlt[402] = decimalZero
                                dataAlt[403] = decimalZero
                                dataAlt[411] = decimalZero
                                dataAlt[412] = decimalZero
                                dataAlt[413] = decimalZero
                                dataAlt[421] = decimalZero
                                dataAlt[422] = decimalZero
                                dataAlt[423] = decimalZero
                        }
                }
                
                data3.points = decimalZero
                data3.total = decimalZero
                data3.best = decimalZero
                data3.deoxygenated_blood.points = decimalZero
                data3.deoxygenated_blood.total = decimalZero
                data3.deoxygenated_blood.best = decimalZero
                data3.oxygenated_blood.points = decimalZero
                data3.oxygenated_blood.total = decimalZero
                data3.oxygenated_blood.best = decimalZero
                data3.air.points = decimalZero
                data3.air.total = decimalZero
                data3.air.best = decimalZero
                data3.contaminants.points = decimalZero
                data3.contaminants.total = decimalZero
                data3.contaminants.best = decimalZero
                data3.energy.points = decimalZero
                data3.energy.total = decimalZero
                data3.energy.best = decimalZero
                data3.challengeAir = decimalZero
                data3.challenges[11] = 0
                data3.challenges[12] = 0
                data3.challenges[21] = 0
                data3.challenges[22] = 0
                data3.challenges[31] = 0
                data3.challenges[32] = 0

                // 5. Token II content
                if (!hasMilestone("or", 12)) {
                        data4.total = decimalZero
                        data4.points = decimalZero
                        data4.tokens2.total = decimalZero
                        data4.tokens2.points = decimalZero

                        player.tokens.lastRespecDisplayFormula = "2<sup>x</sup>"

                        let resetIds = [
                                11, 12, 13,
                                21, 22, 23,
                                31, 32, 33,
                                41, 42, 43,
                                51, 52, 53, 
                                61, 62, 63,
                                101, 102,
                                111, 112,
                                121, 122,
                                191,192,193,]
                                
                        let resetbbids = [
                                11, 12, 13,
                                21, 22, 23,
                                31, 32, 33,
                                41, 42, 43,
                                51, 52, 53, 
                                61, 62, 63,
                                101, 102,
                                111, 112,
                                121, 122,]

                        for (i in resetIds){
                                let id = resetIds[i]
                                data4.buyables[id] = decimalZero
                                if (resetbbids.includes(id)) data4.best_buyables[id] = decimalZero
                        }

                        data4.bestStrange = decimalZero
                        data4.bestTop = decimalZero
                        data4.bestBottom = decimalOne
                        data4.bestCharm = decimalZero

                        data4.lastRespecDisplayFormula2ID = layers.tokens.buyables.costFormulaText2ID()
                }
                
                resetPreOrganCurrencies()
        },
})

addLayer("sp", {
        name: "Species", 
        symbol: "S", 
        position: 4, 
        startData(){ return {
                unlocked: false,
		points: decimalZero,
                best: decimalZero,
                total: decimalZero,
                abtime: 0,
                time: 0,
                times: 0,
        }},
        color: "#824600",
        branches: [],
        requires:() => new Decimal("1e900"), 
        resource: "Species", 
        baseResource: "Animals", 
        baseAmount(){return player.an.points},
        type: "custom",
        getNextAt(){
                let baseGain = tmp.sp.getResetGain.plus(1).div(tmp.sp.getGainMult).max(1)

                return baseGain.root(tmp.sp.getGainExp).times(900).pow10()
        },
        getGainExp(){
                let ret = new Decimal(3)

                return ret
        },
        getResetGain(){
                let ret = player.an.points.max(1).log10().div(900).pow(tmp.sp.getGainExp)

                ret = ret.times(tmp.sp.getGainMult)
                
                return ret.floor()
        },
        getGainMult(){
                let ret = decimalOne

                return ret
        },
        canReset(){
                return tmp.sp.getResetGain.gt(0) && hasMilestone("nu", 19)
        },
        resetsNothing(){
                return false
        },
        effect(){
                let ret = player.sp.total.plus(1)

                return ret
        },
        effectDescription(){
                let start = " affecting various things by " + format(tmp.sp.effect)
                return start + "."
        },
        update(diff){
                let data = player.sp
                
                if (player.sp.points.gt(0)) data.unlocked = true
                data.best = data.best.max(data.points)

                data.time += diff
        },
        row: 1,
        prestigeButtonText(){
                let b = ""
                if (tmp.sp.getResetGain.lt(1e3)) b = "<br>Next: " + format(tmp.sp.getNextAt) + " Animals."

                return "Reset for <b>" + formatWhole(tmp.sp.getResetGain) + "</b> Species" + b
        },
        layerShown(){
                if (tmp.sp.deactivated) return false
                return player.sp.unlocked || hasMilestone("nu", 19)
        },
        upgrades: {
                rows: 10,
                cols: 5,
                11: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Effect I"
                        },
                        description(){
                                return "The Species effect multiplies Animal gain"
                        },
                        cost:() => new Decimal(1),
                        unlocked(){
                                return true
                        }, // hasUpgrade("sp", 11)
                },
                12: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Effect II"
                        },
                        description(){
                                return "The Species effect multiplies Organ gain per resets<sup>2</sup> (max 22 resets)"
                        },
                        cost:() => new Decimal(1),
                        unlocked(){
                                return true
                        }, // hasUpgrade("sp", 12)
                },
                13: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Effect III"
                        },
                        description(){
                                let a = "The Species effect multiplies " + makePurple("OB") + " and " + makeBlue("DB")
                                return a + " gain per Token II<sup>1.5</sup>"
                        },
                        cost:() => new Decimal(1),
                        unlocked(){
                                return true
                        }, // hasUpgrade("sp", 13)
                },
                14: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Effect IV"
                        },
                        description(){
                                return "The Species effect multiplies Air gain per Token<sup>.7</sup>"
                        },
                        cost:() => new Decimal(1),
                        unlocked(){
                                return true
                        }, // hasUpgrade("sp", 14)
                },
                15: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Effect V"
                        },
                        description(){
                                return "The Species effect multiplies Contaminant gain per (I'm levels)<sup>.8</sup>"
                        },
                        cost:() => new Decimal(1),
                        unlocked(){
                                return true
                        }, // hasUpgrade("sp", 15)
                },
                21: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Effect VI"
                        },
                        description(){
                                return "The Species effect multiplies each Energy buyable amount gain per sqrt(its levels)"
                        },
                        cost:() => new Decimal(1),
                        unlocked(){
                                return true
                        }, // hasUpgrade("sp", 21)
                },
                22: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Effect VII"
                        },
                        description(){
                                return "The Species effect multiplies row 8 Taxonomy amounts per Sapien level/15"
                        },
                        cost:() => new Decimal(1),
                        unlocked(){
                                return true
                        }, // hasUpgrade("sp", 22)
                },
                23: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Effect VIII"
                        },
                        description(){
                                return "The Species effect multiplies row 7 Taxonomy amounts gain per sqrt(10 + Chromosomes)"
                        },
                        cost:() => new Decimal(1),
                        unlocked(){
                                return true
                        }, // hasUpgrade("sp", 23)
                },
                24: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Effect IX"
                        },
                        description(){
                                return "The Species effect multiplies row 6 Taxonomy amounts per cbrt(8 + Nucleuses)"
                        },
                        cost:() => new Decimal(1),
                        unlocked(){
                                return true
                        }, // hasUpgrade("sp", 24)
                },
                25: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Effect X"
                        },
                        description(){
                                return "The Species effect multiplies row 5 Taxonomy amounts per sqrt(3 + resets) (max 22 resets)"
                        },
                        cost:() => new Decimal(1),
                        unlocked(){
                                return true
                        }, // hasUpgrade("sp", 25)
                },
                31: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Effect XI"
                        },
                        description(){
                                return "The Species effect multiplies row 4 Taxonomy amounts per Nucleuses/50"
                        },
                        cost:() => new Decimal(1),
                        unlocked(){
                                return true
                        }, // hasUpgrade("sp", 31)
                },
                32: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Effect XII"
                        },
                        description(){
                                return "The Species effect multiplies row 3 Taxonomy amounts per log2(Chromosomes)/25"
                        },
                        cost:() => new Decimal(1),
                        unlocked(){
                                return true
                        }, // hasUpgrade("sp", 32)
                },
                33: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Effect XIII"
                        },
                        description(){
                                return "The Species effect multiplies row 2 Taxonomy amounts per log10(Token II)/25"
                        },
                        cost:() => new Decimal(1),
                        unlocked(){
                                return true
                        }, // hasUpgrade("sp", 33)
                },
                34: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Effect XIV"
                        },
                        description(){
                                return "The Species effect multiplies base DNA gain per sqrt(Token)"
                        },
                        cost:() => new Decimal(1),
                        unlocked(){
                                return true
                        }, // hasUpgrade("sp", 34)
                },
                35: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Effect XV"
                        },
                        description(){
                                return "Animalia I amount<sup>.1</sup> adds to Bottom Quarks' base"
                        },
                        cost:() => new Decimal(1),
                        unlocked(){
                                return true
                        }, // hasUpgrade("sp", 35)
                },
                41: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Effect XVI"
                        },
                        description(){
                                return "Animalia III amount<sup>sqrt(Nucleuses)</sup> multiplies in<u>tes</u>TINE gain"
                        },
                        cost:() => new Decimal(1),
                        unlocked(){
                                return true
                        }, // hasUpgrade("sp", 41)
                },
                42: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Effect XVII"
                        },
                        description(){
                                return "Animalia IV amount<sup>8</sup> multiplies inTES<u>tine</u> gain"
                        },
                        cost:() => new Decimal(1),
                        unlocked(){
                                return true
                        }, // hasUpgrade("sp", 42)
                },
                43: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Effect XVIII"
                        },
                        description(){
                                return "Eubacteria I amount<sup>sqrt(Token II)</sup> multiplies <u>in</u>tesTINE gain"
                        },
                        cost:() => new Decimal(1),
                        unlocked(){
                                return true
                        }, // hasUpgrade("sp", 43)
                },
                44: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Effect XIX"
                        },
                        description(){
                                return "Eubacteria II amount<sup>Nucleuses<sup>6</sup></sup> multiplies Contaminant gain"
                        },
                        cost:() => new Decimal(1),
                        unlocked(){
                                return true
                        }, // hasUpgrade("sp", 44)
                },
                45: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Effect XX"
                        },
                        description(){
                                return "Archaebacteria amount<sup>Nucleuses<sup>9</sup></sup> multiplies DNA gain"
                        },
                        cost:() => new Decimal(1),
                        unlocked(){
                                return true
                        }, // hasUpgrade("sp", 45)
                },
        },
        milestones: {
                1: {
                        requirementDescription(){
                                return "1 Species reset"
                        },
                        done(){
                                return player.sp.times >= 1
                        },
                        unlocked(){
                                return true
                        },
                        effectDescription(){
                                return "Reward: Per reset keep a Animal, Chromosome, and Nucleuse milestone, the Contamination rate is 1% until you have 11 Chromosomes, and add floor(cbrt(resets)) effective Nucleuses, max 4."
                        },
                }, // hasMilestone("sp", 1)
        },
        tabFormat: {
                "Upgrades": {
                        content: [
                                "main-display",
                                ["prestige-button", "", function (){ return false ? {'display': 'none'} : {}}],
                                "blank",
                                ["upgrades", [1,2,3,4,5]],
                        ],
                        unlocked(){
                                return true
                        },
                },
                "Milestones": {
                        content: [
                                "main-display",
                                "blank",
                                "milestones",
                        ],
                        unlocked(){
                                return true
                        },
                },
                "Info": {
                        content: [
                                "main-display",
                                ["display-text", function(){
                                        let a = "Species resets all prior content not permanently kept."
                                        let b = "Initial effect: Total Species + 1"
                                        let c = "For unlocking Species, you always autobuy all energy buyables and you can bulk 5x more Energy and Token II buyables."

                                        return a + br2 + b + br2 + c
                                }],
                        ],
                        unlocked(){
                                return true
                        },
                },
        },
        onPrestige(){
                let timesAdd = 1
                if (player.easyMode) timesAdd *= 2
                player.sp.times += timesAdd
        },
        doReset(layer){
                if (layer != "sp") return
                player.sp.time = 0

                /*
                0. Nucleuses content
                1. Chromosomes content
                2. Animals content
                3. Gene content
                4. Organ content
                4a. DB/OB
                4b. Contaminant
                4c. Air
                4d. Energy
                5. Token II content
                */

                let data0 = player.nu
                let data1 = player.ch 
                let data2 = player.an
                let data3 = player.or 
                let data4 = player.tokens 

                // 0. Nucleuse content
                if (!false) {
                        let nuKeptMilestones = 0
                        if (hasMilestone("sp", 1)) nuKeptMilestones += player.sp.times
                        if (!false) {
                                data0.milestones = data0.milestones.slice(0, nuKeptMilestones)
                        }

                        let nuKeptUpgrades = 0
                        if (!false) {
                                data0.upgrades = data0.upgrades.slice(0, nuKeptUpgrades)
                        }
                }
                data0.total = decimalZero
                data0.best = decimalZero
                data0.points = decimalZero
                
                // 1. Chromosomes content
                if (!false) {
                        let chKeptMilestones = 0 
                        if (hasMilestone("nu", 10)) chKeptMilestones += player.nu.best.round().toNumber()
                        if (hasMilestone("sp", 1)) chKeptMilestones += player.sp.times
                        if (!false) {
                                data1.milestones = data1.milestones.slice(0, chKeptMilestones)
                        }

                        let chKeptUpgrades = 0 
                        if (hasMilestone("nu", 10)) chKeptUpgrades += player.nu.best.round().toNumber()
                        if (!false) {
                                data1.upgrades = data1.upgrades.slice(0, chKeptUpgrades)
                        }
                }
                data1.total = decimalZero
                data1.best = decimalZero
                data1.points = decimalZero

                // 2. Animals content
                if (!false) {
                        let anKeptMilestones = 0 
                        if (hasMilestone("nu", 3)) anKeptMilestones += player.nu.best.round().toNumber()
                        if (hasMilestone("sp", 1)) anKeptMilestones += player.sp.times
                        if (!false) {
                                sortStrings(data2.milestones)
                                data2.milestones = data2.milestones.slice(0, anKeptMilestones)
                        }

                        let anKeptUpgrades = 0 
                        if (hasMilestone("nu", 1)) anKeptUpgrades += player.nu.best.toNumber()
                        if (!false) {
                                data2.upgrades = data2.upgrades.slice(0, anKeptUpgrades)
                        }

                        let anKeptAchievements = 0
                        if (!hasMilestone("nu", 5)) {
                                data2.achievements = data2.achievements.slice(0, anKeptAchievements)
                        }

                        let anKeptTimes = 0
                        if (hasMilestone("nu", 1)) anKeptTimes += player.nu.best.toNumber()
                        if (hasMilestone("nu", 5)) anKeptTimes += player.nu.best.toNumber()
                        if (!false) data2.times = Math.min(data2.times, anKeptTimes)
                }
                data2.total = decimalZero
                data2.best = decimalZero
                data2.points = decimalZero

                // 3. Gene content
                if (!false) {
                        let data = data2.grid

                        let keys = [
                                101, 102, 103, 104, 105, 106, 107, 108,
                                202, 203, 204, 205, 206, 207, 208, 
                                303, 304, 305, 306, 307, 308, 
                                404, 405, 406, 407, 408, 
                                505, 506, 507, 508, 
                                606, 607, 608, 
                                707, 708, 
                                808]

                        for (i in keys) {
                                data[keys[i]].extras = decimalZero
                                data[keys[i]].buyables = decimalZero
                        }
                }
                data2.genes.points = decimalZero
                data2.genes.best = decimalZero
                data2.genes.total = decimalZero
                
                // 4. Organ content
                if (!false) {
                        let oKeptMilestones = 0
                        if (hasMilestone("an", 5)) oKeptMilestones += player.an.times 
                        if (hasMilestone("nu", 4)) oKeptMilestones += player.nu.best.round().toNumber()
                        if (!false) {
                                oKeptMilestones = Math.max(4, oKeptMilestones)
                                sortStrings(data3.milestones)
                                data3.milestones = data3.milestones.slice(0, oKeptMilestones)
                        }

                        let oKeptUpgrades = 0
                        if (hasMilestone("an", 2)) oKeptUpgrades += player.an.times 
                        if (hasMilestone("an", 7)) oKeptUpgrades += player.an.times
                        if (hasMilestone("an", 8)) oKeptUpgrades += player.an.times
                        if (hasMilestone("an", 10)) oKeptUpgrades += player.an.times
                        if (hasMilestone("nu", 4)) oKeptUpgrades += player.nu.best.round().toNumber()
                        if (!false) {
                                //sortStrings(data1.upgrades)
                                //commented out on purpose, if it breaks this you can add it back
                                data3.upgrades = data3.upgrades.slice(0, oKeptUpgrades)
                        }

                        let oKeptTimes = 0
                        if (hasMilestone("an", 2)) oKeptTimes += player.an.times
                        if (!false) data3.times = Math.min(data3.times, oKeptTimes)

                        // 4b
                        if (!hasMilestone("an", 10)) {
                                let data = data3.buyables 
                                data[201] = decimalZero
                                data[202] = decimalZero
                                data[203] = decimalZero
                                data[211] = decimalZero
                                data[212] = decimalZero
                                data[213] = decimalZero
                                data[221] = decimalZero
                                data[222] = decimalZero
                                data[223] = decimalZero
                        }

                        // 4c
                        if (!hasMilestone("an", 12)) {
                                let data = data3.bankedAir
                                data[11] = decimalZero
                                data[12] = decimalZero
                                data[21] = decimalZero
                                data[22] = decimalZero
                                data[31] = decimalZero
                                data[32] = decimalZero
                        }

                        // 4d
                        if (!false) {
                                let data = data3.buyables 
                                if (!hasMilestone("an", 11)) {
                                        data[401] = decimalZero
                                        data[402] = decimalZero
                                        data[403] = decimalZero
                                        data[411] = decimalZero
                                        data[412] = decimalZero
                                        data[413] = decimalZero
                                        data[421] = decimalZero
                                        data[422] = decimalZero
                                        data[423] = decimalZero
                                }
                                let dataAlt = data3.extras 
                                dataAlt[401] = decimalZero
                                dataAlt[402] = decimalZero
                                dataAlt[403] = decimalZero
                                dataAlt[411] = decimalZero
                                dataAlt[412] = decimalZero
                                dataAlt[413] = decimalZero
                                dataAlt[421] = decimalZero
                                dataAlt[422] = decimalZero
                                dataAlt[423] = decimalZero
                        }
                }
                
                data3.points = decimalZero
                data3.total = decimalZero
                data3.best = decimalZero
                data3.deoxygenated_blood.points = decimalZero
                data3.deoxygenated_blood.total = decimalZero
                data3.deoxygenated_blood.best = decimalZero
                data3.oxygenated_blood.points = decimalZero
                data3.oxygenated_blood.total = decimalZero
                data3.oxygenated_blood.best = decimalZero
                data3.air.points = decimalZero
                data3.air.total = decimalZero
                data3.air.best = decimalZero
                data3.contaminants.points = decimalZero
                data3.contaminants.total = decimalZero
                data3.contaminants.best = decimalZero
                data3.energy.points = decimalZero
                data3.energy.total = decimalZero
                data3.energy.best = decimalZero
                data3.challengeAir = decimalZero
                data3.challenges[11] = 0
                data3.challenges[12] = 0
                data3.challenges[21] = 0
                data3.challenges[22] = 0
                data3.challenges[31] = 0
                data3.challenges[32] = 0

                // 5. Token II content
                if (!hasMilestone("or", 12)) {
                        data4.total = decimalZero
                        data4.points = decimalZero
                        data4.tokens2.total = decimalZero
                        data4.tokens2.points = decimalZero

                        player.tokens.lastRespecDisplayFormula = "2<sup>x</sup>"

                        let resetIds = [
                                11, 12, 13,
                                21, 22, 23,
                                31, 32, 33,
                                41, 42, 43,
                                51, 52, 53, 
                                61, 62, 63,
                                101, 102,
                                111, 112,
                                121, 122,
                                191,192,193,]
                                
                        let resetbbids = [
                                11, 12, 13,
                                21, 22, 23,
                                31, 32, 33,
                                41, 42, 43,
                                51, 52, 53, 
                                61, 62, 63,
                                101, 102,
                                111, 112,
                                121, 122,]

                        for (i in resetIds){
                                let id = resetIds[i]
                                data4.buyables[id] = decimalZero
                                if (resetbbids.includes(id)) data4.best_buyables[id] = decimalZero
                        }

                        data4.bestStrange = decimalZero
                        data4.bestTop = decimalZero
                        data4.bestBottom = decimalOne
                        data4.bestCharm = decimalZero

                        data4.lastRespecDisplayFormula2ID = layers.tokens.buyables.costFormulaText2ID()
                }
                
                resetPreOrganCurrencies()
        },
})

addLayer("mc", {
        name: "Micro", 
        symbol: "M<sub>C</sub>", 
        position: 4, 
        startData(){ return {
                unlocked: true,
		points: decimalZero,
                best: decimalZero,
                total: decimalZero,
        }},
        color: "#42006D",
        branches: ["cells"],
        requires:() => decimalZero, 
        resource: "Micro", 
        baseResource: "points", 
        baseAmount(){return player.points},
        type: "custom",
        tooltip(){
                return format(player.cells.stem_cells.points, 3) + " Stem Cells"
        },
        getBaseGain(){
                let pts = player.points
                let logbase = new Decimal(10)
                
                let ret = pts.max(logbase).log(logbase).max(logbase).log(logbase)
                if (!false) ret = ret.max(logbase).log(logbase)

                ret = ret.div(1000)
                ret = ret.pow(tmp.mc.getBaseGainExp)

                return ret
        },
        getBaseGainExp(){
                let ret = decimalOne

                return ret
        },
        getGainMult(){
                let ret = decimalOne

                if (player.hardMode) ret = ret.div(4)

                ret = ret.times(tmp.mc.buyables[11].effect)
                ret = ret.times(tmp.mc.buyables[12].effect)
                ret = ret.times(tmp.mc.buyables[13].effect)

                if (hasUpgrade("mc", 14))       ret = ret.times(player.mc.buyables[11].max(1).pow(player.mc.upgrades.length))

                return ret
        },
        getResetGain(){
                return tmp.mc.getBaseGain.times(tmp.mc.getGainMult)
        },
        getNextAt(){
                return decimalOne
        },
        canReset(){
                return false
        },
        update(diff){
                let data = player.mc
                data.unlocked = true

                data.best = data.best.max(data.points)
                data.points = data.points.plus(tmp.mc.getResetGain.times(diff))
                data.total = data.total.plus(tmp.mc.getResetGain.times(diff))

                if (hasUpgrade("mc", 14)) layers.mc.buyables[11].buy()
        },
        getMinigameMaximum(){
                if (player.cells.currentMinigame == undefined) return Infinity
                return layers.cells.clickables[player.cells.currentMinigame].maxTimes()
        },
        row: 1, 
        prestigeButtonText(){
                return br
        },
        shouldNotify(){
                for (id in tmp.cells.upgrades){
                        if (isPlainObject(layers.cells.upgrades[id])){
                                if (canAffordUpgrade("cells", id) && !hasUpgrade("cells", id) && tmp.cells.upgrades[id].unlocked && id > 110){
                                        return true
                                }
                        }
                }
        },
        clickables: {
                rows: 1,
                cols: 1,
                11: {
                        title(){
                                return makeBlue("Jump to Stem Cells")
                        },
                        display(){
                                return ""
                        },
                        unlocked(){
                                return true
                        },
                        canClick(){
                                return true
                        },
                        onClick(){
                                player.subtabs.cells.mainTabs = "Stem"
                                player.tab = "cells"
                        },
                },
        },
        layerShown(){return hasMilestone("cells", 21) || hasMilestone("or", 4) || player.or.unlocked},
        upgrades: {
                11: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Micrometer"
                        },
                        description(){
                                return "Each of the first 900 achievements reduces ...waves cost double exponent by .001"
                        },
                        cost:() => new Decimal(1e48),
                        unlocked(){
                                return player.mc.points.gte(1e47)
                        }, // hasUpgrade("mc", 11)
                },
                12: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Microfilament"
                        },
                        description(){
                                return "Each Nucleus past 25 adds .01 to ...waves base"
                        },
                        cost:() => new Decimal("1e639"),
                        unlocked(){
                                return player.mc.points.gte("1e635")
                        }, // hasUpgrade("mc", 12)
                },
                13: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Microorganism"
                        },
                        description(){
                                return "Remove ...soft and ...waves base costs"
                        },
                        cost:() => new Decimal("1e949"),
                        unlocked(){
                                return player.mc.points.gte("1e945")
                        }, // hasUpgrade("mc", 13)
                },
                14: {
                        title(){
                                return "<bdi style='color: #" + getUndulatingColor() + "'>Micromanagement"//Microcomputer
                        },
                        description(){
                                return "Autobuy ...waves and per upgrade ...waves levels multiply Micro gain"
                        },
                        cost:() => new Decimal("1e1567"),
                        unlocked(){
                                return player.mc.points.gte("1e1550")
                        }, // hasUpgrade("mc", 14)
                },
        },
        buyables: {
                rows: 3,
                cols: 3,
                11: {
                        title: "...waves",
                        cost(){
                                let exp = 2
                                if (hasUpgrade("mc", 11)) exp -= Math.min(900, player.ach.achievements.length) / 1000
                                return new Decimal(2).pow(getBuyableAmount("mc", 11).pow(exp))
                        },
                        canAfford:() => player.mc.points.gte(tmp.mc.buyables[11].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mc.buyables[11] = player.mc.buyables[11].plus(1)
                                player.mc.points = player.mc.points.sub(tmp.mc.buyables[11].cost)
                        },
                        maxAfford(){
                                let div = decimalOne
                                let base = 2
                                let exp = 2
                                let pts = player.mc.points
                                if (pts.lt(div)) return decimalZero
                                if (hasUpgrade("mc", 11)) exp -= Math.min(900, player.ach.achievements.length) / 1000
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        base(){
                                let ret = new Decimal(2)

                                if (hasUpgrade("mc", 12)) ret = ret.plus(player.nu.points.sub(25).max(0).div(100))

                                return ret
                        },
                        effect(){
                                return tmp.mc.buyables[11].base.pow(player.mc.buyables[11])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.mc.buyables[11]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mc.buyables[11].effect) + " to Micro gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mc", 11)) + " Micro</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.mc.buyables[11].base) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "2^x<sup>EXP</sup>" 
                                let exp = 2
                                if (hasUpgrade("mc", 11)) exp -= Math.min(900, player.ach.achievements.length) / 1000
                                cost2 = cost2.replace("EXP", formatWhole(exp, false, 3))
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                12: {
                        title: "...soft",
                        cost: () => new Decimal(10).pow(getBuyableAmount("mc", 12).pow(1.3).plus(hasUpgrade("mc", 13) ? 0 : 1)),
                        canAfford:() => player.mc.points.gte(tmp.mc.buyables[12].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mc.buyables[12] = player.mc.buyables[12].plus(1)
                                player.mc.points = player.mc.points.sub(tmp.mc.buyables[12].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(hasUpgrade("mc", 13) ? 1 : 10)
                                let base = 10
                                let exp = 1.3
                                let pts = player.mc.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return player.mc.buyables[11].gt(2)
                        },
                        base(){
                                let ret = player.tokens.total.max(10).log10()

                                return ret
                        },
                        effect(){
                                return tmp.mc.buyables[12].base.pow(player.mc.buyables[12])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.mc.buyables[12]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mc.buyables[12].effect) + " to Micro gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mc", 12)) + " Micro</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(Tokens)^x<br>" + format(tmp.mc.buyables[12].base) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "10*10^x<sup>1.3</sup>" 
                                if (hasUpgrade("mc", 13)) cost2 = cost2.slice(3,)
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                13: {
                        title: "...phone",
                        cost: () => new Decimal(100).pow(getBuyableAmount("mc", 13).pow(1.1).plus(hasUpgrade("mc", 13) ? 0 : 2)),
                        canAfford:() => player.mc.points.gte(tmp.mc.buyables[13].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mc.buyables[13] = player.mc.buyables[13].plus(1)
                                player.mc.points = player.mc.points.sub(tmp.mc.buyables[13].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(hasUpgrade("mc", 13) ? 1 : 1e4)
                                let base = 100
                                let exp = 1.1
                                let pts = player.mc.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1).min(8)
                        },
                        unlocked(){
                                return player.mc.buyables[12].gt(2)
                        },
                        base(){
                                return player.cells.points.max(10).log10().max(10).log10()
                        },
                        effect(){
                                return tmp.mc.buyables[13].base.pow(player.mc.buyables[13])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.mc.buyables[13]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mc.buyables[13].effect) + " to Micro gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mc", 13)) + " Micro</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(log10(Cells))^x<br>" + format(tmp.mc.buyables[13].base) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "1e4*100^x<sup>1.1</sup>" 
                                if (hasUpgrade("mc", 13)) cost2 = cost2.slice(4,)
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
        },
        tabFormat: {
                "Activate": {
                        content: [
                                "blank",
                                "blank",
                                "blank",
                                "blank",
                                "blank",
                                ["layer-proxy", 
                                        ["cells", 
                                        [["clickables", [1]],
                                        ]
                                        ]
                                ],
                                "blank",
                                "clickables",
                        ],
                        unlocked(){
                                return true
                        },
                },
                "Mu": {
                        content: [
                                ["layer-proxy", 
                                        ["cells", 
                                        [
                                                ["secondary-display", "mu"],
                                                ["display-text", function(){
                                                        return "You are getting " + format(tmp.cells.mu.getResetGain) + " Mu per second"
                                                }],
                                                ["upgrades", [11, 12]],
                                                ["buyables", [11]],
                                        ]
                                        ]
                                ],
                                "blank",
                                "clickables",
                        ],
                        unlocked(){
                                return true
                        },
                },
                "Lambda": {
                        content: [
                                ["layer-proxy", 
                                        ["cells", 
                                        [
                                                ["secondary-display", "lambda"],
                                                ["display-text", function(){
                                                        return "You are getting " + format(tmp.cells.lambda.getResetGain) + " Lambda per second"
                                                }],
                                                ["upgrades", [21, 22]],
                                                ["clickables", [21]],
                                        ]
                                        ]
                                ],
                                "blank",
                                "clickables",
                        ],
                        unlocked(){
                                return true
                        },
                },
                "Kappa": {
                        content: [
                                ["layer-proxy", 
                                        ["cells", 
                                        [
                                                ["secondary-display", "kappa"],
                                                ["display-text", function(){
                                                        return "You are getting " + format(tmp.cells.kappa.getResetGain) + " Kappa per second"
                                                }],
                                                ["bar", "kappa"],
                                                ["upgrades", [31, 32]],
                                        ]
                                        ]
                                ],
                                "blank",
                                "clickables",
                        ],
                        unlocked(){
                                return true
                        },
                },
                "Iota": {
                        content: [
                                ["layer-proxy", 
                                        ["cells", 
                                        [
                                                ["secondary-display", "iota"],
                                                ["display-text", function(){
                                                        if (hasMilestone("cells", 38) || hasMilestone("or", 4)) return ""
                                                        return "You have spent " + formatTime(player.cells.timeInMinigame) + " in Iota"
                                                }],
                                                ["display-text", function(){
                                                        return "You are getting " + format(tmp.cells.iota.getResetGain) + " Iota per second"
                                                }],
                                                ["upgrades", [41, 42]],
                                                ["buyables", [41, 42]],
                                        ]
                                        ]
                                ],
                                "blank",
                                "clickables",
                        ],
                        unlocked(){
                                return true
                        },
                },
                "Micro": {
                        content: [
                                "main-display",
                                ["display-text", function(){
                                        return "You are getting " + format(tmp.mc.getResetGain) + " Micro per second"
                                }],
                                ["buyables", [1,2,3,4]],
                                ["upgrades", [1,2,3,4]],
                                "blank",
                                ["display-text", function(){
                                        let a = "Base gain = log10(log10(log10(Points)))/1000"
                                        let b = "Warning: This tab does not do anything, except provide side entertainment"
                                        let c = "That means you can safely ignore this tab"
                                        return a + br2 + b + br + c
                                }],
                        ],
                        unlocked(){
                                return true
                        },
                }
        },
        doReset(){
                // do nothing
        },
})

addLayer("mh", {
        name: "mh", 
        symbol: "M<sub>H</sub>", 
        position: 4, 
        startData(){ return {
                unlocked: true,
		points: decimalZero,
                best: decimalZero,
                total: decimalZero,
        }},
        color: "#A7A200",
        branches: ["or"],
        requires:() => decimalZero, 
        resource: "Micro", 
        baseResource: "points", 
        baseAmount(){return player.points},
        type: "custom",
        tooltip(){
                let a = format(player.or.deoxygenated_blood.points) + makeBlue(" DB") + " and "
                return a + format(player.or.oxygenated_blood.points) + makePurple(" OB")
        },
        getResetGain(){
                return decimalOne
        },
        getNextAt(){
                return decimalOne
        },
        canReset(){
                return false
        },
        update(diff){},
        row: 3, 
        prestigeButtonText(){
                return br
        },
        clickables: {
                rows: 1,
                cols: 1,
                11: {
                        title(){
                                return makeBlue("Jump to Organs")
                        },
                        display(){
                                return ""
                        },
                        unlocked(){
                                return true
                        },
                        canClick(){
                                return true
                        },
                        onClick(){
                                player.tab = "or"
                        },
                },
        },
        layerShown(){return hasUpgrade("or", 223)},
        tabFormat: {
                "Heart": {
                        content: [
                                ["layer-proxy", 
                                        ["or",
                                        [
                                                ["bar", "heart"],
                                                ["display-text", 
                                                        function (){
                                                                if (player.or.deoxygenated_blood.points.gt(1e100)) return ""
                                                                let a = "When your heart is beating in you gain " + makePurple("Oxygenated Blood") 
                                                                a += " (" + makePurple("OB") + ") and while your heart is beating out you gain "
                                                                return a + makeBlue("Deoxygenated Blood") + " (" + makeBlue("DB") + ")"
                                                        }
                                                ],
                                                "secondary-display-blood",
                                                ["display-text", 
                                                        function (){
                                                                let a = "You can potentially gain " + format(tmp.or.heart.getOBGain)
                                                                a += " " + makePurple("OB") + " and " + format(tmp.or.heart.getDBGain)
                                                                return a + " " + makeBlue("DB") + " per second"
                                                        }
                                                ],
                                                ["upgrades", [10, 11, 12, 13, 14, 15]],
                                        ]
                                        ]
                                ],
                                "blank",
                                "clickables",
                        ],
                        unlocked(){
                                return true
                        },
                        shouldNotify(){
                                let ids = [101, 102, 103, 104, 105, 
                                                111, 112, 113, 114, 115, 
                                                121, 122, 123, 124, 125, 
                                                131, 132, 133, 134, 135, 
                                                141, 142, 143, 144, 145, 
                                                151, 152, 153, 154, 155]
                                for (i in ids){
                                        let id = ids[i]
                                        if (!layers.or.upgrades[id]) continue
                                        if (hasUpgrade("or", id)) continue 
                                        if (!tmp.or.upgrades[id].unlocked) continue
                                        if (canAffordUpgrade("or", id)) return true
                                }
                        },
                },
        },
        doReset(){
                // do nothing
        },
})

addLayer("mk", {
        name: "mk", 
        symbol: "M<sub>K</sub>", 
        position: 5, 
        startData(){ return {
                unlocked: true,
		points: decimalZero,
                best: decimalZero,
                total: decimalZero,
        }},
        color: "#DA6B46",
        branches: ["or"],
        requires:() => decimalZero, 
        resource: "Micro", 
        baseResource: "points", 
        baseAmount(){return player.points},
        type: "custom",
        tooltip(){
                return format(player.or.contaminants.points, 3) + " Contaminants"
        },
        getResetGain(){
                return decimalOne
        },
        getNextAt(){
                return decimalOne
        },
        canReset(){
                return false
        },
        update(diff){},
        row: 3, 
        prestigeButtonText(){
                return br
        },
        clickables: {
                rows: 1,
                cols: 1,
                11: {
                        title(){
                                return makePurple("Jump to Organs")
                        },
                        display(){
                                return ""
                        },
                        unlocked(){
                                return true
                        },
                        canClick(){
                                return true
                        },
                        onClick(){
                                player.tab = "or"
                        },
                },
        },
        layerShown(){return hasUpgrade("or", 223)},
        tabFormat: {
                "Kidney": {
                        content: [
                                ["layer-proxy", 
                                        ["or",
                                        [
                                                ["secondary-display", "contaminants"],
                                                ["display-text", function(){
                                                        let a = "Choose to filter " + makeBlue("DB") + " via your left Kidney, or filter " + makePurple("OB") + " by your right Kidney."
                                                        let b = "You are gaining " + format(tmp.or.kidney.getResetGain) + " Contaminants/s"
                                                        return a + br + b
                                                }],
                                                ["clickables", [20]],
                                                ["upgrades", [20, 21, 22, 23]],
                                                ["buyables", [20, 21, 22]],
                                        ]
                                        ]
                                ],
                                "blank",
                                "clickables",
                        ],
                        unlocked(){
                                return true
                        },
                        shouldNotify(){
                                let ids = [201, 202, 203, 204, 205, 
                                           211, 212, 213, 214, 215, 
                                           221, 222, 223, 224, 225, 
                                           231, 232, 233, 234, 235, 
                                           241, 242, 243, 244, 245, 
                                           251, 252, 253, 254, 255]
                                for (i in ids){
                                        let id = ids[i]
                                        if (!layers.or.upgrades[id]) continue
                                        if (hasUpgrade("or", id)) continue 
                                        if (!tmp.or.upgrades[id].unlocked) continue
                                        if (canAffordUpgrade("or", id)) return true
                                }
                        },
                },
        },
        doReset(){
                // do nothing
        },
})

addLayer("ml", {
        name: "ml", 
        symbol: "M<sub>L</sub>", 
        position: 6, 
        startData(){ return {
                unlocked: true,
		points: decimalZero,
                best: decimalZero,
                total: decimalZero,
        }},
        color: "#6F4FD1",
        branches: ["or"],
        requires:() => decimalZero, 
        resource: "Micro", 
        baseResource: "points", 
        baseAmount(){return player.points},
        type: "custom",
        tooltip(){
                return format(player.or.air.points) + " Air"
        },
        getResetGain(){
                return decimalOne
        },
        getNextAt(){
                return decimalOne
        },
        canReset(){
                return false
        },
        update(diff){},
        row: 3, 
        prestigeButtonText(){
                return br
        },
        clickables: {
                rows: 1,
                cols: 1,
                11: {
                        title(){
                                return makeGreen("Jump to Organs")
                        },
                        display(){
                                return ""
                        },
                        unlocked(){
                                return true
                        },
                        canClick(){
                                return true
                        },
                        onClick(){
                                player.tab = "or"
                        },
                },
        },
        layerShown(){return hasUpgrade("or", 223)},
        tabFormat: {
                "Lung": {
                        content: [
                                ["layer-proxy", 
                                        ["or",
                                        [
                                                ["secondary-display", "air"],
                                                ["display-text", function(){//Entering a challenge resets air. 
                                                        let a = "While in a challenge you do not gain Contaminants, " + makeBlue("DB") + ", or " + makePurple("OB") + "." 
                                                        let b = "You are gaining " + format(tmp.or.lungs.getResetGain) + " Air/s"
                                                        if (tmp.or.lungs.reqs.length > player.or.lungChallengesUnlocked) {
                                                                return a + br + b + br + "Get " + format(tmp.or.lungs.reqs[player.or.lungChallengesUnlocked]) + " Air to unlock the next challenge"
                                                        }
                                                        return a + br + b
                                                }],
                                                ["challenges", [1, 2, 3]],
                                                ["upgrades", [30, 31, 32, 33, 34, 35, 36]],
                                        ]
                                        ]
                                ],
                                "blank",
                                "clickables",
                        ],
                        unlocked(){
                                return true
                        },
                        shouldNotify(){
                                let ids = [301, 302, 303, 304, 305, 
                                           311, 312, 313, 314, 315, 
                                           321, 322, 323, 324, 325, 
                                           331, 332, 333, 334, 335, 
                                           341, 342, 343, 344, 345, 
                                           351, 352, 353, 354, 355]
                                for (i in ids){
                                        let id = ids[i]
                                        if (!layers.or.upgrades[id]) continue
                                        if (hasUpgrade("or", id)) continue 
                                        if (!tmp.or.upgrades[id].unlocked) continue
                                        if (canAffordUpgrade("or", id)) return true
                                }
                        },
                },
        },
        doReset(){
                // do nothing
        },
})

addLayer("mi", {
        name: "mi", 
        symbol: "M<sub>I</sub>", 
        position: 6, 
        startData(){ return {
                unlocked: true,
		points: decimalZero,
                best: decimalZero,
                total: decimalZero,
        }},
        color: "#25B9E3",
        branches: ["or"],
        requires:() => decimalZero, 
        resource: "Micro", 
        baseResource: "points", 
        baseAmount(){return player.points},
        type: "custom",
        tooltip(){
                return format(player.or.energy.points) + " Energy"
        },
        getResetGain(){
                return decimalOne
        },
        getNextAt(){
                return decimalOne
        },
        canReset(){
                return false
        },
        update(diff){},
        row: 2, 
        prestigeButtonText(){
                return br
        },
        clickables: {
                rows: 1,
                cols: 1,
                11: {
                        title(){
                                return makeRed("Jump to Organs")
                        },
                        display(){
                                return ""
                        },
                        unlocked(){
                                return true
                        },
                        canClick(){
                                return true
                        },
                        onClick(){
                                player.tab = "or"
                        },
                },
        },
        layerShown(){return hasUpgrade("or", 223) && hasUpgrade("or", 315)},
        tabFormat: {
                "Intestine": {
                        content: [
                                ["layer-proxy", 
                                        ["or",
                                        [
                                                ["secondary-display", "energy"],
                                                ["display-text", function(){
                                                        if (player.or.air.total.lt("1e2300")) return "You can begin Energy production at 1e2300 Air"
                                                        if (player.shiftAlias) {
                                                                if (hasMilestone("nu", 1)) return "Base gain amount is [buyables]<sup>2</sup>" + (hasMilestone("an", 3) ? "" : "/10")
                                                                return "Base gain amount is [buyables]" + (hasMilestone("an", 3) ? "" : "/10")
                                                        }
                                                        let a = "Buyable amounts (plus 1) multiply energy gain and the production<br>of buyable amounts directly above and to the left." 
                                                        let b = "You are gaining " + format(tmp.or.intestine.getResetGain) + " Energy/s"
                                                        return a + br + b
                                                }],
                                                ["buyables", [40, 41, 42]],
                                                ["upgrades", [40, 41, 42]],
                                        ]
                                        ]
                                ],
                                "blank",
                                "clickables",
                        ],
                        unlocked(){
                                return true
                        },
                        shouldNotify(){
                                let ids = [401, 402, 403, 404, 405, 
                                        411, 412, 413, 414, 415, 
                                        421, 422, 423, 424, 425, 
                                        431, 432, 433, 434, 435, 
                                        441, 442, 443, 444, 445, 
                                        451, 452, 453, 454, 455]
                                for (i in ids){
                                        let id = ids[i]
                                        if (!layers.or.upgrades[id]) continue
                                        if (hasUpgrade("or", id)) continue 
                                        if (!tmp.or.upgrades[id].unlocked) continue
                                        if (canAffordUpgrade("or", id)) return true
                                }
                        },
                },
        },
        doReset(){
                // do nothing
        },
})

addLayer("ach", {
        name: "Achievements",
        symbol: "⭑", 
        position: 1,
        startData(){ return {
                unlocked: true,
		points: decimalZero,
                best: decimalZero,
                total: decimalZero,
                abtime: 0,
                time: 0,
                times: 0,
                autotimes: 0,
                hiddenRows: 0,
                clickedYeet: 0,
                completedRows: 0,
        }},
        color: "#FFC746",
        branches: [],
        requires: decimalZero,
        resource: "Achievements",
        baseResource: "points",
        baseAmount(){return decimalZero},
        type: "custom",
        getResetGain(){
                return decimalZero
        },
        getNextAt(){
                return decimalZero
        },
        update(diff){
                let data = player.ach
                data.points = new Decimal(data.achievements.length)
                data.best = data.best.max(data.points)
                if (hasCompletedFirstNRows(player.ach.completedRows + 1)){
                        player.ach.completedRows ++
                }
        },
        row: "side",
        hotkeys: [
                {
                        key: "THIS SHOULD NOT BE POSSIBLE",
                        description: makeBlue("<b>Generally applicable</b>:"),
                        onPress(){
                                console.log("oops something went really badly wrong")
                        },
                },
                {key: "Control+C", description: "Control+C: Go to changelog", onPress(){
                                showTab("changelog-tab")
                        }
                },
                {key: ",", description: ",: Move one tab to the left", 
                        onPress(){
                                let l = player.tab
                                if (layers[l] == undefined) return
                                player.subtabs[l].mainTabs = getNextLeftTab(l)
                        }
                },
                {key: ".", description: ".: Move one tab to the right", 
                        onPress(){
                                let l = player.tab
                                if (layers[l] == undefined) return
                                player.subtabs[l].mainTabs = getNextRightTab(l)
                        }
                },
                {key: "ArrowLeft", description: "Left Arrow: Move one tab to the left", 
                        onPress(){
                                let l = player.tab
                                if (layers[l] == undefined) return
                                if (!player.arrowHotkeys) return
                                player.subtabs[l].mainTabs = getNextLeftTab(l)
                        }
                },
                {key: "ArrowRight", description: "Right Arrow: Move one tab to the right", 
                        onPress(){
                                let l = player.tab
                                if (layers[l] == undefined) return
                                if (!player.arrowHotkeys) return
                                player.subtabs[l].mainTabs = getNextRightTab(l)
                        }
                },
                {key: "shift+<", description: "Shift+,: Move all the way to the left", 
                        onPress(){
                                let l = player.tab
                                if (layers[l] == undefined) return
                                k = getUnlockedSubtabs(l)
                                player.subtabs[l].mainTabs = k[0]
                        }
                },
                {key: "shift+>", description: "Shift+.: Move all the way to the right", 
                        onPress(){
                                let l = player.tab
                                if (layers[l] == undefined) return
                                k = getUnlockedSubtabs(l)
                                player.subtabs[l].mainTabs = k[k.length-1]
                        }
                },
                {key: "Control+S", description: "Control+S: Save", 
                        onPress(){
                                save()
                        }
                },
                {key: "shift+Control+S", description: "Shift+Control+S: Save", 
                        onPress(){
                                save()
                        }
                },
                {key: "shift+Control+E", description: "Shift+Control+E: Force endgame",
                        onPress(){ // forces the endgame screen to pop up 
                                forceEndgame = true
                                player.keepGoing = false
                        }
                },
                {key: " ", description: "Space: Toggle Pause", 
                        onPress(){
                                if (player.spaceBarPauses) player.paused = !player.paused
                        }
                },
                {
                        key: "THIS SHOULD NOT BE POSSIBLE2",
                        description: br + makeBlue("<b>Jump to locations</b>:"),
                        onPress(){
                                console.log("oops something went really badly wrong")
                        },
                },
                {key: "shift+!", description: "Shift+1: Go to achievements", 
                        onPress(){
                                player.tab = "ach"
                        }
                },
                {
                        key: "shift+@", 
                        description: "Shift+2: Go to minigames", 
                        onPress(){
                                if (!tmp.mini.layerShown) return
                                player.tab = "mini"
                        },
                        unlocked(){
                                return tmp.mini.layerShown
                        },
                },
                {key: "shift+#", description: "Shift+3: Go to tokens", 
                        onPress(){
                                if (!tmp.tokens.layerShown) return
                                player.tab = "tokens"
                        },
                        unlocked(){
                                return tmp.tokens.layerShown
                        },
                },
                {
                        key: "shift+A", 
                        description(){
                                if (player.an.unlocked) return "Shift+A: Go to Animals"
                                return player.a.unlocked ? "Shift+A: Go to Amino Acid" : "Shift+A: Go to A"
                        },
                        onPress(){
                                if (player.an.unlocked) {
                                        player.tab = "an"
                                        return
                                }
                                if (!player.a.unlocked) {
                                        if (!tmp.mini.layerShown) return
                                        if (!tmp.mini.tabFormat.A.unlocked) return
                                        player.tab = "mini"
                                        player.subtabs.mini.mainTabs = "A"
                                } else {
                                        showTab("a")
                                }
                        },
                        unlocked(){
                                return tmp.mini.layerShown || tmp.a.layerShown
                        },
                },
                {key: "shift+B", description(){
                        if (hasUpgrade("or", 352)) return "Shift+B: Buy Taxonomy buyable x5"
                        return "Shift+B: Go to B"
                        }, 
                        onPress(){
                                if (hasUpgrade("or", 352)) {
                                        if (tmp.an.clickables[11].canClick) layers.an.clickables[11].onClick()
                                        return
                                }
                                if (!tmp.mini.layerShown) return
                                if (!tmp.mini.tabFormat.B.unlocked) return
                                player.tab = "mini"
                                player.subtabs.mini.mainTabs = "B"
                        },
                        unlocked(){
                                return tmp.mini.layerShown || hasUpgrade("or", 352)
                        },
                },
                {
                        key: "shift+C", 
                        description(){
                                if (player.cells.unlocked) return "Shift+C: Go to Cells"
                                return !hasMilestone("tokens", 23) ? "Shift+C: Go to Carbon" : "Shift+C: Go to C"
                        },
                        onPress(){
                                if (player.cells.unlocked) {
                                        player.tab = "cells"
                                } else if (!hasMilestone("tokens", 23)) {
                                        if (!tmp.mini.layerShown) return
                                        if (!tmp.mini.tabFormat.C.unlocked) return
                                        player.tab = "mini"
                                        player.subtabs.mini.mainTabs = "C"
                                } else {
                                        showTab("c")
                                }
                        },
                        unlocked(){
                                return tmp.mini.layerShown || tmp.c.layerShown || tmp.cells.layerShown
                        },
                },
                {
                        key: "shift+D", 
                        description(){
                                return player.d.unlocked ? "Shift+D: Go to DNA" : "Shift+D: Go to D"
                        },
                        onPress(){
                                if (!player.d.unlocked) {
                                        if (!tmp.mini.layerShown) return
                                        if (!tmp.mini.tabFormat.D.unlocked) return
                                        player.tab = "mini"
                                        player.subtabs.mini.mainTabs = "D"
                                } else {
                                        showTab("d")
                                }
                        },
                        unlocked(){
                                return tmp.mini.layerShown || tmp.d.layerShown
                        },
                },
                {key: "shift+H", description: "Shift+H: Go to Hydrogen", onPress(){
                                showTab("h")
                        },
                        unlocked(){
                                return tmp.h.layerShown
                        },
                },
                {key: "shift+L", description: "Shift+L: Go to Lives", onPress(){
                                if (!tmp.l.layerShown) return
                                showTab("l")
                        },
                        unlocked(){
                                return tmp.l.layerShown
                        },
                },
                {key: "shift+M", description: "Shift+M: Go to µ", onPress(){
                                if (!tmp.mu.layerShown) return
                                showTab("mu")
                        },
                        unlocked(){
                                return tmp.mu.layerShown
                        },
                },
                {
                        key: "shift+N", 
                        description(){
                                if (player.nu.unlocked) return "Shift+N: Go to Nucleuses"
                                return "Shift+N: Go to Nitrogen"
                        }, onPress(){
                                if (tmp.n.layerShown) showTab("n")
                                if (tmp.nu.layerShown) showTab("nu")
                        },
                        unlocked(){
                                return tmp.n.layerShown || tmp.nu.layerShown
                        },
                },
                {key: "shift+O", description(){
                                return player.or.unlocked ? "Shift+O: Go to Organ" : "Shift+D: Go to Oxygen"
                        }, 
                        onPress(){
                                if (tmp.or.layerShown) {
                                        showTab("or")
                                        return
                                }
                                if (!tmp.o.layerShown) return
                                showTab("o")
                        },
                        unlocked(){
                                return tmp.o.layerShown || tmp.or.layerShown
                        },
                },
                {key: "shift+P", description: "Shift+P: Go to Phosphorus", onPress(){
                                if (!tmp.p.layerShown) return
                                showTab("p")
                        },
                        unlocked(){
                                return tmp.p.layerShown
                        },
                },
                {key: "shift+S", description: "Shift+S: Go to Stem Cells", onPress(){
                                if (!hasUpgrade("cells", 13)) return
                                showTab("cells")
                                player.subtabs.cells.mainTabs = "Stem"
                        },
                        unlocked(){
                                return hasUpgrade("cells", 13)
                        },
                },
                {key: "shift+T", description: "Shift+T: Go to Tissues", onPress(){
                                if (!tmp.t.layerShown) return
                                showTab("t")
                        },
                        unlocked(){
                                return tmp.t.layerShown
                        },
                },
                {key: "shift+X", description: "Shift+X: Go to Chromosomes", onPress(){
                                if (!tmp.ch.layerShown) return
                                showTab("ch")
                        },
                        unlocked(){
                                return tmp.ch.layerShown
                        },
                },
                {
                        key: "THIS SHOULD NOT BE POSSIBLE3",
                        description: br + makeBlue("<b>Prestige</b>:"),
                        onPress(){
                                console.log("oops something went really badly wrong")
                        },
                        unlocked(){
                                return player.n.unlocked
                        },
                },
                {key: "a", description(){
                                return player.an.unlocked ? "A: Reset for Animals" : "A: Reset for Amino Acid"
                        }, onPress(){
                                if (player.an.unlocked) {
                                        if (canReset("an")) doReset("an")
                                } else if (canReset("a")) doReset("a")
                        },
                        unlocked(){
                                return tmp.a.layerShown
                        },
                },
                {key: "3ALT", description: "3: Reset for tokens", 
                        onPress(){
                                if (!tmp.tokens.layerShown) return
                                if (canReset("tokens")) doReset("tokens")
                        },
                        unlocked(){
                                return tmp.tokens.layerShown
                        },
                },
                {key: "c", description: "C: Reset for Cells", onPress(){
                                if (canReset("cells")) doReset("cells")
                        },
                        unlocked(){
                                return tmp.cells.layerShown
                        },
                },
                {key: "d", description: "D: Reset for DNA", onPress(){
                                if (canReset("d")) doReset("d")
                        },
                        unlocked(){
                                return tmp.d.layerShown
                        },
                },
                {key: "l", description: "L: Reset for Lives", onPress(){
                                if (canReset("l")) doReset("l")
                        },
                        unlocked(){
                                return tmp.l.layerShown
                        },
                },
                {key: "m", description: "M: Reset for µ", onPress(){
                                if (canReset("mu")) doReset("mu")
                        },
                        unlocked(){
                                return tmp.mu.layerShown
                        },
                },
                {
                        key: "n", 
                        description(){
                                if (player.nu.unlocked) return "N: Reset for Nucleuses"
                                return "N: Reset for Nitrogen"
                        }, 
                        onPress(){
                                if (canReset("nu")) doReset("nu")
                                if (canReset("n")) doReset("n")
                        },
                        unlocked(){
                                return tmp.n.layerShown || tmp.nu.layerShown
                        },
                },
                {key: "o", description: "O: Reset for Organ", onPress(){
                                if (canReset("or")) doReset("or")
                        },
                        unlocked(){
                                return tmp.or.layerShown
                        },
                },
                {key: "p", description: "P: Reset for Phosphorus", onPress(){
                                if (canReset("p")) doReset("p")
                        },
                        unlocked(){
                                return tmp.p.layerShown
                        },
                },
                {key: "t", description: "T: Reset for Tissues", 
                        onPress(){
                                if (!tmp.t.layerShown) return
                                if (canReset("t")) doReset("t")
                        },
                        unlocked(){
                                return tmp.t.layerShown
                        },
                },
                {key: "x", description: "X: Reset for Chromosomes", 
                        onPress(){
                                if (!tmp.ch.layerShown) return
                                if (canReset("ch")) doReset("ch")
                        },
                        unlocked(){
                                return tmp.ch.layerShown
                        },
                },
                {
                        key: "THIS SHOULD NOT BE POSSIBLE4",
                        description: br + makeBlue("<b>Other</b>:"),
                        onPress(){
                                console.log("oops something went really badly wrong")
                        },
                        unlocked(){
                                return player.tokens.unlocked
                        },
                },
                {key: "b", description(){
                                return "B: Buy Taxonomy level"
                        }, onPress(){
                                if (hasUpgrade("or", 352)) {
                                        if (tmp.an.clickables[11].canClick) layers.an.clickables[11].onClick()
                                } 
                        },
                        unlocked(){
                                return hasUpgrade("or", 352)
                        },
                },
                {key: "g", description: "G: Gamble", 
                        onPress(){
                                if (tmp.mini.clickables[41].canClick) layers.mini.clickables[41].onClick()
                        },
                        unlocked(){
                                return tmp.mini.tabFormat.C.unlocked && tmp.mini.layerShown
                        },
                },
                {key: "s", description: "S: Sell token buyables (only if on said tab)", 
                        onPress(){
                                if (player.tab == "tokens") {
                                        if (["Flat", "Scaling"].includes(player.subtabs.tokens.mainTabs)) {
                                                layers.tokens.buyables[71].buy()
                                        }
                                        if (["Coins"].includes(player.subtabs.tokens.mainTabs)) {
                                                layers.tokens.buyables[81].buy()
                                        }
                                        if (["II"].includes(player.subtabs.tokens.mainTabs)) {
                                                layers.tokens.clickables[11].onClick()
                                        }
                                }
                        },
                        unlocked(){
                                return tmp.tokens.layerShown
                        },
                },
                {
                        key: "v",
                        description(){
                                if (hasAchievement("an", 11)) return "V: Sell one Taxonomy buyable (if not maxed)"
                                return "V: Start Customizable"
                        }, 
                        onPress(){
                                if (hasAchievement("an", 11)) {
                                        let data = player.an.grid
                                        let id = player.an.selectedId
                                        if (data[id].buyables.gte(tmp.an.grid.maxLevels)) return
                                        if (player.an.lastBought == undefined || player.an.hasSoldYet) return
                                        data[id].buyables = data[id].buyables.sub(1).max(0)
                                        let keys = [
                                                101, 102, 103, 104, 105, 106, 107, 108,
                                                202, 203, 204, 205, 206, 207, 208, 
                                                303, 304, 305, 306, 307, 308, 
                                                404, 405, 406, 407, 408, 
                                                505, 506, 507, 508, 
                                                606, 607, 608, 
                                                707, 708, 
                                                808]

                                        for (i in keys) {
                                                data[keys[i]].extras = decimalZero
                                        }
                                        player.an.genes.points = decimalZero
                                        player.an.hasSoldYet = true
                                }
                                if (tmp.l.challenges[12].unlocked && !hasUpgrade("or", 135)){
                                        startChallenge("l", 12)
                                }
                        },
                        unlocked(){
                                return tmp.l.challenges[12].unlocked || hasAchievement("an", 11)
                        },
                },
        ],
        layerShown(){return true},
        prestigeButtonText(){
                return ""
        },
        canReset(){
                return false
        },
        achievements: getFirstNAchData(Object.keys(PROGRESSION_MILESTONES).length),
        clickables: {
                rows: 1,
                cols: 3,
                11: {
                        title(){
                                return "<h3 style='color: #0033FF'>Hide the top row</h3>"
                        },
                        display(){
                                return "Shift: Hides top layers until an unfinished layer"
                        },
                        unlocked(){
                                return true
                        },
                        canClick(){
                                if (player.shiftAlias) return true
                                return player.ach.hiddenRows < Object.keys(PROGRESSION_MILESTONES).length/7
                        },
                        onClick(){
                                if (!this.canClick()) return
                                if (!player.shiftAlias) {
                                        player.ach.hiddenRows ++
                                        return
                                }
                                player.ach.hiddenRows = 0
                                let b = 0
                                while (hasCompletedFirstNRows(player.ach.hiddenRows + 1)) {
                                        b ++ 
                                        player.ach.hiddenRows ++
                                        if (b > 1000) {
                                                console.log('uh oh')
                                                return
                                        }
                                }
                        },
                },
                12: {
                        title(){
                                return "<h3 style='color: #0033FF'>Show a row</h3>"
                        },
                        display(){
                                return "Shift: Show all rows"
                        },
                        unlocked(){
                                return true
                        },
                        canClick(){
                                return player.ach.hiddenRows > 0
                        },
                        onClick(){
                                if (!this.canClick()) return
                                if (player.shiftAlias) player.ach.hiddenRows = 0
                                else player.ach.hiddenRows --
                        },
                },
                13: {
                        title(){
                                return "<h3 style='color: #0033FF'>Click</h3>"
                        },
                        display(){
                                return formatWhole(player.ach.clickedYeet) + (player.ach.clickedYeet == 69 ? " nice" : "")
                        },
                        unlocked(){
                                return true
                        },
                        canClick(){
                                return true
                        },
                        onClick(){
                                player.ach.clickedYeet ++ 
                        },
                },
        },
        tabFormat: {
                "Achievements": {
                        content: [
                                "main-display-goals",
                                "clickables",
                                ["display-text",function(){
                                        return "You have completed the first " + formatWhole(player.ach.completedRows) + " rows"
                                }],
                                "achievements",
                        ],
                        unlocked(){
                                return true
                        },
                },
        },
        doReset(layer){},
})

addLayer("mini", {
        name: "Minigames",
        symbol: "♡", 
        position: 2,
        startData(){ return {
                unlocked: false,
                abtime: 0,
                time: 0,
                autotime: 0,
                a_points: {
                        points: decimalZero,
                        best: decimalZero,
                        extras: {
                                11: decimalOne,
                                12: decimalZero,
                                13: decimalZero,
                                21: decimalZero,
                                23: decimalZero,
                                61: decimalZero,
                                62: decimalZero,
                                63: decimalZero,
                        }
                },
                b_points: {
                        points: decimalZero,
                        best: decimalZero,
                },
                c_points: {
                        points: decimalZero,
                        best: decimalZero,
                        lastRoll: [],
                        lastRollTime: 0,
                        displayCharacters: true,
                },
                d_points: {
                        points: decimalZero,
                        best: decimalZero,
                        fuel: decimalZero,
                        fuelTimer1: 0,
                        fuelTimer2: 0,
                },
                e_points: {
                        points: decimalZero,
                        best: decimalZero,
                },
                autobuytokens: false,
                autobuyradio: false,
        }},
        color: "#7D5D58",
        branches: [],
        requires: decimalZero,
        resource: "Minigames completed",
        tooltip(){
                let tab = player.subtabs.mini.mainTabs
                let data = player.mini
                if (tab == "A") return format(data.a_points.points) + " A Points"
                if (tab == "B") return format(data.b_points.points) + " B Points"
                if (tab == "C") return format(data.c_points.points) + " C Points"
                if (tab == "D") return format(data.d_points.points) + " D Points"
                if (tab == "E") return format(data.e_points.points) + " E Points"
                return ""
        },
        baseResource: "points",
        baseAmount(){return decimalZero},
        type: "custom",
        getResetGain(){
                return decimalZero
        },
        getNextAt(){
                return decimalZero
        },
        update(diff){
                let data = player.mini
                let bpts = data.b_points
                let apts = data.a_points
                let dpts = data.d_points
                let epts = data.e_points
                
                if (hasUpgrade("h", 51) || player.subtabs.mini.mainTabs == "B" && tmp.mini.tabFormat.B.unlocked) {
                        bpts.points = bpts.points.plus(tmp.mini.b_points.getResetGain.times(diff))
                        data.unlocked = true
                }

                if (hasUpgrade("h", 51) || player.subtabs.mini.mainTabs == "A" && tmp.mini.tabFormat.A.unlocked) {
                        //update A minigame
                        let extras = apts.extras
                        if (extras[11].lt(1)) extras[11] = decimalOne
                        let lvls = player.mini.buyables
                        let order = [11,12,13  ,23,63,62  ,61,21,11]
                        let exp = tmp.mini.a_points.getColorGainExp
                        for (i = 0; i < 8; i++){
                                addto = order[i+1]
                                addfrom = order[i]
                                let base = extras[addfrom].pow(exp).div(20).times(Decimal.pow(2, lvls[addfrom]))
                                base = base.times(tmp.mini.a_points.colorGainMult)

                                if (player.extremeMode) base = base.pow(.75)

                                extras[addto] = extras[addto].plus(base.times(diff))
                        }
                        apts.points = apts.points.plus(tmp.mini.a_points.getResetGain.times(diff))
                        data.unlocked = true
                }

                let allABContent = player.l.unlocked || hasMilestone("d", 1)
                
                if (hasUpgrade("h", 51) || allABContent) {
                        let mult = 1
                        if (allABContent || hasUpgrade("h", 52)) mult *= 10
                        if (allABContent || hasUpgrade("h", 62)) mult *= 2
                        data.autotime += diff * mult
                        
                        if (data.autotime > 10) data.autotime = 10
                        if (data.autotime > 1) {
                                data.autotime += -1
                                let list1 = [31, 32, 33, 41, 42, 43, 51, 52, 53]
                                if (allABContent || hasUpgrade("h", 52)) list1 = [11, 12, 13, 21, 23, 61, 62, 63].concat(list1)
                                
                                let bulkAB = decimalOne // a and b 
                                if (player.easyMode || allABContent) {
                                        bulkAB = new Decimal(5e5)
                                } else {
                                        if (hasMilestone("tokens", 3))          bulkAB = bulkAB.times(10)
                                        if (hasMilestone("tokens", 13))         bulkAB = bulkAB.times(5)
                                        if (hasMilestone("n", 1))               bulkAB = bulkAB.times(5)
                                        if (hasMilestone("n", 2))               bulkAB = bulkAB.times(4)
                                        if (hasUpgrade("o", 31))                bulkAB = bulkAB.times(10)
                                        if (hasUpgrade("o", 32))                bulkAB = bulkAB.times(10)
                                        if (hasUpgrade("mini", 85))             bulkAB = bulkAB.times(5)
                                }

                                let canBuyFirst = allABContent || tmp.tokens.layerShown
                                for (i = 0; i < list1.length; i++){
                                        let id = list1[i]
                                        if (!tmp.mini.buyables[id].unlocked) continue
                                        if (id > 30 && id < 50 && !tmp.mini.tabFormat.B.unlocked) continue
                                        if ((id < 30 || id > 60) && !tmp.mini.tabFormat.A.unlocked) continue
                                        if (getBuyableAmount("mini", id).eq(0) && !canBuyFirst) continue
                                        if (tmp.mini.buyables[id].canAfford) {
                                                layers.mini.buyables[id].buy()
                                                let maxaff = tmp.mini.buyables[id].maxAfford
                                                let curr = player.mini.buyables[id]

                                                let buy = bulkAB.sub(1).min(maxaff.sub(curr)).max(0) // how many we can buy
                                                player.mini.buyables[id] = player.mini.buyables[id].plus(buy)
                                                if (!(allABContent || hasUpgrade("h", 52))) break
                                        }
                                }

                                let autobuyCList = []
                                if (allABContent || hasUpgrade("mini", 22)) {
                                        if (tmp.mini.tabFormat.C.unlocked) {
                                                autobuyCList = [71,  72,  73,  81,  82, 
                                                                83,  91,  92,  93, 101,
                                                                102, 103, 111, 112, 113,]
                                        }
                                }

                                let bulkC = decimalOne
                                if (player.easyMode || allABContent) {
                                        bulkC = new Decimal(1e10)
                                        if (player.extremeMode) bulkC = bulkC.times(5)
                                } else {
                                        if (hasUpgrade("mini", 41))     bulkC = bulkC.times(5)
                                        if (hasUpgrade("mini", 44))     bulkC = bulkC.times(2)
                                        if (hasMilestone("n", 2))       bulkC = bulkC.times(5)
                                        if (hasMilestone("n", 4))       bulkC = bulkC.times(4)
                                        if (hasUpgrade("o", 31))        bulkC = bulkC.times(10)
                                        if (hasUpgrade("o", 32))        bulkC = bulkC.times(10)
                                        if (hasUpgrade("mini", 85))     bulkC = bulkC.times(5)
                                        if (hasUpgrade("p", 32))        bulkC = bulkC.times(100)
                                        if (hasUpgrade("mu", 14))       bulkC = bulkC.times(10)
                                        if (hasUpgrade("mu", 34))       bulkC = bulkC.times(100)
                                        if (hasMilestone("p", 1) && player.extremeMode) {
                                                                        bulkC = bulkC.times(5)
                                        }
                                }
                                
                                bulkC = bulkC.sub(1)

                                for (i = 0; i < autobuyCList.length; i++){
                                        let id = autobuyCList[i]
                                        if (!tmp.mini.buyables[id].unlocked) continue
                                        if (!(allABContent || hasMilestone("n", 8)) && getBuyableAmount("mini", id).eq(0)) continue
                                        if (tmp.mini.buyables[id].canAfford) {
                                                layers.mini.buyables[id].buy()
                                                if (bulkC.neq(0) && id != 71) { // cant bulk 71
                                                        let maxAfford = tmp.mini.buyables[id].maxAfford
                                                        let curr = getBuyableAmount("mini", id)
                                                        let add = maxAfford.sub(curr).max(0)
                                                        if (!(allABContent || hasUpgrade("mu", 35))) add = add.min(bulkC)
                                                        player.mini.buyables[id] = player.mini.buyables[id].plus(add)
                                                }
                                                if (!(allABContent || hasUpgrade("tokens", 95))) break
                                        }
                                }

                                let autobuyDList = []
                                if (allABContent || hasUpgrade("mini", 52)) {
                                        autobuyDList = [121, 122, 123, 131, 132, 133]
                                }

                                if (allABContent || hasUpgrade("mini", 53)) {
                                        autobuyDList = [151, 152, 153, 161, 162, 
                                                        163, 171, 172, 173, 181,
                                                        182, 183].concat(autobuyDList)
                                }

                                let bulkD = decimalOne 
                                let allDbulk = allABContent || player.easyMode
                                if (allDbulk || hasUpgrade("mini", 63))     bulkD = bulkD.times(Decimal.pow(1.3, tmp.mini.d_points.getUpgrades).max(0))
                                if (allDbulk || hasUpgrade("mini", 74))     bulkD = bulkD.times(10)
                                if (allDbulk || hasUpgrade("mini", 85))     bulkD = bulkD.times(5)
                                if (allDbulk || hasMilestone("p", 1))       bulkD = bulkD.times(5)
                                if (allDbulk || hasUpgrade("mu", 14))       bulkD = bulkD.times(10)
                                if (allDbulk || hasUpgrade("mu", 34))       bulkD = bulkD.times(100)
                                
                                bulkD = bulkD.sub(1).floor()

                                for (i = 0; i < autobuyDList.length; i++){
                                        let id = autobuyDList[i]
                                        if (!tmp.mini.buyables[id].unlocked) continue
                                        if (!(allABContent || hasMilestone("p", 7)) && getBuyableAmount("mini", id).eq(0)) continue
                                        if (tmp.mini.buyables[id].canAfford) {
                                                layers.mini.buyables[id].buy()
                                                if (bulkD.neq(0)) {
                                                        let maxAfford = tmp.mini.buyables[id].maxAfford
                                                        let curr = getBuyableAmount("mini", id)
                                                        let add = maxAfford.sub(curr).max(0)
                                                        if (!(allABContent || hasUpgrade("mu", 35))) add = add.min(bulkD)
                                                        player.mini.buyables[id] = player.mini.buyables[id].plus(add)
                                                }
                                                if (!(allABContent || hasUpgrade("mini", 61))) break
                                        }
                                }

                                let autobuyEList = []
                                if (allABContent || hasUpgrade("n", 52)) {
                                        autobuyEList = [201, 202, 203, 211, 212, 
                                                 213, 221, 222, 223, 231, 
                                                 232, 233, 241]
                                }

                                let bulkE = decimalOne
                                if (allABContent || player.easyMode) {
                                        bulkE = new Decimal(2e7)
                                } else {
                                        if (hasMilestone("n", 17))      bulkE = bulkE.times(5)
                                        if (hasUpgrade("sci", 364))     bulkE = bulkE.times(2)
                                        if (hasUpgrade("o", 33)) {
                                                if (hasUpgrade("o", 31))                bulkE = bulkE.times(2)
                                                if (hasUpgrade("o", 32))                bulkE = bulkE.times(2)
                                                                                        bulkE = bulkE.times(2)
                                                if (hasUpgrade("o", 34))                bulkE = bulkE.times(2)
                                                if (hasUpgrade("o", 35))                bulkE = bulkE.times(2)
                                        }        
                                        if (hasUpgrade("o", 35))        bulkE = bulkE.times(5)
                                        if (hasUpgrade("mini", 85))     bulkE = bulkE.times(5)
                                        if (hasMilestone("p", 2))       bulkE = bulkE.times(5)
                                        if (hasUpgrade("mu", 14))       bulkE = bulkE.times(10)
                                        if (hasUpgrade("mu", 34))       bulkE = bulkE.times(100)
                                }
                                
                                bulkE = bulkE.sub(1).floor()

                                for (i = 0; i < autobuyEList.length; i++){
                                        let id = autobuyEList[i]
                                        if (id == 201 && !(allABContent || hasMilestone("p", 8))) continue
                                        let canBuyFirst = hasMilestone("l", 2) || allABContent || (hasMilestone("p", 8) && id < 240)
                                        if (!tmp.mini.buyables[id].unlocked) continue
                                        if (!canBuyFirst && getBuyableAmount("mini", id).eq(0)) continue
                                        if (tmp.mini.buyables[id].canAfford) {
                                                layers.mini.buyables[id].buy()
                                                if (bulkE.neq(0) && id != 201) { // cant bulk 201
                                                        let maxAfford = tmp.mini.buyables[id].maxAfford
                                                        let curr = getBuyableAmount("mini", id)
                                                        let add = maxAfford.sub(curr).max(0)
                                                        if (!(allABContent || hasUpgrade("mu", 35))) add = add.min(bulkE)
                                                        player.mini.buyables[id] = player.mini.buyables[id].plus(add)
                                                }
                                                if (!(allABContent || hasUpgrade("n", 54))) break
                                        }
                                }
                        }
                } else {
                        data.autotime = 0
                }

                if (!tmp.mini.tabFormat.C.unlocked) player.mini.c_points.lastRollTime = 0
                else player.mini.c_points.lastRollTime += diff
                if (hasUpgrade("mini", 12)) {
                        let timeSinceLast = player.mini.c_points.lastRollTime 
                        if (timeSinceLast >= tmp.mini.upgrades[12].timeNeeded) {
                                layers.mini.clickables[41].onClick()
                        }
                }

                if (tmp.tokens.buyables[11].canAfford) {
                        let buy = player.cells.unlocked
                        if (player.tokens.autobuyradio && hasMilestone("n", 7)) buy = true
                        if (layers.l.grid.getGemEffect(803)) buy = true
                        if (hasUpgrade("cells", 42)) buy = false
                        if (buy) layers.tokens.buyables[11].buy(true)
                }

                if (tmp.mini.tabFormat.D.unlocked) {
                        dpts.fuel = dpts.fuel.times(Decimal.pow(.99, diff))
                        if (hasUpgrade("mini", 54)) {
                                dpts.fuel = dpts.fuel.plus(tmp.mini.d_points.getMaximumFuel.times(.002).times(diff))
                        }
                        dpts.best = dpts.best.max(dpts.points)
                        dpts.points = dpts.points.plus(tmp.mini.d_points.getPointProduction.times(diff))
                        if (hasUpgrade("mini", 51)) dpts.fuelTimer1 = dpts.fuelTimer1 + diff
                        if (hasUpgrade("mini", 52)) dpts.fuelTimer2 = dpts.fuelTimer2 + diff
                        if (dpts.fuelTimer1 > 10) {
                                dpts.fuelTimer1 -= 10
                                if (dpts.fuelTimer1 > 10) dpts.fuelTimer1 = 10
                                layers.mini.clickables[51].onClick()
                        }
                        if (dpts.fuelTimer2 > 11) {
                                dpts.fuelTimer2 -= 11
                                if (dpts.fuelTimer2 > 11) dpts.fuelTimer2 = 11
                                layers.mini.clickables[51].onClick()
                        }
                }

                if (tmp.mini.tabFormat.E.unlocked) {
                        epts.best = epts.best.max(epts.points)
                        epts.points = epts.points.plus(tmp.mini.e_points.getPointProduction.times(diff))
                }
        },
        row: "side",
        layerShown(){
                if (tmp.mini.deactivated) return false
                return hasUpgrade("h", 45) || hasUpgrade("h", 44) || player.n.unlocked
        },
        prestigeButtonText(){
                return ""
        },
        canReset(){
                return false
        },
        shouldNotify(){
                let data = tmp.mini.tabFormat
                let x = ["A", "B", "C", "D", "E"]
                for (id in x){
                        i = x[id]
                        if (!data[i].unlocked) continue
                        if (data[i].shouldNotify) return true
                }
                return false
        },
        a_points: {
                getGainMult(){ // apoint gain a point gain apt gain a pt gain
                        let ret = decimalOne

                        if (player.dev.aPointMult != undefined) ret = ret.times(player.dev.aPointMult)

                        if (player.hardMode)            ret = ret.div(100)
                        if (hasUpgrade("h", 51))        ret = ret.times(1e5)
                                                        ret = ret.times(tmp.mini.buyables[12].effect)
                                                        ret = ret.times(tmp.mini.buyables[62].effect)
                                                        ret = ret.times(tmp.mini.buyables[51].effect)
                                                        ret = ret.times(tmp.tokens.buyables[31].effect)
                        if (hasMilestone("n", 3))       ret = ret.times(100)
                        if (hasUpgrade("mini", 45))     ret = ret.times(player.mini.c_points.points.max(1))
                                                        ret = ret.times(tmp.p.effect)
                                                        ret = ret.times(tmp.l.effect)
                        if (player.easyMode)            ret = ret.times(4)
                        if (hasUpgrade("sci", 15))      ret = ret.times(tmp.sci.upgrades[15].effect)
                                                        ret = ret.times(tmp.sci.buyables[22].effect)
                        if (hasUpgrade("sci", 301))     ret = ret.times(tmp.sci.upgrades[301].effect)

                        if (player.easyMode)            ret = ret.pow(1.001)

                        return ret
                },
                getResetGain(){
                        if (inChallenge("n", 41)) return decimalZero
                        let apts = player.mini.a_points
                        let extras = apts.extras
                        let lvls = player.mini.buyables
                        let order = [11,12,13  ,23,63,62  ,61,21]
                        let a = decimalOne
                        for (i = 0; i < 8; i++){
                                a = a.times(extras[order[i]].plus(1))
                        }
                        let ret = a.sub(1).times(tmp.mini.a_points.getGainMult)

                        ret =                           ret.pow(tmp.tokens.buyables[61].effect)
                        if (hasUpgrade("n", 11))        ret = ret.pow(1.001)
                        if (hasUpgrade("n", 12))        ret = ret.pow(1.02)
                        if (hasMilestone("l", 1))       ret = ret.pow(tmp.l.milestones[1].effect)

                        if (hasMilestone("tokens", 9))  ret = ret.times(player.mini.b_points.points.plus(1).pow(.1))

                        if (player.extremeMode)         ret = ret.pow(.75)

                        if (inChallenge("l", 11))       ret = dilate(ret, tmp.l.challenges[11].challengeEffect)

                        return ret
                },
                getColorGainExp(){ // color gain exponent color gain exp
                        let exp = hasUpgrade("h", 54) ? .52 : .5
                        if (hasUpgrade("h", 55))        exp += player.extremeMode ? .05 : .004
                        if (hasUpgrade("c", 12))        exp += tmp.c.upgrades[12].effect.toNumber()
                                                        exp += tmp.tokens.buyables[63].effect.toNumber()
                        if (hasMilestone("tokens", 4))  exp += .05
                        if (hasUpgrade("o", 32))        exp += .08

                        return exp
                },
                colorGainMult(){ // color gain
                        let ret = decimalOne

                                                        ret = ret.times(tmp.tokens.buyables[33].effect)
                                                        ret = ret.times(tmp.n.effect)
                                                        ret = ret.times(player.mini.b_points.points.plus(10).log10().plus(9).log10())
                                                        ret = ret.times(tmp.l.effect)
                                                        ret = ret.times(tmp.sci.buyables[102].effect)
                        if (hasUpgrade("sci", 104))     ret = ret.times(player.sci.oxygen_science.points.max(1))
                        if (hasMilestone("l", 1))       ret = ret.pow(tmp.l.milestones[1].effect)

                        if (inChallenge("l", 11))       ret = dilate(ret, tmp.l.challenges[11].challengeEffect)

                        return ret
                },
        },
        b_points: {
                getResetGain(){ // bpoint gain b point gain b pt gain bpt gain
                        let ret = decimalOne

                        if (player.dev.bPointMult != undefined) ret = ret.times(player.dev.bPointMult)

                        if (player.hardMode)            ret = ret.div(3)

                                                        ret = ret.times(tmp.mini.buyables[31].effect)
                                                        ret = ret.times(tmp.mini.buyables[32].effect)
                                                        ret = ret.times(tmp.mini.buyables[41].effect)
                                                        ret = ret.times(tmp.mini.buyables[42].effect)
                                                        ret = ret.times(tmp.tokens.buyables[32].effect)
                        if (hasUpgrade("o", 21))        ret = ret.times(player.h.points.max(1))
                        if (hasUpgrade("mini", 42))     ret = ret.times(player.mini.c_points.points.max(1))
                        if (hasMilestone("n", 3))       ret = ret.times(100)
                                                        ret = ret.times(tmp.p.effect)
                                                        ret = ret.times(tmp.l.effect)
                        if (player.easyMode)            ret = ret.times(4)
                        if (hasUpgrade("sci", 14))      ret = ret.times(tmp.sci.upgrades[14].effect)
                        if (hasMilestone("mini", 6))    ret = ret.times(player.h.points.max(1).cbrt())
                        if (hasUpgrade("sci", 104))     ret = ret.times(player.sci.oxygen_science.points.max(1))
                                                        ret = ret.times(tmp.sci.buyables[112].effect)

                        if (player.easyMode)            ret = ret.pow(1.001)
                        if (hasUpgrade("o", 13))        ret = ret.pow(tmp.o.upgrades[13].effect)
                                                        ret = ret.pow(tmp.tokens.buyables[62].effect)
                        if (hasUpgrade("n", 11))        ret = ret.pow(1.001)
                        if (hasUpgrade("n", 13))        ret = ret.pow(1.02)
                        if (hasMilestone("l", 1))       ret = ret.pow(tmp.l.milestones[1].effect)

                        if (hasMilestone("tokens", 8))  ret = ret.times(player.mini.a_points.points.plus(1).pow(.1))

                        if (player.extremeMode)         ret = ret.pow(.75)

                        if (inChallenge("l", 11))       ret = dilate(ret, tmp.l.challenges[11].challengeEffect)

                        return ret
                },
        },
        c_points: {
                getGainMult(){ // cpoint gain c point gain cpt gain
                        let ret = decimalOne

                        if (player.dev.cPointMult != undefined) ret = ret.times(player.dev.cPointMult)

                        if (player.hardMode)            ret = ret.div(4)
                                                        ret = ret.times(tmp.mini.buyables[72].effect)
                                                        ret = ret.times(tmp.mini.buyables[73].effect)
                                                        ret = ret.times(tmp.mini.buyables[82].effect)
                                                        ret = ret.times(tmp.mini.buyables[83].effect)
                                                        ret = ret.times(tmp.mini.buyables[92].effect)
                                                        ret = ret.times(tmp.mini.buyables[93].effect)
                                                        ret = ret.times(tmp.mini.buyables[102].effect)
                                                        ret = ret.times(tmp.mini.buyables[103].effect)
                                                        ret = ret.times(tmp.mini.buyables[112].effect)
                                                        ret = ret.times(tmp.mini.buyables[113].effect)
                                                        ret = ret.times(tmp.n.effect)
                        if (hasMilestone("n", 1))       ret = ret.times(Decimal.pow(10, player.n.milestones.length ** 2))
                        if (hasMilestone("n", 3))       ret = ret.times(100)
                        if (hasUpgrade("mini", 13))     ret = ret.times(tmp.tokens.buyables[23].effect.max(10).log10())
                        if (hasUpgrade("mini", 14))     ret = ret.times(player.points.max(10).log10())
                        if (hasUpgrade("mini", 15))     ret = ret.times(player.mini.b_points.points.max(10).log10())
                        if (hasUpgrade("mini", 22))     ret = ret.times(player.h.points.max(10).log10())
                        if (hasUpgrade("mini", 32))     ret = ret.times(player.mini.c_points.points.max(1).pow(.01))
                        if (hasUpgrade("mini", 34))     ret = ret.times(player.mini.c_points.points.max(1).pow(.01))
                        if (hasUpgrade("tokens", 92))   ret = ret.times(player.mini.c_points.points.max(1).pow(.01))
                        if (hasUpgrade("mini", 35))     ret = ret.times(Decimal.pow(50, player.mini.upgrades.length))
                        if (hasUpgrade("n", 23))        ret = ret.times(tmp.n.upgrades[23].effect)
                        if (hasUpgrade("mini", 64))     ret = ret.times(player.mini.d_points.points.max(1))
                                                        ret = ret.times(tmp.p.effect)
                                                        ret = ret.times(tmp.l.effect)
                        if (player.easyMode)            ret = ret.times(4)

                        if (hasUpgrade("sci", 125))     ret = ret.times(tmp.sci.effect)
                        if (hasUpgrade("sci", 201))     ret = ret.times(tmp.sci.upgrades[201].effect)
                        if (hasUpgrade("sci", 212))     ret = ret.times(player.sci.carbon_science.points.max(1))
                        if (hasUpgrade("sci", 213))     ret = ret.times(tmp.sci.upgrades[213].effect)
                        if (hasUpgrade("sci", 234))     ret = ret.times(player.mini.c_points.points.max(1).pow(.001 * tmp.sci.upgrades.carbonUpgradesLength))

                        if (player.extremeMode)         ret = ret.pow(.75)
                        if (player.easyMode)            ret = ret.pow(1.001)
                        if (hasUpgrade("n", 11))        ret = ret.pow(1.001)
                        if (hasUpgrade("n", 22))        ret = ret.pow(Decimal.pow(1.0002, player.n.upgrades.length))
                        if (hasMilestone("l", 1))       ret = ret.pow(tmp.l.milestones[1].effect)

                        if (inChallenge("l", 11))       ret = dilate(ret, tmp.l.challenges[11].challengeEffect)

                        return ret
                },
        },
        d_points: {
                getPointProduction(){
                        let mult = tmp.mini.d_points.getGainMult

                        let ret = tmp.mini.d_points.getFuelMultiplier.times(mult)

                        if (hasMilestone("l", 1))       ret = ret.pow(tmp.l.milestones[1].effect)

                        if (inChallenge("l", 11))       ret = dilate(ret, tmp.l.challenges[11].challengeEffect)

                        return ret
                },
                getGainMult(){ // dpoint gain d point gain dpt gain dptgain
                        let ret = decimalOne

                        if (player.dev.dPointMult != undefined) ret = ret.times(player.dev.dPointMult)

                        if (player.hardMode)            ret = ret.div(4)
                                                        ret = ret.times(tmp.mini.buyables[151].effect)
                                                        ret = ret.times(tmp.mini.buyables[152].effect)
                                                        ret = ret.times(tmp.mini.buyables[153].effect)
                                                        ret = ret.times(tmp.mini.buyables[161].effect)
                                                        ret = ret.times(tmp.mini.buyables[162].effect)
                                                        ret = ret.times(tmp.mini.buyables[163].effect)
                                                        ret = ret.times(tmp.mini.buyables[171].effect)
                                                        ret = ret.times(tmp.mini.buyables[172].effect)
                                                        ret = ret.times(tmp.mini.buyables[173].effect)
                                                        ret = ret.times(tmp.mini.buyables[181].effect)
                                                        ret = ret.times(tmp.mini.buyables[182].effect)
                                                        ret = ret.times(tmp.mini.buyables[183].effect)
                        if (hasUpgrade("mini", 54))     ret = ret.times(player.n.points.max(1))
                        if (hasUpgrade("mini", 65))     ret = ret.times(3)
                        if (hasUpgrade("mini", 52))     ret = ret.times(2)
                        if (hasUpgrade("n", 33))        ret = ret.times(player.mini.d_points.fuel.max(1).pow(.001))
                        if (hasUpgrade("n", 55))        ret = ret.times(player.mini.e_points.points.max(1).min("1e50000"))
                        if (hasUpgrade("mini", 83))     ret = ret.times(player.mini.e_points.points.max(1).pow(.1))
                                                        ret = ret.times(tmp.p.effect.min("1ee7"))
                        if (hasUpgrade("p", 22))        ret = ret.times(player.mini.e_points.points.max(1).pow(.05 * player.p.upgrades.length))
                        if (hasMilestone("mu", 3))      ret = ret.times(player.mini.e_points.points.max(1))
                                                        ret = ret.times(tmp.l.effect)
                        if (player.easyMode)            ret = ret.times(4)
                        if (hasUpgrade("sci", 312))     ret = ret.times(tmp.sci.upgrades[312].effect)
                        if (hasUpgrade("sci", 314))     ret = ret.times(player.sci.nitrogen_science.points.plus(10).log10().min(1e20))
                        if (hasUpgrade("sci", 321))     ret = ret.times(tmp.sci.upgrades[321].effect)
                        if (hasMilestone("l", 1))       ret = ret.times(10)

                        if (player.extremeMode)         ret = ret.pow(.75)

                        return ret
                },
                getEffectiveFuelLogBase(){
                        let ret = 10
                        if (hasUpgrade("mini", 71)) ret ++
                        if (hasUpgrade("mini", 72)) ret ++

                        ret = new Decimal(ret)

                        if (hasChallenge("n", 41))      ret = ret.plus(tmp.n.challenges[41].rewardEffect)
                                                        ret = ret.plus(tmp.mini.buyables[133].effect)
                        if (hasUpgrade("n", 54))        ret = ret.plus(tmp.mini.buyables[221].effect)

                        return ret 
                },
                getEffectiveFuel(){ // returns the value of fuel for pt gain
                        let amt = player.mini.d_points.fuel.div(10)

                        if (amt.lt(1)) return amt
                        
                        let logBase = tmp.mini.d_points.getEffectiveFuelLogBase // how often we square root

                        let times = amt.log(logBase).plus(1).log(2).floor()
                        // how many times to square root the final thing
                        let a = Decimal.pow(2, times)

                        let mult_main = Decimal.pow(logBase, times)
                        let mult_extra = amt.div(Decimal.pow(logBase, a.sub(1))).root(a)

                        return mult_main.times(mult_extra)
                },
                getEffectiveFuelAux(){
                        let eff = tmp.mini.d_points.getEffectiveFuel
                        
                        let ret = eff.cbrt().div(100)
                        if (ret.gt(1e4)) ret = ret.log10().plus(6).pow(4)

                        return ret
                },
                getLin(){
                        return decimalOne.plus(tmp.mini.buyables[121].effect)

                },
                getQuad(){
                        let ret = decimalZero
                        if (hasUpgrade("mini", 53))     ret = ret.plus(.01)
                                                        ret = ret.plus(tmp.mini.buyables[131].effect)
                        return ret
                },
                getExp1(){
                        return decimalOne.plus(tmp.mini.buyables[132].effect)
                },
                getFuelMultiplier(){
                        let data = tmp.mini.d_points
                        let eff = data.getEffectiveFuel

                        let lin  = data.getLin
                        let quad = data.getQuad // quadratic term
                        let exp1 = data.getExp1 // base of the exponential

                        let y = data.getEffectiveFuelAux

                        let mult1 = eff.pow(1).times(lin)
                        let mult2 = eff.pow(2).times(quad)
                        let mult3 = Decimal.pow(exp1, y)

                        return mult1.plus(mult2).times(mult3)
                },
                getMaximumFuel(){
                        let ret = new Decimal(100)

                        ret = ret.times(tmp.mini.buyables[122].effect)
                        ret = ret.times(tmp.mini.buyables[123].effect)
                        if (hasUpgrade("n", 34)) {
                                let exp = new Decimal(.01).times(player.n.upgrades.length)
                                ret = ret.times(Decimal.pow(player.mini.d_points.points.max(1), exp))
                        }

                        return ret
                },
                getUpgrades(){
                        let a = 0
                        let x = player.mini.upgrades
                        for (i in x) {
                                if (x[i] > 50) a ++
                        }
                        return a
                },
        },
        e_points: {
                getGainMult(){ // epoint gain e point gain ept gain e pt gain
                        let ret = decimalOne

                        if (player.dev.ePointMult != undefined) ret = ret.times(player.dev.ePointMult)

                        if (player.hardMode)            ret = ret.div(4)
                                                        ret = ret.times(tmp.mini.buyables[213].effect)
                                                        ret = ret.times(tmp.mini.buyables[223].effect)
                                                        ret = ret.times(tmp.mini.buyables[233].effect)
                                                        ret = ret.times(tmp.mini.buyables[241].effect)
                        if (hasUpgrade("p", 12))        ret = ret.times(tmp.mini.buyables[183].effect)
                        if (hasUpgrade("n", 41))        ret = ret.times(player.n.points.max(10).log10())
                        if (hasUpgrade("o", 35))        ret = ret.times(player.n.points.max(1).pow(.26))
                        if (hasUpgrade("n", 45)) {
                                l = player.mini.buyables[221].sub(21).max(0)
                                let base = 1
                                if (hasUpgrade("n", 51)) {
                                        base ++
                                        if (hasUpgrade("n", 52)) base ++
                                        if (hasUpgrade("n", 53)) base ++
                                        if (hasUpgrade("n", 54)) base ++
                                        if (hasUpgrade("n", 55)) base ++
                                                        ret = ret.times(Decimal.pow(2, base-1))
                                }
                                                        ret = ret.times(Decimal.pow(2, l.times(base)))
                                                        ret = ret.times(player.mini.e_points.points.max(10).log10())
                        }
                        if (hasUpgrade("mini", 84))     ret = ret.times(Decimal.pow(1.02, getBuyableAmount("mini", 222)))
                                                        ret = ret.times(tmp.p.effect.min("1ee6"))
                        if (hasMilestone("p", 3))       ret = ret.times(player.mini.e_points.points.max(1).pow(.001))
                        if (hasUpgrade("p", 23)) {
                                let base = 1 + player.p.upgrades.length/10
                                let exp = getBuyableAmount("mini", 212)
                                                        ret = ret.times(Decimal.pow(base, exp))
                        }
                        if (hasUpgrade("mu", 11))       ret = ret.times(player.mu.points.plus(10).log10().pow(getBuyableAmount("mini", 202)))
                                                        ret = ret.times(tmp.l.effect)
                        if (hasMilestone("l", 1))       ret = ret.times(10)
                        if (player.easyMode)            ret = ret.times(4)
                        if (hasUpgrade("sci", 344))     ret = ret.times(player.mini.d_points.points.max(10).ln().ln().max(1).ln().max(1))
                        if (hasUpgrade("sci", 352))     ret = ret.times(Decimal.pow(3, tmp.sci.upgrades[352].levels))
                        if (hasUpgrade("sci", 355) && !player.p.unlocked) {
                                                        ret = ret.div(20)
                        }
                        if (hasUpgrade("sci", 361))     ret = ret.times(tmp.sci.upgrades[361].effect)
                        if (hasUpgrade("sci", 363))     ret = ret.times(tmp.sci.upgrades[363].effect)
                                                        ret = ret.times(tmp.sci.buyables[302].effect)

                        if (hasMilestone("l", 1))       ret = ret.pow(tmp.l.milestones[1].effect)

                        if (inChallenge("l", 11))       ret = dilate(ret, tmp.l.challenges[11].challengeEffect)

                        return ret
                },
                getRecursionValue(){
                        let data = tmp.mini.e_points

                        let a = data.getA.div(10000)
                        let b = data.getB
                        let c = data.getC
                        let d = data.getD
                        let iter = data.getMaxInterations

                        let f = function(x){
                                return a.times(x).plus(b).times(x).plus(c).times(x).plus(d)
                        }

                        if (iter <= 5) return recurse(f, decimalZero, iter)
                        let init = recurse(f, decimalZero, 5)
                        // assume only a and iterations matter from now on
                        let rem = iter - 5
                        let levelsOfA = Decimal.pow(3, rem).sub(1).div(2)
                        let aComponent = a.pow(levelsOfA)

                        return init.pow(Decimal.pow(3, rem)).times(aComponent)
                },
                getPointProduction(){
                        let data = tmp.mini.e_points

                        let ret = data.getRecursionValue.times(data.getGainMult)
                        
                        if (player.extremeMode)         ret = ret.pow(.75)

                        return ret
                },
                getA(){
                        let ret = decimalZero

                        if (hasUpgrade("n", 42)) ret = ret.plus(.1)
                        if (hasUpgrade("n", 43)) ret = ret.plus(.1)
                        if (hasUpgrade("n", 44)) ret = ret.plus(player.mini.buyables[222].times(.01))

                        if (hasUpgrade("o", 33) && ret.gt(1)) ret = ret.pow(2) 
                        if (hasUpgrade("p", 25) && ret.gt(1)) ret = ret.pow(2)
                        if (hasUpgrade("p", 31) && ret.gt(1)) ret = ret.pow(2)

                        return ret
                },
                getB(){
                        let ret = decimalZero

                        ret = ret.plus(tmp.mini.buyables[211].effect)
                        if (hasMilestone("mu", 5)) ret = ret.times(player.mu.points.max(1).pow(10))

                        return ret
                },
                getC(){
                        return decimalOne.plus(tmp.mini.buyables[203].effect).times(tmp.mini.buyables[231].effect)
                },
                getD(){
                        return decimalOne.plus(tmp.mini.buyables[202].effect)
                },
                getMaxInterations(){
                        let ret = 1

                        ret += tmp.mini.buyables[201].effect.toNumber()
                        if (hasUpgrade("sci", 365)) ret += 1

                        return ret
                },
        },
        buyables: {
                rows: 25,
                cols: 3,
                11: {
                        title: "<bdi style='color:#FF0000'>Red</bdi>",
                        cost(){
                                let exp = Decimal.pow(getBuyableAmount("mini", 11), 1.2)
                                let init = new Decimal(20)
                                if (hasUpgrade("sci", 25) || player.sci.everhasnsci2) init = decimalOne
                                return init.times(Decimal.pow(1e3, exp))
                        },
                        canAfford:() => player.mini.a_points.points.gte(tmp.mini.buyables[11].cost) && getBuyableAmount("mini", 11).lt(5000),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[11] = player.mini.buyables[11].plus(1)
                                player.mini.a_points.points = player.mini.a_points.points.sub(tmp.mini.buyables[11].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(20)
                                if (hasUpgrade("sci", 25) || player.sci.everhasnsci2) div = decimalOne
                                let base = 1e3
                                let exp = 1.2
                                let pts = player.mini.a_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1).min(5000)
                        },
                        base(){
                                if (inChallenge("n", 11)) return decimalOne
                                return new Decimal(2).plus(tmp.mini.buyables[23].effect)
                        },
                        effect(){
                                return tmp.mini.buyables[11].base.pow(player.mini.buyables[11])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.mini.buyables[11]) + "</b><br>"
                                        let amt = "<b><h2>Amount</h2>: " + format(player.mini.a_points.extras[11]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[11].effect) + " to Atomic Hydrogen gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 11)) + " A Points</b><br>"

                                        return br + lvl + amt + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.mini.buyables[11].base) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(20)*(1e3^x<sup>1.2</sup>)" 
                                if (hasUpgrade("sci", 25) || player.sci.everhasnsci2) cost2 = "1e3^x<sup>1.2</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                12: {
                        title: "<bdi style='color:#FF9933'>Orange</bdi>",
                        cost() {
                                let exp = Decimal.pow(getBuyableAmount("mini", 12), 1.1)
                                let init = new Decimal(player.extremeMode ? 3e18 : 1e20)
                                if (hasUpgrade("sci", 22) || player.sci.everhasnsci2) init = decimalOne
                                let base = player.extremeMode ? 1e4 : 1e9
                                return init.times(Decimal.pow(base, exp))
                        },
                        canAfford:() => player.mini.a_points.points.gte(tmp.mini.buyables[12].cost) && getBuyableAmount("mini", 12).lt(5000),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[12] = player.mini.buyables[12].plus(1)
                                player.mini.a_points.points = player.mini.a_points.points.sub(tmp.mini.buyables[12].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(1e20)
                                let base = 1e9
                                if (player.extremeMode) {
                                        base = 1e4
                                        div = new Decimal(3e18)
                                }
                                if (hasUpgrade("sci", 22) || player.sci.everhasnsci2) div = decimalOne
                                let exp = 1.1
                                let pts = player.mini.a_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1).min(5000)
                        },
                        base(){
                                if (inChallenge("n", 11)) return decimalOne
                                return new Decimal(2).plus(tmp.mini.buyables[23].effect)
                        },
                        effect(){
                                return tmp.mini.buyables[12].base.pow(player.mini.buyables[12])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.mini.buyables[12]) + "</b><br>"
                                        let amt = "<b><h2>Amount</h2>: " + format(player.mini.a_points.extras[12]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[12].effect) + " to A Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 12)) + " A Points</b><br>"

                                        return br + lvl + amt + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.mini.buyables[12].base) + "^x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e20)*(1e9^x<sup>1.1</sup>)" 
                                if (player.extremeMode) cost2 = "(3e18)*(1e4^x<sup>1.1</sup>)"
                                if (hasUpgrade("sci", 22) || player.sci.everhasnsci2) cost2 = "1e4^x<sup>1.1</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                13: {
                        title: "<bdi style='color:#FFFF00'>Yellow</bdi>",
                        cost(){
                                let init = new Decimal(1e6)
                                if (hasMilestone("mini", 9) || player.sci.everhasnsci2) init = decimalOne
                                return init.times(Decimal.pow(1e6, Decimal.pow(getBuyableAmount("mini", 13), 1.2)))
                        },
                        canAfford:() => player.mini.a_points.points.gte(tmp.mini.buyables[13].cost) && getBuyableAmount("mini", 13).lt(5000),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[13] = player.mini.buyables[13].plus(1)
                                player.mini.a_points.points = player.mini.a_points.points.sub(tmp.mini.buyables[13].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(1e6)
                                if (hasMilestone("mini", 9) || player.sci.everhasnsci2) div = decimalOne
                                let base = 1e6
                                let exp = 1.2
                                let pts = player.mini.a_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1).min(5000)
                        },
                        base(){
                                if (inChallenge("n", 11)) return decimalOne
                                return new Decimal(2).plus(tmp.mini.buyables[23].effect)
                        },
                        effect(){
                                return tmp.mini.buyables[13].base.pow(player.mini.buyables[13])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.mini.buyables[13]) + "</b><br>"
                                        let amt = "<b><h2>Amount</h2>: " + format(player.mini.a_points.extras[13]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[13].effect) + " to Deuterium</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 13)) + " A Points</b><br>"

                                        return br + lvl + amt + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.mini.buyables[13].base) + "^x" 
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e6)*(1e6^x<sup>1.2</sup>)" 
                                if (hasMilestone("mini", 9) || player.sci.everhasnsci2) cost2 = "1e6^x<sup>1.2</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                21: {
                        title: "<bdi style='color:#FFFFFF'>White</bdi>",
                        cost(){
                                let exp = Decimal.pow(getBuyableAmount("mini", 21), 1.1)
                                let init = new Decimal(player.extremeMode ? 1e14 : 1e300)
                                let base = new Decimal(player.extremeMode ? 1e5 : 1e30)
                                if (hasUpgrade("sci", 24) || player.sci.everhasnsci2) init = decimalOne
                                return init.times(Decimal.pow(base, exp))
                        },
                        canAfford:() => player.mini.a_points.points.gte(tmp.mini.buyables[21].cost) && getBuyableAmount("mini", 21).lt(5000),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[21] = player.mini.buyables[21].plus(1)
                                player.mini.a_points.points = player.mini.a_points.points.sub(tmp.mini.buyables[21].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(1e300)
                                let base = 1e30
                                if (player.extremeMode) {
                                        init = new Decimal(1e14)
                                        base = new Decimal(1e5)
                                }
                                let exp = 1.1
                                if (hasUpgrade("sci", 24) || player.sci.everhasnsci2) div = decimalOne
                                let pts = player.mini.a_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1).min(5000)
                        },
                        initBase(){
                                if (inChallenge("n", 11)) return decimalZero
                                return new Decimal(2)
                        },
                        base(){
                                let ret = tmp.mini.buyables[21].initBase
                                if (hasUpgrade("h", 53)) {
                                        let a = 1
                                        if (hasUpgrade("h", 64)) a ++
                                        ret = ret.times(player.mini.buyables[21].max(1).ln().max(1).pow(a))
                                }
                                return ret
                        },
                        effect(){
                                return tmp.mini.buyables[21].base.times(player.mini.buyables[21])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.mini.buyables[21]) + "</b><br>"
                                        let amt = "<b><h2>Amount</h2>: " + format(player.mini.a_points.extras[21]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.mini.buyables[21].effect) + " to <bdi style='color:#CC0033'>A</bdi></b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 21)) + " A Points</b><br>"

                                        return br + lvl + amt + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "2*x"
                                if (hasUpgrade("h", 53)) eformula = "2*x*ln(x)"
                                if (hasUpgrade("h", 64)) eformula = "2*x*(ln(x))^2"

                                eformula = eformula.replace("2", format(tmp.mini.buyables[21].initBase))
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e300)*(1e30^x<sup>1.1</sup>)" 
                                if (player.extremeMode) cost2 = "(1e14)*(1e5^x<sup>1.1</sup>)"
                                if (hasUpgrade("sci", 24) || player.sci.everhasnsci2) cost2 = "1e5^x<sup>1.1</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                23: {
                        title: "<bdi style='color:#33CC33'>Green</bdi>",
                        cost() {
                                let init = new Decimal(player.extremeMode ? 5e29 : 1e31)
                                if (hasMilestone("mini", 11) || player.sci.everhasnsci2) init = decimalOne
                                return init.times(Decimal.pow(1e11, Decimal.pow(getBuyableAmount("mini", 23), 1.1)))
                        },
                        canAfford:() => player.mini.a_points.points.gte(tmp.mini.buyables[23].cost) && getBuyableAmount("mini", 23).lt(5000),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[23] = player.mini.buyables[23].plus(1)
                                player.mini.a_points.points = player.mini.a_points.points.sub(tmp.mini.buyables[23].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(1e31)
                                if (player.extremeMode) div = new Decimal(5e29)
                                if (hasMilestone("mini", 11) || player.sci.everhasnsci2) div = decimalOne
                                let base = 1e11
                                let exp = 1.1
                                let pts = player.mini.a_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1).min(5000)
                        },
                        base(){
                                if (inChallenge("n", 11)) return decimalZero
                                let ret = decimalOne
                                if (hasUpgrade("h", 64)) ret = ret.times(player.mini.buyables[23].max(1).log10().max(1))
                                return ret
                        },
                        effect(){
                                return tmp.mini.buyables[23].base.times(player.mini.buyables[23])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.mini.buyables[23]) + "</b><br>"
                                        let amt = "<b><h2>Amount</h2>: " + format(player.mini.a_points.extras[23]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.mini.buyables[23].effect) + " to Red, Orange, and Yellow base</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 23)) + " A Points</b><br>"

                                        return br + lvl + amt + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "x"
                                if (hasUpgrade("h", 64)) eformula = "log10(x)*x<br>" + format(getBuyableBase("mini", 23)) + "*x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e31)*(1e11^x<sup>1.1</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("1e31", "5e29")
                                if (hasMilestone("mini", 11) || player.sci.everhasnsci2) cost2 = "1e11^x<sup>1.1</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                61: {
                        title: "<bdi style='color:#660099'>Violet</bdi>",
                        cost(){
                                let base = player.extremeMode ? 1e5 : 1e10
                                let init = new Decimal(1e15)
                                if (hasMilestone("mini", 10) || player.sci.everhasnsci2) init = decimalOne
                                let exp = Decimal.pow(getBuyableAmount("mini", 61), 1.1)
                                return init.times(Decimal.pow(base, exp))
                        },
                        canAfford:() => player.mini.a_points.points.gte(tmp.mini.buyables[61].cost) && getBuyableAmount("mini", 61).lt(5000),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[61] = player.mini.buyables[61].plus(1)
                                player.mini.a_points.points = player.mini.a_points.points.sub(tmp.mini.buyables[61].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(1e15)
                                let base = 1e10
                                if (player.extremeMode) {
                                        base = 1e5
                                        if (hasMilestone("mini", 10) || player.sci.everhasnsci2) div = decimalOne
                                }
                                let exp = 1.1
                                let pts = player.mini.a_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1).min(5000)
                        },
                        base(){
                                if (inChallenge("n", 11)) return decimalOne
                                let ret = new Decimal(3)
                                if (hasUpgrade("h", 52)) ret = ret.plus(1)
                                ret = ret.plus(tmp.mini.buyables[52].effect)
                                return ret
                        },
                        effect(){
                                return tmp.mini.buyables[61].base.pow(player.mini.buyables[61])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.mini.buyables[61]) + "</b><br>"
                                        let amt = "<b><h2>Amount</h2>: " + format(player.mini.a_points.extras[61]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[61].effect) + " to Life Points</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 61)) + " A Points</b><br>"

                                        return br + lvl + amt + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.mini.buyables[61].base) + "^x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e15)*(1e10^x<sup>1.1</sup>)"
                                if (player.extremeMode) cost2 = cost2.replace("10", "5") 
                                if (hasMilestone("mini", 10) || player.sci.everhasnsci2) cost2 = "1e10^x<sup>1.1</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                62: {
                        title: "<bdi style='color:#333399'>Indigo</bdi>",
                        cost(){ 
                                let exp = Decimal.pow(getBuyableAmount("mini", 62), 1.15)
                                let init = new Decimal(player.extremeMode ? 1e28 : 1e33)
                                if (hasUpgrade("sci", 23) || player.sci.everhasnsci2) init = decimalOne
                                let base = player.extremeMode ? 1e3 : 2e3
                                return init.times(Decimal.pow(base, exp))
                        },
                        canAfford:() => player.mini.a_points.points.gte(tmp.mini.buyables[62].cost) && getBuyableAmount("mini", 62).lt(5000),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[62] = player.mini.buyables[62].plus(1)
                                player.mini.a_points.points = player.mini.a_points.points.sub(tmp.mini.buyables[62].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(1e33)
                                let base = 2000
                                if (player.extremeMode) {
                                        base = 1e3
                                        if (hasUpgrade("sci", 24) || player.sci.everhasnsci2) div = decimalOne
                                        else div = new Decimal(1e28)
                                }
                                let exp = 1.15
                                let pts = player.mini.a_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1).min(5000)
                        },
                        base(){
                                if (inChallenge("n", 11)) return decimalOne
                                let ret = player.mini.a_points.points.plus(10).ln()
                                if (hasUpgrade("c", 14)) ret = ret.div(Math.log(2))
                                return ret
                        },
                        effect(){
                                return tmp.mini.buyables[62].base.pow(player.mini.buyables[62])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.mini.buyables[62]) + "</b><br>"
                                        let amt = "<b><h2>Amount</h2>: " + format(player.mini.a_points.extras[62]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[62].effect) + " to A Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 62)) + " A Points</b><br>"

                                        return br + lvl + amt + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "ln(10+[A Points])^x<br>" + format(tmp.mini.buyables[62].base) + "^x" 
                                if (hasUpgrade("c", 14)) eformula = eformula.replace("ln", "log2")
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e33)*(2e3^x<sup>1.15</sup>)" 
                                if (player.extremeMode) {
                                        cost2 = cost2.replace("33", "28")
                                        cost2 = cost2.replace("2e3", "1e3")
                                }
                                if (hasUpgrade("sci", 23) || player.sci.everhasnsci2) cost2 = "1e3^x<sup>1.15</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                63: {
                        title: "<bdi style='color:#0000FF'>Blue</bdi>",
                        cost(){
                                let init = new Decimal(1e10)
                                if (hasMilestone("mini", 8) || player.sci.everhasnsci2) init = decimalOne
                                let exp = Decimal.pow(getBuyableAmount("mini", 63), 1.1)
                                return init.times(Decimal.pow(1e8, exp))
                        },
                        canAfford:() => player.mini.a_points.points.gte(tmp.mini.buyables[63].cost) && getBuyableAmount("mini", 63).lt(5000),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[63] = player.mini.buyables[63].plus(1)
                                player.mini.a_points.points = player.mini.a_points.points.sub(tmp.mini.buyables[63].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(1e10)
                                if (hasMilestone("mini", 8) || player.sci.everhasnsci2) div = decimalOne
                                let base = 1e8
                                let exp = 1.1
                                let pts = player.mini.a_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1).min(5000)
                        },
                        base(){
                                if (inChallenge("n", 11)) return decimalOne
                                
                                let ret = new Decimal(2)

                                ret = ret.plus(tmp.sci.buyables[23].effect)
                                if (hasUpgrade("sci", 303)) ret = ret.plus(tmp.sci.upgrades[303].effect)

                                return ret
                        },
                        effect(){
                                return tmp.mini.buyables[63].base.pow(player.mini.buyables[63])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.mini.buyables[63]) + "</b><br>"
                                        let amt = "<b><h2>Amount</h2>: " + format(player.mini.a_points.extras[63]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[63].effect) + " to Hydrogen</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 63)) + " A Points</b><br>"

                                        return br + lvl + amt + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.mini.buyables[63].base) + "^x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e10)*(1e8^x<sup>1.1</sup>)" 
                                if (hasMilestone("mini", 8) || player.sci.everhasnsci2) cost2 = "1e8^x<sup>1.1</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                22: {
                        display(){
                                let a = "A Point production is the product of <br><b>(1+[amounts])</b><br> over all colors minus 1<br>Currently: "
                                return a + format(tmp.mini.a_points.getResetGain) + "/sec"
                        }
                },
                31: {
                        title: "B11", 
                        cost() {
                                let init = new Decimal(10)
                                if (hasMilestone("mini", 2) || player.sci.everhasnsci2) init = decimalOne
                                let exp = Decimal.pow(nerfBminigameBuyableAmounts(getBuyableAmount("mini", 31)), 1.1)
                                return init.times(Decimal.pow(20, exp))
                        },
                        canAfford:() => player.mini.b_points.points.gte(tmp.mini.buyables[31].cost) && getBuyableAmount("mini", 31).lt(5000),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[31] = player.mini.buyables[31].plus(1)
                                player.mini.b_points.points = player.mini.b_points.points.sub(tmp.mini.buyables[31].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(10)
                                if (hasMilestone("mini", 2) || player.sci.everhasnsci2) div = decimalOne
                                let base = 20
                                let exp = 1.1
                                let pts = player.mini.b_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1).min(5000)
                        },
                        unlocked(){
                                return true
                        },
                        base(){
                                return player.points.plus(10).log10()
                        },
                        effect(){
                                return tmp.mini.buyables[31].base.pow(player.mini.buyables[31])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[31]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[31].effect) + " to B Points gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 31)) + " B Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10([Life Points] + 10)^x<br>" + format(getBuyableBase("mini", 31)) + "^x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(10)*(20^x<sup>1.1</sup>)" 
                                if (hasMilestone("mini", 2) || player.sci.everhasnsci2) cost2 = "20^x<sup>1.1</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                32: {
                        title: "B12", 
                        cost() {
                                let init = new Decimal(3e6)
                                if (hasMilestone("mini", 3) || player.sci.everhasnsci2) init = decimalOne
                                let exp = Decimal.pow(nerfBminigameBuyableAmounts(getBuyableAmount("mini", 32)), 1.2)
                                return init.times(Decimal.pow(5e5, exp))
                        },
                        canAfford:() => player.mini.b_points.points.gte(tmp.mini.buyables[32].cost) && getBuyableAmount("mini", 32).lt(5000),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[32] = player.mini.buyables[32].plus(1)
                                player.mini.b_points.points = player.mini.b_points.points.sub(tmp.mini.buyables[32].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(3e6)
                                if (hasMilestone("mini", 3) || player.sci.everhasnsci2) div = decimalOne
                                let base = 5e5
                                let exp = 1.2
                                let pts = player.mini.b_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1).min(5000)
                        },
                        unlocked(){
                                return player.mini.buyables[31].gte(4)
                        },
                        base(){
                                return player.mini.b_points.points.plus(10).log2()
                        },
                        effect(){
                                return tmp.mini.buyables[32].base.pow(player.mini.buyables[32])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[32]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[32].effect) + " to B Points gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 32)) + " B Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log2([B Points] + 10)^x<br>" + format(getBuyableBase("mini", 32)) + "^x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(3e6)*(5e5^x<sup>1.2</sup>)" 
                                if (hasMilestone("mini", 3) || player.sci.everhasnsci2) cost2 = "5e5^x<sup>1.2</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                33: {
                        title: "B13", 
                        cost(){
                                let dblexp = player.extremeMode ? 1.1 : 1.2
                                let init = new Decimal(1e25)
                                if (hasMilestone("mini", 1) || player.sci.everhasnsci2) init = decimalOne
                                let exp = Decimal.pow(nerfBminigameBuyableAmounts(getBuyableAmount("mini", 33)), dblexp)
                                return init.times(Decimal.pow(100, exp))
                        },
                        canAfford:() => player.mini.b_points.points.gte(tmp.mini.buyables[33].cost) && getBuyableAmount("mini", 33).lt(5000),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[33] = player.mini.buyables[33].plus(1)
                                player.mini.b_points.points = player.mini.b_points.points.sub(tmp.mini.buyables[33].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(1e25)
                                if (hasMilestone("mini", 1) || player.sci.everhasnsci2) div = decimalOne
                                let base = 100
                                let exp = player.extremeMode ? 1.1 : 1.2
                                let pts = player.mini.b_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1).min(5000)
                        },
                        unlocked(){
                                return player.mini.buyables[31].gte(15)
                        },
                        base(){
                                return new Decimal(.1)
                        },
                        effect(){
                                return tmp.mini.buyables[33].base.times(player.mini.buyables[33])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[33]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.mini.buyables[33].effect) + " to <bdi style='color:#CC0033'>B</bdi></b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 33)) + " B Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = ".1*x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e25)*(100^x<sup>" + (player.extremeMode ? 1.1 : 1.2) + "</sup>)" 
                                if (hasMilestone("mini", 1) || player.sci.everhasnsci2) cost2 = "100^x<sup>1.1</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                41: {
                        title: "B21", 
                        cost(){
                                let init = new Decimal(1e33)
                                if (hasUpgrade("sci", 101) || player.sci.everhasnsci2) init = decimalOne
                                let exp = Decimal.pow(nerfBminigameBuyableAmounts(getBuyableAmount("mini", 41)), 1.5)
                                return init.times(Decimal.pow(10, exp))
                        },
                        canAfford:() => player.mini.b_points.points.gte(tmp.mini.buyables[41].cost) && getBuyableAmount("mini", 41).lt(5000),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[41] = player.mini.buyables[41].plus(1)
                                player.mini.b_points.points = player.mini.b_points.points.sub(tmp.mini.buyables[41].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(1e33)
                                if (hasUpgrade("sci", 101) || player.sci.everhasnsci2) init = decimalOne
                                let base = 10
                                let exp = 1.5
                                let pts = player.mini.b_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1).min(5000)
                        },
                        unlocked(){
                                return player.mini.buyables[31].gte(19)
                        },
                        base(){
                                return tmp.h.upgrades[42].effect
                        },
                        effect(){
                                return tmp.mini.buyables[41].base.pow(player.mini.buyables[41])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[41]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[41].effect) + " to B Points gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 41)) + " B Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "<bdi style='color:#CC0033'>B</bdi>^x<br>" + format(getBuyableBase("mini", 41)) + "^x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e33)*(10^x<sup>1.5</sup>)" 
                                if (hasUpgrade("sci", 101) || player.sci.everhasnsci2) cost2 = "10^x<sup>1.5</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                42: {
                        title: "B22", 
                        cost(){
                                let init = new Decimal(5e237)
                                if (hasUpgrade("c", 13) && player.extremeMode || player.sci.everhasnsci2) init = decimalOne
                                let exp = Decimal.pow(nerfBminigameBuyableAmounts(getBuyableAmount("mini", 42)), 1.35)
                                return init.times(Decimal.pow(2e10, exp))
                        },
                        canAfford:() => player.mini.b_points.points.gte(tmp.mini.buyables[42].cost) && getBuyableAmount("mini", 42).lt(5000),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[42] = player.mini.buyables[42].plus(1)
                                player.mini.b_points.points = player.mini.b_points.points.sub(tmp.mini.buyables[42].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(5e237)
                                if (hasUpgrade("c", 13) && player.extremeMode || player.sci.everhasnsci2) div = decimalOne
                                let base = 2e10
                                let exp = 1.35
                                let pts = player.mini.b_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1).min(5000)
                        },
                        unlocked(){
                                return player.mini.buyables[31].gte(111)
                        },
                        base(){
                                return player.mini.b_points.points.plus(10).log(8).ln().max(1)
                        },
                        effect(){
                                return tmp.mini.buyables[42].base.pow(player.mini.buyables[42])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[42]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[42].effect) + " to B Points and Hydrogen gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 42)) + " B Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "ln(log8([B points]))^x<br>" + format(getBuyableBase("mini", 42)) + "^x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(5e237)*(2e10^x<sup>1.35</sup>)" 
                                if (hasUpgrade("c", 13) && player.extremeMode || player.sci.everhasnsci2) cost2 = "2e10^x<sup>1.35</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                43: {
                        title: "B23", 
                        cost(){
                                let init = new Decimal("1e425")
                                if (hasUpgrade("c", 13) && player.extremeMode || player.sci.everhasnsci2) init = decimalOne
                                let exp = Decimal.pow(nerfBminigameBuyableAmounts(getBuyableAmount("mini", 43)), 1.2)
                                return init.times(Decimal.pow(1e15, exp))
                        },
                        canAfford:() => player.mini.b_points.points.gte(tmp.mini.buyables[43].cost) && getBuyableAmount("mini", 43).lt(5000),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[43] = player.mini.buyables[43].plus(1)
                                player.mini.b_points.points = player.mini.b_points.points.sub(tmp.mini.buyables[43].cost)
                        },
                        maxAfford(){
                                let div = new Decimal("1e425")
                                if (hasUpgrade("c", 13) && player.extremeMode || player.sci.everhasnsci2) div = decimalOne
                                let base = 1e15
                                let exp = 1.2
                                let pts = player.mini.b_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1).min(5000)
                        },
                        unlocked(){
                                return player.mini.buyables[31].gte(181)
                        },
                        base(){
                                return new Decimal(1.2).plus(player.mini.buyables[43].div(100)).ln()
                        },
                        effect(){
                                return tmp.mini.buyables[43].base.times(player.mini.buyables[43])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[43]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.mini.buyables[43].effect) + " to <bdi style='color:#CC0033'>B</bdi></b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 43)) + " B Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }
                                
                                let eformula = "ln(1.2+x/100)*x<br>" + format(getBuyableBase("mini", 43), 3) + "*x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e425)*(1e15^x<sup>1.2</sup>)"
                                if (hasUpgrade("c", 13) && player.extremeMode || player.sci.everhasnsci2) cost2 = "1e15^x<sup>1.2</sup>" 
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                51: {
                        title: "B31", 
                        cost(){
                                let exp = Decimal.pow(nerfBminigameBuyableAmounts(getBuyableAmount("mini", 51)), 1.3)
                                let init = new Decimal(player.extremeMode ? "1e3565" : "1e5600")
                                if (hasUpgrade("sci", 102) || player.sci.everhasnsci2) init = decimalOne
                                return init.times(Decimal.pow(1e8, exp))
                        },
                        canAfford:() => player.mini.b_points.points.gte(tmp.mini.buyables[51].cost) && getBuyableAmount("mini", 51).lt(5000),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[51] = player.mini.buyables[51].plus(1)
                                player.mini.b_points.points = player.mini.b_points.points.sub(tmp.mini.buyables[51].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(player.extremeMode ? "1e3565" : "1e5600")
                                if (hasUpgrade("sci", 102) || player.sci.everhasnsci2) div = decimalOne
                                let base = 1e8
                                let exp = 1.3
                                let pts = player.mini.b_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1).min(5000)
                        },
                        unlocked(){
                                return player.mini.buyables[31].gte(2000) || (player.mini.buyables[31].gte(1330) && player.extremeMode) 
                        },
                        base(){
                                return player.mini.b_points.points.plus(10).ln().ln().max(1)
                        },
                        effect(){
                                return tmp.mini.buyables[51].base.pow(player.mini.buyables[51])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[51]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[51].effect) + " to A Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 51)) + " B Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "ln(ln([B Points]))^x<br>" + format(getBuyableBase("mini", 51), 3) + "^x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e5600)*(1e8^x<sup>1.3</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("5600", "3565")
                                if (hasUpgrade("sci", 102) || player.sci.everhasnsci2) cost2 = "1e8^x<sup>1.3</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                52: {
                        title: "B32", 
                        cost(){
                                let init = new Decimal(player.extremeMode ? "1e17400" : "1e18650")
                                if (hasUpgrade("sci", 103) || player.sci.everhasnsci2) init = decimalOne
                                let exp = Decimal.pow(nerfBminigameBuyableAmounts(getBuyableAmount("mini", 52)), 1.1)
                                return init.times(Decimal.pow(1e4, exp))
                        },
                        canAfford:() => player.mini.b_points.points.gte(tmp.mini.buyables[52].cost) && getBuyableAmount("mini", 52).lt(5000),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[52] = player.mini.buyables[52].plus(1)
                                player.mini.b_points.points = player.mini.b_points.points.sub(tmp.mini.buyables[52].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(player.extremeMode ? "1e17400" : "1e18650")
                                if (hasUpgrade("sci", 103) || player.sci.everhasnsci2) div = decimalOne
                                let base = 1e4
                                let exp = 1.1
                                let pts = player.mini.b_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1).min(5000)
                        },
                        unlocked(){
                                return player.mini.buyables[33].gte(2000)
                        },
                        base(){
                                let ret = new Decimal(.01)

                                if (hasUpgrade("c", 13)) ret = ret.times(player.mini.buyables[52].sqrt().div(10).plus(Math.E).ln())

                                return ret
                        },
                        effect(){
                                return tmp.mini.buyables[52].base.times(player.mini.buyables[52])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[52]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.mini.buyables[52].effect) + " to Violet base</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 52)) + " B Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = ".01*x"
                                if (hasUpgrade("c", 13)) eformula = ".01*ln(e+sqrt(x)/10)*x<br>" + format(getBuyableBase("mini", 52), 4) + "*x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e18650)*(1e4^x<sup>1.1</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("18650", "17400")
                                if (hasUpgrade("sci", 103) || player.sci.everhasnsci2) cost2 = "1e4^x<sup>1.1</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                53: {
                        title: "B33", 
                        cost(){
                                let init = new Decimal("1e22000")
                                if (hasUpgrade("sci", 112) || player.sci.everhasnsci2) init = decimalOne
                                let exp = Decimal.pow(nerfBminigameBuyableAmounts(getBuyableAmount("mini", 53)), 1.2)       
                                return init.times(Decimal.pow(1e3, exp))
                        },
                        canAfford:() => player.mini.b_points.points.gte(tmp.mini.buyables[53].cost) && getBuyableAmount("mini", 53).lt(5000),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[53] = player.mini.buyables[53].plus(1)
                                player.mini.b_points.points = player.mini.b_points.points.sub(tmp.mini.buyables[53].cost)
                        },
                        maxAfford(){
                                let div = new Decimal("1e22000")
                                if (hasUpgrade("sci", 112) || player.sci.everhasnsci2) div = decimalOne
                                let base = 1e3
                                let exp = 1.2
                                let pts = player.mini.b_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1).min(5000)
                        },
                        unlocked(){
                                return player.mini.buyables[52].gte(410)
                        },
                        base(){
                                return player.mini.buyables[53].div(30).plus(1)
                        },
                        effect(){
                                return tmp.mini.buyables[53].base.times(player.mini.buyables[53])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[53]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.mini.buyables[53].effect) + " to <bdi style='color:#CC0033'>B</bdi></b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 53)) + " B Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "(1+x/30)*x<br>" + format(getBuyableBase("mini", 53)) + "*x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e22000)*(1e3^x<sup>1.2</sup>)" 
                                if (hasUpgrade("sci", 112) || player.sci.everhasnsci2) cost2 = "1e3^x<sup>1.2</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                71: {
                        title: "Unlock a slot", 
                        cost(){
                                let base = new Decimal(100)
                                if (hasUpgrade("mini", 35)) base = new Decimal(50)
                                if (hasUpgrade("tokens", 94)) base = new Decimal(10)

                                let expBase = getBuyableAmount("mini", 71)
                                if (!hasUpgrade("mini", 25)) expBase = expBase.plus(1)

                                let exp2 = getBuyableAmount("mini", 71).div(2).plus(3)
                                if (hasUpgrade("mini", 42)) exp2 = exp2.min(6)
                                let exp = expBase.pow(exp2)
                                
                                
                                return base.pow(exp)
                        },
                        canAfford:() => player.mini.c_points.points.gte(tmp.mini.buyables[71].cost) && getBuyableAmount("mini", 71).lt(11),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[71] = player.mini.buyables[71].plus(1)
                                if (player.mu.CCostFree) return
                                player.mini.c_points.points = player.mini.c_points.points.sub(tmp.mini.buyables[71].cost)
                        },
                        unlocked(){
                                return true
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[71]) + "</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 71)) + " C Points</b><br>"

                                        return br + lvl + cost + "Shift to see details"
                                }
                                
                                let expBase = "(x+1)"
                                if (hasUpgrade("mini", 25)) expBase = "x"
                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let base = "100"
                                if (hasUpgrade("mini", 35)) base = "50"
                                if (hasUpgrade("tokens", 94)) base = "10"
                                let exp = "x/2+3"
                                if (hasUpgrade("mini", 42)) exp = "6"
                                let cost2 = "(" + base + ")^(" + expBase + "<sup>" + exp + "</sup>)" 
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                return br + allCost + "<br>You can only have 15 slots" 
                        },
                },
                72: {
                        title: "C Point Gain 1", 
                        cost(){
                                let init = new Decimal(1e3)
                                if (hasUpgrade("sci", 204) || player.sci.everhasnsci2) init = decimalOne
                                let exp = hasUpgrade("sci", 224) ? 1.21 : 1.3
                                if (hasUpgrade("sci", 225)) exp = 1.2
                                return init.times(Decimal.pow(100, Decimal.pow(getBuyableAmount("mini", 72), exp)))
                        },
                        canAfford:() => player.mini.c_points.points.gte(tmp.mini.buyables[72].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[72] = player.mini.buyables[72].plus(1)
                                if (player.mu.CCostFree) return
                                player.mini.c_points.points = player.mini.c_points.points.sub(tmp.mini.buyables[72].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(1e3)
                                if (hasUpgrade("sci", 204) || player.sci.everhasnsci2) div = decimalOne
                                let base = 100
                                let exp = hasUpgrade("sci", 224) ? 1.21 : 1.3
                                if (hasUpgrade("sci", 225)) exp = 1.2
                                let pts = player.mini.c_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 71).gt(0)
                        },
                        base(){
                                let base = 10
                                if (hasUpgrade("tokens", 91))   base = Math.E
                                if (hasUpgrade("sci", 235))     base = 2

                                return player.mini.c_points.points.max(base).log(base)
                        },
                        effect(){
                                return tmp.mini.buyables[72].base.pow(player.mini.buyables[72])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[72]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[72].effect) + " to C Point</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 72)) + " C Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(C Points)<sup>x</sup>" + br + format(getBuyableBase("mini", 72)) + "^x"
                                if (hasUpgrade("sci", 235)) eformula = eformula.replace("log10", "log2")
                                if (hasUpgrade("tokens", 91)) eformula = eformula.replace("log10", "ln")
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1000)*(100^x<sup>1.3</sup>)" 
                                if (hasUpgrade("sci", 204) || player.sci.everhasnsci2) cost2 = "100^x<sup>1.3</sup>"
                                if (hasUpgrade("sci", 224)) cost2 = cost2.replace("1.3", "1.21")
                                if (hasUpgrade("sci", 225)) cost2 = cost2.replace("1.21", "1.2")
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                73: {
                        title: "C Point Gain 2", 
                        cost(){
                                let init = new Decimal(5e3)
                                if (hasUpgrade("sci", 211) || player.sci.everhasnsci2) init = decimalOne
                                return init.times(Decimal.pow(200, Decimal.pow(getBuyableAmount("mini", 73), 1.1)))
                        },
                        canAfford:() => player.mini.c_points.points.gte(tmp.mini.buyables[73].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[73] = player.mini.buyables[73].plus(1)
                                if (player.mu.CCostFree) return
                                player.mini.c_points.points = player.mini.c_points.points.sub(tmp.mini.buyables[73].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(5e3)
                                if (hasUpgrade("sci", 211) || player.sci.everhasnsci2) div = decimalOne
                                let base = 200
                                let exp = 1.1
                                let pts = player.mini.c_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 72).gt(0)
                        },
                        base(){
                                return player.tokens.total.max(1)
                        },
                        effect(){
                                return tmp.mini.buyables[73].base.pow(player.mini.buyables[73])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[73]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[73].effect) + " to C Point</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 73)) + " C Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "tokens<sup>x</sup><br>" + format(getBuyableBase("mini", 73)) + "^x" 
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(5000)*(200^x<sup>1.1</sup>)" 
                                if (hasUpgrade("sci", 211) || player.sci.everhasnsci2) cost2 = "200^x<sup>1.1</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                81: {
                        title: "<bdi style='color:#CC0033'>C</bdi> increase 1",
                        cost(){
                                let init = new Decimal(player.extremeMode ? 1e96 : 1e90)
                                if (hasUpgrade("sci", 221) || player.sci.everhasnsci2) init = decimalOne
                                return init.times(Decimal.pow(1e5, Decimal.pow(getBuyableAmount("mini", 81), 1.2)))
                        },
                        canAfford:() => player.mini.c_points.points.gte(tmp.mini.buyables[81].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[81] = player.mini.buyables[81].plus(1)
                                if (player.mu.CCostFree) return
                                player.mini.c_points.points = player.mini.c_points.points.sub(tmp.mini.buyables[81].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(1e90)
                                if (player.extremeMode) div = new Decimal(1e96)
                                if (hasUpgrade("sci", 221) || player.sci.everhasnsci2) div = decimalOne
                                let base = 1e5
                                let exp = 1.2
                                let pts = player.mini.c_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 73).gt(28)
                        },
                        base(){
                                if (inChallenge("n", 11)) return decimalZero

                                let ret = new Decimal(.1)

                                if (hasUpgrade("mini", 21))     ret = ret.plus(.1)
                                if (hasUpgrade("mini", 24))     ret = ret.plus(.05)
                                if (hasUpgrade("sci", 231))     ret = ret.plus(.005 * tmp.sci.upgrades.carbonUpgradesLength)

                                if (hasChallenge("n", 21))      ret = ret.times(tmp.n.challenges[21].rewardEffect)
                                
                                return ret
                        },
                        effect(){
                                return tmp.mini.buyables[81].base.times(player.mini.buyables[81])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[81]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.mini.buyables[81].effect) + " to <bdi style='color:#CC0033'>C</bdi></b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 81)) + " C Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(getBuyableBase("mini", 81), 3) + "*x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e90)*(1e5^x<sup>1.2</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("90", "96")
                                if (hasUpgrade("sci", 221) || player.sci.everhasnsci2) cost2 = "1e5^x<sup>1.2</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                82: {
                        title: "C Point gain 3",
                        cost(){
                                let init = new Decimal(1e180)
                                if (hasUpgrade("sci", 223) || player.sci.everhasnsci2) init = decimalOne
                                return init.times(Decimal.pow(1e4, Decimal.pow(getBuyableAmount("mini", 82), 1.2)))
                        },
                        canAfford:() => player.mini.c_points.points.gte(tmp.mini.buyables[82].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[82] = player.mini.buyables[82].plus(1)
                                if (player.mu.CCostFree) return
                                player.mini.c_points.points = player.mini.c_points.points.sub(tmp.mini.buyables[82].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(1e180)
                                if (hasUpgrade("sci", 223) || player.sci.everhasnsci2) div = decimalOne
                                let base = 1e4
                                let exp = 1.2
                                let pts = player.mini.c_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 73).gt(50)
                        },
                        base(){
                                let ret = tmp.tokens.milestones[23].effect

                                if (hasUpgrade("mini", 43)) ret = ret.plus(player.mini.buyables[82])
                                
                                return ret.max(1)
                        },
                        effect(){
                                return tmp.mini.buyables[82].base.pow(player.mini.buyables[82])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[82]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[82].effect) + " to C Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 82)) + " C Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let baseStr = "<bdi style='color:#CC0033'>C</bdi>"
                                if (hasUpgrade("mini", 43)) baseStr = "(" + baseStr + " + x)"
                                let eformula = baseStr + "<sup>x</sup><br>" + format(getBuyableBase("mini", 82)) + "^x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e180)*(1e4^x<sup>1.2</sup>)" 
                                if (hasUpgrade("sci", 223) || player.sci.everhasnsci2) cost2 = "1e4^x<sup>1.2</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                83: {
                        title: "C Point gain 4",
                        cost(){
                                let init = new Decimal(1e225)
                                if (hasUpgrade("mini", 24) && player.extremeMode || player.sci.everhasnsci2) init = decimalOne
                                let exp = player.extremeMode ? 1.2 : 1.3
                                return init.times(Decimal.pow(1e10, Decimal.pow(getBuyableAmount("mini", 83), exp)))
                        },
                        canAfford:() => player.mini.c_points.points.gte(tmp.mini.buyables[83].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[83] = player.mini.buyables[83].plus(1)
                                if (player.mu.CCostFree) return
                                player.mini.c_points.points = player.mini.c_points.points.sub(tmp.mini.buyables[83].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(1e225)
                                if (hasUpgrade("mini", 24) && player.extremeMode || player.sci.everhasnsci2) div = decimalOne
                                let base = 1e10
                                let exp = player.extremeMode ? 1.2 : 1.3
                                let pts = player.mini.c_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 73).gt(64)
                        },
                        base(){
                                let ret = player.o.points.max(10).log10()

                                if (hasUpgrade("mini", 23)) ret = ret.times(Math.log(10))
                                if (hasMilestone("tokens", 24)) ret = ret.div(Math.log(2))

                                return ret
                        },
                        effect(){
                                return tmp.mini.buyables[83].base.pow(player.mini.buyables[83])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[83]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[83].effect) + " to C Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 83)) + " C Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "(log10(Oxygen))<sup>x</sup><br>" + format(getBuyableBase("mini", 83)) + "^x"
                                if (hasUpgrade("mini", 23)) eformula = eformula.replace("log10", "ln")
                                if (hasMilestone("tokens", 24)) eformula = eformula.replace("ln", "log2")
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e225)*(1e10^x<sup>" + (player.extremeMode ? 1.2 : 1.3) + "</sup>)" 
                                if (hasUpgrade("mini", 24) && player.extremeMode || player.sci.everhasnsci2) cost2 = "1e10^x<sup>1.2</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                91: {
                        title: "<bdi style='color:#CC0033'>C</bdi> increase 2",
                        cost(){
                                let init = new Decimal("1e1300")
                                if (hasUpgrade("sci", 233) || player.sci.everhasnsci2) init = decimalOne
                                let exp = player.extremeMode ? 1.2 : 1.3
                                return init.times(Decimal.pow(1e8, Decimal.pow(getBuyableAmount("mini", 91), exp)))
                        },
                        canAfford:() => player.mini.c_points.points.gte(tmp.mini.buyables[91].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[91] = player.mini.buyables[91].plus(1)
                                if (player.mu.CCostFree) return
                                player.mini.c_points.points = player.mini.c_points.points.sub(tmp.mini.buyables[91].cost)
                        },
                        maxAfford(){
                                let div = new Decimal("1e1300")
                                if (hasUpgrade("sci", 233) || player.sci.everhasnsci2) div = decimalOne
                                let base = 1e8
                                let exp = player.extremeMode ? 1.2 : 1.3
                                let pts = player.mini.c_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 73).gt(300)
                        },
                        base(){
                                if (inChallenge("n", 22)) return decimalZero
                                return player.mini.buyables[91].div(100).plus(1.2).ln()
                        },
                        effect(){
                                return tmp.mini.buyables[91].base.times(player.mini.buyables[91])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[91]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.mini.buyables[91].effect) + " to <bdi style='color:#CC0033'>C</bdi></b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 91)) + " C Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "ln(1.2+x/100)*x<br>" + format(getBuyableBase("mini", 91)) + "*x" 
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e1300)*(1e8^x<sup>" + (player.extremeMode ? 1.2 : 1.3) + "</sup>)" 
                                if (hasUpgrade("sci", 233) || player.sci.everhasnsci2) cost2 = "1e8^x<sup>1.2</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                92: {
                        title: "C Point gain 5",
                        cost(){
                                let init = new Decimal(player.extremeMode ? "1e1980" : "1e1900")
                                if (hasUpgrade("sci", 241) || player.sci.everhasnsci2) init = decimalOne
                                return init.times(Decimal.pow(1e50, Decimal.pow(getBuyableAmount("mini", 92), 1.3)))
                        },
                        canAfford:() => player.mini.c_points.points.gte(tmp.mini.buyables[92].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[92] = player.mini.buyables[92].plus(1)
                                if (player.mu.CCostFree) return
                                player.mini.c_points.points = player.mini.c_points.points.sub(tmp.mini.buyables[92].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(player.extremeMode ? "1e1980" : "1e1900")
                                if (hasUpgrade("sci", 241) || player.sci.everhasnsci2) div = decimalOne
                                let base = 1e50
                                let exp = 1.3
                                let pts = player.mini.c_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 83).gt(player.extremeMode ? 75 : 50)
                        },
                        base(){
                                if (inChallenge("n", 32)) return decimalOne
                                let ret = player.points.max(10).log10()

                                if (hasMilestone("n", 14)) ret = ret.times(Math.log(10))

                                return ret
                        },
                        effect(){
                                return tmp.mini.buyables[92].base.pow(player.mini.buyables[92])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[92]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[92].effect) + " to C Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 92)) + " C Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "(log10(Life Points))<sup>x</sup><br>" + format(getBuyableBase("mini", 92)) + "^x"
                                if (hasMilestone("n", 14)) eformula = eformula.replace("log10", "ln")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e1900)*(1e50^x<sup>1.3</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("00", "80")
                                if (hasUpgrade("sci", 241) || player.sci.everhasnsci2) cost2 = "1e50^x<sup>1.3</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                93: {
                        title: "C Point gain 6",
                        cost(){
                                let init = new Decimal(player.extremeMode ? "1e6280" : "1e6350")
                                if (hasUpgrade("sci", 242) || player.sci.everhasnsci2) init = decimalOne
                                return init.times(Decimal.pow(1e6, Decimal.pow(getBuyableAmount("mini", 93), 1.1)))
                        },
                        canAfford:() => player.mini.c_points.points.gte(tmp.mini.buyables[93].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[93] = player.mini.buyables[93].plus(1)
                                if (player.mu.CCostFree) return
                                player.mini.c_points.points = player.mini.c_points.points.sub(tmp.mini.buyables[93].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(player.extremeMode ? "1e6280" : "1e6350")
                                if (hasUpgrade("sci", 242) || player.sci.everhasnsci2) div = decimalOne
                                let base = 1e6
                                let exp = 1.1
                                let pts = player.mini.c_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 92).gt(30)
                        },
                        base(){
                                if (inChallenge("n", 21)) return decimalOne
                                let init = player.mini.a_points.points.max(10).log10()
                                if (hasUpgrade("tokens", 94)) init = init.times(Math.log(10))
                                
                                let ret = init.log10().max(1)
                                if (hasUpgrade("tokens", 93)) ret = ret.times(Math.log(10))
                                if (hasUpgrade("mini", 44)) ret = ret.div(Math.log(2))

                                return ret
                        },
                        effect(){
                                return tmp.mini.buyables[93].base.pow(player.mini.buyables[93])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[93]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[93].effect) + " to C Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 93)) + " C Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "(log10(log10(A Points)))<sup>x</sup><br>" + format(getBuyableBase("mini", 93)) + "^x"
                                if (hasUpgrade("tokens", 93)) eformula = eformula.replace("log10", "ln") //only replaces the first one
                                if (hasUpgrade("tokens", 94)) eformula = eformula.replace("log10", "ln")
                                if (hasUpgrade("mini", 44)) eformula = eformula.replace("ln", "log2")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e6350)*(1e6^x<sup>1.1</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("6350", "6280")
                                if (hasUpgrade("sci", 242) || player.sci.everhasnsci2) cost2 = "1e6^x<sup>1.1</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                101: {
                        title: "Carbon Increase",
                        cost(){
                                let init = new Decimal(player.extremeMode ? "1e13700" : "1e13000")
                                if (hasUpgrade("sci", 243) || player.sci.everhasnsci2) init = decimalOne
                                return init.times(Decimal.pow(100, Decimal.pow(getBuyableAmount("mini", 101), 1.4)))
                        },
                        canAfford:() => player.mini.c_points.points.gte(tmp.mini.buyables[101].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[101] = player.mini.buyables[101].plus(1)
                                if (player.mu.CCostFree) return
                                player.mini.c_points.points = player.mini.c_points.points.sub(tmp.mini.buyables[101].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(player.extremeMode ? "1e13700" : "1e13000")
                                if (hasUpgrade("sci", 243) || player.sci.everhasnsci2) div = decimalOne
                                let base = 100
                                let exp = 1.4
                                let pts = player.mini.c_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 92).gt(60)
                        },
                        base(){
                                return getBuyableAmount("mini", 92).max(1)
                        },
                        effect(){
                                return tmp.mini.buyables[101].base.pow(player.mini.buyables[101])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[101]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[101].effect) + " to Carbon gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 101)) + " C Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "(C Point gain 5 buyables)<sup>x</sup><br>" + format(getBuyableBase("mini", 101)) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e13000)*(100^x<sup>1.4</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("13000", "13700")
                                if (hasUpgrade("sci", 243) || player.sci.everhasnsci2) cost2 = "100^x<sup>1.4</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                102: {
                        title: "C Point gain 7",
                        cost(){
                                let init = new Decimal(player.extremeMode ? "1e20400" : "1e19590")
                                if (hasUpgrade("sci", 245) || player.sci.everhasnsci2) init = decimalOne
                                return init.times(Decimal.pow(1e23, Decimal.pow(getBuyableAmount("mini", 102), 1.2)))
                        },
                        canAfford:() => player.mini.c_points.points.gte(tmp.mini.buyables[102].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[102] = player.mini.buyables[102].plus(1)
                                if (player.mu.CCostFree) return
                                player.mini.c_points.points = player.mini.c_points.points.sub(tmp.mini.buyables[102].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(player.extremeMode ? "1e20400" : "1e19590")
                                if (hasUpgrade("sci", 245) || player.sci.everhasnsci2) div = decimalOne
                                let base = 1e23
                                let exp = 1.2
                                let pts = player.mini.c_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 92).gt(90)
                        },
                        base(){
                                let ret = player.c.points.max(10).log10()

                                if (hasUpgrade("mini", 41)) ret = ret.times(Math.log(10)/Math.log(2))
                                if (hasChallenge("n", 22)) ret = ret.times(tmp.n.challenges[22].rewardEffect)

                                return ret
                        },
                        effect(){
                                return tmp.mini.buyables[102].base.pow(player.mini.buyables[102])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[102]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[102].effect) + " to C Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 102)) + " C Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "(log10(Carbon))<sup>x</sup><br>" + format(getBuyableBase("mini", 102)) + "^x"
                                if (hasUpgrade("mini", 41)) eformula = eformula.replace("log10", "log2")
                                if (hasChallenge("n", 22)) eformula = eformula.replace("(","(log10(Nitrogen)*")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e19590)*(1e23^x<sup>1.2</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("19590", "20400")
                                if (hasUpgrade("sci", 245) || player.sci.everhasnsci2) cost2= "1e23^x<sup>1.2</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                103: {
                        title: "C Point gain 8",
                        cost(){
                                let init = new Decimal(player.extremeMode ? "1e27400" : "1e27000")
                                if (hasMilestone("tokens", 27) || player.sci.everhasnsci2) init = decimalOne
                                return init.times(Decimal.pow(20, Decimal.pow(getBuyableAmount("mini", 103), 1.2)))
                        },
                        canAfford:() => player.mini.c_points.points.gte(tmp.mini.buyables[103].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[103] = player.mini.buyables[103].plus(1)
                                if (player.mu.CCostFree) return
                                player.mini.c_points.points = player.mini.c_points.points.sub(tmp.mini.buyables[103].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(player.extremeMode ? "1e27400" : "1e27000")
                                if (hasMilestone("tokens", 27) || player.sci.everhasnsci2) div = decimalOne
                                let base = 20
                                let exp = 1.2
                                let pts = player.mini.c_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 92).gt(118)
                        },
                        base(){
                                return tmp.tokens.buyables[61].effect
                        },
                        effect(){
                                return tmp.mini.buyables[103].base.pow(player.mini.buyables[103])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[103]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[103].effect) + " to C Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 103)) + " C Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "(Semi-exponential effect)<sup>x</sup><br>" + format(getBuyableBase("mini", 103)) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e27000)*(20^x<sup>1.2</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("0", "4")
                                if (hasMilestone("tokens", 27) || player.sci.everhasnsci2) cost2 = "20^x<sup>1.2</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                111: {
                        title: "<bdi style='color:#CC0033'>C</bdi> increase 3",
                        cost(){
                                let init = new Decimal(player.extremeMode ? "1e58000" : "1e56700")
                                if (hasMilestone("tokens", 28) || player.sci.everhasnsci2) init = decimalOne
                                return init.times(Decimal.pow(1e11, Decimal.pow(getBuyableAmount("mini", 111), 1.2)))
                        },
                        canAfford:() => player.mini.c_points.points.gte(tmp.mini.buyables[111].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[111] = player.mini.buyables[111].plus(1)
                                if (player.mu.CCostFree) return
                                player.mini.c_points.points = player.mini.c_points.points.sub(tmp.mini.buyables[111].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(player.extremeMode ? "1e58000" : "1e56700")
                                if (hasMilestone("tokens", 28) || player.sci.everhasnsci2) div = decimalOne
                                let base = 1e11
                                let exp = 1.2
                                let pts = player.mini.c_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 102).gt(470)
                        },
                        base(){
                                return player.mini.buyables[111].div(500).plus(1)
                        },
                        effect(){
                                return tmp.mini.buyables[111].base.times(player.mini.buyables[111])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[111]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.mini.buyables[111].effect) + " to <bdi style='color:#CC0033'>C</bdi></b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 111)) + " C Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "(1+x/500)*x<br>" + format(getBuyableBase("mini", 111),3) + "*x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e56700)*(1e11^x<sup>1.3</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("67", "80")
                                if (hasMilestone("tokens", 28) || player.sci.everhasnsci2) cost2 = "1e11^x<sup>1.3</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                112: {
                        title: "C Point gain 9",
                        cost(){
                                let init = new Decimal(player.extremeMode ? "1e72385" : "1e72175")
                                if (hasUpgrade("sci", 301) || player.sci.everhasnsci2) init = decimalOne
                                return init.times(Decimal.pow(1e100, Decimal.pow(getBuyableAmount("mini", 112), 1.1)))
                        },
                        canAfford:() => player.mini.c_points.points.gte(tmp.mini.buyables[112].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[112] = player.mini.buyables[112].plus(1)
                                if (player.mu.CCostFree) return
                                player.mini.c_points.points = player.mini.c_points.points.sub(tmp.mini.buyables[112].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(player.extremeMode ? "1e72385" : "1e72175")
                                if (hasUpgrade("sci", 301) || player.sci.everhasnsci2) div = decimalOne
                                let base = 1e100
                                let exp = 1.1
                                let pts = player.mini.c_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 92).gt(260)
                        },
                        base(){
                                let ret = player.h.points.max(10).log10()

                                if (hasChallenge("n", 12)) ret = ret.times(Math.log(10))

                                return ret
                        },
                        effect(){
                                return tmp.mini.buyables[112].base.pow(player.mini.buyables[112])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[112]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[112].effect) + " to C Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 112)) + " C Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "(log10(Hydrogen))<sup>x</sup><br>" + format(getBuyableBase("mini", 112)) + "^x"
                                if (hasChallenge("n", 12)) eformula = eformula.replace("log10", "ln")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e72175)*(1e100^x<sup>1.1</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("175", "385")
                                if (hasUpgrade("sci", 301) || player.sci.everhasnsci2) cost2 = "1e100^x<sup>1.1</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                113: {
                        title: "C Point gain 10",
                        cost(){
                                let init = new Decimal(player.extremeMode ? "1e95300" : "1e80870")
                                if (player.sci.everhasnsci2) init = decimalOne
                                return init.times(Decimal.pow(2, Decimal.pow(getBuyableAmount("mini", 113), 1.1).times(1024)))
                        },
                        canAfford:() => player.mini.c_points.points.gte(tmp.mini.buyables[113].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[113] = player.mini.buyables[113].plus(1)
                                if (player.mu.CCostFree) return
                                player.mini.c_points.points = player.mini.c_points.points.sub(tmp.mini.buyables[113].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(player.extremeMode ? "1e95300" : "1e80870")
                                if (player.sci.everhasnsci2) div = decimalOne
                                let base = Decimal.pow(2, 1024)
                                let exp = 1.1
                                let pts = player.mini.c_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 92).gt(285)
                        },
                        base(){
                                let ret = player.mini.b_points.points.max(10).log10()

                                if (hasMilestone("n", 16)) ret = ret.times(player.mini.buyables[113].max(1))

                                return ret
                        },
                        effect(){
                                return tmp.mini.buyables[113].base.pow(player.mini.buyables[113])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[113]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[113].effect) + " to C Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 113)) + " C Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "(log10(B Points))<sup>x</sup><br>" + format(getBuyableBase("mini", 113)) + "^x"
                                if (hasMilestone("n", 16)) eformula = eformula.replace("(l", "(x*l")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e80870)*(1.80e308^x<sup>1.1</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("80870", "95300")
                                if (player.sci.everhasnsci2) cost2 = "1.80e308^x<sup>1.1</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                121: {
                        title: "Linear Increase 1",
                        cost(){
                                let init = new Decimal(150)
                                if (hasUpgrade("sci", 312)) init = decimalOne
                                return init.times(Decimal.pow(1.2, Decimal.pow(getBuyableAmount("mini", 121), 1.1)))
                        },
                        canAfford:() => player.mini.d_points.points.gte(tmp.mini.buyables[121].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[121] = player.mini.buyables[121].plus(1)
                                if (hasUpgrade("mini", 55)) return
                                if (hasUpgrade("sci", 321)) return
                                player.mini.d_points.points = player.mini.d_points.points.sub(tmp.mini.buyables[121].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(150)
                                if (hasUpgrade("sci", 312)) div = decimalOne
                                let base = 1.2
                                let exp = 1.1
                                let pts = player.mini.d_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return player.mini.d_points.best.gt(100)
                        },
                        base(){
                                let ret = decimalOne

                                if (hasUpgrade("mini", 61)) {
                                        let base = player.mini.buyables[121].max(8).log(8)
                                        let upg = tmp.mini.d_points.getUpgrades
                                        let exp = new Decimal(upg).max(0).times(2)
                                        ret = ret.times(base.pow(exp))
                                }

                                return ret
                        },
                        effect(){
                                return tmp.mini.buyables[121].base.times(player.mini.buyables[121])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[121]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.mini.buyables[121].effect) + " to Linear speed coefficient</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 121)) + " D Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(getBuyableBase("mini", 121)) + "*x"
                                if (hasUpgrade("mini", 61)) eformula = "log8(x)<sup>2*upgrades</sup>*x<br>" + eformula

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(150)*(1.2^x<sup>1.1</sup>)" 
                                if (hasUpgrade("sci", 312)) cost2 = "1.2^x<sup>1.1</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                122: {
                        title: "Fuel Increase 1",
                        cost(){
                                let init = new Decimal(1e19)
                                if (hasUpgrade("sci", 321)) init = decimalOne
                                return init.times(Decimal.pow(3, Decimal.pow(getBuyableAmount("mini", 122), 1.1)))
                        },
                        canAfford:() => player.mini.d_points.points.gte(tmp.mini.buyables[122].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[122] = player.mini.buyables[122].plus(1)
                                if (hasUpgrade("mini", 55)) return
                                player.mini.d_points.points = player.mini.d_points.points.sub(tmp.mini.buyables[122].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(1e19)
                                if (hasUpgrade("sci", 321)) div = decimalOne
                                let base = 3
                                let exp = 1.1
                                let pts = player.mini.d_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(7)
                        },
                        base(){
                                return new Decimal(2).plus(tmp.mini.buyables[131].effect)
                        },
                        effect(){
                                return tmp.mini.buyables[122].base.pow(player.mini.buyables[122])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[122]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[122].effect) + " to Maximum Fuel</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 122)) + " D Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(getBuyableBase("mini", 122)) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e19)*(3^x<sup>1.1</sup>)" 
                                if (hasUpgrade("sci", 321)) cost2 = "3^x<sup>1.1</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                123: {
                        title: "Fuel Increase 2",
                        cost(){
                                let init = new Decimal("1e383")
                                if (player.extremeMode) init = new Decimal("1e390")
                                if (hasUpgrade("sci", 332)) init = decimalOne
                                return init.times(Decimal.pow(5, Decimal.pow(getBuyableAmount("mini", 123), 1.2)))
                        },
                        canAfford:() => player.mini.d_points.points.gte(tmp.mini.buyables[123].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[123] = player.mini.buyables[123].plus(1)
                                if (hasUpgrade("mini", 55)) return
                                player.mini.d_points.points = player.mini.d_points.points.sub(tmp.mini.buyables[123].cost)
                        },
                        maxAfford(){
                                let div = new Decimal("1e383")
                                if (player.extremeMode) div = new Decimal("1e390")
                                if (hasUpgrade("sci", 332)) div = decimalOne
                                let base = 5
                                let exp = 1.2
                                let pts = player.mini.d_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(78)
                        },
                        base(){
                                return player.points.max(10).log10().log10().max(1)
                        },
                        effect(){
                                return tmp.mini.buyables[123].base.pow(player.mini.buyables[123])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[123]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[123].effect) + " to Maximum Fuel</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 123)) + " D Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(log10(Points))^x<br>" + format(getBuyableBase("mini", 123)) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e383)*(5^x<sup>1.2</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("383", "390")
                                if (hasUpgrade("sci", 332)) cost2 = "5^x<sup>1.2</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                131: {
                        title: "Quadratic Increase",
                        cost(){
                                let init = new Decimal("1e1140")
                                if (player.extremeMode) init = new Decimal("1e1215")
                                if (hasUpgrade("sci", 332)) init = decimalOne
                                return init.times(Decimal.pow(10, Decimal.pow(getBuyableAmount("mini", 131), 1.2)))
                        },
                        canAfford:() => player.mini.d_points.points.gte(tmp.mini.buyables[131].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[131] = player.mini.buyables[131].plus(1)
                                if (hasUpgrade("mini", 55)) return
                                player.mini.d_points.points = player.mini.d_points.points.sub(tmp.mini.buyables[131].cost)
                        },
                        maxAfford(){
                                let div = new Decimal("1e1140")
                                if (player.extremeMode) div = new Decimal("1e1215")
                                if (hasUpgrade("sci", 332)) div = decimalOne
                                let base = 10
                                let exp = 1.2
                                let pts = player.mini.d_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(183)
                        },
                        base(){
                                let ret = new Decimal(tmp.mini.d_points.getUpgrades)

                                if (hasUpgrade("mini", 62)) ret = ret.pow(player.extremeMode && !hasUpgrade("sci", 335) ? 2 : 3)

                                return ret.div(100)
                        },
                        effect(){
                                return tmp.mini.buyables[131].base.times(player.mini.buyables[131])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[131]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.mini.buyables[131].effect) + " to Quadratic speed coefficient and Fuel Increase 1 base</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 131)) + " D Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "[upgrades]/100*x<br>" + format(getBuyableBase("mini", 131)) + "*x"
                                if (hasUpgrade("mini", 62)) eformula = eformula.replace("]", "]^" + (player.extremeMode && !hasUpgrade("sci", 335) ? "2" : "3"))

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e1140)*(10^x<sup>1.2</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("1140", "1215")
                                if (hasUpgrade("sci", 332)) cost2 = "10^x<sup>1.2</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                132: {
                        title: "Exponential Increase",
                        cost(){
                                let init = new Decimal("1e6415")
                                if (player.extremeMode) init = new Decimal("1e7834")
                                if (hasUpgrade("sci", 331)) init = decimalOne
                                return init.times(Decimal.pow(1e38, Decimal.pow(getBuyableAmount("mini", 132), 1.4)))
                        },
                        canAfford:() => player.mini.d_points.points.gte(tmp.mini.buyables[132].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[132] = player.mini.buyables[132].plus(1)
                                if (hasUpgrade("mini", 55)) return
                                player.mini.d_points.points = player.mini.d_points.points.sub(tmp.mini.buyables[132].cost)
                        },
                        maxAfford(){
                                let div = new Decimal("1e6415")
                                if (player.extremeMode) div = new Decimal("1e7834")
                                if (hasUpgrade("sci", 331)) div = decimalOne
                                let base = 1e38
                                let exp = 1.4
                                let pts = player.mini.d_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(690)
                        },
                        base(){
                                let ret = new Decimal(.01)

                                if (hasChallenge("n", 42)) ret = ret.plus(.001)

                                return ret
                        },
                        effect(){
                                return tmp.mini.buyables[132].base.times(player.mini.buyables[132])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[132]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.mini.buyables[132].effect, 4) + " to exponential speed base</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 132)) + " D Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(getBuyableBase("mini", 132), 4) + "*x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e6415)*(1e38^x<sup>1.4</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("6415", "7834")
                                if (hasUpgrade("sci", 331)) cost2 = "1e38^x<sup>1.4</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                133: {
                        title: "Fuel Efficiency",
                        cost(){
                                let init = new Decimal("1e32717")
                                if (player.extremeMode) init = new Decimal(41647).pow10()
                                if (hasUpgrade("sci", 333)) init = decimalOne
                                return init.times(Decimal.pow(1e8, Decimal.pow(getBuyableAmount("mini", 133), 1.5)))
                        },
                        canAfford:() => player.mini.d_points.points.gte(tmp.mini.buyables[133].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[133] = player.mini.buyables[133].plus(1)
                                if (hasUpgrade("mini", 55)) return
                                player.mini.d_points.points = player.mini.d_points.points.sub(tmp.mini.buyables[133].cost)
                        },
                        maxAfford(){
                                let div = new Decimal("1e32717")
                                let base = 1e8
                                if (player.extremeMode) div = new Decimal(41647).pow10()
                                if (hasUpgrade("sci", 333)) div = decimalOne
                                let exp = 1.5
                                let pts = player.mini.d_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(2400)
                        },
                        base(){
                                return new Decimal(.01)
                        },
                        effect(){
                                return tmp.mini.buyables[133].base.times(player.mini.buyables[133])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[133]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.mini.buyables[133].effect, 4) + " to square rooting factor</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 133)) + " D Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(getBuyableBase("mini", 133), 4) + "*x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e32717)*(1e8^x<sup>1.5</sup>)" 
                                if (player.extremeMode) cost2 = "(1e41647)*(1e8^x<sup>1.5</sup>)"
                                if (hasUpgrade("sci", 333)) cost2 = "1e8^x<sup>1.5</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                151: {
                        title: "Gas Pedal",
                        cost(){
                                let init = new Decimal(5000)
                                if (hasUpgrade("sci", 313)) init = decimalOne
                                let exp = hasUpgrade("sci", 315) ? 1.2 : 1.3
                                return init.times(Decimal.pow(20, Decimal.pow(getBuyableAmount("mini", 151), exp)))
                        },
                        canAfford:() => player.mini.d_points.points.gte(tmp.mini.buyables[151].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[151] = player.mini.buyables[151].plus(1)
                                if (hasUpgrade("mini", 74)) return
                                player.mini.d_points.points = player.mini.d_points.points.sub(tmp.mini.buyables[151].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(5000)
                                if (hasUpgrade("sci", 313)) div = decimalOne
                                let base = 20
                                let exp = hasUpgrade("sci", 315) ? 1.2 : 1.3
                                let pts = player.mini.d_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 121).gte(12)
                        },
                        base(){
                                return getBuyableAmount("mini", 121).max(1)
                        },
                        effect(){
                                return tmp.mini.buyables[151].base.pow(player.mini.buyables[151])                                                                                                                     
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[151]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[151].effect) + " to D Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 151)) + " D Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "(Linear Increase 1 buyables)<sup>x</sup><br>" + formatWhole(getBuyableBase("mini", 151)) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(5000)*(20^x<sup>1.3</sup>)" 
                                if (hasUpgrade("sci", 313)) cost2 = "20^x<sup>1.3</sup>"
                                if (hasUpgrade("sci", 315)) cost2 = cost2.replace("1.3", "1.2")
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                152: {
                        title: "Engine",
                        cost(){
                                let init = new Decimal(5e32)
                                if (player.extremeMode) init = new Decimal(3e41)
                                if (hasUpgrade("sci", 322)) init = decimalOne
                                return init.times(Decimal.pow(1000, Decimal.pow(getBuyableAmount("mini", 152), 1.2)))
                        },
                        canAfford:() => player.mini.d_points.points.gte(tmp.mini.buyables[152].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[152] = player.mini.buyables[152].plus(1)
                                if (hasUpgrade("mini", 74)) return
                                player.mini.d_points.points = player.mini.d_points.points.sub(tmp.mini.buyables[152].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(5e32)
                                if (player.extremeMode) div = new Decimal(3e41)
                                if (hasUpgrade("sci", 322)) div = decimalOne
                                let base = 1000
                                let exp = 1.2
                                let pts = player.mini.d_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 121).gte(210)
                        },
                        base(){
                                return player.n.points.max(10).log10()
                        },
                        effect(){
                                return tmp.mini.buyables[152].base.pow(player.mini.buyables[152])                                                                                                                     
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[152]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[152].effect) + " to D Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 152)) + " D Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "(log10(Nitrogen))<sup>x</sup><br>" + format(getBuyableBase("mini", 152)) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(5e32)*(1e3^x<sup>1.2</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("5e32", "3e41")
                                if (hasUpgrade("sci", 322)) cost2 = "1e3^x<sup>1.2</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                153: {
                        title: "Fuel Gauge",
                        cost(){
                                let init = new Decimal(1e140)
                                if (hasUpgrade("sci", 323)) init = decimalOne
                                return init.times(Decimal.pow(1e10, Decimal.pow(getBuyableAmount("mini", 153), 1.3)))
                        },
                        canAfford:() => player.mini.d_points.points.gte(tmp.mini.buyables[153].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[153] = player.mini.buyables[153].plus(1)
                                if (hasUpgrade("mini", 74)) return
                                player.mini.d_points.points = player.mini.d_points.points.sub(tmp.mini.buyables[153].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(1e140)
                                if (hasUpgrade("sci", 323)) div = decimalOne
                                let base = 1e10
                                let exp = 1.3
                                let pts = player.mini.d_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 121).gte(880)
                        },
                        base(){
                                return player.mini.d_points.fuel.max(10).log10()
                        },
                        effect(){
                                return tmp.mini.buyables[153].base.pow(player.mini.buyables[153])                                                                                                                     
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[153]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[153].effect) + " to D Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 153)) + " D Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "(log10(Fuel))<sup>x</sup><br>" + format(getBuyableBase("mini", 153)) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e140)*(1e10^x<sup>1.3</sup>)" 
                                if (hasUpgrade("sci", 323)) cost2 = "1e10^x<sup>1.3</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                161: {
                        title: "Accelerometer",
                        cost(){
                                let init = new Decimal(1e213)
                                if (player.extremeMode) init = new Decimal(1e265)
                                if (hasUpgrade("sci", 324)) init = decimalOne
                                let exp = hasUpgrade("sci", 342) ? 1.1 : 1.2
                                return init.times(Decimal.pow(1e20, Decimal.pow(getBuyableAmount("mini", 161), exp)))
                        },
                        canAfford:() => player.mini.d_points.points.gte(tmp.mini.buyables[161].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[161] = player.mini.buyables[161].plus(1)
                                if (hasUpgrade("mini", 74)) return
                                player.mini.d_points.points = player.mini.d_points.points.sub(tmp.mini.buyables[161].cost)
                        },
                        maxAfford(){
                                let div = new Decimal(1e213)
                                if (player.extremeMode) div = new Decimal(1e265)
                                if (hasUpgrade("sci", 324)) div = decimalOne
                                let base = 1e20
                                let exp = hasUpgrade("sci", 342) ? 1.1 : 1.2
                                let pts = player.mini.d_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 121).gte(1290)
                        },
                        base(){
                                return player.mini.d_points.points.max(10).log10()
                        },
                        effect(){
                                return tmp.mini.buyables[161].base.pow(player.mini.buyables[161])                                                                                                                     
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[161]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[161].effect) + " to D Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 161)) + " D Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "(log10(D Points))<sup>x</sup><br>" + format(getBuyableBase("mini", 161)) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e213)*(1e20^x<sup>1.2</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("213", "265")
                                if (hasUpgrade("sci", 324)) cost2 = "1e20^x<sup>1.2</sup>"
                                if (hasUpgrade("sci", 342)) cost2 = cost2.replace("1.2", "1.1")
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                162: {
                        title: "Steering Wheel",
                        cost(){
                                let init = new Decimal("1e654")
                                if (player.extremeMode) init = new Decimal("1e650")
                                if (hasUpgrade("sci", 325)) init = decimalOne
                                return init.times(Decimal.pow(100, Decimal.pow(getBuyableAmount("mini", 162), 1.2)))
                        },
                        canAfford:() => player.mini.d_points.points.gte(tmp.mini.buyables[162].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[162] = player.mini.buyables[162].plus(1)
                                if (hasUpgrade("mini", 74)) return
                                player.mini.d_points.points = player.mini.d_points.points.sub(tmp.mini.buyables[162].cost)
                        },
                        maxAfford(){
                                let div = new Decimal("1e654")
                                if (player.extremeMode) div = new Decimal("1e650")
                                if (hasUpgrade("sci", 325)) div = decimalOne
                                let base = 100
                                let exp = 1.2
                                let pts = player.mini.d_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(120)
                        },
                        base(){
                                return new Decimal(tmp.mini.d_points.getUpgrades).max(1)
                        },
                        effect(){
                                return tmp.mini.buyables[162].base.pow(player.mini.buyables[162])                                                                                                                     
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[162]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[162].effect) + " to D Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 162)) + " D Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "(Upgrades)<sup>x</sup><br>" + formatWhole(getBuyableBase("mini", 162)) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e654)*(100^x<sup>1.2</sup>)"
                                if (player.extremeMode) cost2 = cost2.replace("654", "650") 
                                if (hasUpgrade("sci", 325)) cost2 = "100^x<sup>1.2</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                163: {
                        title: "Air Conditioning",
                        cost(){
                                let init = new Decimal("1e1344")
                                if (player.extremeMode) init = new Decimal("1e1505")
                                if (hasUpgrade("sci", 333)) init = decimalOne
                                return init.times(Decimal.pow(1e24, Decimal.pow(getBuyableAmount("mini", 163), 1.1)))
                        },
                        canAfford:() => player.mini.d_points.points.gte(tmp.mini.buyables[163].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[163] = player.mini.buyables[163].plus(1)
                                if (hasUpgrade("mini", 74)) return
                                player.mini.d_points.points = player.mini.d_points.points.sub(tmp.mini.buyables[163].cost)
                        },
                        maxAfford(){
                                let div = new Decimal("1e1344")
                                if (player.extremeMode) div = new Decimal("1e1505")
                                if (hasUpgrade("sci", 333)) div = decimalOne
                                let base = 1e24
                                let exp = 1.1
                                let pts = player.mini.d_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(207)
                        },
                        base(){
                                return getBuyableAmount("mini", 131).max(1)
                        },
                        effect(){
                                return tmp.mini.buyables[163].base.pow(player.mini.buyables[163])                                                                                                                     
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[163]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[163].effect) + " to D Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 163)) + " D Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "(Quadratic Increase levels)<sup>x</sup><br>" + format(getBuyableBase("mini", 163)) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e1344)*(1e24^x<sup>1.1</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("1344", "1505")
                                if (hasUpgrade("sci", 333)) cost2 = "1e24^x<sup>1.1</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                171: {
                        title: "Brake Pedal",
                        cost(){
                                let init = new Decimal("1e3020")
                                if (player.extremeMode) init = new Decimal("1e3631")
                                if (hasUpgrade("sci", 334)) init = decimalOne
                                return init.times(Decimal.pow(1e30, Decimal.pow(getBuyableAmount("mini", 171), 1.1)))
                        },
                        canAfford:() => player.mini.d_points.points.gte(tmp.mini.buyables[171].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[171] = player.mini.buyables[171].plus(1)
                                if (hasUpgrade("mini", 74)) return
                                player.mini.d_points.points = player.mini.d_points.points.sub(tmp.mini.buyables[171].cost)
                        },
                        maxAfford(){
                                let div = new Decimal("1e3020")
                                if (player.extremeMode) div = new Decimal("1e3631")
                                if (hasUpgrade("sci", 334)) div = decimalOne
                                let base = 1e30
                                let exp = 1.1
                                let pts = player.mini.d_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(380)
                        },
                        base(){
                                return getBuyableAmount("mini", 151)
                        },
                        effect(){
                                return tmp.mini.buyables[171].base.pow(player.mini.buyables[171])                                                                                                                     
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[171]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[171].effect) + " to D Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 171)) + " D Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "(Gas Pedal levels)<sup>x</sup><br>" + format(getBuyableBase("mini", 171)) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e3020)*(1e30^x<sup>1.1</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("3020", "3631")
                                if (hasUpgrade("sci", 334)) cost2 = "1e30^x<sup>1.1</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                172: {
                        title: "Seat Belt",
                        cost(){
                                let init = new Decimal("1e4751")
                                if (player.extremeMode) init = new Decimal("1e6041")
                                if (hasUpgrade("sci", 341)) init = decimalOne
                                return init.times(Decimal.pow(1e20, Decimal.pow(getBuyableAmount("mini", 172), 1.4)))
                        },
                        canAfford:() => player.mini.d_points.points.gte(tmp.mini.buyables[172].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[172] = player.mini.buyables[172].plus(1)
                                if (hasUpgrade("mini", 74)) return
                                player.mini.d_points.points = player.mini.d_points.points.sub(tmp.mini.buyables[172].cost)
                        },
                        maxAfford(){
                                let div = new Decimal("1e4751")
                                if (player.extremeMode) div = new Decimal("1e6041")
                                if (hasUpgrade("sci", 341)) div = decimalOne
                                let base = 1e20
                                let exp = 1.4
                                let pts = player.mini.d_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(550)
                        },
                        base(){
                                return tmp.n.challenges[32].rewardEffect
                        },
                        effect(){
                                return tmp.mini.buyables[172].base.pow(player.mini.buyables[172])                                                                                                                     
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[172]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[172].effect) + " to D Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 172)) + " D Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "<bdi style='color:#CC0033'>D</bdi><sup>x</sup><br>" + format(getBuyableBase("mini", 172)) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e4751)*(1e20^x<sup>1.4</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("4751", "6041")
                                if (hasUpgrade("sci", 341)) cost2 = "1e20^x<sup>1.4</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                173: {
                        title: "Gas Gauge",
                        cost(){
                                let init = new Decimal("1e32284")
                                if (player.extremeMode) init = new Decimal("1e46073")
                                if (hasUpgrade("sci", 335)) init = decimalOne
                                let exp = player.extremeMode ? 1.2 : 1.1
                                return init.times(Decimal.pow(1e30, Decimal.pow(getBuyableAmount("mini", 173), exp)))
                        },
                        canAfford:() => player.mini.d_points.points.gte(tmp.mini.buyables[173].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[173] = player.mini.buyables[173].plus(1)
                                if (hasUpgrade("mini", 74)) return
                                player.mini.d_points.points = player.mini.d_points.points.sub(tmp.mini.buyables[173].cost)
                        },
                        maxAfford(){
                                let div = new Decimal("1e32284")
                                let base = 1e30
                                let exp = 1.1
                                if (player.extremeMode) {
                                        div = new Decimal("1e46073")
                                        exp = 1.2
                                }
                                if (hasUpgrade("sci", 335)) div = decimalOne
                                let pts = player.mini.d_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(2150)
                        },
                        base(){
                                return tmp.mini.d_points.getEffectiveFuelAux
                        },
                        effect(){
                                return tmp.mini.buyables[173].base.pow(player.mini.buyables[173])                                                                                                                     
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[173]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[173].effect) + " to D Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 173)) + " D Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = makeRed("y") + "<sup>x</sup><br>" + format(getBuyableBase("mini", 173)) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e32284)*(1e30^x<sup>1.1</sup>)" 
                                if (player.extremeMode) cost2 = "(1e46073)*(1e30^x<sup>1.2</sup>)"
                                if (hasUpgrade("sci", 335)) cost2 = "1e30^x<sup>1.2</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                181: {
                        title: "Parking Brake",
                        cost(){
                                let init = new Decimal("1e41025")
                                if (player.extremeMode) init = new Decimal("1e50073")
                                if (hasUpgrade("sci", 343)) init = decimalOne
                                let exp = hasUpgrade("sci", 343) ? 1.2 : 1.3
                                return init.times(Decimal.pow(1e35, Decimal.pow(getBuyableAmount("mini", 181), exp)))
                        },
                        canAfford:() => player.mini.d_points.points.gte(tmp.mini.buyables[181].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[181] = player.mini.buyables[181].plus(1)
                                if (hasUpgrade("mini", 74)) return
                                player.mini.d_points.points = player.mini.d_points.points.sub(tmp.mini.buyables[181].cost)
                        },
                        maxAfford(){
                                let div = new Decimal("1e41025")
                                if (player.extremeMode) div = new Decimal("1e50073")
                                if (hasUpgrade("sci", 343)) div = decimalOne
                                let base = 1e35
                                let exp = hasUpgrade("sci", 343) ? 1.2 : 1.3
                                let pts = player.mini.d_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(2888)
                        },
                        base(){
                                return player.mini.c_points.points.max(10).log10()
                        },
                        effect(){
                                return tmp.mini.buyables[181].base.pow(player.mini.buyables[181])                                                                                                                     
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[181]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[181].effect) + " to D Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 181)) + " D Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(C Points)<sup>x</sup><br>" + format(getBuyableBase("mini", 181)) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e41025)*(1e35^x<sup>1.3</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("41025", "50073")
                                if (hasUpgrade("sci", 343)) cost2 = "1e35^x<sup>1.2</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                182: {
                        title: "Gas Tank",
                        cost(){
                                let init = new Decimal("1e193300")
                                if (player.extremeMode) init = new Decimal("1e314500")
                                if (hasUpgrade("p", 102)) init = decimalOne
                                return init.times(Decimal.pow(1e19, Decimal.pow(getBuyableAmount("mini", 182), 1.1)))
                        },
                        canAfford:() => player.mini.d_points.points.gte(tmp.mini.buyables[182].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[182] = player.mini.buyables[182].plus(1)
                                if (hasUpgrade("mini", 74)) return
                                player.mini.d_points.points = player.mini.d_points.points.sub(tmp.mini.buyables[182].cost)
                        },
                        maxAfford(){
                                let div = new Decimal("1e193300")
                                if (player.extremeMode) div = new Decimal("1e314500")
                                if (hasUpgrade("p", 102)) div = decimalOne
                                let base = 1e19
                                let exp = 1.1
                                let pts = player.mini.d_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return hasUpgrade("c", 33)
                        },
                        base(){
                                return player.mini.e_points.points.max(10).log10()
                        },
                        effect(){
                                return tmp.mini.buyables[182].base.pow(player.mini.buyables[182])                                                                                                                     
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[182]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[182].effect) + " to D Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 182)) + " D Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(E Points)<sup>x</sup><br>" + format(getBuyableBase("mini", 182)) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e193300)*(1e19^x<sup>1.1</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("193300", "314500")
                                if (hasUpgrade("p", 102)) cost2 = "1e19^x<sup>1.1</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                183: {
                        title: "Tire",
                        cost:() => new Decimal("3e14159").times(Decimal.pow(265358, Decimal.pow(getBuyableAmount("mini", 183), 2))),
                        canAfford:() => player.mini.d_points.points.gte(tmp.mini.buyables[183].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[183] = player.mini.buyables[183].plus(1)
                                if (hasUpgrade("mini", 74)) return
                                player.mini.d_points.points = player.mini.d_points.points.sub(tmp.mini.buyables[183].cost)
                        },
                        maxAfford(){
                                let div = new Decimal("3e14159")
                                let base = 265358
                                let exp = 2
                                let pts = player.mini.d_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return hasMilestone("p", 3)
                        },
                        base(){
                                return player.p.points.max(1)
                        },
                        effect(){
                                return tmp.mini.buyables[183].base.pow(player.mini.buyables[183])                                                                                                                     
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[183]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[183].effect) + " to D Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 183)) + " D Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "Phosphorus<sup>x</sup><br>" + format(getBuyableBase("mini", 183)) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(3e14159)*(265358^x<sup>2</sup>)" 
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                201: {
                        title: "Iterations",
                        cost(){
                                let a = getBuyableAmount("mini", 201)
                                if (hasMilestone("mu", 4)) return Decimal.pow(10, a.pow(a))
                                if (hasUpgrade("mini", 85)) return Decimal.pow(10, a.plus(1).pow(a))
                                return Decimal.pow(10, a.plus(1).pow(a.plus(1)).sub(a))
                        },
                        canAfford:() => player.mini.e_points.points.gte(tmp.mini.buyables[201].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[201] = player.mini.buyables[201].plus(1)
                                if (hasUpgrade("l", 13)) return
                                player.mini.e_points.points = player.mini.e_points.points.sub(tmp.mini.buyables[201].cost)
                        },
                        unlocked(){
                                return true
                        },
                        effect(){
                                return getBuyableAmount("mini", 201)
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[201]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = formatWhole(tmp.mini.buyables[201].effect) + " iterations</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 201)) + " E Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "10^((x+1)<sup>x+1</sup>-x)" 
                                if (hasUpgrade("mini", 85)) cost2 = "10^(x+1<sup>x</sup>)" 
                                if (hasMilestone("mu", 4)) cost2 = "10^(x<sup>x</sup>)"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allCost
                                return br + end
                        },
                },
                202: {
                        title: "Constant",
                        cost(){
                                let init = new Decimal("30")
                                if (hasUpgrade("sci", 344)) init = decimalOne
                                return init.times(Decimal.pow(1.5, Decimal.pow(getBuyableAmount("mini", 202), 1.1)))
                        },
                        canAfford:() => player.mini.e_points.points.gte(tmp.mini.buyables[202].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[202] = player.mini.buyables[202].plus(1)
                                if (hasUpgrade("sci", 345) || hasUpgrade("l", 13)) return
                                player.mini.e_points.points = player.mini.e_points.points.sub(tmp.mini.buyables[202].cost)
                        },
                        maxAfford(){
                                let div = new Decimal("30")
                                if (hasUpgrade("sci", 344)) div = decimalOne
                                let base = 1.5
                                let exp = 1.1
                                let pts = player.mini.e_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 201).gte(1)
                        },
                        base(){
                                let ret = decimalOne

                                ret = ret.plus(tmp.mini.buyables[221].effect.times(player.mini.buyables[202]))
                                if (hasUpgrade("sci", 353)) ret = ret.plus(.1 * tmp.sci.upgrades[352].levels)

                                return ret
                        },
                        effect(){
                                let ret = tmp.mini.buyables[202].base.times(player.mini.buyables[202])   
                                
                                if (hasUpgrade("c", 35)) ret = ret.times(player.mini.buyables[202].max(1).ln().max(1))

                                return ret                                                                                                                  
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[202]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.mini.buyables[202].effect) + " to " + makeBlue("d") + "</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 202)) + " E Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(getBuyableBase("mini", 202)) + "*x"
                                if (hasUpgrade("c", 35)) eformula = eformula.replace("*x", "*ln(x)*x")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(30)*(1.5^x<sup>1.1</sup>)" 
                                if (hasUpgrade("sci", 344)) cost2 = "1.5^x<sup>1.1</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                203: {
                        title: "Linear",
                        cost(){
                                let init = new Decimal("250")
                                if (hasUpgrade("sci", 345)) init = decimalOne
                                let exp = hasUpgrade("sci", 351) ? 1.15 : 1.2
                                if (hasUpgrade("sci", 362)) exp = 1.1
                                return init.times(Decimal.pow(2, Decimal.pow(getBuyableAmount("mini", 203), exp)))
                        },
                        canAfford:() => player.mini.e_points.points.gte(tmp.mini.buyables[203].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[203] = player.mini.buyables[203].plus(1)
                                if (hasUpgrade("l", 13)) return
                                player.mini.e_points.points = player.mini.e_points.points.sub(tmp.mini.buyables[203].cost)
                        },
                        maxAfford(){
                                let div = new Decimal("250")
                                if (hasUpgrade("sci", 345)) div = decimalOne
                                let base = 2
                                let exp = hasUpgrade("sci", 351) ? 1.15 : 1.2
                                if (hasUpgrade("sci", 362)) exp = 1.1
                                let pts = player.mini.e_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 202).gte(3)
                        },
                        base(){
                                return decimalOne.plus(tmp.mini.buyables[212].effect.times(getBuyableAmount("mini", 211)))
                        },
                        effect(){
                                return tmp.mini.buyables[203].base.times(player.mini.buyables[203])                                                                                                                     
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[203]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.mini.buyables[203].effect) + " to " + makeBlue("c") + "</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 203)) + " E Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(getBuyableBase("mini", 203)) + "*x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(250)*(2^x<sup>1.2</sup>)" 
                                if (hasUpgrade("sci", 345)) cost2 = "2^x<sup>1.2</sup>"
                                if (hasUpgrade("sci", 351)) cost2 = cost2.replace("1.2", "1.15")
                                if (hasUpgrade("sci", 362)) cost2 = cost2.replace("1.15", "1.1")
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                211: {
                        title: "Quadratic",
                        cost(){
                                let init = new Decimal("1e4")
                                if (hasUpgrade("sci", 351)) init = decimalOne
                                return init.times(Decimal.pow(4, Decimal.pow(getBuyableAmount("mini", 211), 1.2)))
                        },
                        canAfford:() => player.mini.e_points.points.gte(tmp.mini.buyables[211].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[211] = player.mini.buyables[211].plus(1)
                                if (hasUpgrade("l", 13)) return
                                player.mini.e_points.points = player.mini.e_points.points.sub(tmp.mini.buyables[211].cost)
                        },
                        maxAfford(){
                                let div = new Decimal("1e4")
                                if (hasUpgrade("sci", 351)) div = decimalOne
                                let base = 4
                                let exp = 1.2
                                let pts = player.mini.e_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 202).gte(11)
                        },
                        baseInit(){
                                let ret = new Decimal(.2)

                                ret = ret.plus(tmp.mini.buyables[222].effect)
                                if (hasUpgrade("sci", 352)) ret = ret.plus(.05)

                                return ret
                        },
                        base(){
                                let ret = tmp.mini.buyables[211].baseInit

                                if (hasUpgrade("n", 43)) {
                                        let exp = decimalOne
                                        if (hasUpgrade("c", 34)) exp = exp.times(2)
                                        ret = ret.times(player.mini.buyables[211].max(1).ln().max(1).pow(exp))
                                }

                                return ret
                        },
                        effect(){
                                return tmp.mini.buyables[211].base.times(player.mini.buyables[211])                                                                                                                     
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[211]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.mini.buyables[211].effect) + " to " + makeBlue("b") + "</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 211)) + " E Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.mini.buyables[211].baseInit) + "*x<br>"
                                eformula += format(getBuyableBase("mini", 211)) + "*x" 
                                if (hasUpgrade("n", 43)) eformula = eformula.replace("*x", "*ln(x)*x")
                                if (hasUpgrade("c", 34)) eformula = eformula.replace(")", ")<sup>2</sup>")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e4)*(4^x<sup>1.2</sup>)" 
                                if (hasUpgrade("sci", 351)) cost2 = "4^x<sup>1.2</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                212: {
                        title: "a<bdi style='color:#B00E00'>f</bdi>(x) = <bdi style='color:#B00E00'>f</bdi>(ax)",
                        cost(){
                                let init = new Decimal("1e8")
                                let base = player.extremeMode ? 3 : 7
                                if (player.extremeMode) init = new Decimal("5e6")
                                if (hasUpgrade("sci", 354)) init = decimalOne
                                return init.times(Decimal.pow(base, Decimal.pow(getBuyableAmount("mini", 212), 1.2)))
                        },
                        canAfford:() => player.mini.e_points.points.gte(tmp.mini.buyables[212].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[212] = player.mini.buyables[212].plus(1)
                                if (hasUpgrade("l", 13)) return
                                player.mini.e_points.points = player.mini.e_points.points.sub(tmp.mini.buyables[212].cost)
                        },
                        maxAfford(){
                                let div = new Decimal("1e8")
                                if (player.extremeMode) div = new Decimal("5e6")
                                if (hasUpgrade("sci", 354)) div = decimalOne
                                let base = player.extremeMode ? 3 : 7
                                let exp = 1.2
                                let pts = player.mini.e_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 202).gte(25)
                        },
                        base(){
                                return new Decimal(.3).plus(tmp.mini.buyables[222].effect)
                        },
                        effect(){
                                return tmp.mini.buyables[212].base.times(player.mini.buyables[212])                                                                                                                     
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[212]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.mini.buyables[212].effect, 4) + " to Linear base per Quadratic</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 212)) + " E Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(getBuyableBase("mini", 212), 4) + "*x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e8)*(7^x<sup>1.2</sup>)" 
                                if (player.extremeMode) cost2 = "(5e6)*(3^x<sup>1.2</sup>)" 
                                if (hasUpgrade("sci", 354)) cost2 = "3^x<sup>1.2</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                213: {
                        title: "<bdi style='color:#B00E00'>f</bdi>(x+y) = <bdi style='color:#B00E00'>f</bdi>(x)+<bdi style='color:#B00E00'>f</bdi>(y)",
                        cost(){
                                let init = new Decimal("1e9")
                                if (player.extremeMode) init = new Decimal(5e7)
                                if (hasUpgrade("sci", 355)) init = decimalOne
                                return init.times(Decimal.pow(5, Decimal.pow(getBuyableAmount("mini", 213), 1.1)))
                        },
                        canAfford:() => player.mini.e_points.points.gte(tmp.mini.buyables[213].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[213] = player.mini.buyables[213].plus(1)
                                if (hasUpgrade("l", 13)) return
                                player.mini.e_points.points = player.mini.e_points.points.sub(tmp.mini.buyables[213].cost)
                        },
                        maxAfford(){
                                let div = new Decimal("1e9")
                                if (player.extremeMode) div = new Decimal(5e7)
                                if (hasUpgrade("sci", 355)) div = decimalOne
                                let base = 5
                                let exp = 1.1
                                let pts = player.mini.e_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 202).gte(31)
                        },
                        base(){
                                let ret = getBuyableAmount("mini", 203).max(1).ln().max(1)

                                if (hasUpgrade("c", 32)) {
                                        a = tmp.c.upgrades[32].effect
                                        if (a < Math.E) ret = ret.div(Math.log(a))
                                }

                                return ret
                        },
                        effect(){
                                return tmp.mini.buyables[213].base.pow(player.mini.buyables[213])                                                                                                                     
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[213]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[213].effect) + " to E Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 213)) + " E Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "ln(Linear levels)^x<br>" + format(getBuyableBase("mini", 213)) + "^x"
                                if (hasUpgrade("c", 32)) {
                                        let logBase = format(tmp.c.upgrades[32].effect,1)
                                        if (logBase == "2.0") logBase = "2"
                                        eformula = eformula.replace("ln", "log" + logBase)
                                }

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e9)*(5^x<sup>1.1</sup>)"
                                if (player.extremeMode) cost2 = cost2.replace("1e9", "5e7") 
                                if (hasUpgrade("sci", 355)) cost2 = "5^x<sup>1.1</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                221: {
                        title: "∃0 0+x=x+0=x",
                        cost(){
                                let init = new Decimal("1e138")
                                if (player.extremeMode) init = new Decimal("1e122")
                                if (player.sci.buyables[301].gt(0)) init = decimalOne
                                let exp = player.extremeMode ? 1.2 : 1.3
                                return init.times(Decimal.pow(30, Decimal.pow(getBuyableAmount("mini", 221), exp)))
                        },
                        canAfford:() => player.mini.e_points.points.gte(tmp.mini.buyables[221].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[221] = player.mini.buyables[221].plus(1)
                                if (hasUpgrade("l", 13)) return
                                player.mini.e_points.points = player.mini.e_points.points.sub(tmp.mini.buyables[221].cost)
                        },
                        maxAfford(){
                                let div = new Decimal("1e138")
                                let base = 30
                                let exp = 1.3
                                if (player.extremeMode) {
                                        exp = 1.2
                                        div = new Decimal("1e122")
                                }
                                if (player.sci.buyables[301].gt(0)) div = decimalOne
                                let pts = player.mini.e_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 212).gte(66)
                        },
                        base(){
                                return new Decimal(.001)
                        },
                        effect(){
                                return tmp.mini.buyables[221].base.times(player.mini.buyables[221])                                                                                                                     
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[221]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.mini.buyables[221].effect, 4) + " to Constant base per Constant</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 221)) + " E Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(getBuyableBase("mini", 221), 4) + "*x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e138)*(30^x<sup>1.3</sup>)" 
                                if (player.extremeMode) cost2 = "(1e122)*(30^x<sup>1.2</sup>)"
                                if (player.sci.buyables[301].gt(0)) cost2 = "30^x<sup>1.2</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                222: {
                        title: "∃1 1*x=x*1=x",
                        cost(){
                                let init = new Decimal("1e176")
                                if (player.sci.buyables[301].gt(1)) init = decimalOne
                                return init.times(Decimal.pow(3, Decimal.pow(getBuyableAmount("mini", 222), 1.2)))
                        },
                        canAfford:() => player.mini.e_points.points.gte(tmp.mini.buyables[222].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[222] = player.mini.buyables[222].plus(1)
                                if (hasUpgrade("l", 13)) return
                                player.mini.e_points.points = player.mini.e_points.points.sub(tmp.mini.buyables[222].cost)
                        },
                        maxAfford(){
                                let div = new Decimal("1e176")
                                if (player.sci.buyables[301].gt(1)) div = decimalOne
                                let base = 3
                                let exp = 1.2
                                let pts = player.mini.e_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 212).gte(82)
                        },
                        base(){
                                return new Decimal(.02)
                        },
                        effect(){
                                return tmp.mini.buyables[222].base.times(player.mini.buyables[222])                                                                                                                     
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[222]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.mini.buyables[222].effect, 4) + " to respecting scalar and Quadratic base</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 222)) + " E Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(getBuyableBase("mini", 222), 4) + "*x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e176)*(3^x<sup>1.2</sup>)" 
                                if (player.sci.buyables[301].gt(1)) cost2 = "3^x<sup>1.2</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                223: {
                        title: "a+b=b+a",
                        cost(){
                                let init = new Decimal("1e1507")
                                if (player.extremeMode) init = new Decimal("1e1702")
                                if (player.sci.buyables[301].gte(2)) init = decimalOne
                                return init.times(Decimal.pow(8, Decimal.pow(getBuyableAmount("mini", 223), 1.2)))
                        },
                        canAfford:() => player.mini.e_points.points.gte(tmp.mini.buyables[223].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[223] = player.mini.buyables[223].plus(1)
                                if (hasUpgrade("l", 13)) return
                                player.mini.e_points.points = player.mini.e_points.points.sub(tmp.mini.buyables[223].cost)
                        },
                        maxAfford(){
                                let div = new Decimal("1e1507")
                                if (player.extremeMode) div = new Decimal("1e1702")
                                if (player.sci.buyables[301].gte(2)) div = decimalOne
                                let base = 8
                                let exp = 1.2
                                let pts = player.mini.e_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 221).gte(191)
                        },
                        base(){
                                let init = player.mini.e_points.points.max(10).log10()
                                if (hasUpgrade("mini", 83)) init = init.times(Math.log(10))
                                if (hasUpgrade("p", 25)) init = init.div(Math.log(2))

                                let ret = init.max(10).log10()

                                if (hasUpgrade("o", 34)) ret = ret.times(Math.log(10))
                                if (hasUpgrade("p", 15)) ret = ret.div(Math.log(2))

                                return ret
                        },
                        effect(){
                                return tmp.mini.buyables[223].base.pow(player.mini.buyables[223])                                                                                                                     
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[223]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[223].effect) + " to E Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 223)) + " E Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(log10(E Points))^x<br>" + format(getBuyableBase("mini", 223)) + "^x"
                                if (hasUpgrade("o", 34)) eformula = eformula.replace("log10", "ln")
                                if (hasUpgrade("mini", 83)) eformula = eformula.replace("log10", "ln")
                                if (hasUpgrade("p", 15)) eformula = eformula.replace("ln", "log2")
                                if (hasUpgrade("p", 25)) eformula = eformula.replace("ln", "log2")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e1507)*(8^x<sup>1.2</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("1507", "1702")
                                if (player.sci.buyables[301].gte(2)) cost2 = "8^x<sup>1.2</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                231: {
                        title: "(a+b)+c=a+(b+c)",
                        cost(){
                                let init = new Decimal("1e9864")
                                if (player.extremeMode) init = new Decimal("1e9280")
                                if (player.sci.buyables[301].gte(3)) init = decimalOne
                                return init.times(Decimal.pow(8, Decimal.pow(getBuyableAmount("mini", 231), 1.1)))
                        },
                        canAfford:() => player.mini.e_points.points.gte(tmp.mini.buyables[231].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[231] = player.mini.buyables[231].plus(1)
                                if (hasUpgrade("l", 13)) return
                                player.mini.e_points.points = player.mini.e_points.points.sub(tmp.mini.buyables[231].cost)
                        },
                        maxAfford(){
                                let div = new Decimal("1e9864")
                                if (player.extremeMode) div = new Decimal("1e9280")
                                if (player.sci.buyables[301].gte(3)) div = decimalOne
                                let base = 8
                                let exp = 1.1
                                let pts = player.mini.e_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 221).gte(865)
                        },
                        base(){
                                return new Decimal(2.5).plus(tmp.mini.buyables[232].effect)
                        },
                        levelExp(){
                                let ret = decimalOne

                                if (hasUpgrade("c", 33)) ret = ret.times(2)

                                return ret
                        },
                        effect(){
                                let data = tmp.mini.buyables[231]
                                return data.base.times(player.mini.buyables[231].pow(data.levelExp)).plus(1)                                                                                                               
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[231]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[231].effect) + " to " + makeBlue("c") + "</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 231)) + " E Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(getBuyableBase("mini", 231)) + "*x+1"
                                let lvle = tmp.mini.buyables[231].levelExp
                                if (lvle.neq(1)) eformula = eformula.replace("*x", "*x<sup>" + formatWhole(lvle) + "</sup>")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e9864)*(8^x<sup>1.1</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("9864", "9280")
                                if (player.sci.buyables[301].gte(3)) cost2 = "8^x<sup>1.1</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                232: {
                        title: "a*(b+c)=a*b+a*c",
                        cost(){
                                let init = new Decimal("1e34464")
                                if (player.extremeMode) init = new Decimal("1e35768")
                                if (player.sci.buyables[301].gte(4)) init = decimalOne
                                return init.times(Decimal.pow(6, Decimal.pow(getBuyableAmount("mini", 232), 1.3)))
                        },
                        canAfford:() => player.mini.e_points.points.gte(tmp.mini.buyables[232].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[232] = player.mini.buyables[232].plus(1)
                                if (hasUpgrade("l", 13)) return
                                player.mini.e_points.points = player.mini.e_points.points.sub(tmp.mini.buyables[232].cost)
                        },
                        maxAfford(){
                                let div = new Decimal("1e34464")
                                if (player.extremeMode) div = new Decimal("1e35768")
                                if (player.sci.buyables[301].gte(4)) div = decimalOne
                                let base = 6
                                let exp = 1.3
                                let pts = player.mini.e_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 221).gte(2280)
                        },
                        base(){
                                let ret = new Decimal(.1)

                                if (hasMilestone("n", 18)) ret = ret.plus(.01)
                                if (hasUpgrade("p", 21)) ret = ret.plus(.01 * player.p.upgrades.length)

                                return ret
                        },
                        effect(){
                                return tmp.mini.buyables[232].base.times(player.mini.buyables[232])                                                                                                            
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[232]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.mini.buyables[232].effect) + " to " + makeRed("E") + " and addition is associative base</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 232)) + " E Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(getBuyableBase("mini", 232)) + "*x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e34464)*(6^x<sup>1.3</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("34464", "35768")
                                if (player.sci.buyables[301].gte(4)) cost2 = "6^x<sup>1.3</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                233: {
                        title: "(a+b)*c=a*c+b*c",
                        cost(){
                                let init = new Decimal("1e34833")
                                if (player.extremeMode) init = new Decimal("1e36530")
                                if (player.sci.buyables[301].gte(5)) init = decimalOne
                                return init.times(Decimal.pow(100, Decimal.pow(getBuyableAmount("mini", 233), 1.3)))
                        },
                        canAfford:() => player.mini.e_points.points.gte(tmp.mini.buyables[233].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[233] = player.mini.buyables[233].plus(1)
                                if (hasUpgrade("l", 13)) return
                                player.mini.e_points.points = player.mini.e_points.points.sub(tmp.mini.buyables[233].cost)
                        },
                        maxAfford(){
                                let div = new Decimal("1e34833")
                                if (player.extremeMode) div = new Decimal("1e36530")
                                if (player.sci.buyables[301].gte(5)) div = decimalOne
                                let base = 100
                                let exp = 1.3
                                let pts = player.mini.e_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return getBuyableAmount("mini", 221).gte(2300)
                        },
                        base(){
                                return tmp.n.upgrades[35].effect.max(1)
                        },
                        effect(){
                                return tmp.mini.buyables[233].base.pow(player.mini.buyables[233])                                                                                                            
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[233]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[233].effect) + " to E Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 233)) + " E Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = makeRed("E") + "^x<br>" + format(getBuyableBase("mini", 233)) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e34833)*(100^x<sup>1.3</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("34833", "36530")
                                if (player.sci.buyables[301].gte(5)) cost2 = "100^x<sup>1.3</sup>"
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                241: {
                        title: "(a*b)*c=a*(b*c)",
                        cost(){
                                let init = new Decimal("1e122e4")
                                if (player.extremeMode) init = new Decimal("1e1112e3")
                                return init.times(Decimal.pow(1e5, Decimal.pow(getBuyableAmount("mini", 241), 1.1)))
                        },
                        canAfford:() => player.mini.e_points.points.gte(tmp.mini.buyables[241].cost),
                        buy(){
                                if (!this.canAfford()) return
                                player.mini.buyables[241] = player.mini.buyables[241].plus(1)
                                if (hasUpgrade("l", 13)) return
                                player.mini.e_points.points = player.mini.e_points.points.sub(tmp.mini.buyables[241].cost)
                        },
                        maxAfford(){
                                let div = new Decimal("1e122e4")
                                if (player.extremeMode) div = new Decimal("1e1112e3")
                                let base = 1e5
                                let exp = 1.1
                                let pts = player.mini.e_points.points
                                if (pts.lt(div)) return decimalZero
                                return pts.div(div).log(base).root(exp).floor().plus(1)
                        },
                        unlocked(){
                                return hasMilestone("mu", 2)
                        },
                        base(){
                                return player.p.points.max(10).log10()
                        },
                        effect(){
                                return tmp.mini.buyables[241].base.pow(player.mini.buyables[241])                                                                                                            
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Amount</h2>: " + formatWhole(player.mini.buyables[241]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.mini.buyables[241].effect) + " to E Point gain</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("mini", 241)) + " E Points</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "log10(Phosphorus)^x<br>" + format(getBuyableBase("mini", 241)) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = "(1e1,220,000)*(1e5^x<sup>1.1</sup>)" 
                                if (player.extremeMode) cost2 = cost2.replace("220", "112")
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
        },
        clickables: {
                rows: 5,
                cols: 5,
                unlockedSlots(){
                        return 4 + getBuyableAmount("mini", 71).toNumber()
                },
                11: {
                        title(){
                                return "<h3 style='color: #607216'>SLOT 1</h3>"
                        },
                        display(){
                                lr = player.mini.c_points.lastRoll
                                let val = 1
                                if (tmp.mini.clickables.unlockedSlots >= val) {
                                        if (lr.length >= val) {
                                                let start = "<h2 style='font-size: 500%'>"
                                                let end = "</h2>"
                                                return start + getUnicodeCharacter(lr[val-1]) + end
                                        }
                                        return "Have not rolled this slot yet"
                                }
                                return "Not unlocked yet"
                        },
                        unlocked(){
                                return tmp.mini.clickables.unlockedSlots >= 1
                        },
                        canClick(){
                                return false
                        },
                        onClick(){},
                },
                12: {
                        title(){
                                return "<h3 style='color: #607216'>SLOT 2</h3>"
                        },
                        display(){
                                lr = player.mini.c_points.lastRoll
                                let val = 2
                                if (tmp.mini.clickables.unlockedSlots >= val) {
                                        if (lr.length >= val) {
                                                let start = "<h2 style='font-size: 500%'>"
                                                let end = "</h2>"
                                                return start + getUnicodeCharacter(lr[val-1]) + end
                                        }
                                        return "Have not rolled this slot yet"
                                }
                                return "Not unlocked yet"
                        },
                        unlocked(){
                                return tmp.mini.clickables.unlockedSlots >= 1
                        },
                        canClick(){
                                return false
                        },
                        onClick(){},
                },
                13: {
                        title(){
                                return "<h3 style='color: #607216'>SLOT 3</h3>"
                        },
                        display(){
                                lr = player.mini.c_points.lastRoll
                                let val = 3
                                if (tmp.mini.clickables.unlockedSlots >= val) {
                                        if (lr.length >= val) {
                                                let start = "<h2 style='font-size: 500%'>"
                                                let end = "</h2>"
                                                return start + getUnicodeCharacter(lr[val-1]) + end
                                        }
                                        return "Have not rolled this slot yet"
                                }
                                return "Not unlocked yet"
                        },
                        unlocked(){
                                return tmp.mini.clickables.unlockedSlots >= 1
                        },
                        canClick(){
                                return false
                        },
                        onClick(){},
                },
                14: {
                        title(){
                                return "<h3 style='color: #607216'>SLOT 4</h3>"
                        },
                        display(){
                                lr = player.mini.c_points.lastRoll
                                let val = 4
                                if (tmp.mini.clickables.unlockedSlots >= val) {
                                        if (lr.length >= val) {
                                                let start = "<h2 style='font-size: 500%'>"
                                                let end = "</h2>"
                                                return start + getUnicodeCharacter(lr[val-1]) + end
                                        }
                                        return "Have not rolled this slot yet"
                                }
                                return "Not unlocked yet"
                        },
                        unlocked(){
                                return tmp.mini.clickables.unlockedSlots >= 1
                        },
                        canClick(){
                                return false
                        },
                        onClick(){},
                },
                15: {
                        title(){
                                return "<h3 style='color: #607216'>SLOT 5</h3>"
                        },
                        display(){
                                lr = player.mini.c_points.lastRoll
                                let val = 5
                                if (tmp.mini.clickables.unlockedSlots >= val) {
                                        if (lr.length >= val) {
                                                let start = "<h2 style='font-size: 500%'>"
                                                let end = "</h2>"
                                                return start + getUnicodeCharacter(lr[val-1]) + end
                                        }
                                        return "Have not rolled this slot yet"
                                }
                                return "Not unlocked yet"
                        },
                        unlocked(){
                                return tmp.mini.clickables.unlockedSlots >= 1
                        },
                        canClick(){
                                return false
                        },
                        onClick(){},
                },
                21: {
                        title(){
                                return "<h3 style='color: #607216'>SLOT 6</h3>"
                        },
                        display(){
                                lr = player.mini.c_points.lastRoll
                                let val = 6
                                if (tmp.mini.clickables.unlockedSlots >= val) {
                                        if (lr.length >= val) {
                                                let start = "<h2 style='font-size: 500%'>"
                                                let end = "</h2>"
                                                return start + getUnicodeCharacter(lr[val-1]) + end
                                        }
                                        return "Have not rolled this slot yet"
                                }
                                return "Not unlocked yet"
                        },
                        unlocked(){
                                return tmp.mini.clickables.unlockedSlots >= 5
                        },
                        canClick(){
                                return false
                        },
                        onClick(){},
                },
                22: {
                        title(){
                                return "<h3 style='color: #607216'>SLOT 7</h3>"
                        },
                        display(){
                                lr = player.mini.c_points.lastRoll
                                let val = 7
                                if (tmp.mini.clickables.unlockedSlots >= val) {
                                        if (lr.length >= val) {
                                                let start = "<h2 style='font-size: 500%'>"
                                                let end = "</h2>"
                                                return start + getUnicodeCharacter(lr[val-1]) + end
                                        }
                                        return "Have not rolled this slot yet"
                                }
                                return "Not unlocked yet"
                        },
                        unlocked(){
                                return tmp.mini.clickables.unlockedSlots >= 5
                        },
                        canClick(){
                                return false
                        },
                        onClick(){},
                },
                23: {
                        title(){
                                return "<h3 style='color: #607216'>SLOT 8</h3>"
                        },
                        display(){
                                lr = player.mini.c_points.lastRoll
                                let val = 8
                                if (tmp.mini.clickables.unlockedSlots >= val) {
                                        if (lr.length >= val) {
                                                let start = "<h2 style='font-size: 500%'>"
                                                let end = "</h2>"
                                                return start + getUnicodeCharacter(lr[val-1]) + end
                                        }
                                        return "Have not rolled this slot yet"
                                }
                                return "Not unlocked yet"
                        },
                        unlocked(){
                                return tmp.mini.clickables.unlockedSlots >= 5
                        },
                        canClick(){
                                return false
                        },
                        onClick(){},
                },
                24: {
                        title(){
                                return "<h3 style='color: #607216'>SLOT 9</h3>"
                        },
                        display(){
                                lr = player.mini.c_points.lastRoll
                                let val = 9
                                if (tmp.mini.clickables.unlockedSlots >= val) {
                                        if (lr.length >= val) {
                                                let start = "<h2 style='font-size: 500%'>"
                                                let end = "</h2>"
                                                return start + getUnicodeCharacter(lr[val-1]) + end
                                        }
                                        return "Have not rolled this slot yet"
                                }
                                return "Not unlocked yet"
                        },
                        unlocked(){
                                return tmp.mini.clickables.unlockedSlots >= 5
                        },
                        canClick(){
                                return false
                        },
                        onClick(){},
                },
                25: {
                        title(){
                                return "<h3 style='color: #607216'>SLOT 10</h3>"
                        },
                        display(){
                                lr = player.mini.c_points.lastRoll
                                let val = 10
                                if (tmp.mini.clickables.unlockedSlots >= val) {
                                        if (lr.length >= val) {
                                                let start = "<h2 style='font-size: 500%'>"
                                                let end = "</h2>"
                                                return start + getUnicodeCharacter(lr[val-1]) + end
                                        }
                                        return "Have not rolled this slot yet"
                                }
                                return "Not unlocked yet"
                        },
                        unlocked(){
                                return tmp.mini.clickables.unlockedSlots >= 5
                        },
                        canClick(){
                                return false
                        },
                        onClick(){},
                },
                31: {
                        title(){
                                return "<h3 style='color: #607216'>SLOT 11</h3>"
                        },
                        display(){
                                lr = player.mini.c_points.lastRoll
                                let val = 11
                                if (tmp.mini.clickables.unlockedSlots >= val) {
                                        if (lr.length >= val) {
                                                let start = "<h2 style='font-size: 500%'>"
                                                let end = "</h2>"
                                                return start + getUnicodeCharacter(lr[val-1]) + end
                                        }
                                        return "Have not rolled this slot yet"
                                }
                                return "Not unlocked yet"
                        },
                        unlocked(){
                                return tmp.mini.clickables.unlockedSlots >= 10
                        },
                        canClick(){
                                return false
                        },
                        onClick(){},
                },
                32: {
                        title(){
                                return "<h3 style='color: #607216'>SLOT 12</h3>"
                        },
                        display(){
                                lr = player.mini.c_points.lastRoll
                                let val = 12
                                if (tmp.mini.clickables.unlockedSlots >= val) {
                                        if (lr.length >= val) {
                                                let start = "<h2 style='font-size: 500%'>"
                                                let end = "</h2>"
                                                return start + getUnicodeCharacter(lr[val-1]) + end
                                        }
                                        return "Have not rolled this slot yet"
                                }
                                return "Not unlocked yet"
                        },
                        unlocked(){
                                return tmp.mini.clickables.unlockedSlots >= 10
                        },
                        canClick(){
                                return false
                        },
                        onClick(){},
                },
                33: {
                        title(){
                                return "<h3 style='color: #607216'>SLOT 13</h3>"
                        },
                        display(){
                                lr = player.mini.c_points.lastRoll
                                let val = 13
                                if (tmp.mini.clickables.unlockedSlots >= val) {
                                        if (lr.length >= val) {
                                                let start = "<h2 style='font-size: 500%'>"
                                                let end = "</h2>"
                                                return start + getUnicodeCharacter(lr[val-1]) + end
                                        }
                                        return "Have not rolled this slot yet"
                                }
                                return "Not unlocked yet"
                        },
                        unlocked(){
                                return tmp.mini.clickables.unlockedSlots >= 10
                        },
                        canClick(){
                                return false
                        },
                        onClick(){},
                },
                34: {
                        title(){
                                return "<h3 style='color: #607216'>SLOT 14</h3>"
                        },
                        display(){
                                lr = player.mini.c_points.lastRoll
                                let val = 14
                                if (tmp.mini.clickables.unlockedSlots >= val) {
                                        if (lr.length >= val) {
                                                let start = "<h2 style='font-size: 500%'>"
                                                let end = "</h2>"
                                                return start + getUnicodeCharacter(lr[val-1]) + end
                                        }
                                        return "Have not rolled this slot yet"
                                }
                                return "Not unlocked yet"
                        },
                        unlocked(){
                                return tmp.mini.clickables.unlockedSlots >= 10
                        },
                        canClick(){
                                return false
                        },
                        onClick(){},
                },
                35: {
                        title(){
                                return "<h3 style='color: #607216'>SLOT 15</h3>"
                        },
                        display(){
                                lr = player.mini.c_points.lastRoll
                                let val = 15
                                if (tmp.mini.clickables.unlockedSlots >= val) {
                                        if (lr.length >= val) {
                                                let start = "<h2 style='font-size: 500%'>"
                                                let end = "</h2>"
                                                return start + getUnicodeCharacter(lr[val-1]) + end
                                        }
                                        return "Have not rolled this slot yet"
                                }
                                return "Not unlocked yet"
                        },
                        unlocked(){
                                return tmp.mini.clickables.unlockedSlots >= 10
                        },
                        canClick(){
                                return false
                        },
                        onClick(){},
                },
                41: {
                        title(){
                                return "<h3 style='color: #607216'>GAMBLE!</h3>"
                        },
                        timeRequired(){
                                if (hasUpgrade("mini", 43))     return .05
                                if (hasUpgrade("mini", 42))     return .1
                                if (hasUpgrade("tokens", 92))   return .25
                                if (hasMilestone("tokens", 26)) return 1
                                if (hasUpgrade("mini", 34))     return 3
                                if (hasUpgrade("sci", 232))     return 4
                                                                return 5
                        },
                        display(){
                                let last = player.mini.c_points.lastRollTime
                                let req = tmp.mini.clickables[41].timeRequired
                                return "Time until next spin: " + formatTime(Math.max(0, req-last)) + br
                        },
                        unlocked(){
                                return true
                        },
                        canClick(){
                                if (!tmp.mini.tabFormat.C.unlocked) return false
                                let req = tmp.mini.clickables[41].timeRequired
                                return player.mini.c_points.lastRollTime >= req
                        },
                        onClick(){
                                let data = player.mini.c_points
                                data.lastRollTime = 0
                                data.lastRoll = getRandomSlotValue(tmp.mini.clickables.unlockedSlots)
                                // then give money and stuff
                                // getRewardAmount
                                let mult = tmp.mini.c_points.getGainMult
                                data.points = data.points.plus(getRewardAmount(data.lastRoll).times(mult))

                                tmp.mini.clickables[41].canClick = false // so only once per tick
                        },
                },
                42: {
                        title(){
                                return "Toggle character display"
                        },
                        unlocked(){
                                return true
                        },
                        canClick(){
                                return true
                        },
                        onClick(){
                                let data = player.mini.c_points
                                data.displayCharacters = !data.displayCharacters
                        },
                },
                51: {
                        title(){
                                return "Gain fuel"
                        },
                        display(){
                                return "Gain 5 + 2% fuel"
                        },
                        unlocked(){
                                return player.mini.d_points.best.lt("5ee5")
                        },
                        canClick(){
                                return true
                        },
                        onClick(){
                                let data = player.mini.d_points
                                let max = tmp.mini.d_points.getMaximumFuel
                                data.fuel = data.fuel.plus(5)
                                data.fuel = data.fuel.plus(max.times(.02))
                                data.fuel = data.fuel.min(max)
                        },
                },
        },
        upgrades: {
                rows: 10,
                cols: 5,
                11: {
                        title(){ // source: https://www.food.com/topic/c
                                return "<bdi style='color: #FF0000'>Cabbage</bdi>"
                        },
                        description(){
                                return "Add one to all emoji bases per upgrade"
                        },
                        cost:() => new Decimal(1e25),
                        currencyLocation:() => player.mini.c_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "C Points",
                        unlocked(){
                                return getBuyableAmount("mini", 73).gt(5) || player.n.unlocked
                        }, // hasUpgrade("mini", 11)
                },
                12: {
                        title(){ 
                                return "<bdi style='color: #FF0000'>Corn</bdi>"
                        },
                        timeNeeded(){
                                if (hasUpgrade("mini", 43))     return .05
                                if (hasUpgrade("mini", 42))     return .1
                                if (player.dev.fastCorn)        return .1
                                if (hasUpgrade("tokens", 92))   return .25
                                if (hasMilestone("tokens", 26)) return 1
                                if (hasMilestone("tokens", 25)) return 3
                                if (hasUpgrade("sci", 232))     return 4
                                if (hasMilestone("n", 3))       return 5
                                if (hasUpgrade("mini", 23))     return 5
                                if (hasUpgrade("mini", 22))     return 6
                                if (hasUpgrade("mini", 21))     return 7
                                if (hasUpgrade("mini", 15))     return 8
                                if (hasUpgrade("mini", 14))     return 9
                                                                return 10
                        },
                        description(){
                                if (player.shiftAlias) return "Warning! May cause lag if this tab is not active in your browser."
                                let timeNeed = tmp.mini.upgrades[12].timeNeeded
                                let a = "Automatically gamble if you have not gambled in the last "
                                a += formatWhole(timeNeed) + " seconds<br>"

                                let last = player.mini.c_points.lastRollTime

                                return a + "The next trigger is in " + formatTime(Math.max(0,timeNeed-last))
                        },
                        cost:() => new Decimal(1e50),
                        currencyLocation:() => player.mini.c_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "C Points",
                        unlocked(){
                                return hasUpgrade("mini", 11) || player.n.unlocked
                        }, // hasUpgrade("mini", 12)
                },
                13: {
                        title(){
                                return "<bdi style='color: #FF0000'>Cake</bdi>"
                        },
                        description(){
                                return "log10(C Points) multiplies Ultraviolet base and log10(Ultraviolet) multiplies C Point gain"
                        },
                        cost:() => new Decimal(1e68),
                        currencyLocation:() => player.mini.c_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "C Points",
                        unlocked(){
                                return hasUpgrade("mini", 12) || player.n.unlocked
                        }, // hasUpgrade("mini", 13)
                },
                14: {
                        title(){ 
                                return "<bdi style='color: #FF0000'>Carrot</bdi>"
                        },
                        description(){
                                return "log10(Life Points) multiplies C Point gain and reduce Corn interval to 9"
                        },
                        cost:() => new Decimal(1e98),
                        currencyLocation:() => player.mini.c_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "C Points",
                        unlocked(){
                                return hasUpgrade("mini", 13) || player.n.unlocked
                        }, // hasUpgrade("mini", 14)
                },
                15: {
                        title(){
                                return "<bdi style='color: #FF0000'>Cheese</bdi>"
                        },
                        description(){
                                return "log10(B Points) multiplies C Point gain and reduce Corn interval to 8"
                        },
                        cost:() => new Decimal(1e140),
                        currencyLocation:() => player.mini.c_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "C Points",
                        unlocked(){
                                return hasUpgrade("mini", 14) || player.n.unlocked
                        }, // hasUpgrade("mini", 15)
                },
                21: {
                        title(){
                                return "<bdi style='color: #FF0000'>Cream</bdi>"
                        },
                        description(){
                                return "Add .1 to <bdi style='color:#CC0033'>C</bdi> increase 1 base and reduce Corn interval to 7"
                        },
                        cost:() => Decimal.pow(10, 555),
                        currencyLocation:() => player.mini.c_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "C Points",
                        unlocked(){
                                return getBuyableAmount("mini", 81).gte(43) || player.n.unlocked
                        }, // hasUpgrade("mini", 21)
                },
                22: {
                        title(){
                                return "<bdi style='color: #FF0000'>Coffee</bdi>"
                        },
                        description(){
                                return "Autobuy C buyables, log10(Hydrogen) multiplies C point gain, and reduce Corn interval to 6"
                        },
                        cost:() => Decimal.pow(10, 777),
                        currencyLocation:() => player.mini.c_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "C Points",
                        unlocked(){
                                return hasUpgrade("mini", 21) || player.n.unlocked
                        }, // hasUpgrade("mini", 22)
                },
                23: {
                        title(){
                                return "<bdi style='color: #FF0000'>Crab</bdi>"
                        },
                        description(){
                                return "Change the log10 to ln in C Point gain 4 and reduce Corn interval to 5"
                        },
                        cost:() => Decimal.pow(10, 900),
                        currencyLocation:() => player.mini.c_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "C Points",
                        unlocked(){
                                return hasUpgrade("mini", 22) || player.n.unlocked
                        }, // hasUpgrade("mini", 23)
                },
                24: {
                        title(){
                                return "<bdi style='color: #FF0000'>Chicken</bdi>"
                        },
                        description(){
                                if (player.extremeMode) return "Unlock a new symbol, remove C Point gain 4's base cost, and add .05 to <bdi style='color:#CC0033'>C</bdi> increase 1 base"
                                return "Unlock a new symbol and add .05 to <bdi style='color:#CC0033'>C</bdi> increase 1 base"
                        },
                        cost(){
                                return new Decimal(player.extremeMode ? "1.1e1100" : "1.11e1111")
                        },
                        currencyLocation:() => player.mini.c_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "C Points",
                        unlocked(){
                                return hasUpgrade("mini", 23) || player.n.unlocked
                        }, // hasUpgrade("mini", 24)
                },
                25: {
                        title(){
                                return "<bdi style='color: #FF0000'>Cherry</bdi>"
                        },
                        description(){
                                return "Remove 🛑 and remove the +1 from Unlock a slot exponent base"

                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 1322 : 1275),
                        currencyLocation:() => player.mini.c_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "C Points",
                        unlocked(){
                                return hasUpgrade("mini", 24) || player.n.unlocked
                        }, // hasUpgrade("mini", 25)
                },
                31: {
                        title(){
                                return "<bdi style='color: #FF0000'>Coconut</bdi>"
                        },
                        description(){
                                return "Square suits base, triple 💰 base, and you can buy and keep row 7 and 8 coin upgrades"
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 1385 : 1375),
                        currencyLocation:() => player.mini.c_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "C Points",
                        unlocked(){
                                return hasUpgrade("mini", 25) || player.n.unlocked
                        }, // hasUpgrade("mini", 31)
                },
                32: {
                        title(){
                                return "<bdi style='color: #FF0000'>Cod</bdi>"
                        },
                        description(){
                                return "C Points ^.01 multiplies C point gain, but square root the character effect on C point gain"
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 1860 : 1775),
                        currencyLocation:() => player.mini.c_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "C Points",
                        unlocked(){
                                return hasUpgrade("mini", 31) || player.n.unlocked
                        }, // hasUpgrade("mini", 32)
                },
                33: {
                        title(){
                                return "<bdi style='color: #FF0000'>Chocolate</bdi>"
                        },
                        description(){
                                return "Remove 📪 and reduce token buyable exponent to .6"
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 1950 : 1825),
                        currencyLocation:() => player.mini.c_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "C Points",
                        unlocked(){
                                return hasUpgrade("mini", 32) || player.n.unlocked
                        }, // hasUpgrade("mini", 33)
                },
                34: {
                        title(){
                                return "<bdi style='color: #FF0000'>Cupcake</bdi>"
                        },
                        description(){
                                return "Remove 🌲, apply Cod again, and you can gamble every 3 seconds"
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 2900 : 2750),
                        currencyLocation:() => player.mini.c_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "C Points",
                        unlocked(){
                                return hasUpgrade("mini", 33) || player.n.unlocked
                        }, // hasUpgrade("mini", 34)
                },
                35: {
                        title(){
                                return "<bdi style='color: #FF0000'>Crepe</bdi>"
                        },
                        description(){
                                return "Reduce the unlock a slot base to 50 and each upgrade multiplies C point gain by 50"
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 13490 : 11825),
                        currencyLocation:() => player.mini.c_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "C Points",
                        unlocked(){
                                return hasUpgrade("mini", 34) || player.n.unlocked
                        }, // hasUpgrade("mini", 35)
                },
                41: {
                        title(){
                                return "<bdi style='color: #FF0000'>Catfish</bdi>"
                        },
                        description(){
                                return "C Point gain 7's log10 becomes log2 and you can bulk C buyables 5x"
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 54780 : 50518),
                        currencyLocation:() => player.mini.c_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "C Points",
                        unlocked(){
                                return hasUpgrade("mini", 35) || player.n.unlocked
                        }, // hasUpgrade("mini", 41)
                },
                42: {
                        title(){
                                return "<bdi style='color: #FF0000'>Cranberry</bdi>"
                        },
                        description(){
                                return "Unlock a slot exponent is 6, you can gamble every .1 seconds, and C Points multiply B points"
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 95300 : 82650),
                        currencyLocation:() => player.mini.c_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "C Points",
                        unlocked(){
                                return player.tokens.total.gte(74) || player.n.unlocked
                        }, // hasUpgrade("mini", 42)
                },
                43: {
                        title(){
                                return "<bdi style='color: #FF0000'>Cookie</bdi>"
                        },
                        description(){
                                return "Each C Point gain 3 adds 1 to its base and you can gamble every tick (.05 seconds)"
                        },
                        cost:() => Decimal.pow(10, 97590),
                        currencyLocation:() => player.mini.c_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "C Points",
                        unlocked(){
                                return player.tokens.total.gte(player.extremeMode ? 75 : 76) || player.n.unlocked
                        }, // hasUpgrade("mini", 43)
                },
                44: {
                        title(){
                                return "<bdi style='color: #FF0000'>Crumble</bdi>"
                        },
                        description(){
                                return "C Point gain 6 outer ln becomes log2 and you can bulk twice as much"
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 112327 : 128846),
                        currencyLocation:() => player.mini.c_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "C Points",
                        unlocked(){
                                return player.tokens.total.gte(77) || player.n.unlocked
                        }, // hasUpgrade("mini", 44)
                },
                45: {
                        title(){
                                return "<bdi style='color: #FF0000'>Clam</bdi>"
                        },
                        description(){
                                return "Unlock Nitrogen, a new layer, and C Points multiply A Points"
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 172582 : 168627),
                        currencyLocation:() => player.mini.c_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "C Points",
                        unlocked(){
                                return player.tokens.total.gte(78) || player.n.unlocked
                        }, // hasUpgrade("mini", 45)
                },
                51: {
                        title(){
                                return "<bdi style='color: #FF0000'>Repetitive clicking</bdi>"
                        },
                        description(){
                                return "Once per ten seconds gain fuel <br>Next in: " + formatTime(Math.max(0, 10-player.mini.d_points.fuelTimer1))
                        },
                        cost:() => Decimal.pow(10, 25),
                        currencyLocation:() => player.mini.d_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "D Points",
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(9) || player.n.unlocked
                        }, // hasUpgrade("mini", 51)
                },
                52: {
                        title(){
                                return "<bdi style='color: #FF0000'>Arthritis cure</bdi>"
                        },
                        description(){
                                if (player.shiftAlias) return "Next in: " + formatTime(Math.max(0, 11-player.mini.d_points.fuelTimer2))
                                return "<bdi style='font-size: 100%'> Once per 11 seconds gain fuel, unlock an autobuyer for Speed buyables, and double D Point gain</bdi>"
                        },
                        cost:() => Decimal.pow(10, 125),
                        currencyLocation:() => player.mini.d_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "D Points",
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(33) || player.p.unlocked
                        }, // hasUpgrade("mini", 52)
                },
                53: {
                        title(){
                                return "<bdi style='color: #FF0000'>Pre-frontal cortex</bdi>"
                        },
                        description(){
                                return "The autobuyer buys multiplier buyables and add .01 to quadratic base"
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 338 : 350),
                        currencyLocation:() => player.mini.d_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "D Points",
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(73) || player.p.unlocked
                        }, // hasUpgrade("mini", 53)
                },
                54: {
                        title(){
                                return "<bdi style='color: #FF0000'>Frontal cortex</bdi>"
                        },
                        description(){
                                return "Gain .2% of your max fuel per second and Nitrogen multiplies D Point gain"
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 431 : 410),
                        currencyLocation:() => player.mini.d_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "D Points",
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(83) || player.p.unlocked
                        }, // hasUpgrade("mini", 54)
                },
                55: {
                        title(){
                                return "<bdi style='color: #FF0000'>Ankle sprain</bdi>"
                        },
                        description(){
                                return "Each Gas Pedal adds 1 to <bdi style='color:#CC0033'>D</bdi> and Speed buyables no longer cost anything"
                        },
                        cost:() => Decimal.pow(10, 969),
                        currencyLocation:() => player.mini.d_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "D Points",
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(162) || player.p.unlocked
                        }, // hasUpgrade("mini", 55)
                },
                61: {
                        title(){
                                return "<bdi style='color: #FF0000'>Splint</bdi>"
                        },
                        description(){
                                return "You can buy all buyables at once and per upgrade multiply Linear Increase 1 base by log8(x)^2"
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 1833 : 1776),
                        currencyLocation:() => player.mini.d_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "D Points",
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(255) || player.p.unlocked
                        }, // hasUpgrade("mini", 61)
                },
                62: {
                        title(){
                                return "<bdi style='color: #FF0000'>Cast</bdi>"
                        },
                        description(){
                                let a = "Cube upgrade component in Quadratic Increase base"

                                if (player.extremeMode) a = a.replace("Cube", "Square")

                                return a
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 2543 : 2275),
                        currencyLocation:() => player.mini.d_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "D Points",
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(310) || player.p.unlocked
                        }, // hasUpgrade("mini", 62)
                },
                63: {
                        title(){
                                return "<bdi style='color: #FF0000'>Brace</bdi>"
                        },
                        description(){
                                return "You can bulk 1.3x buyables per upgrade (floored)"
                        },
                        cost:() => Decimal.pow(10, 3151),
                        currencyLocation:() => player.mini.d_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "D Points",
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(400) || player.p.unlocked
                        }, // hasUpgrade("mini", 63)
                },
                64: {
                        title(){
                                return "<bdi style='color: #FF0000'>Braces</bdi>"
                        },
                        description(){
                                return "D Point gain multiplies C point gain and fuel multiplies Carbon gain"
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 4515 : 4167),
                        currencyLocation:() => player.mini.d_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "D Points",
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(490) || player.p.unlocked
                        }, // hasUpgrade("mini", 64)
                },
                65: {
                        title(){
                                return "<bdi style='color: #FF0000'>Cyborg</bdi>"
                        },
                        description(){
                                return "Each Quadratic increase increases <bdi style='color:#CC0033'>D</bdi> by 1 and triple D point gain"
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 5347 : 5225),
                        currencyLocation:() => player.mini.d_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "D Points",
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(590) || player.p.unlocked
                        }, // hasUpgrade("mini", 65)
                },
                71: {
                        title(){
                                return "<bdi style='color: #FF0000'>Breakfast</bdi>"
                        },
                        description(){
                                return "The square rooting factor is 11"
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 6684 : 6584),
                        currencyLocation:() => player.mini.d_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "D Points",
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(700) || player.p.unlocked
                        }, // hasUpgrade("mini", 71)
                },
                72: {
                        title(){
                                return "<bdi style='color: #FF0000'>Brunch</bdi>"
                        },
                        description(){
                                return "The square rooting factor is 12 and unlock a challenge"
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 9651 : 8868),
                        currencyLocation:() => player.mini.d_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "D Points",
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(880) || player.p.unlocked
                        }, // hasUpgrade("mini", 72)
                },
                73: {
                        title(){
                                return "<bdi style='color: #FF0000'>Lunch</bdi>"
                        },
                        description(){
                                return makeRed("y") + " multiplies Nitrogen gain and unlock a challenge"
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 24428 : 19428),
                        currencyLocation:() => player.mini.d_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "D Points",
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(1620) || player.p.unlocked
                        }, // hasUpgrade("mini", 73)
                },
                74: {
                        title(){
                                if (player.shiftAlias) return "<bdi style='color: #FF0000'>Cass129</bdi>"
                                return "<bdi style='color: #FF0000'>Supper</bdi>"
                        },
                        description(){
                                return "Bulk 10x and D buyables no longer cost anything"
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 37346 : 31051),
                        currencyLocation:() => player.mini.d_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "D Points",
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(2300) || player.p.unlocked
                        }, // hasUpgrade("mini", 74)
                },
                75: {
                        title(){
                                return "<bdi style='color: #FF0000'>Dinner</bdi>"
                        },
                        description(){
                                return "If you have less than 10,000 seconds worth of Nitrogen Production you will gain " + (player.hardMode ? "100" : "1000") + "x"
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 42400 : 36561),
                        currencyLocation:() => player.mini.d_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "D Points",
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(2600) || player.p.unlocked
                        }, // hasUpgrade("mini", 75)
                },
                81: {
                        title(){
                                return "<bdi style='color: #FF0000'>Multiplicative Identity</bdi>"
                        },
                        description(){
                                return "Each upgrade doubles Nitrogen gain"
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 46081 : 45477.698),
                        currencyLocation:() => player.mini.d_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "D Points",
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(3100) || player.p.unlocked
                        }, // hasUpgrade("mini", 81)
                },
                82: {
                        title(){
                                return "<bdi style='color: #FF0000'>Even Prime</bdi>"
                        },
                        description(){
                                return "Square base Nitrogen gain" 
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 62537 : 56749),
                        currencyLocation:() => player.mini.d_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "D Points",
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(3670) || player.p.unlocked
                        }, // hasUpgrade("mini", 82)
                },
                83: {
                        title(){
                                return "<bdi style='color: #FF0000'>Odd Prime</bdi>"
                        },
                        description(){
                                return "Make the inner log10 of commutativity of addition ln and E Points<sup>.1</sup> multiplies D Points" 
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 937500 : 691315),
                        currencyLocation:() => player.mini.d_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "D Points",
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(25e3) || player.p.unlocked
                        }, // hasUpgrade("mini", 83)
                },
                84: {
                        title(){
                                return "<bdi style='color: #FF0000'>Even square</bdi>"
                        },
                        description(){
                                return "Each existence of 1 multiples E point gain by 1.02" 
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 1026117 : 775628),
                        currencyLocation:() => player.mini.d_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "D Points",
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(27e3) || player.p.unlocked
                        }, // hasUpgrade("mini", 84)
                },
                85: {
                        title(){
                                return "<bdi style='color: #FF0000'>Safe Prime</bdi>"
                        },
                        description(){
                                return "Reduce Iterations exponent to x+1<sup>x</sup> and bulk 5x all minigame buyables" 
                        },
                        cost:() => Decimal.pow(10, player.extremeMode ? 1037e3 : 787029),
                        currencyLocation:() => player.mini.d_points,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "D Points",
                        unlocked(){
                                return getBuyableAmount("mini", 151).gte(28e3) || player.p.unlocked
                        }, // hasUpgrade("mini", 85)
                },
        },
        bars: {
                fuel: {
                        direction: RIGHT,
                        width: 600,
                        height: 50,
                        progress(){
                                let f = player.mini.d_points.fuel
                                if (f.gt("1ee6")) return Math.sin(player.time/5000)**2
                                return f.div(tmp.mini.d_points.getMaximumFuel)
                        },
                        display(){
                                if (player.mini.d_points.fuel.lt("1ee6")) {
                                        let a = format(player.mini.d_points.fuel) + "/"
                                        let b = format(tmp.mini.d_points.getMaximumFuel) + " fuel"
                                        return a + b
                                }
                                return format(player.mini.d_points.fuel) + " fuel"
                        },
                        unlocked(){
                                return true
                        },
                        fillStyle(){
                                return {
                                        "background": "#66CCFF"
                                }
                        },
                        textStyle(){
                                return {
                                        "color": "#990033"
                                }
                        },
                }
        },
        microtabs: {
                d_content: {
                        "Fuel": {
                                content: [
                                        ["bar", "fuel"],
                                        ["display-text", function(){
                                                let a = "Current speed formula: " 
                                                let data = tmp.mini.d_points
                                                let redx = makeRed("x")
                                                let redy = makeRed("y")

                                                let b1 = "(" + format(data.getLin) + redx + "+"
                                                let b2 = format(data.getQuad) + redx + "<sup>2</sup>)*"
                                                let b3 = format(data.getExp1, 4) + "<sup>cbrt()/100</sup>"
                                                let c = ""

                                                if (player.shiftAlias) {
                                                        c += br
                                                        c += redx + "=" + format(data.getEffectiveFuel) + "  "
                                                        c += redy + "=" + format(data.getEffectiveFuelAux) + br
                                                        c += redx + " is fuel/10, but every time " + redx
                                                        c += " gets " + format(tmp.mini.d_points.getEffectiveFuelLogBase, 4)
                                                        c += " times larger, it is square rooted"
                                                        b3 = b3.replace("cbrt()/100", redy)
                                                        c += br + redy + " = cbrt(" + redx + ")/100, softcapped at 10,000: "
                                                        c += redy + "↦(6+log10(" + redy + "))<sup>4</sup>"
                                                }
                                                b3 = b3.replace("()","(" + redx + ")")

                                                return a + b1 + b2 + b3 + c
                                        }],
                                        ["clickables", [5]],
                                        ["display-text", function(){
                                                if (hasUpgrade("mini", 55)) return // eventually dont show this
                                                return "This tab has upgrades for passive fuel generation"
                                        }],
                                        ["upgrades", [5, 6, 7, 8]]
                                ],
                                unlocked(){
                                        return true
                                },
                                shouldNotify(){
                                        x = ["51", "52", "53", "54", "55", 
                                             "61", "62", "63", "64", "65",
                                             "71", "72", "73", "74", "75",
                                             "81", "82", "83", "84", "85"]
                                        for (let i = 0; i < x.length; i++){
                                                id = x[i]
                                                if (layers.mini.upgrades[id] == undefined) continue
                                                if (!tmp.mini.upgrades[id].unlocked) continue
                                                if (hasUpgrade("mini", id)) continue
                                                if (player.mini.d_points.points.lt(tmp.mini.upgrades[id].cost)) continue
                                                return true
                                        }
                                        return player.mini.d_points.fuel.eq(0)
                                },
                        },
                        "Multipliers": {
                                content: [
                                        ["display-text", function(){
                                                if (hasUpgrade("mini", 55)) {
                                                        let data = tmp.mini.buyables
                                                        let a = data[151].cost
                                                        let num = 151
                                                        let ids = [152, 153, 161, 162, 
                                                                   163, 171, 172, 173, 181,
                                                                   182, 183, 191, 192, 193]
                                                        for (i = 0; i < ids.length; i++){
                                                                let id = ids[i]
                                                                if (layers.mini.buyables[id] == undefined) continue
                                                                if (!data[id].unlocked) continue
                                                                a = a.min(data[id].cost)
                                                                if (a.eq(data[id].cost)) num = id
                                                        }
                                                        let start = "The cheapest buyable (" + (num-140) + ") costs " + format(a) + "."
                                                        if (!player.shiftAlias) return start
                                                        let mid = " You have " 
                                                        let pts = player.mini.d_points.points
                                                        let end = ""
                                                        if (pts.eq(0)) end = "0 points."
                                                        else if (pts.gt(a)) end = format(pts.div(a)) + " times more points."
                                                        else end = format(a.div(pts)) + " times less points."
                                                        return start+mid+end 
                                                }
                                                return "This tab has buyables for increasing point gain"
                                        }],
                                        ["buyables", [15,16,17,18,19]],
                                ],
                                unlocked(){
                                        return true
                                },
                                shouldNotify(){
                                        x = [151, 152, 153, 161, 162, 
                                             163, 171, 172, 173, 181,
                                             182, 183, 191, 192, 193]
                                        for (let i = 0; i < x.length; i++){
                                                id = x[i]
                                                if (layers.mini.buyables[id] == undefined) continue
                                                if (!tmp.mini.buyables[id].unlocked) continue
                                                if (tmp.mini.buyables[id].canAfford) {
                                                        if (getBuyableAmount("mini", id).eq(0)) return true
                                                }
                                        }
                                        return false
                                },
                        },
                        "Speed": { 
                                content: [
                                        ["display-text", function(){
                                                if (hasUpgrade("mini", 55)) return // eventually dont show this
                                                return "This tab has buyables for increasing speed"
                                        }],
                                        ["buyables", [12, 13, 14]],
                                ],
                                unlocked(){
                                        return true
                                },
                                shouldNotify(){
                                        x = [121, 122, 123, 131, 132, 133, 141, 142, 143]
                                        for (let i = 0; i < x.length; i++){
                                                id = x[i]
                                                if (layers.mini.buyables[id] == undefined) continue
                                                if (!tmp.mini.buyables[id].unlocked) continue
                                                if (tmp.mini.buyables[id].canAfford) {
                                                        if (getBuyableAmount("mini", id).eq(0)) return true
                                                }
                                        }
                                        return false
                                },
                        },
                },
                c_content: {
                        "Upgrades": {
                                content: [
                                        ["upgrades", [1,2,3,4]],
                                ],
                                unlocked(){
                                        return true
                                },
                                shouldNotify(){
                                        x = ["11", "12", "13", "14", "15", 
                                             "21", "22", "23", "24", "25", 
                                             "31", "32", "33", "34", "35", 
                                             "41", "42", "43", "44", "45"]
                                        for (let i = 0; i < x.length; i++){
                                                id = x[i]
                                                if (canAffordUpgrade("mini", id)) {
                                                        if (!hasUpgrade("mini", id)) return true
                                                }
                                        }
                                        return false
                                },
                        },
                        "Buyables": {
                                content: [ 
                                        ["display-text", function(){
                                                let data = tmp.mini.buyables
                                                let a = data[71].cost
                                                let num = 71
                                                let ids = [ 72,  73,  81,  82,  83,
                                                            91,  92,  93, 101, 102,
                                                           103, 111, 112, 113, ]
                                                if (player.mini.buyables[71].eq(11)) {
                                                        num = 72
                                                        a = data[72].cost
                                                }
                                                for (i = 0; i < ids.length; i++){
                                                        let id = ids[i]
                                                        if (!data[id].unlocked) continue
                                                        a = a.min(data[id].cost)
                                                        if (a.eq(data[id].cost)) num = id
                                                }
                                                let start = "The cheapest buyable (" + (num-60) + ") costs " + format(a) + "."
                                                if (!player.shiftAlias) return start
                                                let mid = " You have " 
                                                let pts = player.mini.c_points.points
                                                let end = ""
                                                if (pts.eq(0)) end = "0 points."
                                                else if (pts.gt(a)) end = format(pts.div(a)) + " times more points."
                                                else end = format(a.div(pts)) + " times less points."
                                                return start+mid+end
                                        }],
                                        ["buyables", [7,8,9,10,11]]
                                ],
                                unlocked(){
                                        return true
                                },
                                shouldNotify(){
                                        let x = [ 72,  73,  81,  82,  83,
                                                  91,  92,  93, 101, 102,
                                                 103, 111, 112, 113, ]
                                        for (let i = 0; i < x.length; i++){
                                                id = x[i]
                                                if (getBuyableAmount("mini", id).eq(0)) {
                                                        if (!tmp.mini.buyables[id].canAfford) continue
                                                        if (tmp.mini.buyables[id].unlocked) return true
                                                }
                                        }
                                        return false
                                },
                        },
                        "Info": {
                                content: [
                                        ["display-text", function(){
                                                let a = "Each character has a given value, and the more of said character you get,"
                                                a += "<br>the more powerful its value is."

                                                let b = "<br>Additionally, per set of suits squared, you gain 30x points.<br>"
                                                b += "Finally, point gain is the product of all above values time multipliers."
                                                b += "<br>Multipliers: x" + format(tmp.mini.c_points.getGainMult) + " C Point gain"

                                                return a + b
                                        }],
                                        "blank",
                                        ["display-text", function(){
                                                let poss = getAllowedCharacterValues()
                                                let len = poss.length
                                                let ret = ""
                                                for (i = 0; i < len; i++){
                                                        let id = poss[i]
                                                        ret += getUnicodeCharacter(id, true)
                                                        ret += " gives " + format(getCharacterValue(id))
                                                        ret += " times the points.<br>"
                                                }
                                                return ret 
                                        }],
                                ],
                                unlocked(){
                                        return true
                                },
                        },
                },
        },
        milestones: {
                1: {
                        requirementDescription(){
                                if (hasUpgrade("h", 44)) return "1e84 B Points"
                                return "1e63 B Points"
                        },
                        done(){
                                return player.mini.b_points.points.gte(hasUpgrade("h", 44) ? 1e84 : 1e63)
                        },
                        unlocked(){
                                return player.extremeMode
                        },
                        effectDescription(){
                                return "Reward: Remove B13 and 1/n^2 initial costs.<br>"
                        },
                }, // hasMilestone("mini", 1)
                2: {
                        requirementDescription(){
                                if (hasUpgrade("h", 44)) return "1e105 B Points"
                                return "5e94 B Points"
                        },
                        done(){
                                return player.mini.b_points.points.gte(hasUpgrade("h", 44) ? 1e105 : 5e94)
                        },
                        unlocked(){
                                return player.extremeMode && hasMilestone("mini", 1)
                        },
                        effectDescription(){
                                return "Reward: Remove B11 and 13.6 eV initial costs.<br>"
                        },
                }, // hasMilestone("mini", 2)
                3: {
                        requirementDescription(){
                                if (hasUpgrade("h", 44)) return "1e128 B Points"
                                return "3e106 B Points"
                        },
                        done(){
                                return player.mini.b_points.points.gte(hasUpgrade("h", 44) ? 1e128 : 3e106)
                        },
                        unlocked(){
                                return player.extremeMode && hasMilestone("mini", 2)
                        },
                        effectDescription(){
                                return "Reward: Remove B12 initial cost and double H Sci III.<br>"
                        },
                }, // hasMilestone("mini", 3)
                4: {
                        requirementDescription(){
                                if (hasUpgrade("h", 44)) return "1e156 B Points"
                                return "3e121 B Points"
                        },
                        done(){
                                return player.mini.b_points.points.gte(hasUpgrade("h", 44) ? 1e156 : 3e121)
                        },
                        unlocked(){
                                return player.extremeMode && hasMilestone("mini", 3)
                        },
                        effectDescription(){
                                return "Reward: Per minigame milestone add 1 to H Sci buyable exponent divisors.<br>"
                        },
                }, // hasMilestone("mini", 4)
                5: {
                        requirementDescription(){
                                if (hasUpgrade("h", 44)) return "1e459 B Points"
                                return "1e170 B Points"
                        },
                        done(){
                                return player.mini.b_points.points.gte(hasUpgrade("h", 44) ? "1e459" : 1e170)
                        },
                        unlocked(){
                                return player.extremeMode && hasMilestone("mini", 4)
                        },
                        effectDescription(){
                                return "Reward: Per milestone double Hydrogen Science gain.<br>"
                        },
                }, // hasMilestone("mini", 5)
                6: {
                        requirementDescription(){
                                if (hasUpgrade("h", 44)) return "1e532 B Points"
                                return "1e192 B Points"
                        },
                        done(){
                                return player.mini.b_points.points.gte(hasUpgrade("h", 44) ? "1e532" : 1e192)
                        },
                        unlocked(){
                                return player.extremeMode && hasMilestone("mini", 5)
                        },
                        effectDescription(){
                                return "Reward: Hydrogen multiplies B point gain.<br>"
                        },
                }, // hasMilestone("mini", 6)
                7: {
                        requirementDescription(){
                                if (hasUpgrade("h", 44)) return "1e741 B Points"
                                return "1e281 B Points"
                        },
                        done(){
                                return player.mini.b_points.points.gte(hasUpgrade("h", 44) ? "1e741" : 1e281)
                        },
                        unlocked(){
                                return player.extremeMode && hasMilestone("mini", 6)
                        },
                        effectDescription(){
                                return "Reward: Why Hydrogen?.<br>"
                        },
                }, // hasMilestone("mini", 7)
                8: {
                        requirementDescription(){
                                if (hasUpgrade("h", 45)) return "1e34 A Points"
                                return "1e46 A Points"
                        },
                        done(){
                                return player.mini.a_points.points.gte(hasUpgrade("h", 45) ? 1e34 : 1e46)
                        },
                        unlocked(){
                                return player.extremeMode
                        },
                        effectDescription(){
                                return "Reward: Remove Blue's base cost and each Blue doubles Hydrogen Science gain.<br>"
                        },
                }, // hasMilestone("mini", 8)
                9: {
                        requirementDescription(){
                                return "3e55 A Points"
                        },
                        done(){
                                return player.mini.a_points.points.gte(3e55)
                        },
                        unlocked(){
                                return player.extremeMode
                        },
                        effectDescription(){
                                return "Reward: Remove Yellow's base cost and each Yellow doubles Hydrogen Science gain.<br>"
                        },
                }, // hasMilestone("mini", 9)
                10: {
                        requirementDescription(){
                                return "5e73 A Points"
                        },
                        done(){
                                return player.mini.a_points.points.gte(5e73)
                        },
                        unlocked(){
                                return player.extremeMode
                        },
                        effectDescription(){
                                return "Reward: Remove Violet's base cost and each Violet doubles Hydrogen Science gain.<br>"
                        },
                }, // hasMilestone("mini", 10)
                11: {
                        requirementDescription(){
                                return "1e89 A Points"
                        },
                        done(){
                                return player.mini.a_points.points.gte(1e89)
                        },
                        unlocked(){
                                return player.extremeMode
                        },
                        effectDescription(){
                                return "Reward: Remove Green's base cost and each Green doubles Hydrogen Science gain.<br>"
                        },
                }, // hasMilestone("mini", 11)
                12: {
                        requirementDescription(){
                                return "1e114 A Points"
                        },
                        done(){
                                return player.mini.a_points.points.gte(1e114)
                        },
                        unlocked(){
                                return player.extremeMode
                        },
                        effectDescription(){
                                return "Reward: Remove 1 Minute's base cost.<br>"
                        },
                }, // hasMilestone("mini", 12)
        },
        tabFormat: {
                "A": {
                        content: [
                                ["secondary-display", "a_points"],
                                ["display-text", function(){
                                        if (hasUpgrade("h", 51)) return ""
                                        return "You need to be on this tab to keep this minigame ticking!"
                                }],
                                ["display-text", "Each color produces the next color clockwise!"],
                                ["display-text", function(){
                                        if (!player.shiftAlias) return ""
                                        let mid = hasUpgrade("h", 45) ? "log10(9+log10(10+B Points))*" : ""
                                        let end = "*2<sup>levels</sup>*" + mid + "multipliers"
                                        let exp = tmp.mini.a_points.getColorGainExp
                                        a = "Formula: amt<sup>" + format(exp, 4) + "</sup>/20" + end
                                        return a
                                }],
                                ["buyables", [1,2,6]],
                                ["milestones", [8,9,10,11,12,13]]
                        ],
                        unlocked(){
                                return hasUpgrade("h", 44)
                        },
                },
                "B": {
                        content: [
                                ["secondary-display", "b_points"],
                                ["display-text", function(){
                                        if (hasUpgrade("h", 51)) {
                                                return hasUpgrade("h", 52) || player.extremeMode ? "" : "Costs after 1000 are increased (x->x*log(x)/log(1000))"
                                        }
                                        return "You need to be on this tab to keep this minigame ticking!"
                                }],
                                ["display-text", function(){
                                        return "You are currently getting " + format(tmp.mini.b_points.getResetGain) + " B Points per second"
                                }],
                                ["buyables", [3,4,5]],
                                ["milestones", [1,2,3,4,5,6,7]],
                        ],
                        unlocked(){
                                return hasUpgrade("h", 45)
                        },
                },
                "C": {
                        content: [
                                ["secondary-display", "c_points"],
                                ["clickables", [1,2,3,4]],
                                ["microtabs", "c_content"],
                        ],
                        unlocked(){
                                return hasMilestone("tokens", 23) 
                        },
                        shouldNotify(){
                                if (player.l.time < 3) return false

                                if (hasMilestone("tokens", 23) && player.mini.c_points.points.eq(0)) return true
                                
                                let y = ["11", "12", "13", "14", "15", 
                                        "21", "22", "23", "24", "25", 
                                        "31", "32", "33", "34", "35", 
                                        "41", "42", "43", "44", "45"]
                                for (let i = 0; i < y.length; i++){
                                        id = y[i]
                                        if (canAffordUpgrade("mini", id)) {
                                                if (!hasUpgrade("mini", id)) return true
                                        }
                                }

                                if (hasMilestone("l", 1)) return false

                                let x = [ 72, 73,  81,  82,  83,
                                          91,  92,  93, 101, 102,
                                         103, 111, 112, 113, ]
                                for (let i = 0; i < x.length; i++){
                                        id = x[i]
                                        if (getBuyableAmount("mini", id).eq(0)) {
                                                if (!tmp.mini.buyables[id].canAfford) continue
                                                if (tmp.mini.buyables[id].unlocked) return true
                                        }
                                }
                                return false
                        },
                },
                "D": {
                        content: [
                                ["secondary-display", "d_points"],
                                ["display-text", function(){
                                        let a = "You can refuel the car by clicking. The car goes faster based on how much fuel it has."

                                        let b = "<br>Point gain is based on speed (which is based on fuel), but you lose 1% of your fuel every second."
                                        if (player.shiftAlias) {
                                                b += "<br>Multipliers: x" + format(tmp.mini.d_points.getGainMult)
                                                b += "   Multiplier from fuel: x" + format(tmp.mini.d_points.getFuelMultiplier)
                                                b += "<br>Gain per second: " + format(tmp.mini.d_points.getPointProduction)
                                        }

                                        return a + b
                                }],
                                ["microtabs", "d_content"],
                        ],
                        unlocked(){
                                return hasChallenge("n", 32)
                        },
                        shouldNotify(){
                                if (player.l.time < 3) return false

                                let y = [121, 122, 123, 131, 132, 
                                         133, 141, 142, 143, 151, 
                                         152, 153, 161, 162, 163, 
                                         171, 172, 173, 181, 182, 
                                         183, 191, 192, 193]
                                for (let i = 0; i < y.length; i++){
                                        id = y[i]
                                        if (layers.mini.buyables[id] == undefined) continue
                                        if (!tmp.mini.buyables[id].unlocked) continue
                                        if (tmp.mini.buyables[id].canAfford) {
                                                if (getBuyableAmount("mini", id).eq(0)) return true
                                        }
                                }

                                if (hasMilestone("l", 1)) return false
                                
                                let x = ["51", "52", "53", "54", "55", 
                                        "61", "62", "63", "64", "65",
                                        "71", "72", "73", "74", "75",
                                        "81", "82", "83", "84", "85"]
                                for (let i = 0; i < x.length; i++){
                                        id = x[i]
                                        if (layers.mini.upgrades[id] == undefined) continue
                                        if (!tmp.mini.upgrades[id].unlocked) continue
                                        if (hasUpgrade("mini", id)) continue
                                        if (player.mini.d_points.points.lt(tmp.mini.upgrades[id].cost)) continue
                                        return true
                                }
                                return player.mini.d_points.fuel.eq(0)
                        },
                },
                "E": {
                        content: [
                                ["secondary-display", "e_points"],
                                ["display-text", function(){
                                        let data = tmp.mini.e_points

                                        let mb = makeBlue
                                        let a = "Current gain is " + format(data.getPointProduction) + "/s"
                                        let b = ""
                                        let c = "Gain formula is f<sup> " + formatWhole(data.getMaxInterations) 
                                        c += "</sup>(0) times multipliers"
                                        // getRecursionValue

                                        if (player.shiftAlias) {
                                                b += "Function formula: f(x)=" + mb("a") + "x<sup>3</sup>/1e4+" + mb("b") + "x<sup>2</sup>+"
                                                b += mb("c") + "x+" + mb("d") + br
                                                b += mb("a") + "=" + format(data.getA) + " "
                                                b += mb("b") + "=" + format(data.getB) + " "
                                                b += mb("c") + "=" + format(data.getC) + " "
                                                b += mb("d") + "=" + format(data.getD) + " " 
                                                b += "f<sup> " + formatWhole(data.getMaxInterations) + "</sup>(0)="
                                                b += format(data.getRecursionValue) + br
                                                c += br
                                                c += "f<sup>1</sup>(x) = f(x) and f<sup> n+1</sup>(x) = f(f<sup> n</sup>(x))"
                                        }

                                        return a + br + b + c
                                }],
                                ["buyables", [20, 21, 22, 23, 24, 25]]
                        ],
                        unlocked(){
                                return hasUpgrade("n", 35)
                        },
                        shouldNotify(){
                                if (hasMilestone("l", 1)) return false
                                x = [201, 202, 203, 211, 212,
                                     213, 221, 222, 223, 231, 
                                     232, 233, 241,]
                                for (let i = 0; i < x.length; i++){
                                        id = x[i]
                                        if (layers.mini.buyables[id] == undefined) continue
                                        if (!tmp.mini.buyables[id].unlocked) continue
                                        if (tmp.mini.buyables[id].canAfford) {
                                                if (getBuyableAmount("mini", id).eq(0)) return true
                                                if (id != 201) continue
                                                if (!hasMilestone("p", 8)) return true
                                        }
                                }
                                return false
                        },
                },
                "Spelling": {
                        content: [
                                ["display-text", function(){
                                        let corr = numCorrectLetters(player.targetWord)
                                        let wordUpper = player.targetWord.toLocaleUpperCase()
                                        let start = "<bdi style='font-size: 300%'>"
                                        let end = "</bdi>"
                                        let goodPart = "<bdi style='color:#FF0000'>" + wordUpper.slice(0,corr) + "</bdi>"
                                        let badPart  = "<bdi style='color:#993333'>" + wordUpper.slice(corr) + "</bdi>"
                                        return start+goodPart+badPart+end
                                }],
                                ["display-text", function(){
                                        let a = "You have spelled " + formatWhole(player.wordsSpelled)
                                        let b = " words correctly!"
                                        let c = "<br><br><br><br><br><br>"
                                        let d = "<br>Press space to get a new word.<br>This is just a minigame, so you can safely ignore it :)"
                                        return c + c + a + b + d
                                }],
                        ],
                        unlocked(){
                                return true
                        }
                },
        },
        doReset(layer){
                if (layer == "h") return
                let data = player.mini

                //section 1: buyables
                let resetBuyables = [11, 12, 13, 21, 22, 23, 31, 32, 33, 41, 42, 43, 51, 52, 53, 61, 62, 63]
                for (let j = 0; j < resetBuyables.length; j++) {
                        data.buyables[resetBuyables[j]] = decimalZero
                }

                // section 2: A point stuff
                let apts = data.a_points
                apts.points = decimalZero
                apts.best = decimalZero
                apts.extras[11] = decimalZero
                apts.extras[12] = decimalZero
                apts.extras[13] = decimalZero
                apts.extras[21] = decimalZero
                apts.extras[23] = decimalZero
                apts.extras[61] = decimalZero
                apts.extras[62] = decimalZero
                apts.extras[63] = decimalZero

                // section 3: B point stuff
                let bpts = data.b_points
                bpts.points = decimalZero
                bpts.best = decimalZero
        },
        deactivated(){
                if (hasUpgrade("or", 135)) return true
                return inChallenge("l", 22) || hasChallenge("l", 22)
        },
})

addLayer("tokens", {
        name: "Tokens",
        symbol: "⥈", 
        position: 3,
        startData(){ return {
                unlocked: false,
                abtime: 0,
                time: 0,
                best_over_all_time: decimalZero,
                autotime: 0,
                points: decimalZero,
                total: decimalZero,
                best_buyables: {
                        11: decimalZero,
                        12: decimalZero,
                        13: decimalZero,
                        21: decimalZero,
                        22: decimalZero,
                        23: decimalZero,
                        31: decimalZero,
                        32: decimalZero,
                        33: decimalZero,
                        41: decimalZero,
                        42: decimalZero,
                        43: decimalZero,
                        51: decimalZero,
                        52: decimalZero,
                        53: decimalZero,
                        61: decimalZero,
                        62: decimalZero,
                        63: decimalZero,
                        101: decimalZero,
                        102: decimalZero,
                        111: decimalZero,
                        112: decimalZero,
                        121: decimalZero,
                        122: decimalZero,
                },
                bestStrange: decimalZero,
                bestTop: decimalZero,
                bestBottom: decimalOne,
                bestCharm: decimalZero,
                tokens2: {
                        total: decimalZero,
                        points: decimalZero,
                },
                tokens2Unl: [101, 102, 111],
                buyablesBoughtThisTick: [],
                coins: {
                        points: decimalZero,
                        best: decimalZero
                },
                lastRespecDisplayFormula: "2<sup>x</sup>",
                lastRespecDisplayFormula2ID: 0,
        }},
        color: "#7DC71C",
        branches: [],
        requires: new Decimal("1e5000"),
        resource: "Tokens",
        baseResource: "points",
        baseAmount(){return player.points.floor()},
        type: "custom",
        getResetGain(){
                if (hasMilestone("or", 2) && player.points.slog().gt(4)) {
                        let tetBase = tmp.tokens.getTetrationBase

                        let len = (player.extremeMode ? TOKEN_COSTS_EXTREME : TOKEN_COSTS).length

                        let portion = player.points.slog(tetBase).sub(4).times(tmp.tokens.getTetrationScalingDivisor)
                        let canAff = portion.plus(len).plus(tmp.tokens.getMinusEffectiveTokens).ceil()
                        return canAff.sub(player.tokens.total).max(0)
                } 
                if (tmp.tokens.getNextAt.lt(tmp.tokens.baseAmount)) return decimalOne
                return decimalZero
        },
        getTetrationBase(){
                let tetBase = 10
                if (hasMilestone("or", 2)) tetBase = 9.5
                if (hasMilestone("or", 5)) tetBase = 9
                if (hasUpgrade("or", 231)) tetBase = 8.5
                if (hasUpgrade("or", 232)) tetBase = 8
                if (hasUpgrade("or", 34))  tetBase = 7.5
                if (hasUpgrade("or", 35))  tetBase = 7
                if (hasMilestone("an", 36))tetBase = 6
                return tetBase 
        },
        shouldNotify(){
                if (tmp.tokens.canReset && (!player.tokens.autobuytokens || !hasMilestone("n", 4))) {
                        if (player.tokens.tokens2.total.eq(0)) return true
                }
                let x = ["11", "12", "13", "21", "22", 
                         "23", "31", "32", "33", "41", 
                         "42", "43", "51", "52", "53", 
                         "61", "62", "63"]
                for (i in x){
                        id = x[i]
                        if (!tmp.tokens.buyables[id].canAfford) return false
                }
                if (hasUpgrade("cells", 42)) return false // dealt with by II being notified
                if (player.tokens.autobuyradio && hasMilestone("n", 7)) return false // radio is being autobought
                return !tmp.tokens.autoPrestige
        },
        autoPrestige(){
                if ((player.tokens.autobuytokens || player.dev.autobuytokens) && hasMilestone("n", 4)) {
                        return true
                }
                return layers.l.grid.getGemEffect(802) || player.cells.unlocked
        },
        effect(){
                if (!player.extremeMode) return decimalOne
                
                let exp = player.tokens.total
                if (exp.gt(2)) exp = exp.times(2).sqrt()
                
                return Decimal.pow(4, exp)
        },
        effectDescription(){
                if (!player.extremeMode) return ""
                let start = " multiplying Science,<br>Hydrogen Science, and Oxygen Science by " 
                return start + format(tmp.tokens.effect) + "."
        },
        getMinusEffectiveTokens(){
                let a = decimalZero
                
                if (hasUpgrade("tokens", 73))   a = a.plus(1)
                if (hasMilestone("p", 1))       a = a.plus(1)
                if (hasUpgrade("p", 11))        a = a.plus(1)
                if (hasUpgrade("mu", 22))       a = a.plus(1)
                if (hasUpgrade("mu", 24))       a = a.plus(1)
                if (hasMilestone("l", 9))       a = a.plus(player.l.challenges[11]/(player.extremeMode ? 1 : 2))
                if (hasUpgrade("p", 41))        a = a.plus(player.extremeMode ? 3 : 1)
                if (!hasUpgrade("or", 132))     a = a.plus(layers.l.grid.getGemEffect(303))
                if (hasMilestone("l", 41))      a = a.plus(player.extremeMode ? tmp.l.getNonZeroGemCount :  1)
                if (hasChallenge("l", 52))      a = a.plus(tmp.l.challenges[52].reward)
                if (hasUpgrade("d", 33))        a = a.plus(player.d.upgrades.length)
                if (hasMilestone("cells", 25) && !player.extremeMode) {
                                                a = a.plus(player.cells.milestones.length)
                }
                if (hasMilestone("t", 2))       a = a.plus(player.t.milestones.length)
                if (hasMilestone("t", 3))       a = a.plus(player.t.milestones.length)
                if (hasUpgrade("cells", 45))    a = a.plus(player.cells.upgrades.length)
                                                a = a.plus(tmp.tokens.buyables[112].effect)
                if (hasUpgrade("t", 141))       a = a.plus(player.t.upgrades.length)
                if (hasUpgrade("sci", 244))     a = a.plus(Math.floor(tmp.sci.upgrades.carbonUpgradesLength / 5))
                                                a = a.plus(tmp.sci.buyables[303].effect)
                if (hasUpgrade("l", 12))        a = a.plus(player.l.upgrades.length)
                if (hasMilestone("or", 14))     a = a.plus(player.or.milestones.length * 3)
                if (hasUpgrade("or", 132))      a = a.plus(player.or.upgrades.length * 3)
                if (hasUpgrade("sci", 203))     a = a.plus(1)
                if (hasUpgrade("sci", 303))     a = a.plus(1)
                if (hasUpgrade("p", 113))       a = a.plus(1)
                if (hasUpgrade("sci", 415))     a = a.plus(tmp.sci.upgrades.proteinUpgradesLength)
                if (hasUpgrade("sci", 454))     a = a.plus(tmp.sci.upgrades.proteinUpgradesLength * 3.5)
                
                return a.ceil()
        },
        getTetrationScalingDivisor(){
                let ret = new Decimal(10)

                if (hasMilestone("cells", 36))  ret = ret.times(20)
                if (hasMilestone("cells", 51))  ret = ret.times(3)
                if (hasMilestone("t", 18))      ret = ret.times(1 + player.t.milestones.length / 50)
                if (hasMilestone("ch", 12))     ret = ret.times(tmp.tokens.buyables[121].effect.max(1))
                if (hasUpgrade("an", 52))       ret = ret.times(player.ch.points.max(74).log(74))

                if (!hasMilestone("ch", 12))    ret = ret.plus(tmp.tokens.buyables[121].effect)
                
                return ret
        },
        getNextAt(){
                // 1e6-1
                let len = (player.extremeMode ? TOKEN_COSTS_EXTREME : TOKEN_COSTS).length
                let amt = player.tokens.total

                amt = amt.sub(tmp.tokens.getMinusEffectiveTokens).floor()
                
                if (amt.lt(0)) return amt.plus(5000).pow10()

                if (amt.gte(len)) {
                        let tetBase = tmp.tokens.getTetrationBase
                        return Decimal.tetrate(tetBase, amt.sub(len).div(tmp.tokens.getTetrationScalingDivisor).plus(4))
                }
                amt = Math.round(amt.toNumber())
                let additional = player.hardMode ? 1e4 : 1
                if (player.extremeMode) return Decimal.pow(10, TOKEN_COSTS_EXTREME[amt]).times(additional)
                return Decimal.pow(10, TOKEN_COSTS[amt]).times(additional)

                /*
                Generalized formula: 
                player.points.slog().sub(4).times(tmp.tokens.getTetrationScalingDivisor).plus(87).plus(tmp.tokens.getMinusEffectiveTokens).ceil()
                */
        },
        update(diff){
                let data = player.tokens

                data.buyablesBoughtThisTick = []

                let a = ["11", "12", "13", "21", "22", 
                         "23", "31", "32", "33", "41", 
                         "42", "43", "51", "52", "53", 
                         "61", "62", "63"]
                bb = data.best_buyables
                let maxEverOne = decimalZero
                for (i = 0; i < a.length; i++){
                        id = a[i]
                        bb[id] = bb[id].max(data.buyables[id])
                        maxEverOne = maxEverOne.max(bb[id])
                }
                if (hasMilestone("tokens", 13)) {
                        for (i = 0; i < a.length; i++){
                                id = a[i]
                                bb[id] = bb[id].max(maxEverOne)
                        }
                }

                let b = ["101", "102", "111", "112", "121", "122"]
                let maxEverTwo = decimalZero

                for (i = 0; i < b.length; i++){
                        id = b[i]
                        bb[id] = bb[id].max(data.buyables[id])
                        maxEverTwo = maxEverTwo.max(bb[id])
                }
                if (hasUpgrade("or", 112)) {
                        for (i = 0; i < b.length; i++){
                                id = b[i]
                                bb[id] = bb[id].max(maxEverTwo)
                        }
                }

                data.best_over_all_time = data.best_over_all_time.max(data.total)
                if (player.points.gte("e5000")) data.unlocked = true

                if (hasUpgrade("c", 21)) {
                        //tick coins
                        /*
                        dc/dt = N/1+c
                        dc(1+c) = Ndt
                        cc/2+c = Nt+A
                        A = cc/2+c
                        c = -1+sqrt(1+4/2*(Nt+A))
                        = -1+sqrt(1+2(Nt+A))
                        */
                        let datac = data.coins
                        let c = datac.points
                        let a = c.div(2).plus(1).times(c)
                        let nt = tmp.tokens.coins.getGainMult.times(diff)
                        datac.points = a.plus(nt).times(2).plus(1).sqrt().sub(1)
                        datac.best = datac.best.max(datac.points)
                }

                data.bestStrange = data.bestStrange.max(tmp.tokens.buyables[112].effect)
                data.bestTop = data.bestTop.max(tmp.tokens.buyables[121].effect)
                data.bestBottom = data.bestBottom.max(tmp.tokens.buyables[122].effect)
                data.bestCharm = data.bestCharm.max(tmp.tokens.buyables[111].effect)
        },
        resetsNothing(){
                return hasMilestone("n", 11) || player.l.unlocked
        },
        coins: {
                getGainMult(){ // coin gain coins gain coingain
                        let ret = decimalOne

                        
                        if (player.hardMode)            ret = ret.div(3)
                        if (hasUpgrade("o", 22))        ret = ret.times(2)
                        if (hasMilestone("tokens", 14)) ret = ret.times(player.tokens.total.max(1))
                        if (hasMilestone("tokens", 16)) ret = ret.times(tmp.tokens.milestones[16].effect)
                        if (hasUpgrade("h", 71))        ret = ret.times(10)
                        if (hasUpgrade("tokens", 81))   ret = ret.times(81)
                        if (hasUpgrade("tokens", 93))   ret = ret.times(81)
                        if (hasMilestone("n", 8))       ret = ret.times(20)
                        if (hasMilestone("n", 2))       ret = ret.times(10)
                        if (hasUpgrade("sci", 115))     ret = ret.times(3)
                                                        ret = ret.times(tmp.l.effect)

                        if (hasUpgrade("n", 11))        ret = ret.pow(1.001)
                        if (hasMilestone("l", 1))       ret = ret.pow(tmp.l.milestones[1].effect)

                        if (inChallenge("l", 11))       ret = dilate(ret, tmp.l.challenges[11].challengeEffect)

                        return ret
                },
        },
        row: "side",
        layerShown(){
                return hasUpgrade("h", 65) || player.tokens.total.gt(0) || player.n.unlocked
        },
        prestigeButtonText(){
                if (player.tokens.total.gt(100)) return "Reset for a token<br>Requires: " + format(tmp.tokens.getNextAt, 3) + " Life Points"
                return "Reset for a token (" + formatWhole(player.tokens.total.plus(1)) + ")<br>Requires: " + format(tmp.tokens.getNextAt) + " Life Points"
        },
        canReset(){ // tokens canReset
                if (tmp.tokens.getResetGain.eq(0)) return false
                if (hasUpgrade("or", 135)) return true
                return (hasUpgrade("h", 55) || hasChallenge("l", 21)) && (!inChallenge("n", 31) || player.tokens.total.lt(50))
        },
        tooltip(){
                let data = player.tokens
                if (player.ch.everUpgrade33) {
                        return formatWhole(data.tokens2.points) + "/" + formatWhole(tmp.tokens.buyables[101].cost) + " Token II"
                }
                if (hasUpgrade("cells", 42)){
                        let end = ""
                        if (player.tokens.lastRespecDisplayFormula2ID < tmp.tokens.buyables.costFormulaText2ID) {
                                end = br + "Need Respec"
                        }
                        let data2 = data.tokens2
                        return formatWhole(data2.points) + "/" + formatWhole(data2.total) + " Token II" + end
                }
                let start = formatWhole(data.points, true) + "/" + formatWhole(data.total) + " tokens"
                let lrdf = player.tokens.lastRespecDisplayFormula
                let cft = tmp.tokens.buyables.costFormulaText
                let needSpec = false
                if (lrdf != cft && typeof(cft) == "string" && typeof(lrdf) == "string"){
                        if (cft == "2<sup>x</sup>") needSpec = false
                        else if (lrdf == "2<sup>x</sup>") needSpec = true
                        else if (cft == "x") needSpec = false
                        else if (lrdf == "x") needSpec = true
                        else {
                                let x1 = lrdf.split(".")[1].split("<")[0]
                                let y1 = cft.split(".")[1].split("<")[0]
                                needSpec = parseFloat("." + y1) < parseFloat("." + x1)
                        }
                        if (lrdf.includes("ceil") && cft.includes("round")) needSpec = true
                        if (lrdf.includes("round") && cft.includes("floor")) needSpec = true
                        if (!lrdf.includes("max") && cft.includes("max"))   needSpec = true
                }

                let end = ""
                if (needSpec) end = br + "Need Respec"

                if (!player.a.unlocked) return start + end
                let mid = "<b>" + formatWhole(player.tokens.best_buyables[11]) + "</b>"
                if (player.cells.unlocked) return formatWhole(data.total, true) + " " + makeRed(mid) + end
                return start + br + makeRed("(" + mid + ")") + end 
        },
        buyables: {
                rows: 15,
                cols: 3,
                costFormulaID(id){
                        if (id > 100) return layers.tokens.buyables.costFormula2(getBuyableAmount("tokens", id))
                        return layers.tokens.buyables.costFormula(getBuyableAmount("tokens", id))
                },
                costFormula2(x){
                        let tertComps = player.cells.challenges[21]
                        let r3c = tmp.an.clickables.rowThreeOff
                        let m1 = hasAchievement("an", 32) && (player.an.achActive[32] || hasMilestone("nu", 12)) && r3c >= 1
                        let m2 = m1 && r3c >= 2
                        let m3 = m1 && r3c >= 3
                        let m4 = m1 && r3c >= 4

                        if (hasMilestone("nu", 17))     return x.pow(1.26).ceil()
                        if (hasMilestone("ch", 31))     return x.pow(1.27).ceil()
                        if (hasUpgrade("nu", 22))       return x.pow(1.272).ceil()
                        if (hasMilestone("ch", 28))     return x.pow(1.274).ceil()
                        if (hasMilestone("ch", 26))     return x.pow(1.28).ceil()
                        if (hasMilestone("nu", 15))     return x.pow(1.286).ceil()
                        if (hasMilestone("ch", 22))     return x.pow(1.29).ceil()
                        if (m4)                         return x.pow(1.30).ceil()
                        if (m3)                         return x.pow(1.31).ceil()
                        if (m2)                         return x.pow(1.32).ceil()
                        if (m1)                         return x.pow(1.33).ceil()
                        if (hasMilestone("an", 35))     return x.pow(1.34).ceil()
                        if (hasMilestone("an", 34))     return x.pow(1.35).ceil()
                        if (player.ch.everUpgrade33)    return x.pow(1.36).ceil()
                        
                        if (hasMilestone("an", 33) && x.lte(100)) return decimalZero
                        if (hasUpgrade("an", 51))       return x.pow(.45).floor().sub(1).max(0)
                        if (hasUpgrade("ch", 23))       return x.pow(.46).floor().sub(1).max(0)
                        if (hasMilestone("an", 25))     return x.pow(.47).floor().sub(1).max(0)
                        if (hasUpgrade("or", 43))       return x.pow(.48).floor().sub(1).max(0)
                        if (hasUpgrade("or", 42))       return x.pow(.49).floor().sub(1).max(0)
                        if (hasUpgrade("or", 355))      return x.pow(.5).floor().sub(1).max(0)
                        if (hasUpgrade("or", 353))      return x.pow(.51).floor().sub(1).max(0)
                        if (hasMilestone("an", 15))     return x.pow(.52).floor().sub(1).max(0)
                        if (hasMilestone("an", 11))     return x.pow(.53).floor().sub(1).max(0)
                        if (hasMilestone("or", 25))     return x.pow(.54).floor().sub(1).max(0)
                        if (hasUpgrade("or", 335))      return x.pow(.55).floor().sub(1).max(0)
                        if (hasUpgrade("or", 25))       return x.pow(.56).floor().sub(1).max(0)
                        if (hasUpgrade("or", 334))      return x.pow(.57).floor().sub(1).max(0)
                        if (hasUpgrade("or", 24))       return x.pow(.58).floor().sub(1).max(0)
                        if (hasUpgrade("or", 22))       return x.pow(.6).floor().sub(1).max(0)
                        if (hasMilestone("or", 21))     return x.pow(.6).floor()
                        if (hasUpgrade("or", 315))      return x.pow(.63).floor()
                        if (hasUpgrade("or", 314))      return x.pow(.66).floor()
                        if (hasUpgrade("or", 223))      return x.pow(.7).floor()
                        if (hasUpgrade("or", 221))      return x.pow(.7).round()
                        if (hasUpgrade("or", 304))      return x.pow(.7).ceil()
                        if (hasUpgrade("or", 151))      return x.pow(.75).ceil()
                        if (hasUpgrade("or", 15))       return x.pow(.8).ceil()
                        if (hasUpgrade("or", 204))      return x.pow(.85).ceil()
                        if (tertComps >= 4)             return x.pow(.9).ceil()
                        if (hasMilestone("or", 11))     return x
                        return x.plus(1)
                },
                costFormulaText2(){
                        let tertComps = player.cells.challenges[21]
                        let r3c = tmp.an.clickables.rowThreeOff
                        let m1 = hasAchievement("an", 32) && (player.an.achActive[32] || hasMilestone("nu", 12)) && r3c >= 1
                        let m2 = m1 && r3c >= 2
                        let m3 = m1 && r3c >= 3
                        let m4 = m1 && r3c >= 4

                        if (hasMilestone("nu", 17))     return "ceil(x<sup>1.26</sup>)"
                        if (hasMilestone("ch", 31))     return "ceil(x<sup>1.27</sup>)"
                        if (hasUpgrade("nu", 22))       return "ceil(x<sup>1.272</sup>)"
                        if (hasMilestone("ch", 28))     return "ceil(x<sup>1.274</sup>)"
                        if (hasMilestone("ch", 26))     return "ceil(x<sup>1.28</sup>)"
                        if (hasMilestone("nu", 15))     return "ceil(x<sup>1.286</sup>)"
                        if (hasMilestone("ch", 22))     return "ceil(x<sup>1.29</sup>)"
                        if (m4)                         return "ceil(x<sup>1.30</sup>)"
                        if (m3)                         return "ceil(x<sup>1.31</sup>)"
                        if (m2)                         return "ceil(x<sup>1.32</sup>)"
                        if (m1)                         return "ceil(x<sup>1.33</sup>)"
                        if (hasMilestone("an", 35))     return "ceil(x<sup>1.34</sup>)"
                        if (hasMilestone("an", 34))     return "ceil(x<sup>1.35</sup>)"
                        if (player.ch.everUpgrade33)    return "ceil(x<sup>1.36</sup>)"

                        if (hasUpgrade("an", 51))       return "max(floor(x<sup>.45</sup>)-1, 0)"
                        if (hasUpgrade("ch", 23))       return "max(floor(x<sup>.46</sup>)-1, 0)"
                        if (hasMilestone("an", 25))     return "max(floor(x<sup>.47</sup>)-1, 0)"
                        if (hasUpgrade("or", 43))       return "max(floor(x<sup>.48</sup>)-1, 0)"
                        if (hasUpgrade("or", 42))       return "max(floor(x<sup>.49</sup>)-1, 0)"
                        if (hasUpgrade("or", 355))      return "max(floor(x<sup>.5</sup>)-1, 0)"
                        if (hasUpgrade("or", 353))      return "max(floor(x<sup>.51</sup>)-1, 0)"
                        if (hasMilestone("an", 15))     return "max(floor(x<sup>.52</sup>)-1, 0)"
                        if (hasMilestone("an", 11))     return "max(floor(x<sup>.53</sup>)-1, 0)"
                        if (hasMilestone("or", 25))     return "max(floor(x<sup>.54</sup>)-1, 0)"
                        if (hasUpgrade("or", 335))      return "max(floor(x<sup>.55</sup>)-1, 0)"
                        if (hasUpgrade("or", 25))       return "max(floor(x<sup>.56</sup>)-1, 0)"
                        if (hasUpgrade("or", 334))      return "max(floor(x<sup>.57</sup>)-1, 0)"
                        if (hasUpgrade("or", 24))       return "max(floor(x<sup>.58</sup>)-1, 0)"
                        if (hasUpgrade("or", 22))       return "max(floor(x<sup>.6</sup>)-1, 0)"
                        if (hasMilestone("or", 21))     return "floor(x<sup>.6</sup>)"
                        if (hasUpgrade("or", 315))      return "floor(x<sup>.63</sup>)"
                        if (hasUpgrade("or", 314))      return "floor(x<sup>.66</sup>)"
                        if (hasUpgrade("or", 223))      return "floor(x<sup>.7</sup>)"
                        if (hasUpgrade("or", 221))      return "round(x<sup>.7</sup>)"
                        if (hasUpgrade("or", 304))      return "ceil(x<sup>.7</sup>)"
                        if (hasUpgrade("or", 151))      return "ceil(x<sup>.75</sup>)"
                        if (hasUpgrade("or", 15))       return "ceil(x<sup>.8</sup>)"
                        if (hasUpgrade("or", 204))      return "ceil(x<sup>.85</sup>)"
                        if (tertComps >= 4)             return "ceil(x<sup>.9</sup>)"
                        if (hasMilestone("or", 11))     return "x"
                        return "1+x"
                },
                costFormulaText2ID(){
                        let tertComps = player.cells.challenges[21]
                        if (player.ch.everUpgrade33)    return 28
                        if (hasMilestone("an", 33))     return 27
                        if (hasUpgrade("an", 51))       return 26
                        if (hasUpgrade("ch", 23))       return 25
                        if (hasMilestone("an", 25))     return 24
                        if (hasUpgrade("or", 43))       return 23
                        if (hasUpgrade("or", 42))       return 22
                        if (hasUpgrade("or", 355))      return 21
                        if (hasUpgrade("or", 353))      return 20
                        if (hasMilestone("an", 15))     return 19
                        if (hasMilestone("an", 11))     return 18
                        if (hasMilestone("or", 25))     return 17
                        if (hasUpgrade("or", 335))      return 16
                        if (hasUpgrade("or", 25))       return 15
                        if (hasUpgrade("or", 334))      return 14
                        if (hasUpgrade("or", 24))       return 13
                        if (hasUpgrade("or", 22))       return 12
                        if (hasMilestone("or", 21))     return 11
                        if (hasUpgrade("or", 315))      return 10
                        if (hasUpgrade("or", 314))      return 9
                        if (hasUpgrade("or", 223))      return 8
                        if (hasUpgrade("or", 221))      return 7
                        if (hasUpgrade("or", 304))      return 6
                        if (hasUpgrade("or", 151))      return 5
                        if (hasUpgrade("or", 15))       return 4
                        if (hasUpgrade("or", 204))      return 3
                        if (tertComps >= 4)             return 2
                        if (hasMilestone("or", 11))     return 1
                        return 0
                },
                costFormula(x){
                        if (hasUpgrade("sci", 562))     return x.pow(.25).floor().sub(1).max(0)
                        if (hasMilestone("t", 13))      return x.pow(.26).floor().sub(1).max(0)
                        if (hasMilestone("t", 10))      return x.pow(.27).floor().sub(1).max(0)
                        if (hasMilestone("t", 9))       return x.pow(.28).floor().sub(1).max(0)
                        if (hasMilestone("t", 8))       return x.pow(.29).floor().sub(1).max(0)
                        if (hasUpgrade("t", 65))        return x.pow(.3).floor().sub(1).max(0)
                        if (hasMilestone("t", 5))       return x.pow(.31).floor().sub(1).max(0)
                        if (hasMilestone("cells", 62))  return x.pow(.32).floor().sub(1).max(0)
                        if (hasMilestone("cells", 61))  return x.pow(.33).floor().sub(1).max(0)
                        if (hasMilestone("cells", 59))  return x.pow(.34).floor().sub(1).max(0)
                        if (hasMilestone("cells", 58))  return x.pow(.35).floor().sub(1).max(0)
                        if (hasMilestone("cells", 57))  return x.pow(.36).floor().sub(1).max(0)
                        if (hasMilestone("cells", 56))  return x.pow(.37).floor().sub(1).max(0)
                        if (hasMilestone("cells", 55))  return x.pow(.38).floor().sub(1).max(0)
                        if (hasMilestone("cells", 54))  return x.pow(.39).floor().sub(1).max(0)
                        if (hasMilestone("cells", 50))  return x.pow(.4).floor().sub(1).max(0)
                        if (hasMilestone("l", 31))      return x.pow(.4).floor()
                        if (hasMilestone("l", 30))      return x.pow(.41).floor()
                        if (hasMilestone("l", 29))      return x.pow(.43).floor()
                        if (hasUpgrade("p", 53))        return x.pow(.44).floor()
                        if (hasMilestone("l", 26))      return x.pow(.45).floor()
                        if (hasMilestone("l", 25))      return x.pow(.46).floor()
                        if (hasMilestone("l", 24))      return x.pow(.47).floor()
                        if (hasUpgrade("mu", 44))       return x.pow(.48).floor()
                        if (hasMilestone("l", 18))      return x.pow(.49).floor()
                        if (hasMilestone("l", 10))      return x.pow(.5).floor()
                        if (hasUpgrade("n", 31))        return x.pow(.5).round()
                        if (hasUpgrade("n", 24))        return x.pow(.55).round()
                        if (hasUpgrade("mini", 33))     return x.pow(.6).round()
                        if (hasUpgrade("tokens", 82))   return x.pow(.65).round()
                        if (hasUpgrade("h", 75))        return x.pow(.7).round()
                        if (hasUpgrade("h", 85))        return x.pow(.7).ceil()
                        if (hasUpgrade("h", 84))        return x.pow(.8).ceil()
                        if (hasUpgrade("h", 83))        return x.pow(.9).ceil()
                        if (hasUpgrade("c", 23))        return x
                        return Decimal.pow(2, x)
                },
                costFormulaText(){
                        if (hasUpgrade("sci", 562))     return "max(floor(x<sup>.25</sup>)-1, 0)"
                        if (hasMilestone("t", 13))      return "max(floor(x<sup>.26</sup>)-1, 0)"
                        if (hasMilestone("t", 10))      return "max(floor(x<sup>.27</sup>)-1, 0)"
                        if (hasMilestone("t", 9))       return "max(floor(x<sup>.28</sup>)-1, 0)"
                        if (hasMilestone("t", 8))       return "max(floor(x<sup>.29</sup>)-1, 0)"
                        if (hasUpgrade("t", 65))        return "max(floor(x<sup>.3</sup>)-1, 0)"
                        if (hasMilestone("t", 5))       return "max(floor(x<sup>.31</sup>)-1, 0)"
                        if (hasMilestone("cells", 62))  return "max(floor(x<sup>.32</sup>)-1, 0)"
                        if (hasMilestone("cells", 61))  return "max(floor(x<sup>.33</sup>)-1, 0)"
                        if (hasMilestone("cells", 59))  return "max(floor(x<sup>.34</sup>)-1, 0)"
                        if (hasMilestone("cells", 58))  return "max(floor(x<sup>.35</sup>)-1, 0)"
                        if (hasMilestone("cells", 57))  return "max(floor(x<sup>.36</sup>)-1, 0)"
                        if (hasMilestone("cells", 56))  return "max(floor(x<sup>.37</sup>)-1, 0)"
                        if (hasMilestone("cells", 55))  return "max(floor(x<sup>.38</sup>)-1, 0)"
                        if (hasMilestone("cells", 54))  return "max(floor(x<sup>.39</sup>)-1, 0)"
                        if (hasMilestone("cells", 50))  return "max(floor(x<sup>.4</sup>)-1, 0)"
                        if (hasMilestone("l", 31))      return "floor(x<sup>.4</sup>)"
                        if (hasMilestone("l", 30))      return "floor(x<sup>.41</sup>)"
                        if (hasMilestone("l", 29))      return "floor(x<sup>.43</sup>)"
                        if (hasUpgrade("p", 53))        return "floor(x<sup>.44</sup>)"
                        if (hasMilestone("l", 26))      return "floor(x<sup>.45</sup>)"
                        if (hasMilestone("l", 25))      return "floor(x<sup>.46</sup>)"
                        if (hasMilestone("l", 24))      return "floor(x<sup>.47</sup>)"
                        if (hasUpgrade("mu", 44))       return "floor(x<sup>.48</sup>)"
                        if (hasMilestone("l", 18))      return "floor(x<sup>.49</sup>)"
                        if (hasMilestone("l", 10))      return "floor(x<sup>.5</sup>)"
                        if (hasUpgrade("n", 31))        return "round(x<sup>.5</sup>)"
                        if (hasUpgrade("n", 24))        return "round(x<sup>.55</sup>)"
                        if (hasUpgrade("mini", 33))     return "round(x<sup>.6</sup>)"
                        if (hasUpgrade("tokens", 82))   return "round(x<sup>.65</sup>)"
                        if (hasUpgrade("h", 75))        return "round(x<sup>.7</sup>)"
                        if (hasUpgrade("h", 85))        return "ceil(x<sup>.7</sup>)"
                        if (hasUpgrade("h", 84))        return "ceil(x<sup>.8</sup>)"
                        if (hasUpgrade("h", 83))        return "ceil(x<sup>.9</sup>)"
                        if (hasUpgrade("c", 23))        return "x"
                        return "2<sup>x</sup>"
                },
                11: {
                        title: "<bdi style='color:#FF0000'>Radio Waves</bdi>",
                        cost:() => layers.tokens.buyables.costFormulaID(11),
                        canAfford:() => player.tokens.points.gte(tmp.tokens.buyables[11].cost) && !player.tokens.buyablesBoughtThisTick.includes(11),
                        buy(auto = false){// player.tokens.autobuyradio && hasMilestone("n", 7)
                                if (!this.canAfford()) return
                                if (player.tokens.autobuyradio && hasMilestone("n", 7) && !auto) return
                                player.tokens.buyables[11] = player.tokens.buyables[11].plus(1)
                                player.tokens.points = player.tokens.points.sub(tmp.tokens.buyables[11].cost)
                                player.tokens.buyablesBoughtThisTick.push(11)
                        },
                        base(){
                                if (hasMilestone("t", 13)) return decimalOne
                                let ret = new Decimal(1000)
                                if (hasMilestone("tokens", 7))  ret = ret.times(tmp.tokens.milestones[7].effect)
                                if (hasUpgrade("o", 24))        ret = ret.times(player.points.max(1).ln().max(1))
                                
                                if (hasMilestone("tokens", 1))  ret = ret.pow(tmp.tokens.milestones[1].effect)
                                if (hasUpgrade("o", 24))        ret = ret.pow(2)
                                
                                return ret
                        },
                        effect(){
                                if (hasMilestone("tokens", 4)) {
                                        return tmp.tokens.buyables[11].base.pow(player.tokens.best_buyables[11])
                                }
                                return tmp.tokens.buyables[11].base.pow(player.tokens.buyables[11])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.tokens.buyables[11]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.tokens.buyables[11].effect) + " to Life Point</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("tokens", 11)) + " Tokens</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.tokens.buyables[11].base, 3) + "^x" 
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = tmp.tokens.buyables.costFormulaText
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                12: {
                        title: "<bdi style='color:#FF0000'>Microwaves</bdi>",
                        cost:() => layers.tokens.buyables.costFormulaID(12),
                        canAfford:() => player.tokens.points.gte(tmp.tokens.buyables[12].cost) && !player.tokens.buyablesBoughtThisTick.includes(12),
                        buy(){
                                if (!this.canAfford()) return
                                player.tokens.buyables[12] = player.tokens.buyables[12].plus(1)
                                player.tokens.points = player.tokens.points.sub(tmp.tokens.buyables[12].cost)
                                player.tokens.buyablesBoughtThisTick.push(12)
                        },
                        base(){
                                if (hasUpgrade("t", 91)) return decimalOne
                                let ret = new Decimal(100)
                                if (hasMilestone("tokens", 10))         ret = ret.times(tmp.tokens.milestones[10].effect)
                                if (hasUpgrade("h", 82)) {
                                        let exp = player.tokens.total.times(player.h.upgrades.length)
                                                                        ret = ret.times(Decimal.pow(1.01, exp))
                                }
                                if (hasMilestone("tokens", 2))          ret = ret.pow(tmp.tokens.milestones[2].effect)
                                return ret
                        },
                        effect(){
                                if (hasMilestone("tokens", 5)) {
                                        return tmp.tokens.buyables[12].base.pow(player.tokens.best_buyables[12])
                                }
                                return tmp.tokens.buyables[12].base.pow(player.tokens.buyables[12])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.tokens.buyables[12]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.tokens.buyables[12].effect) + " to Hydrogen</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("tokens", 12)) + " Tokens</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.tokens.buyables[12].base, 3) + "^x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = tmp.tokens.buyables.costFormulaText
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                13: { 
                        title: "<bdi style='color:#FF0000'>Infrared</bdi>",
                        cost:() => layers.tokens.buyables.costFormulaID(13),
                        canAfford:() => player.tokens.points.gte(tmp.tokens.buyables[13].cost) && !player.tokens.buyablesBoughtThisTick.includes(13),
                        buy(){
                                if (!this.canAfford()) return
                                player.tokens.buyables[13] = player.tokens.buyables[13].plus(1)
                                player.tokens.points = player.tokens.points.sub(tmp.tokens.buyables[13].cost)
                                player.tokens.buyablesBoughtThisTick.push(13)
                        },
                        base(){
                                if (hasUpgrade("t", 92)) return decimalOne
                                let ret = new Decimal(20)
                                if (hasUpgrade("o", 23)) ret = ret.pow(player.tokens.total.max(1).pow(3))
                                if (hasUpgrade("cells", 315)) {
                                        if (!player.extremeMode) ret = ret.pow(player.tokens.total.max(1))
                                        else ret = ret.times(player.tokens.total.max(1))
                                }
                                if (hasUpgrade("sci", 544)) ret = ret.pow(player.tokens.total.max(1))
                                return ret
                        },
                        effect(){
                                if (hasMilestone("tokens", 6)) {
                                        return tmp.tokens.buyables[13].base.pow(player.tokens.best_buyables[13])
                                }
                                return tmp.tokens.buyables[13].base.pow(player.tokens.buyables[13])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.tokens.buyables[13]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.tokens.buyables[13].effect) + " to Atomic Hydrogen</b><br>"
                                        if (hasMilestone("cells", 25)) eff2 = eff2.replace("Atomic Hydrogen", "shRNA base")
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("tokens", 13)) + " Tokens</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.tokens.buyables[13].base, 3) + "^x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = tmp.tokens.buyables.costFormulaText
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                21: { 
                        title: "<bdi style='color:#FF0000'>Visible</bdi>",
                        cost:() => layers.tokens.buyables.costFormulaID(21),
                        canAfford:() => player.tokens.points.gte(tmp.tokens.buyables[21].cost) && !player.tokens.buyablesBoughtThisTick.includes(21),
                        buy(){
                                if (!this.canAfford()) return
                                player.tokens.buyables[21] = player.tokens.buyables[21].plus(1)
                                player.tokens.points = player.tokens.points.sub(tmp.tokens.buyables[21].cost)
                                player.tokens.buyablesBoughtThisTick.push(21)
                        },
                        base(){
                                if (hasUpgrade("t", 93)) return decimalOne
                                let ret = new Decimal(20)
                                if (hasMilestone("cells", 24)) {
                                        ret = new Decimal(player.extremeMode ? 1.03 : 1.11)

                                        if (hasMilestone("cells", 26))  {
                                                        ret = ret.plus((player.extremeMode ? .001 : .002) * player.cells.milestones.length)
                                        }
                                        if (hasMilestone("cells", 52)) {
                                                let per = player.extremeMode ? .005 : .015
                                                if (hasMilestone("t", 11) && player.extremeMode) {
                                                        per += .004
                                                }
                                                        ret = ret.plus(per * layerChallengeCompletions("cells"))
                                        }
                                        if (hasChallenge("l", 112) && !player.extremeMode) {
                                                        ret = ret.plus(tmp.l.challenges[42].reward)
                                        }
                                        if (hasUpgrade("t", 74)) {
                                                        ret = ret.plus(player.extremeMode ? .24 : .101)
                                        }
                                        if (hasMilestone("t", 8) && !player.extremeMode) {
                                                        ret = ret.plus(.1 * Math.max(0, player.cells.challenges[11]-10))
                                        }
                                        if (hasMilestone("t", 9) && player.extremeMode) {
                                                        ret = ret.plus(.1 * Math.max(0, player.cells.challenges[11]-10))
                                        }

                                        return ret
                                }
                                if (hasUpgrade("o", 23)) ret = ret.pow(player.tokens.total.max(1).pow(3))

                                return ret
                        },
                        effect(){
                                if (hasMilestone("tokens", 7)) {
                                        return tmp.tokens.buyables[21].base.pow(player.tokens.best_buyables[21])
                                }
                                return tmp.tokens.buyables[21].base.pow(player.tokens.buyables[21])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.tokens.buyables[21]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.tokens.buyables[21].effect) + " to Deuterium</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("tokens", 21)) + " Tokens</b><br>"
                                
                                        if (hasMilestone("cells", 24)) eff2 = eff2.replace("Deuterium", "Stem Cell")
                                        if (hasUpgrade("t", 62)) eff2 = eff2.replace("ll", "lls and Cells")
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.tokens.buyables[21].base, 3) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = tmp.tokens.buyables.costFormulaText
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                22: {
                        title: "<bdi style='color:#FF0000'>Near-ultraviolet</bdi>",
                        cost:() => layers.tokens.buyables.costFormulaID(22),
                        canAfford:() => player.tokens.points.gte(tmp.tokens.buyables[22].cost) && !player.tokens.buyablesBoughtThisTick.includes(22),
                        buy(){
                                if (!this.canAfford()) return
                                player.tokens.buyables[22] = player.tokens.buyables[22].plus(1)
                                player.tokens.points = player.tokens.points.sub(tmp.tokens.buyables[22].cost)
                                player.tokens.buyablesBoughtThisTick.push(22)
                        },
                        base(){
                                if (hasUpgrade("t", 94)) return decimalOne
                                let ret = new Decimal(10)

                                if (hasUpgrade("o", 23))        ret = ret.times(tmp.o.upgrades[23].effect)
                                if (hasUpgrade("h", 72))        ret = ret.times(tmp.h.upgrades[72].effect)
                                if (hasUpgrade("mini", 13))     ret = ret.times(player.mini.c_points.points.max(10).log10())
                                if (hasChallenge("n", 31))      ret = ret.times(player.n.points.max(1))

                                if (hasUpgrade("cells", 215))   ret = ret.times(player.cells.lambda.points.max(10).log10())
                                if (hasMilestone("tokens", 15)) ret = ret.times(Decimal.pow(1.2, player.tokens.milestones.length))

                                if (hasChallenge("n", 31))      ret = ret.pow(3)

                                return ret
                        },
                        effect(){
                                if (hasMilestone("tokens", 8)) {
                                        return tmp.tokens.buyables[22].base.pow(player.tokens.best_buyables[22])
                                }
                                return tmp.tokens.buyables[22].base.pow(player.tokens.buyables[22])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.tokens.buyables[22]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.tokens.buyables[22].effect) + " to Carbon</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("tokens", 22)) + " Tokens</b><br>"
                                        
                                        if (hasMilestone("cells", 39)) eff2 = eff2.replace("Carbon", "𝛾 → ∂β base")
                                
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.tokens.buyables[22].base, 3) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = tmp.tokens.buyables.costFormulaText
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                23: {
                        title: "<bdi style='color:#FF0000'>Ultraviolet</bdi>",
                        cost:() => layers.tokens.buyables.costFormulaID(23),
                        canAfford:() => player.tokens.points.gte(tmp.tokens.buyables[23].cost) && !player.tokens.buyablesBoughtThisTick.includes(23),
                        buy(){
                                if (!this.canAfford()) return
                                player.tokens.buyables[23] = player.tokens.buyables[23].plus(1)
                                player.tokens.points = player.tokens.points.sub(tmp.tokens.buyables[23].cost)
                                player.tokens.buyablesBoughtThisTick.push(23)
                        },
                        base(){
                                if (hasUpgrade("t", 95)) return decimalOne
                                let ret = new Decimal(10)
                                if (hasUpgrade("tokens", 32))   ret = ret.times(player.tokens.total.max(1))
                                if (hasUpgrade("c", 22))        ret = ret.times(tmp.c.upgrades[22].effect)
                                
                                if (hasMilestone("tokens", 11)) ret = ret.pow(2)
                                return ret
                        },
                        effect(){
                                if (hasMilestone("tokens", 9)) {
                                        return tmp.tokens.buyables[23].base.pow(player.tokens.best_buyables[23])
                                }
                                return tmp.tokens.buyables[23].base.pow(player.tokens.buyables[23])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.tokens.buyables[23]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.tokens.buyables[23].effect) + " to Oxygen</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("tokens", 23)) + " Tokens</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.tokens.buyables[23].base, 3) + "^x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = tmp.tokens.buyables.costFormulaText
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                31: {
                        title: "<bdi style='color:#FF0000'>X-Rays</bdi>",
                        cost:() => layers.tokens.buyables.costFormulaID(31),
                        canAfford:() => player.tokens.points.gte(tmp.tokens.buyables[31].cost) && !player.tokens.buyablesBoughtThisTick.includes(31),
                        buy(){
                                if (!this.canAfford()) return
                                player.tokens.buyables[31] = player.tokens.buyables[31].plus(1)
                                player.tokens.points = player.tokens.points.sub(tmp.tokens.buyables[31].cost)
                                player.tokens.buyablesBoughtThisTick.push(31)
                        },
                        base(){
                                if (hasUpgrade("t", 101)) return decimalOne
                                let ret = new Decimal(1e8)

                                if (hasUpgrade("c", 21))        ret = ret.times(tmp.c.upgrades[21].effect)
                                if (hasUpgrade("o", 25))        ret = ret.times(tmp.o.upgrades[25].effect)

                                if (hasMilestone("tokens", 4))  ret = ret.pow(3)
                                if (hasUpgrade("tokens", 41))   ret = ret.pow(2)
                                if (hasUpgrade("o", 25))        ret = ret.pow(tmp.o.upgrades[25].effect)

                                return ret
                        },
                        effect(){
                                if (hasMilestone("tokens", 10)) {
                                        return tmp.tokens.buyables[31].base.pow(player.tokens.best_buyables[31])
                                }
                                return tmp.tokens.buyables[31].base.pow(player.tokens.buyables[31])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.tokens.buyables[31]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.tokens.buyables[31].effect) + " to A Point</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("tokens", 31)) + " Tokens</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.tokens.buyables[31].base, 3) + "^x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = tmp.tokens.buyables.costFormulaText
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                32: {
                        title: "<bdi style='color:#FF0000'>Gamma Rays</bdi>",
                        cost:() => layers.tokens.buyables.costFormulaID(32),
                        canAfford:() => player.tokens.points.gte(tmp.tokens.buyables[32].cost) && !player.tokens.buyablesBoughtThisTick.includes(32),
                        buy(){
                                if (!this.canAfford()) return
                                player.tokens.buyables[32] = player.tokens.buyables[32].plus(1)
                                player.tokens.points = player.tokens.points.sub(tmp.tokens.buyables[32].cost)
                                player.tokens.buyablesBoughtThisTick.push(32)
                        },
                        base(){
                                if (hasUpgrade("t", 102)) return decimalOne
                                let ret = new Decimal(1e12)
                                if (hasUpgrade("o", 22))        ret = ret.times(player.points.plus(10).log10())
                                if (hasMilestone("tokens", 6))  ret = ret.pow(tmp.tokens.milestones[6].effect)
                                return ret
                        },
                        effect(){
                                if (hasMilestone("tokens", 11)) {
                                        return tmp.tokens.buyables[32].base.pow(player.tokens.best_buyables[32])
                                }
                                return tmp.tokens.buyables[32].base.pow(player.tokens.buyables[32])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.tokens.buyables[32]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.tokens.buyables[32].effect) + " to B Point</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("tokens", 32)) + " Tokens</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.tokens.buyables[32].base, 3) + "^x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = tmp.tokens.buyables.costFormulaText
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                33: { 
                        title: "<bdi style='color:#FF0000'>UHF Gamma Rays</bdi>",
                        cost:() => layers.tokens.buyables.costFormulaID(33),
                        canAfford:() => player.tokens.points.gte(tmp.tokens.buyables[33].cost) && !player.tokens.buyablesBoughtThisTick.includes(33),
                        buy(){
                                if (!this.canAfford()) return
                                player.tokens.buyables[33] = player.tokens.buyables[33].plus(1)
                                player.tokens.points = player.tokens.points.sub(tmp.tokens.buyables[33].cost)
                                player.tokens.buyablesBoughtThisTick.push(33)
                        },
                        base(){
                                if (hasMilestone("t", 14)) return decimalOne
                                let ret = new Decimal(10)
                                if (hasMilestone("tokens", 3)) {
                                        ret = ret.times(tmp.tokens.milestones[3].effect)
                                        ret = ret.pow(tmp.tokens.milestones[3].effect)
                                }
                                return ret
                        },
                        effect(){
                                if (hasMilestone("tokens", 12)) {
                                        return tmp.tokens.buyables[33].base.pow(player.tokens.best_buyables[33])
                                }
                                return tmp.tokens.buyables[33].base.pow(player.tokens.buyables[33])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.tokens.buyables[33]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.tokens.buyables[33].effect) + " to Color Production</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("tokens", 33)) + " Tokens</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.tokens.buyables[33].base, 3) + "^x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = tmp.tokens.buyables.costFormulaText
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                41: {
                        title: "<bdi style='color:#FFFF00'>Constant</bdi>",
                        cost:() => layers.tokens.buyables.costFormulaID(41),
                        canAfford:() => player.tokens.points.gte(tmp.tokens.buyables[41].cost) && !player.tokens.buyablesBoughtThisTick.includes(41),
                        buy(){
                                if (!this.canAfford()) return
                                player.tokens.buyables[41] = player.tokens.buyables[41].plus(1)
                                player.tokens.points = player.tokens.points.sub(tmp.tokens.buyables[41].cost)
                                player.tokens.buyablesBoughtThisTick.push(41)
                        },
                        base(){
                                if (hasUpgrade("cells", 31)) return decimalOne
                                if (hasMilestone("cells", 30)){
                                        let ret = new Decimal(2)

                                        if (hasMilestone("cells", 48) && !player.extremeMode) {
                                                ret = ret.times(Decimal.pow(2, player.cells.milestones.length))
                                        }

                                        return ret
                                }
                                let ret = new Decimal(1.02)
                                
                                if (hasUpgrade("h", 73))        ret = ret.plus(.01)
                                if (hasUpgrade("mu", 52))       ret = ret.plus(.001 * player.mu.upgrades.length)
                                if (hasUpgrade("p", 42))        ret = ret.plus(.01)
                                if (hasUpgrade("p", 54))        ret = ret.plus(.01)
                                if (hasUpgrade("p", 55))        ret = ret.plus(.01)
                                                                ret = ret.plus(layers.l.grid.getGemEffect(203))
                                if (hasMilestone("a", 20))      ret = ret.plus(.002 * player.a.milestones.length)
                                if (hasChallenge("l", 42))      ret = ret.plus(tmp.l.challenges[42].reward)
                                if (hasUpgrade("l", 42))        ret = ret.plus(.011)
                                if (hasUpgrade("l", 44))        ret = ret.plus(.001 * player.l.upgrades.length)

                                if (hasChallenge("l", 92))      ret = ret.pow(tmp.l.challenges[92].reward)

                                return ret
                        },
                        effect(){
                                if (hasMilestone("tokens", 4)) {
                                        return tmp.tokens.buyables[41].base.pow(player.tokens.best_buyables[41])
                                }
                                return tmp.tokens.buyables[41].base.pow(player.tokens.buyables[41])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.tokens.buyables[41]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: ^"
                                        let eff2 = format(tmp.tokens.buyables[41].effect) + " to Life Point</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("tokens", 41)) + " Tokens</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.tokens.buyables[41].base, 4) + "^x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = tmp.tokens.buyables.costFormulaText
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                42: {
                        title: "<bdi style='color:#FFFF00'>Logarithmic</bdi>",
                        cost:() => layers.tokens.buyables.costFormulaID(42),
                        canAfford:() => player.tokens.points.gte(tmp.tokens.buyables[42].cost) && !player.tokens.buyablesBoughtThisTick.includes(42),
                        buy(){
                                if (!this.canAfford()) return
                                player.tokens.buyables[42] = player.tokens.buyables[42].plus(1)
                                player.tokens.points = player.tokens.points.sub(tmp.tokens.buyables[42].cost)
                                player.tokens.buyablesBoughtThisTick.push(42)
                        },
                        base(){
                                if (hasUpgrade("cells", 25)) return decimalOne
                                let ret = new Decimal(1.01)

                                if (hasMilestone("cells", 31) && player.extremeMode) {
                                                                ret = decimalOne
                                }
                                if (hasUpgrade("tokens", 31))   ret = ret.plus(.01)
                                if (hasUpgrade("t", 61))        ret = ret.plus(.011)

                                return ret
                        },
                        effect(){
                                if (hasMilestone("tokens", 5)) {
                                        return tmp.tokens.buyables[42].base.pow(player.tokens.best_buyables[42])
                                }
                                return tmp.tokens.buyables[42].base.pow(player.tokens.buyables[42])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.tokens.buyables[42]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: ^"
                                        let eff2 = format(tmp.tokens.buyables[42].effect) + " to Hydrogen</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("tokens", 42)) + " Tokens</b><br>"
                                        
                                        if (hasMilestone("cells", 31)) eff2 = eff2.replace("Hydrogen", "crRNA")
                                        
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.tokens.buyables[42].base, 3) + "^x"

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = tmp.tokens.buyables.costFormulaText
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                43: {
                        title: "<bdi style='color:#FFFF00'>Linear</bdi>",
                        cost:() => layers.tokens.buyables.costFormulaID(43),
                        canAfford:() => player.tokens.points.gte(tmp.tokens.buyables[43].cost) && !player.tokens.buyablesBoughtThisTick.includes(43),
                        buy(){
                                if (!this.canAfford()) return
                                player.tokens.buyables[43] = player.tokens.buyables[43].plus(1)
                                player.tokens.points = player.tokens.points.sub(tmp.tokens.buyables[43].cost)
                                player.tokens.buyablesBoughtThisTick.push(43)
                        },
                        base(){
                                if (hasUpgrade("cells", 24)) return decimalOne
                                let ret = new Decimal(1.01)
                                if (hasUpgrade("tokens", 34)) ret = ret.plus(.01)
                                return ret
                        },
                        effect(){
                                if (hasMilestone("tokens", 6)) {
                                        return tmp.tokens.buyables[43].base.pow(player.tokens.best_buyables[43])
                                }
                                return tmp.tokens.buyables[43].base.pow(player.tokens.buyables[43])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.tokens.buyables[43]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: ^"
                                        let eff2 = format(tmp.tokens.buyables[43].effect) + " to Atomic Hydrogen</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("tokens", 43)) + " Tokens</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.tokens.buyables[43].base, 3) + "^x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = tmp.tokens.buyables.costFormulaText
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                51: {
                        title: "<bdi style='color:#FFFF00'>Quadratic</bdi>",
                        cost:() => layers.tokens.buyables.costFormulaID(51),
                        canAfford:() => player.tokens.points.gte(tmp.tokens.buyables[51].cost) && !player.tokens.buyablesBoughtThisTick.includes(51),
                        buy(){
                                if (!this.canAfford()) return
                                player.tokens.buyables[51] = player.tokens.buyables[51].plus(1)
                                player.tokens.points = player.tokens.points.sub(tmp.tokens.buyables[51].cost)
                                player.tokens.buyablesBoughtThisTick.push(51)
                        },
                        base(){
                                if (hasUpgrade("cells", 22)) return decimalOne
                                let ret = new Decimal(1.01)
                                if (hasUpgrade("tokens", 33)) ret = ret.plus(.01)
                                return ret
                        },
                        effect(){
                                if (hasMilestone("tokens", 7)) {
                                        return tmp.tokens.buyables[51].base.pow(player.tokens.best_buyables[51])
                                }
                                return tmp.tokens.buyables[51].base.pow(player.tokens.buyables[51])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.tokens.buyables[51]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: ^"
                                        let eff2 = format(tmp.tokens.buyables[51].effect) + " to Deuterium</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("tokens", 51)) + " Tokens</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.tokens.buyables[51].base, 3) + "^x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = tmp.tokens.buyables.costFormulaText
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                52: {
                        title: "<bdi style='color:#FFFF00'>Cubic</bdi>",
                        cost:() => layers.tokens.buyables.costFormulaID(52),
                        canAfford:() => player.tokens.points.gte(tmp.tokens.buyables[52].cost) && !player.tokens.buyablesBoughtThisTick.includes(52),
                        buy(){
                                if (!this.canAfford()) return
                                player.tokens.buyables[52] = player.tokens.buyables[52].plus(1)
                                player.tokens.points = player.tokens.points.sub(tmp.tokens.buyables[52].cost)
                                player.tokens.buyablesBoughtThisTick.push(52)
                        },
                        base(){
                                if (hasUpgrade("t", 105)) return decimalOne
                                let ret = new Decimal(1.01)
                                if (hasMilestone("tokens", 18)) ret = ret.plus(.01)
                                if (hasMilestone("tokens", 20)) ret = ret.plus(.01)
                                if (hasUpgrade("n", 14))        ret = ret.plus(.001)
                                if (hasMilestone("mu", 9))      ret = ret.plus(player.mu.points.times(.001))
                                return ret
                        },
                        effect(){
                                if (hasMilestone("tokens", 8)) {
                                        return tmp.tokens.buyables[52].base.pow(player.tokens.best_buyables[52])
                                }
                                return tmp.tokens.buyables[52].base.pow(player.tokens.buyables[52])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.tokens.buyables[52]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: ^"
                                        let eff2 = format(tmp.tokens.buyables[52].effect) + " to Carbon</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("tokens", 52)) + " Tokens</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.tokens.buyables[52].base, 3) + "^x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = tmp.tokens.buyables.costFormulaText
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                53: {
                        title: "<bdi style='color:#FFFF00'>Polynomial</bdi>",
                        cost:() => layers.tokens.buyables.costFormulaID(53),
                        canAfford:() => player.tokens.points.gte(tmp.tokens.buyables[53].cost) && !player.tokens.buyablesBoughtThisTick.includes(53),
                        buy(){
                                if (!this.canAfford()) return
                                player.tokens.buyables[53] = player.tokens.buyables[53].plus(1)
                                player.tokens.points = player.tokens.points.sub(tmp.tokens.buyables[53].cost)
                                player.tokens.buyablesBoughtThisTick.push(53)
                        },
                        base(){
                                if (hasUpgrade("t", 104)) return decimalOne
                                let ret = new Decimal(1.01)
                                if (hasUpgrade("c", 22))        ret = ret.plus(.01)
                                if (hasUpgrade("c", 25))        ret = ret.plus(.01)
                                if (hasUpgrade("n", 15))        ret = ret.plus(.001)
                                if (hasMilestone("mu", 9))      ret = ret.plus(player.mu.points.times(.001))
                                return ret
                        },
                        effect(){
                                if (hasMilestone("tokens", 9)) {
                                        return tmp.tokens.buyables[53].base.pow(player.tokens.best_buyables[53])
                                }
                                return tmp.tokens.buyables[53].base.pow(player.tokens.buyables[53])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.tokens.buyables[53]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: ^"
                                        let eff2 = format(tmp.tokens.buyables[53].effect) + " to Oxygen</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("tokens", 53)) + " Tokens</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.tokens.buyables[53].base, 3, 3) + "^x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = tmp.tokens.buyables.costFormulaText
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                61: {
                        title: "<bdi style='color:#FFFF00'>Semi-exponential</bdi>",
                        cost:() => layers.tokens.buyables.costFormulaID(61),
                        canAfford:() => player.tokens.points.gte(tmp.tokens.buyables[61].cost) && !player.tokens.buyablesBoughtThisTick.includes(61),
                        buy(){
                                if (!this.canAfford()) return
                                player.tokens.buyables[61] = player.tokens.buyables[61].plus(1)
                                player.tokens.points = player.tokens.points.sub(tmp.tokens.buyables[61].cost)
                                player.tokens.buyablesBoughtThisTick.push(61)
                        },
                        base(){
                                if (hasUpgrade("t", 103)) return decimalOne
                                let ret = new Decimal(1.01)
                                if (hasMilestone("tokens", 5))  ret = ret.plus(.01)
                                if (hasMilestone("tokens", 21)) ret = ret.plus(.03)
                                if (hasChallenge("n", 11))      ret = ret.plus(tmp.n.challenges[11].rewardEffect)
                                return ret
                        },
                        effect(){
                                if (hasMilestone("tokens", 10)) {
                                        return tmp.tokens.buyables[61].base.pow(player.tokens.best_buyables[61])
                                }
                                return tmp.tokens.buyables[61].base.pow(player.tokens.buyables[61])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.tokens.buyables[61]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: ^"
                                        let eff2 = format(tmp.tokens.buyables[61].effect) + " to A Point</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("tokens", 61)) + " Tokens</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.tokens.buyables[61].base, 3) + "^x" 
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = tmp.tokens.buyables.costFormulaText
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                62: {
                        title: "<bdi style='color:#FFFF00'>Exponential</bdi>",
                        cost:() => layers.tokens.buyables.costFormulaID(62),
                        canAfford:() => player.tokens.points.gte(tmp.tokens.buyables[62].cost) && !player.tokens.buyablesBoughtThisTick.includes(62),
                        buy(){
                                if (!this.canAfford()) return
                                player.tokens.buyables[62] = player.tokens.buyables[62].plus(1)
                                player.tokens.points = player.tokens.points.sub(tmp.tokens.buyables[62].cost)
                                player.tokens.buyablesBoughtThisTick.push(62)
                        },
                        base(){
                                if (hasMilestone("t", 16)) return decimalOne
                                let ret = new Decimal(1.01)
                                if (hasMilestone("tokens", 5))  ret = ret.plus(.01)
                                if (hasMilestone("tokens", 22)) ret = ret.plus(.03)
                                if (hasUpgrade("n", 21))        ret = ret.plus(.001 * player.n.upgrades.length)
                                return ret
                        },
                        effect(){
                                if (hasMilestone("tokens", 11)) {
                                        return tmp.tokens.buyables[62].base.pow(player.tokens.best_buyables[62])
                                }
                                return tmp.tokens.buyables[62].base.pow(player.tokens.buyables[62])
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.tokens.buyables[62]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: ^"
                                        let eff2 = format(tmp.tokens.buyables[62].effect) + " to B Point</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("tokens", 62)) + " Tokens</b><br>"

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.tokens.buyables[62].base, 3) + "^x"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = tmp.tokens.buyables.costFormulaText
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                63: {
                        title: "<bdi style='color:#FFFF00'>Double-exponential</bdi>",
                        cost:() => layers.tokens.buyables.costFormulaID(63),
                        canAfford:() => player.tokens.points.gte(tmp.tokens.buyables[63].cost) && !player.tokens.buyablesBoughtThisTick.includes(63),
                        buy(){
                                if (!this.canAfford()) return
                                player.tokens.buyables[63] = player.tokens.buyables[63].plus(1)
                                player.tokens.points = player.tokens.points.sub(tmp.tokens.buyables[63].cost)
                                player.tokens.buyablesBoughtThisTick.push(63)
                        },
                        effect(){
                                if (hasMilestone("t", 15)) return decimalZero
                                if (hasMilestone("cells", 51)) {
                                        let div = 500
                                        return player.tokens.best_buyables[63].div(div)
                                }
                                let div = 20
                                if (hasUpgrade("c", 24)) div /= 2
                                if (hasUpgrade("c", 25)) div /= 2
                                if (hasUpgrade("n", 25)) div /= 5
                                if (hasMilestone("tokens", 12)) {
                                        return player.tokens.best_buyables[63].div(div).plus(1).pow(-1).sub(1).times(-.2)
                                }
                                return player.tokens.buyables[63].div(div).plus(1).pow(-1).sub(1).times(-.2)
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.tokens.buyables[63]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.tokens.buyables[63].effect, 4) + " to Color Production Exponent</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + format(getBuyableCost("tokens", 63)) + " Tokens</b><br>"

                                        if (hasMilestone("cells", 50)) eff2 = eff2.replace("Color Production Exponent", "Omnipotent base")

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = ".2-.2/(1+x/20)"
                                if (hasUpgrade("c", 24)) eformula = eformula.replace("20", "10")
                                if (hasUpgrade("c", 25)) eformula = eformula.replace("10", "5")
                                if (hasUpgrade("n", 25)) eformula = eformula.replace("x/5", "x")
                                if (hasMilestone("cells", 51)) eformula = "x/500"
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = tmp.tokens.buyables.costFormulaText
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                71: {
                        title: "<bdi style='color:#FFFFFF'>Sell-all</bdi>",
                        canAfford:() => true,
                        buy(){
                                if (!this.canAfford()) return
                                player.tokens.points = player.tokens.total
                                x = ["11", "12", "13", "21", "22", 
                                     "23", "31", "32", "33", "41", 
                                     "42", "43", "51", "52", "53", 
                                     "61", "62", "63"]
                                for (i in x){
                                        id = x[i]
                                        player.tokens.buyables[id] = decimalZero
                                }
                                player.tokens.lastRespecDisplayFormula = tmp.tokens.buyables.costFormulaText
                        },
                        style(){
                                return {
                                        height: "100px",
                                        width: "100px",
                                }
                        },
                        display(){
                                return "Sell all buyables<br>(Both pages)"
                        },
                },
                81: {
                        title: "<bdi style='color:#FFFFFF'>Sell-all</bdi>",
                        canAfford:() => true,
                        buy(){
                                if (!this.canAfford()) return
                                if (hasMilestone("l", 3)) return
                                let keep = [91, 92, 93, 94, 95]
                                if (hasMilestone("tokens", 18))         keep = keep.concat([42, 61, 62])
                                if (hasUpgrade("mini", 31))             keep = keep.concat([71, 72, 73, 81, 82])
                                if (hasMilestone("tokens", 20))         keep = keep.concat([11, 21, 22, 31, 32, 33, 34, 41, 51, 52])
                                player.tokens.upgrades = filter(player.tokens.upgrades, keep)
                        },
                        style(){
                                return {
                                        height: "100px",
                                        width: "100px",
                                }
                        },
                        display(){
                                return "Sell all coin upgrades<br>(Does not give coins back)"
                        },
                },
                getRow10Total(){
                        return getBuyableAmount("tokens", 101).plus(getBuyableAmount("tokens", 102))
                },
                getRow11Total(){
                        return getBuyableAmount("tokens", 111).plus(getBuyableAmount("tokens", 112))
                },
                getRow12Total(){
                        return getBuyableAmount("tokens", 121).plus(getBuyableAmount("tokens", 122))
                },
                getCol1Total(){
                        let data = player.tokens.best_buyables
                        if (hasUpgrade("or", 113)) return data[101].plus(data[111]).plus(data[121])
                        return getBuyableAmount("tokens", 101).plus(getBuyableAmount("tokens", 111)).plus(getBuyableAmount("tokens", 121))
                },
                getCol2Total(){
                        let data = player.tokens.best_buyables
                        if (hasUpgrade("or", 111)) return data[102].plus(data[112]).plus(data[122])
                        return getBuyableAmount("tokens", 102).plus(getBuyableAmount("tokens", 112)).plus(getBuyableAmount("tokens", 122))
                },
                101: {
                        title: "UP QUARK",
                        cost:() => layers.tokens.buyables.costFormulaID(101),
                        canAfford(){
                                if (!player.tokens.tokens2Unl.includes(101)) return false
                                return player.tokens.tokens2.points.gte(tmp.tokens.buyables[101].cost) && !player.tokens.buyablesBoughtThisTick.includes(101)
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.tokens
                                data.buyables[101] = data.buyables[101].plus(1)
                                if (!player.ch.everUpgrade33) data.tokens2.points = data.tokens2.points.sub(tmp.tokens.buyables[101].cost)
                                if (!player.ch.everUpgrade33) player.tokens.buyablesBoughtThisTick.push(101)
                        },
                        base(){
                                let r = tmp.tokens.buyables.getRow10Total
                                let c = tmp.tokens.buyables.getCol1Total

                                if (hasMilestone("an", 38)) return c.plus(1).sqrt().div(12)
                                if (hasUpgrade("nu", 12))   return c.plus(1).sqrt().div(14)
                                if (hasMilestone("nu", 7))  return c.plus(1).sqrt().div(25)
                                if (hasMilestone("or", 12)) return c.plus(1).sqrt().div(40)

                                return c.plus(1).sqrt().div(r.plus(40))
                        },
                        effect(){
                                if (hasUpgrade("or", 103)) return tmp.tokens.buyables[101].base.times(player.tokens.best_buyables[101])
                                return tmp.tokens.buyables[101].base.times(player.tokens.buyables[101])
                        },
                        unlocked(){
                                return true
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.tokens.buyables[101]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.tokens.buyables[101].effect, 4) + " to Omnipotent base</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("tokens", 101)) + " Token II</b><br>"
                                        if (player.ch.everUpgrade33) cost = cost.replace("Cost", "Requires")

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "(1+C)<sup>.5</sup>/(40+R)*x<br>" + format(tmp.tokens.buyables[101].base, 4) + "*x" 
                                if (hasMilestone("or", 12)) eformula = eformula.replace("(40+R)", "40")
                                if (hasMilestone("nu", 7)) eformula = eformula.replace("40", "25")
                                if (hasUpgrade("nu", 12))  eformula = eformula.replace("25", "14")
                                if (hasMilestone("an", 38)) eformula = eformula.replace("14", "12")
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = tmp.tokens.buyables.costFormulaText2
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                102: {
                        title: "DOWN QUARK",
                        cost:() => layers.tokens.buyables.costFormulaID(102),
                        canAfford(){
                                if (!player.tokens.tokens2Unl.includes(102)) return false
                                return player.tokens.tokens2.points.gte(tmp.tokens.buyables[102].cost) && !player.tokens.buyablesBoughtThisTick.includes(102)
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.tokens
                                data.buyables[102] = data.buyables[102].plus(1)
                                if (!player.ch.everUpgrade33) data.tokens2.points = data.tokens2.points.sub(tmp.tokens.buyables[102].cost)
                                if (!player.ch.everUpgrade33) player.tokens.buyablesBoughtThisTick.push(102)
                        },
                        coefficient(){
                                let ret = decimalOne
                                if (hasUpgrade("t", 134)) ret = ret.times(3)
                                if (hasUpgrade("t", 144)) ret = ret.plus(1.5)
                                if (hasUpgrade("cells", 61)) ret = ret.pow(player.tokens.tokens2.total.sub(20).max(1))
                                return ret
                        },
                        base(){
                                let r = tmp.tokens.buyables.getRow10Total
                                let c = tmp.tokens.buyables.getCol2Total

                                if (hasUpgrade("or", 133)) return player.tokens.total.max(1).pow(c)
                                let ret = c.sub(r.sqrt()).times(50).plus(player.tokens.total).max(1)
                                if (hasMilestone("or", 9)) ret = player.tokens.total.max(1).pow(c.plus(1).sqrt())
                                if (hasUpgrade("t", 134)) ret = ret.times(tmp.tokens.buyables[102].coefficient)

                                return ret
                        },
                        effect(){
                                if (hasUpgrade("t", 134) || hasUpgrade("or", 103)) {
                                        return tmp.tokens.buyables[102].base.pow(player.tokens.best_buyables[102])
                                }
                                return tmp.tokens.buyables[102].base.pow(player.tokens.buyables[102])
                        },
                        unlocked(){
                                return true
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.tokens.buyables[102]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.tokens.buyables[102].effect, 4) + " to Stem Cell gain</b><br>"
                                        if (hasUpgrade("an", 34)) eff2 = eff2.replace("Stem Cell", "Tissue")
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("tokens", 102)) + " Token II</b><br>"
                                        if (player.ch.everUpgrade33) cost = cost.replace("Cost", "Requires")

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "(Tokens+50(C-R<sup>.5</sup>))<sup>x</sup><br>" + format(tmp.tokens.buyables[102].base, 4) + "^x" 
                                if (!hasUpgrade("or", 133)) {
                                        if (hasMilestone("or", 9)) eformula = eformula.replace("+50(C-R<sup>.5</sup>)", "<sup>sqrt(1+C)</sup>")
                                        let sliced = eformula.split("<sup>x</sup>")
                                        if (hasUpgrade("t", 134)) eformula = "(" + format(tmp.tokens.buyables[102].coefficient) + sliced[0] + ")<sup>x</sup>" + sliced[1]
                                } else { // hasUpgrade("or", 133) = true
                                        eformula = eformula.replace("(Tokens+50(C-R<sup>.5</sup>))", "(Tokens<sup>C</sup>)")
                                }

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = tmp.tokens.buyables.costFormulaText2
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                return br + end
                        },
                },
                111: {
                        title: "CHARM QUARK",
                        cost:() => layers.tokens.buyables.costFormulaID(111),
                        canAfford(){
                                if (!player.tokens.tokens2Unl.includes(111)) return false
                                return player.tokens.tokens2.points.gte(tmp.tokens.buyables[111].cost) && !player.tokens.buyablesBoughtThisTick.includes(111)
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let data = player.tokens
                                data.buyables[111] = data.buyables[111].plus(1)
                                if (!player.ch.everUpgrade33) data.tokens2.points = data.tokens2.points.sub(tmp.tokens.buyables[111].cost)
                                if (!player.ch.everUpgrade33) player.tokens.buyablesBoughtThisTick.push(111)
                        },
                        base(){
                                let r = tmp.tokens.buyables.getRow11Total
                                let c = tmp.tokens.buyables.getCol1Total

                                if (hasUpgrade("nu", 22))   return c.pow(.7)
                                if (hasUpgrade("nu", 11))   return c.pow(.6)
                                if (hasUpgrade("or", 45))   return c.pow(.6).times(.1)
                                if (hasMilestone("an", 14)) return c.pow(.6).times(.07)
                                if (hasMilestone("or", 11)) return c.pow(.6).times(.1)

                                return c.sqrt().times(3).sub(r.root(4)).times(.04).max(0)
                        },
                        initialEffect(){
                                let base = tmp.tokens.buyables[111].base
                                if (hasUpgrade("nu", 22)) {
                                        return base.times(player.tokens.best_buyables[111].pow(.7))
                                }
                                if (hasMilestone("an", 14)) {
                                        return base.times(player.tokens.best_buyables[111].pow(.6))
                                }
                                if (hasUpgrade("or", 103)) {
                                        return base.times(player.tokens.best_buyables[111].sqrt())
                                }
                                return base.times(player.tokens.buyables[111].sqrt())
                        },
                        effect(){
                                let base = tmp.tokens.buyables[111].base
                                if (hasUpgrade("nu", 22)) {
                                        return base.times(player.tokens.best_buyables[111].pow(.7)).max(player.tokens.bestCharm)
                                }
                                if (hasMilestone("an", 14)) {
                                        return base.times(player.tokens.best_buyables[111].pow(.6)).max(player.tokens.bestCharm)
                                }
                                if (hasUpgrade("or", 103)) {
                                        return base.times(player.tokens.best_buyables[111].sqrt()).max(player.tokens.bestCharm)
                                }
                                if (hasUpgrade("t", 155)) {
                                        return base.times(player.tokens.buyables[111].sqrt()).max(player.tokens.bestCharm)
                                }
                                return base.times(player.tokens.buyables[111].sqrt())
                        },
                        unlocked(){
                                return hasUpgrade("cells", 45)
                        },
                        display(){
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.tokens.buyables[111]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        let eff2 = format(tmp.tokens.buyables[111].effect, 4) + " to Tissue effect exponent</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("tokens", 111)) + " Token II</b><br>"
                                        if (player.ch.everUpgrade33) cost = cost.replace("Cost", "Requires")

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = ".04(3C<sup>.5</sup>-R<sup>.25</sup>)*sqrt(x)<br>" + format(tmp.tokens.buyables[111].base, 4) + "*sqrt(x)" 
                                if (hasMilestone("or", 11)) eformula = eformula.replace(".04(3C<sup>.5</sup>-R<sup>.25</sup>)", ".1(C<sup>.6</sup>)")
                                if (hasMilestone("an", 14)) {
                                        eformula = eformula.replace(".1(C<sup>.6</sup>)*sqrt(x)", ".07(C*x)<sup>.6</sup>")
                                        eformula = eformula.replace("sqrt(x)", "x<sup>.6</sup>")
                                }
                                if (hasUpgrade("nu", 22))       eformula = eformula.replaceAll(".6", ".7")
                                if (hasUpgrade("or", 45))       eformula = eformula.replace(".07", ".1")
                                if (hasUpgrade("nu", 11))       eformula = eformula.replace(".1", "")

                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = tmp.tokens.buyables.costFormulaText2
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                if (!hasUpgrade("t", 155)) return br + end

                                let bestDisplay = "Currently: " + format(tmp.tokens.buyables[111].initialEffect) 
                                bestDisplay += "/" + format(player.tokens.bestCharm)

                                return br + end + br + bestDisplay + br + "Note: Maxed at 100 for Tissue effect exponent"
                        },
                },
                112: {
                        title: "STRANGE QUARK",
                        cost:() => layers.tokens.buyables.costFormulaID(112),
                        canAfford(){
                                if (!player.tokens.tokens2Unl.includes(112)) return player.cells.points.gte("5e13435")
                                return player.tokens.tokens2.points.gte(tmp.tokens.buyables[112].cost) && !player.tokens.buyablesBoughtThisTick.includes(112)
                        },
                        buy(){
                                if (!this.canAfford()) return
                                if (!player.tokens.tokens2Unl.includes(112)){
                                        player.tokens.tokens2Unl.push(112)
                                        return
                                }
                                let data = player.tokens
                                data.buyables[112] = data.buyables[112].plus(1)
                                if (!player.ch.everUpgrade33) data.tokens2.points = data.tokens2.points.sub(tmp.tokens.buyables[112].cost)
                                if (!player.ch.everUpgrade33) player.tokens.buyablesBoughtThisTick.push(112)
                        },
                        coefficient(){
                                if (hasUpgrade("or", 111)) return new Decimal(10)
                                let ret = new Decimal(10)
                                if (hasUpgrade("t", 134))       ret = ret.plus(.7)
                                if (hasUpgrade("t", 144))       ret = ret.plus(1.5)
                                return ret
                        },
                        base(){
                                let r = tmp.tokens.buyables.getRow11Total
                                let c = tmp.tokens.buyables.getCol2Total

                                if (hasMilestone("or", 10)) return c.pow(.8).times(tmp.tokens.buyables[112].coefficient)

                                return c.pow(.8).sub(r.sqrt()).max(0).times(tmp.tokens.buyables[112].coefficient)
                        },
                        initialEffect(){
                                let base = tmp.tokens.buyables[112].base
                                if (hasUpgrade("or", 103)) {
                                        return base.times(player.tokens.best_buyables[112])
                                }
                                return base.times(player.tokens.buyables[112])
                        },
                        effect(){
                                let base = tmp.tokens.buyables[112].base
                                if (hasUpgrade("or", 103)) {
                                        return base.times(player.tokens.best_buyables[112]).max(player.tokens.bestStrange)
                                }
                                if (hasUpgrade("t", 143)) {
                                        return base.times(player.tokens.buyables[112]).max(player.tokens.bestStrange)
                                }
                                return base.times(player.tokens.buyables[112])
                        },
                        unlocked(){
                                return hasUpgrade("cells", 45)
                        },
                        display(){
                                if (!player.tokens.tokens2Unl.includes(112)) return "<br>You need 5e13435 Cells to unlock this buyable"

                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.tokens.buyables[112]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: -"
                                        let eff2 = format(tmp.tokens.buyables[112].effect, 4) + " to effective Tokens</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("tokens", 112)) + " Token II</b><br>"
                                        if (player.ch.everUpgrade33) cost = cost.replace("Cost", "Requires")

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = format(tmp.tokens.buyables[112].coefficient)
                                eformula += "(C<sup>.8</sup>-R<sup>.5</sup>)*x<br>" 
                                if (hasMilestone("or", 10)) eformula = eformula.replace("-R<sup>.5</sup>", "")
                                eformula += format(tmp.tokens.buyables[112].base, 4) + "*x" 
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = tmp.tokens.buyables.costFormulaText2
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                if (!hasUpgrade("t", 143)) return br + end

                                let bestDisplay = "Currently: " + format(tmp.tokens.buyables[112].initialEffect) 
                                bestDisplay += "/" + format(player.tokens.bestStrange)

                                return br + end + br + bestDisplay
                        },
                },
                121: {
                        title: "TOP QUARK",
                        cost:() => layers.tokens.buyables.costFormulaID(121),
                        canAfford(){
                                if (!player.tokens.tokens2Unl.includes(121)) return player.cells.points.gte("1e30400")
                                return player.tokens.tokens2.points.gte(tmp.tokens.buyables[121].cost) && !player.tokens.buyablesBoughtThisTick.includes(121)
                        },
                        buy(){
                                if (!this.canAfford()) return
                                if (!player.tokens.tokens2Unl.includes(121)){
                                        player.tokens.tokens2Unl.push(121)
                                        return
                                }
                                let data = player.tokens
                                data.buyables[121] = data.buyables[121].plus(1)
                                if (!player.ch.everUpgrade33) data.tokens2.points = data.tokens2.points.sub(tmp.tokens.buyables[121].cost)
                                if (!player.ch.everUpgrade33) player.tokens.buyablesBoughtThisTick.push(121)
                        },
                        coefficient(){
                                if (hasUpgrade("ch", 42))       return player.nu.best.div(1000)
                                if (hasUpgrade("ch", 33))       return new Decimal(.012)
                                if (hasMilestone("an", 29))     return new Decimal(.011)
                                                                return new Decimal(.007)
                        },
                        base(){
                                let r = tmp.tokens.buyables.getRow12Total
                                let c = tmp.tokens.buyables.getCol1Total

                                if (hasMilestone("ch", 12)) return c.pow(.7).times(tmp.tokens.buyables[121].coefficient)
                                if (hasMilestone("or", 7)) return c.pow(.7).times(4)

                                return c.plus(100).div(r.plus(50)).times(c.pow(.6)).times(2)
                        },
                        initialEffect(){
                                if (hasUpgrade("or", 103)) {
                                        return tmp.tokens.buyables[121].base.times(player.tokens.best_buyables[121])
                                }
                                return tmp.tokens.buyables[121].base.times(player.tokens.buyables[121])
                        },
                        effect(){
                                if (hasUpgrade("or", 103)) {
                                        return tmp.tokens.buyables[121].base.times(player.tokens.best_buyables[121]).max(player.tokens.bestTop)
                                }
                                if (hasUpgrade("t", 145)) {
                                        return tmp.tokens.buyables[121].base.times(player.tokens.buyables[121]).max(player.tokens.bestTop)
                                }
                                return tmp.tokens.buyables[121].base.times(player.tokens.buyables[121])
                        },
                        unlocked(){
                                return hasUpgrade("t", 144)
                        },
                        display(){
                                if (!player.tokens.tokens2Unl.includes(121)) return "<br>You need 1e30400 Cells to unlock this buyable"

                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.tokens.buyables[121]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: +"
                                        if (hasMilestone("ch", 12)) eff1 = eff1.replace("+", "*")
                                        let eff2 = format(tmp.tokens.buyables[121].effect, 4) + " to Token tetrational divider</b><br>"
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("tokens", 121)) + " Token II</b><br>"
                                        if (player.ch.everUpgrade33) cost = cost.replace("Cost", "Requires")
                                        
                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "2C<sup>.6</sup>(100+C)/(50+R)*x<br>" 
                                if (hasMilestone("or", 7)) eformula = "4C<sup>.7</sup>*x<br>"
                                eformula += format(tmp.tokens.buyables[121].base, 4) + "*x" 
                                if (hasMilestone("ch", 12)) eformula = eformula.replace("4", format(tmp.tokens.buyables[121].coefficient, 3))
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = tmp.tokens.buyables.costFormulaText2
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                if (!hasUpgrade("t", 145)) return br + end

                                let bestDisplay = "Currently: " + format(tmp.tokens.buyables[121].initialEffect) 
                                bestDisplay += "/" + format(player.tokens.bestTop)

                                return br + end + br + bestDisplay
                        },
                },
                122: {
                        title: "BOTTOM QUARK",
                        cost:() => layers.tokens.buyables.costFormulaID(122),
                        canAfford(){
                                if (!player.tokens.tokens2Unl.includes(122)) return player.cells.points.gte("1e30942")
                                return player.tokens.tokens2.points.gte(tmp.tokens.buyables[122].cost) && !player.tokens.buyablesBoughtThisTick.includes(122)
                        },
                        buy(){
                                if (!this.canAfford()) return
                                if (!player.tokens.tokens2Unl.includes(122)){
                                        player.tokens.tokens2Unl.push(122)
                                        return
                                }
                                let data = player.tokens
                                data.buyables[122] = data.buyables[122].plus(1)
                                if (!player.ch.everUpgrade33) data.tokens2.points = data.tokens2.points.sub(tmp.tokens.buyables[122].cost)
                                if (!player.ch.everUpgrade33) player.tokens.buyablesBoughtThisTick.push(122)
                        },
                        base(){
                                let r = tmp.tokens.buyables.getRow12Total
                                let c = tmp.tokens.buyables.getCol2Total

                                let add = decimalZero
                                if (hasUpgrade("sp", 35)) add = add.plus(player.an.grid[202].extras.pow(.1))

                                if (player.an.achActive[34] || hasMilestone("ch", 22)) {
                                        return c.max(1).pow(Math.max(tmp.an.clickables.rowThreeOff, 1))
                                }
                                if (hasUpgrade("ch", 42)) return c.max(1)
                                if (hasUpgrade("or", 42)) return c.div(1000).plus(1)
                                if (hasMilestone("or", 8)) return c.plus(6)

                                return c.times(30).plus(100).div(r.plus(20))
                        },
                        initialEffect(){
                                if (hasUpgrade("or", 103)) {
                                        return tmp.tokens.buyables[122].base.pow(player.tokens.best_buyables[122])
                                }
                                return tmp.tokens.buyables[122].base.pow(player.tokens.buyables[122])
                        },
                        effect(){
                                if (hasUpgrade("or", 103)) {
                                        return tmp.tokens.buyables[122].base.pow(player.tokens.best_buyables[122]).max(player.tokens.bestBottom)
                                }
                                if (hasUpgrade("cells", 65)) {
                                        return tmp.tokens.buyables[122].base.pow(player.tokens.buyables[122]).max(player.tokens.bestBottom)
                                }
                                return tmp.tokens.buyables[122].base.pow(player.tokens.buyables[122])
                        },
                        unlocked(){
                                return hasUpgrade("t", 144)
                        },
                        display(){
                                if (!player.tokens.tokens2Unl.includes(122)) return "<br>You need 1e30942 Cells to unlock this buyable"
                                
                                if (!player.shiftAlias) {
                                        let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.tokens.buyables[122]) + "</b><br>"
                                        let eff1 = "<b><h2>Effect</h2>: *"
                                        let eff2 = format(tmp.tokens.buyables[122].effect, 4) + " to Tissue gain</b><br>"
                                        if (hasUpgrade("or", 43)) eff2 = eff2.replace("Tissue", "Energy and Air")
                                        let cost = "<b><h2>Cost</h2>: " + formatWhole(getBuyableCost("tokens", 122)) + " Token II</b><br>"
                                        if (player.ch.everUpgrade33) cost = cost.replace("Cost", "Requires")

                                        return br + lvl + eff1 + eff2 + cost + "Shift to see details"
                                }

                                let eformula = "(100+30C)/(20+R)^x<br>" 
                                if (hasMilestone("or", 8)) eformula = "(6+C)<sup>x</sup><br>"
                                if (hasUpgrade("or", 42)) eformula = "(1+C/1000)<sup>x</sup><br>"
                                if (hasUpgrade("ch", 42)) eformula = "C<sup>x</sup><br>"
                                eformula += format(tmp.tokens.buyables[122].base, 4) + "<sup>x</sup>" 
                                
                                let allEff = "<b><h2>Effect formula</h2>:<br>" + eformula + "</b><br>"

                                let cost1 = "<b><h2>Cost formula</h2>:<br>"
                                let cost2 = tmp.tokens.buyables.costFormulaText2
                                let cost3 = "</b><br>"
                                let allCost = cost1 + cost2 + cost3

                                let end = allEff + allCost
                                if (!hasUpgrade("cells", 65)) return br + end

                                let bestDisplay = "Currently: " + format(tmp.tokens.buyables[122].initialEffect) 
                                bestDisplay += "/" + format(player.tokens.bestBottom)

                                return br + end + br + bestDisplay
                        },
                },
                maxTokenIIBulk(){
                        let ret = 1
                        if (hasMilestone("ch", 28)) ret *= 5
                        if (player.sp.unlocked) ret *= 5
                        return ret
                },
                191: {
                        title: "Token II via Token",
                        cost(){
                                let add = hasUpgrade("or", 153) ? 0 : (player.extremeMode ? 25 : 21)
                                if (hasUpgrade("sci", 571) && add > 0) add = 24
                                return player.tokens.buyables[191].plus(add).pow(2).sub(.0001)
                        },
                        canAfford:() => player.tokens.total.gte(tmp.tokens.buyables[191].cost),
                        maxAfford(){
                                let add = hasUpgrade("or", 153) ? 0 : (player.extremeMode ? 25 : 21)
                                if (hasUpgrade("sci", 571) && add > 0) add = 24
                                return player.tokens.total.plus(.0001).sqrt().sub(add).ceil()
                        },
                        buy(){
                                if (!this.canAfford()) return
                                let ma = tmp.tokens.buyables[191].maxAfford
                                ma = ma.sub(player.tokens.buyables[191]).max(0).min(tmp.tokens.buyables.maxTokenIIBulk)
                                let data = player.tokens
                                data.buyables[191] = data.buyables[191].plus(ma)
                                data.tokens2.points = data.tokens2.points.plus(ma)
                                data.tokens2.total = data.tokens2.total.plus(ma)
                        },
                        display(){
                                let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.tokens.buyables[191]) + "</b><br>"
                                let cost = "<b><h2>Requires</h2>:<br>" + formatWhole(getBuyableCost("tokens", 191)) + " Tokens</b><br>"
                                let eformula = "(21+x)<sup>2</sup>"
                                if (player.extremeMode) eformula = eformula.replace("21", "25")
                                if (hasUpgrade("sci", 571)) eformula = eformula.replace("25", "24")
                                if (hasUpgrade("or", 153)) eformula = "x<sup>2</sup>"
                                
                                let allEff = "<b><h2>Cost formula</h2>:<br>" + eformula + "</b><br>"

                                let start = lvl + cost
                                return br + start + allEff
                        },
                },
                192: {
                        title: "Token II via Stem Cell",
                        costData(){
                                let div = hasUpgrade("or", 313) ? 5 : (1+hasUpgrade("t", 111))
                                let add = hasUpgrade("or", 313) ? 50 : (player.extremeMode ? 36 : 33)
                                let exp = hasUpgrade("ch", 21) ? .4 : .5
                                if (hasUpgrade("or", 343)) {
                                        div = 10
                                        add = 75
                                }
                                if (hasMilestone("ch", 3)) {
                                        div = 20
                                        add = 103
                                }
                                if (hasUpgrade("ch", 21)) {
                                        div = 5
                                        add = 330
                                }
                                if (hasUpgrade("an", 42)) {
                                        div = 10
                                        add = 480
                                }
                                if (hasUpgrade("ch", 45)) {
                                        div = 20
                                        add = 800
                                }
                                if (hasMilestone("an", 40)) {
                                        div = 2
                                        add = 9640
                                        exp = .3
                                }
                                if (hasMilestone("ch", 32)) add = 9635
                                return [add, div, exp]
                        },
                        maxAfford(){
                                let costData = tmp.tokens.buyables[192].costData 
                                let add = costData[0]
                                let div = costData[1]
                                let exp = costData[2]
                                let ret = player.cells.stem_cells.points.max(10).log10().max(10).log10().root(exp).sub(add)
                                return ret.times(div).ceil().max(0)
                        },
                        cost(){
                                let costData = tmp.tokens.buyables[192].costData 
                                return player.tokens.buyables[192].div(costData[1]).plus(costData[0]).pow(costData[2]).pow10().pow10()
                        },
                        canAfford:() => player.cells.stem_cells.points.gte(tmp.tokens.buyables[192].cost),
                        buy(){
                                if (!this.canAfford()) return
                                let ma = tmp.tokens.buyables[192].maxAfford
                                ma = ma.sub(player.tokens.buyables[192]).max(0).min(tmp.tokens.buyables.maxTokenIIBulk)
                                let data = player.tokens
                                data.buyables[192] = data.buyables[192].plus(ma)
                                data.tokens2.points = data.tokens2.points.plus(ma)
                                data.tokens2.total = data.tokens2.total.plus(ma)
                        },
                        display(){
                                let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.tokens.buyables[192]) + "</b><br>"
                                let cost = "<b><h2>Requires</h2>:<br>" + format(getBuyableCost("tokens", 192), 3) + " Stem Cells</b><br>"
                                let eformula = "10^10^((ADD+x/DIV)<sup>EXP</sup>)"
                                let costData = tmp.tokens.buyables[192].costData 
                                eformula = eformula.replace("ADD", formatWhole(costData[0]))
                                eformula = eformula.replace("DIV", formatWhole(costData[1]))
                                eformula = eformula.replace("EXP", format(costData[2], 1))
                                eformula = eformula.replace("x/1)", "x)")
                                
                                let allEff = "<b><h2>Cost formula</h2>:<br>" + eformula + "</b><br>"

                                let start = lvl + cost
                                return br + start + allEff
                        },
                },
                193: {
                        title: "Token II via Cell",
                        cost(){
                                let add = tmp.tokens.buyables[193].add
                                let div = tmp.tokens.buyables[193].div
                                return player.tokens.buyables[193].div(div).plus(add).pow10().pow10()
                        },
                        add(){
                                let add = hasMilestone("or", 19) ? 5 : 4
                                if (hasMilestone("or", 24)) add = 7
                                if (hasUpgrade("or", 44)) add = 9
                                if (hasUpgrade("ch", 31)) add = 12
                                if (hasMilestone("an", 41)) add = 15
                                return add
                        },
                        div(){
                                if (hasMilestone("nu", 19))     return new Decimal(4444.4)
                                if (hasMilestone("an", 41))     return new Decimal(4300)
                                if (hasUpgrade("ch", 31))       return new Decimal(2000)
                                if (hasUpgrade("or", 44))       return new Decimal(500)
                                if (hasMilestone("or", 24))     return new Decimal(150)
                                if (hasMilestone("or", 19))     return new Decimal(40)
                                return new Decimal(hasUpgrade("cells", 52) ? 20 : 10)
                        },
                        maxAfford(){
                                let add = tmp.tokens.buyables[193].add
                                let div = tmp.tokens.buyables[193].div
                                return player.cells.points.max(10).log10().max(10).log10().sub(add).times(div).ceil().max(0)
                        },
                        canAfford:() => player.cells.points.gte(tmp.tokens.buyables[193].cost),
                        buy(){
                                if (!this.canAfford()) return
                                let ma = tmp.tokens.buyables[193].maxAfford
                                ma = ma.sub(player.tokens.buyables[193]).max(0).min(tmp.tokens.buyables.maxTokenIIBulk)
                                let data = player.tokens
                                data.buyables[193] = data.buyables[193].plus(ma)
                                data.tokens2.points = data.tokens2.points.plus(ma)
                                data.tokens2.total = data.tokens2.total.plus(ma)
                        },
                        unlocked(){
                                return hasMilestone("t", 17)
                        },
                        display(){
                                let lvl = "<b><h2>Levels</h2>: " + formatWhole(player.tokens.buyables[193]) + "</b><br>"
                                let cost = "<b><h2>Requires</h2>:<br>" + format(getBuyableCost("tokens", 193), 3) + " Cells</b><br>"
                                let eformula = "10^10^(ADD+x/" + formatWhole(tmp.tokens.buyables[193].div) + ")"
                                eformula = eformula.replace("ADD", formatWhole(tmp.tokens.buyables[193].add))
                                eformula = eformula.replace("444", "444.4")
                                
                                let allEff = "<b><h2>Cost formula</h2>:<br>" + eformula + "</b><br>"
                                
                                return br + lvl + cost + allEff
                        },
                },
        },
        clickables: {
                rows: 5,
                cols: 4,
                11: {
                        title: "Sell Token II buyables", 
                        display(){
                                return "You have a total of " + format(player.tokens.tokens2.total) + " Token II's"
                        },
                        unlocked(){
                                return true
                        },
                        canClick(){
                                return true
                        },
                        onClick(){
                                let data = player.tokens
                                data.tokens2.points = data.tokens2.total
                                data.lastRespecDisplayFormula2ID = Math.max(data.lastRespecDisplayFormula2ID, tmp.tokens.buyables.costFormulaText2ID)

                                if (player.ch.everUpgrade33) return 
                                ids = [101, 102, 111, 112, 121, 122, 131, 132]
                                // add more when applicable
                                let base = decimalZero
                                if (hasMilestone("an", 33)) base = new Decimal(100)
                                for (i in ids){
                                        data.buyables[ids[i]] = base
                                }
                        },
                },
        },
        milestones: {
                1: {
                        requirementDescription(){
                                return "2 total tokens"
                        },
                        done(){
                                return player.tokens.total.gte(2)
                        },
                        unlocked(){
                                return true
                        },
                        effect(){
                                return player.tokens.total.max(1)
                        },
                        toggles(){
                                if (!player.extremeMode || hasUpgrade("sci", 305)) return []
                                return [["sci", "autobuysci12"]]
                        },
                        effectDescription(){
                                let a = "Reward: Raise Radio Wave effect to the total number of tokens.<br>"
                                if (player.extremeMode) {
                                        a = "Reward: Raise Radio Wave effect to the total number of tokens and autobuy 13.6 eV.<br>"
                                }
                                let b = "Currently: " + format(tmp.tokens.milestones[1].effect)
                                if (player.shiftAlias) {
                                        let formula = "Formula: [total tokens]"
                                        return a + formula
                                }
                                return a + b
                        },
                }, // hasMilestone("tokens", 1)
                2: {
                        requirementDescription(){
                                return "3 total tokens"
                        },
                        done(){
                                return player.tokens.total.gte(3)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 1)
                        },
                        effect(){
                                return player.tokens.total.max(1)
                        },
                        toggles(){
                                if (!player.extremeMode || hasUpgrade("sci", 305)) return []
                                return [["sci", "autobuysci11"]]
                        },
                        effectDescription(){
                                let a = "Reward: Raise Microwaves effect to the total number of tokens and keep Hydrogen XI and XII.<br>"
                                if (player.extremeMode) {
                                        a = "Reward: Raise Microwaves effect to the total number of tokens, keep Hydrogen XI and XII, and autobuy α ~ 1/147.<br>"
                                }
                                let b = "Currently: " + format(tmp.tokens.milestones[2].effect)
                                if (player.shiftAlias) {
                                        let formula = "Formula: [total tokens]"
                                        return a + formula
                                }
                                return a + b
                        },
                }, // hasMilestone("tokens", 2)
                3: {
                        requirementDescription(){
                                return "4 total tokens"
                        },
                        done(){
                                return player.tokens.total.gte(4)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 2)
                        },
                        effect(){
                                return player.tokens.total.max(1)
                        },
                        toggles(){
                                if (!player.extremeMode || hasUpgrade("sci", 305)) return []
                                return [["sci", "autobuysci13"]]
                        },
                        effectDescription(){
                                let a = "Reward: Multiply and then raise UHF Gamma Rays base to the total number of tokens and the autobuyer bulks 10x."
                                if (!player.extremeMode) a += " Multiply Oxygen and Carbon gain by the number of achievements.<br>"  
                                else a += " Multiply Oxygen and Carbon gain by the number of achievements and autobuy 1/n^2.<br>"   
                                let b = "Currently: " + format(tmp.tokens.milestones[3].effect)
                                if (player.shiftAlias) {
                                        let formula = "Formula: [total tokens]"
                                        return a + formula
                                }
                                return a + b
                        },
                }, // hasMilestone("tokens", 3)
                4: {
                        requirementDescription(){
                                return "5 total tokens"
                        },
                        done(){
                                return player.tokens.total.gte(5)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 3)
                        },
                        toggles(){
                                if (!player.extremeMode || hasUpgrade("sci", 305)) return []
                                return [["sci", "autobuysci22"]]
                        },
                        effectDescription(){
                                let b = "Reward: Radio Waves and Constant are based on best amount, cube X-Ray effect,"
                                if (player.extremeMode) return b + " add .05 to color gain exponent and autobuy 1 Minute."
                                return b + " and add .05 to color gain exponent" 
                        },
                }, // hasMilestone("tokens", 4)
                5: {
                        requirementDescription(){
                                return "6 total tokens"
                        },
                        done(){
                                return player.tokens.total.gte(6)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 4)
                        },
                        toggles(){
                                if (!player.extremeMode || hasUpgrade("sci", 305)) return []
                                return [["sci", "autobuysci21"]]
                        },
                        effectDescription(){
                                let b = "Reward: Microwaves and Logarithimic are based on best amount, add .01 to Exponential and Semi-exponential,"
                                if (player.extremeMode) return b + " per milestone keep three Hydrogen upgrades, and autobuy 60 seconds."
                                return b + " and per milestone keep three Hydrogen upgrades."
                        },
                }, // hasMilestone("tokens", 5)
                6: {
                        requirementDescription(){
                                return "7 total tokens"
                        },
                        done(){
                                return player.tokens.total.gte(7)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 5)
                        },
                        effect(){
                                return player.tokens.total.max(1)
                        },
                        toggles(){
                                if (!player.extremeMode || hasUpgrade("sci", 305)) return []
                                return [["sci", "autobuysci23"]]
                        },
                        effectDescription(){
                                let a = "Reward: Infrared and Linear are based on best amount,"
                                
                                if (!player.extremeMode) a += " and raise Gamma Ray effect to the number of tokens.<br>" 
                                else a += " raise Gamma Ray effect to the number of tokens, and autobuy 6 D" + "e" + "caseconds.<br>"

                                let b = "Currently: ^" + format(tmp.tokens.milestones[6].effect)
                                if (player.shiftAlias) {
                                        let formula = "Formula: [total tokens]"
                                        return a + formula
                                }
                                return a + b
                        },
                }, // hasMilestone("tokens", 6)
                7: {
                        requirementDescription(){
                                return "8 total tokens"
                        },
                        done(){
                                return player.tokens.total.gte(8)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 6)
                        },
                        effect(){
                                return player.mini.a_points.points.plus(1).ln().max(1)
                        },
                        toggles(){
                                if (!player.extremeMode || hasUpgrade("sci", 402)) return []
                                return [["sci", "autobuysci101"]]
                        },
                        effectDescription(){
                                let a = "Reward: Visible and Quadratic are based on best amount, "
                                
                                if (!player.extremeMode) a += " and ln(A Points) multiplies Radio Waves' base.<br>"
                                else a += "ln(A Points) multiplies Radio Waves' base, keep Hydrogen Science upgrades, and autobuy 21%.<br>"
                                
                                let b = "Currently: *" + format(tmp.tokens.milestones[7].effect)
                                if (player.shiftAlias) {
                                        let formula = "Formula: max(1,ln(A Points+1))"
                                        return a + formula
                                }
                                return a + b
                        },
                }, // hasMilestone("tokens", 7)
                8: {
                        requirementDescription(){
                                return "9 total tokens"
                        },
                        done(){
                                return player.tokens.total.gte(9)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 7)
                        },
                        toggles(){
                                if (!player.extremeMode || hasUpgrade("sci", 402)) return []
                                return [["sci", "autobuysci102"]]
                        },
                        effectDescription(){
                                let a = "Reward: Near-ultraviolet and Cubic are based on best amount, "
                                if (!player.extremeMode) return a + "and A Points<sup>.1</sup> multipies B Point gain."
                                return a + "A Points<sup>.1</sup> multipies B Point gain, and autobuy Atomic."
                        },
                }, // hasMilestone("tokens", 8)
                9: {
                        requirementDescription(){
                                return "10 total tokens"
                        },
                        done(){
                                return player.tokens.total.gte(10)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 8)
                        },
                        toggles(){
                                if (!player.extremeMode || hasUpgrade("sci", 402)) return []
                                return [["sci", "autobuysci103"]]
                        },
                        effectDescription(){
                                let a = "Reward: Ultraviolet and Polynomial are based on best amount, "
                                if (!player.extremeMode) return a + "and B Points<sup>.1</sup> multiplies A Point gain."
                                return a + "B Points<sup>.1</sup> multiplies A Point gain, keep A and B point milestones, and autobuy Cyclic."
                        },
                }, // hasMilestone("tokens", 9)
                10: {
                        requirementDescription(){
                                return "11 total tokens"
                        },
                        done(){
                                return player.tokens.total.gte(11)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 9)
                        },
                        effect(){
                                return player.mini.b_points.points.plus(1).ln().max(1)
                        },
                        toggles(){
                                if (!player.extremeMode || hasUpgrade("sci", 402)) return []
                                return [["sci", "autobuysci111"]]
                        },
                        effectDescription(){
                                let a = "Reward: X-Rays and Semi-exponential are based on best amount, square Oxygen V exponent, "
                                if (!player.extremeMode) a += "and ln(B Points) multiplies Microwaves' base.<br>"     
                                else a += "ln(B Points) multiplies Microwaves' base and autobuy Artificial.<br>"
                                                
                                let b = "Currently: *" + format(tmp.tokens.milestones[10].effect)
                                if (player.shiftAlias) {
                                        let formula = "Formula: max(1,ln(B Points+1))"
                                        return a + formula
                                }
                                return a + b
                        },
                }, // hasMilestone("tokens", 10)
                11: {
                        requirementDescription(){
                                return "12 total tokens"
                        },
                        done(){
                                return player.tokens.total.gte(12)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 10)
                        },
                        toggles(){
                                if (!player.extremeMode || hasUpgrade("sci", 402)) return []
                                return [["sci", "autobuysci112"]]
                        },
                        effectDescription(){
                                let a = "Reward: Gamma Rays and Exponential are based on best amount, square Ultraviolet, "
                                if (!player.extremeMode) return a + "and keep Oxygen and Carbon upgrades upon token reset.<br>"
                                return a + "keep Oxygen, Carbon, and Oxygen Science upgrades upon token reset, and autobuy Natural"
                        },
                }, // hasMilestone("tokens", 11)
                12: {
                        requirementDescription(){
                                return "13 total tokens"
                        },
                        done(){
                                return player.tokens.total.gte(13)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 11)
                        },
                        toggles(){
                                if (!player.extremeMode || hasUpgrade("sci", 402)) return []
                                return [["sci", "autobuysci113"]]
                        },
                        effectDescription(){
                                let a = "Reward: UHF Gamma Rays and Double-exponential are based on best amount"
                                if (!player.extremeMode) return a + " and unlock an Oxygen upgrade."
                                return a + ", unlock an Oxygen upgrade, and autobuy Chemistry."
                        },
                }, // hasMilestone("tokens", 12)
                13: {
                        requirementDescription(){
                                return "14 total tokens"
                        },
                        done(){
                                return player.tokens.total.gte(14)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 12)
                        },
                        effectDescription(){
                                return "Reward: Square Oxygen IV, best token buyables are synchronized, and you can bulk 5x more A and B buyables.<br>" 
                        },
                }, // hasMilestone("tokens", 13)
                14: {
                        requirementDescription(){
                                return "16 total tokens"
                        },
                        done(){
                                return player.tokens.total.gte(16)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 13)
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Tokens multiply coin gain and keep Hydrogen Science content"
                                return "Reward: Tokens multiply coin gain.<br>" 
                        },
                }, // hasMilestone("tokens", 14)
                15: {
                        requirementDescription(){
                                return "18 total tokens"
                        },
                        done(){
                                return player.tokens.total.gte(18)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 14)
                        },
                        effectDescription(){
                                return "Reward: Each milestone multiplies Near-ultraviolet base by 1.2.<br>" 
                        },
                }, // hasMilestone("tokens", 15)
                16: {
                        requirementDescription(){
                                return "19 total tokens"
                        },
                        done(){
                                return player.tokens.total.gte(19)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 15)
                        },
                        effect(){
                                let a = player.tokens.total.max(1)
                                let b = a.ln().max(1).pow(a.sub(17).max(0))
                                return b.min(1000)
                        },
                        effectDescription(){
                                let a = "Reward: ln(tokens)^[tokens-17] multiplies coin gain (capped at 1000).<br>"                     
                                let b = "Currently: *" + format(tmp.tokens.milestones[16].effect)
                                if (player.shiftAlias) {
                                        let formula = "Formula: ln(tokens)^[tokens-17]"
                                        return a + formula
                                }
                                return a + b
                        },
                }, // hasMilestone("tokens", 16)
                17: {
                        requirementDescription(){
                                return "22 total tokens"
                        },
                        done(){
                                return player.tokens.total.gte(22)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 16)
                        },
                        effectDescription(){
                                return "Reward: Cube base Oxygen gain"
                        },
                }, // hasMilestone("tokens", 17)
                18: {
                        requirementDescription(){
                                return "24 total tokens"
                        },
                        done(){
                                return player.tokens.total.gte(24)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 17)
                        },
                        effectDescription(){
                                return "Reward: Keep upgrades 42, 61, and 62 and add .01 to Cubic base"
                        },
                }, // hasMilestone("tokens", 18)
                19: {
                        requirementDescription(){
                                return "27 total tokens"
                        },
                        done(){
                                return player.tokens.total.gte(27)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 18)
                        },
                        effectDescription(){
                                return "Reward: Raise Hydrogen XVI to the 1.5"
                        },
                }, // hasMilestone("tokens", 19)
                20: {
                        requirementDescription(){
                                return "31 total tokens"
                        },
                        done(){
                                return player.tokens.total.gte(31)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 19)
                        },
                        effectDescription(){
                                return "Reward: Keep the first six rows of upgrades and add .01 to Cubic base"
                        },
                }, // hasMilestone("tokens", 20)
                21: {
                        requirementDescription(){
                                return "35 total tokens"
                        },
                        done(){
                                return player.tokens.total.gte(35)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 20)
                        },
                        effectDescription(){
                                return "Reward: Add .03 to Semi-exponential base"
                        },
                }, // hasMilestone("tokens", 21)
                22: {
                        requirementDescription(){
                                return "39 total tokens"
                        },
                        done(){
                                return player.tokens.total.gte(39)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 21)
                        },
                        effectDescription(){
                                if (player.extremeMode) return "Reward: Add .03 to Exponential base and unlock an Oxygen Science upgrade"
                                return "Reward: Add .03 to Exponential base"
                        },
                }, // hasMilestone("tokens", 22)
                23: {
                        requirementDescription(){
                                return "43 total tokens"
                        },
                        done(){
                                return player.tokens.total.gte(43)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 22)
                        },
                        effect(){
                                let c = new Decimal(4) // red c red d
                                // i want df/dt = X and you can upgrade X with stuff and there is prestige
                                // for d simialr concept but there is a wacka mole game that gives buffs
                                c = c.plus(tmp.mini.buyables[81].effect)
                                c = c.plus(tmp.mini.buyables[91].effect)
                                c = c.plus(tmp.mini.buyables[111].effect)

                                return c
                        },
                        effectDescription(){
                                let a = "Reward: log10(Carbon)^<bdi style='color:#CC0033'>C</bdi> multiplies Oxygen and unlock a minigame for increasing <bdi style='color:#CC0033'>C</bdi>"                                                                                    
                                let b = ""

                                if (player.shiftAlias) {
                                        b = "<br>Currently: " + format(player.c.points.max(10).log10()) + "^" + format(tmp.tokens.milestones[23].effect)
                                        b += " because <bdi style='color:#CC0033'>C</bdi> = "+ format(tmp.tokens.milestones[23].effect)
                                }
                                
                                return a + b
                        },
                }, // hasMilestone("tokens", 23)
                24: {
                        requirementDescription(){
                                return "51 total tokens"
                        },
                        done(){
                                return player.tokens.total.gte(51)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 23)
                        },
                        effectDescription(){
                                return "Reward: Unlock another possible character and C Point gain 4's ln becomes log2" 
                        },
                }, // hasMilestone("tokens", 24)
                25: {
                        requirementDescription(){
                                return "53 total tokens"
                        },
                        done(){
                                return player.tokens.total.gte(53)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 24)
                        },
                        effectDescription(){
                                let a = "Reward: Reduce Corn interval to 3" 
                                if (player.extremeMode) a += " and keep Oxygen Science content on reset"
                                return a 
                        },
                }, // hasMilestone("tokens", 25)
                26: {
                        requirementDescription(){
                                return "55 total tokens"
                        },
                        done(){
                                return player.tokens.total.gte(55)
                        },
                        unlocked(){
                                return hasMilestone("tokens", 25)
                        },
                        effectDescription(){
                                return "Reward: Reduce Corn interval to 1 and you can gamble after 1 second"  
                        },
                }, // hasMilestone("tokens", 26)
                27: {
                        requirementDescription(){
                                return "78 total tokens"
                        },
                        done(){
                                return player.tokens.total.gte(78) && player.extremeMode
                        },
                        unlocked(){
                                return player.extremeMode && hasMilestone("tokens", 26)
                        },
                        effectDescription(){
                                return "Reward: Remove C Point gain 8's base cost"  
                        },
                }, // hasMilestone("tokens", 27)
                28: {
                        requirementDescription(){
                                return "79 total tokens"
                        },
                        done(){
                                return player.tokens.total.gte(79) && player.extremeMode
                        },
                        unlocked(){
                                return hasMilestone("tokens", 27)
                        },
                        effectDescription(){
                                return "Reward: Remove <bdi style='color:#CC0033'>C</bdi> Increase 3's base cost"  
                        },
                }, // hasMilestone("tokens", 28)
        },
        upgrades: {
                rows: 10,
                cols: 5,
                11: {
                        title(){
                                if (player.shiftAlias) return "<bdi style='color: #FF00FF'>Upgrade 11</bdi>"
                                return "<bdi style='color: #FF0000'>Start here!</bdi>"
                        },
                        description(){
                                return "Add three effective upgrades for Oxygen V"
                        },
                        canAfford(){
                                if (player.tokens.coins.points.lt(tmp.tokens.upgrades[11].cost)) return false
                                return true
                        },
                        cost:() => new Decimal(3),
                        currencyLocation:() => player.tokens.coins,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Coins",
                        unlocked(){
                                if (hasUpgrade("t", 61) || hasUpgrade("or", 11)) return false
                                return true
                        }, // hasUpgrade("tokens", 11)
                },
                21: {
                        title(){
                                if (player.shiftAlias) return "<bdi style='color: #FF00FF'>Upgrade 21</bdi>"
                                return "<bdi style='color: #FF0000'>You get one</bdi>"
                        },
                        description(){
                                if (player.shiftAlias) {
                                        let a = "<bdi style='color: #863813'>Locks Upgrade 22</bdi>"
                                        let b = "<br>Current requirement:<br>!22"
                                        if (tmp.tokens.upgrades[42].unlocked) b += "||42"

                                        return a + b
                                }
                                return "Cube base Oxygen<br>gain"
                        },
                        canAfford(){
                                if (player.tokens.coins.points.lt(tmp.tokens.upgrades[21].cost)) return false
                                return player.p.unlocked || hasMilestone("n", 5) || !hasUpgrade("tokens", 22) || hasUpgrade("tokens", 42)
                        },
                        cost:() => new Decimal(5),
                        currencyLocation:() => player.tokens.coins,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Coins",
                        unlocked(){
                                if (hasUpgrade("t", 61) || hasUpgrade("or", 11)) return false
                                return hasMilestone("n", 5) || hasUpgrade("tokens", 11) || hasMilestone("tokens", 18)
                        }, // hasUpgrade("tokens", 21)
                },
                22: {
                        title(){
                                if (player.shiftAlias) return "<bdi style='color: #FF00FF'>Upgrade 22</bdi>"
                                return "<bdi style='color: #FF0000'>on this row.</bdi>"
                        },
                        description(){
                                if (player.shiftAlias) {
                                        let a = "<bdi style='color: #863813'>Locks Upgrade 21</bdi>"
                                        let b = "<br>Current requirement:<br>!21"
                                        if (tmp.tokens.upgrades[42].unlocked) b += "||42"

                                        return a + b
                                }
                                return "Square base Carbon<br>gain"
                        },
                        canAfford(){
                                if (player.tokens.coins.points.lt(tmp.tokens.upgrades[22].cost)) return false
                                return player.p.unlocked || hasMilestone("n", 5) || !hasUpgrade("tokens", 21) || hasUpgrade("tokens", 42)
                        },
                        cost:() => new Decimal(5),
                        currencyLocation:() => player.tokens.coins,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Coins",
                        unlocked(){
                                if (hasUpgrade("t", 61) || hasUpgrade("or", 11)) return false
                                return hasMilestone("n", 5) || hasUpgrade("tokens", 11) || hasMilestone("tokens", 18)
                        }, // hasUpgrade("tokens", 22)
                },
                31: {
                        title(){
                                if (player.shiftAlias) return "<bdi style='color: #FF00FF'>Upgrade 31</bdi>"
                                return "<bdi style='color: #FF0000'>An old silent pond /</bdi>"
                        },
                        description(){
                                if (player.shiftAlias) {
                                        let a = "<bdi style='color: #863813'>Locks Upgrade 32</bdi>"
                                        let b = "<br>Current requirement:<br>!32"
                                        if (tmp.tokens.upgrades[61].unlocked) b += "||61"

                                        return a + b
                                }
                                return "Add .01 to Logarithimic base"
                        },
                        canAfford(){
                                if (player.tokens.coins.points.lt(tmp.tokens.upgrades[31].cost)) return false
                                return player.p.unlocked || hasMilestone("n", 5) || !hasUpgrade("tokens", 32) || hasUpgrade("tokens", 61)
                        },
                        cost:() => new Decimal(30),
                        currencyLocation:() => player.tokens.coins,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Coins",
                        unlocked(){
                                if (hasUpgrade("t", 61) || hasUpgrade("or", 11)) return false
                                return hasMilestone("n", 5) ||  hasMilestone("tokens", 18) || hasUpgrade("o", 23) && (hasUpgrade("tokens", 21) || hasUpgrade("tokens", 22))
                        }, // hasUpgrade("tokens", 31)
                },
                32: {
                        title(){
                                if (player.shiftAlias) return "<bdi style='color: #FF00FF'>Upgrade 32</bdi>"
                                return "<bdi style='color: #FF0000'>A frog jumps into</bdi>"
                        },
                        description(){
                                if (player.shiftAlias) {
                                        let a = "<bdi style='color: #863813'>Locks Upgrade 31</bdi>"
                                        let b = "<br>Current requirement:<br>!31"
                                        if (tmp.tokens.upgrades[61].unlocked) b += "||61"

                                        return a + b
                                }
                                return "Tokens multiply Ultraviolet base"
                        },
                        canAfford(){
                                if (player.tokens.coins.points.lt(tmp.tokens.upgrades[32].cost)) return false
                                return player.p.unlocked || hasMilestone("n", 5) || !hasUpgrade("tokens", 31) || hasUpgrade("tokens", 61)
                        },
                        cost:() => new Decimal(30),
                        currencyLocation:() => player.tokens.coins,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Coins",
                        unlocked(){
                                if (hasUpgrade("t", 61) || hasUpgrade("or", 11)) return false
                                return hasMilestone("n", 5) || hasMilestone("tokens", 18) || hasUpgrade("o", 23) && (hasUpgrade("tokens", 21) || hasUpgrade("tokens", 22))
                        }, // hasUpgrade("tokens", 32)
                },
                33: {
                        title(){
                                if (player.shiftAlias) return "<bdi style='color: #FF00FF'>Upgrade 33</bdi>"
                                return "<bdi style='color: #FF0000'>the pond— /</bdi>"
                        },
                        description(){
                                if (player.shiftAlias) {
                                        let a = "<bdi style='color: #863813'>Locks Upgrade 34</bdi>"
                                        let b = "<br>Current requirement:<br>!34"
                                        if (tmp.tokens.upgrades[61].unlocked) b += "||61"

                                        return a + b
                                }
                                return "Add .01 to Quadratic base"
                        },
                        canAfford(){
                                if (player.tokens.coins.points.lt(tmp.tokens.upgrades[33].cost)) return false
                                return player.p.unlocked || hasMilestone("n", 5) || !hasUpgrade("tokens", 34) || hasUpgrade("tokens", 61)
                        },
                        cost:() => new Decimal(30),
                        currencyLocation:() => player.tokens.coins,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Coins",
                        unlocked(){
                                if (hasUpgrade("t", 61) || hasUpgrade("or", 11)) return false
                                return hasMilestone("n", 5) || hasMilestone("tokens", 18) || hasUpgrade("o", 23) && (hasUpgrade("tokens", 21) || hasUpgrade("tokens", 22))
                        }, // hasUpgrade("tokens", 33)
                },
                34: {
                        title(){
                                if (player.shiftAlias) return "<bdi style='color: #FF00FF'>Upgrade 34</bdi>"
                                return "<bdi style='color: #FF0000'>Splash! Silence</bdi>"
                        },
                        description(){
                                if (player.shiftAlias) {
                                        let a = "<bdi style='color: #863813'>Locks Upgrade 33</bdi>"
                                        let b = "<br>Current requirement:<br>!33"
                                        if (tmp.tokens.upgrades[61].unlocked) b += "||61"

                                        return a + b
                                }
                                return "Add .01 to Linear<br>base"
                        },
                        canAfford(){
                                if (player.tokens.coins.points.lt(tmp.tokens.upgrades[34].cost)) return false
                                return player.p.unlocked || hasMilestone("n", 5) || !hasUpgrade("tokens", 33) || hasUpgrade("tokens", 61)
                        },
                        cost:() => new Decimal(30),
                        currencyLocation:() => player.tokens.coins,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Coins",
                        unlocked(){
                                if (hasUpgrade("t", 61) || hasUpgrade("or", 11)) return false
                                return hasMilestone("n", 5) || hasMilestone("tokens", 18) || hasUpgrade("o", 23) && (hasUpgrade("tokens", 21) || hasUpgrade("tokens", 22))
                        }, // hasUpgrade("tokens", 34)
                },
                41: {
                        title(){
                                if (player.shiftAlias) return "<bdi style='color: #FF00FF'>Upgrade 41</bdi>"
                                return "<bdi style='color: #FF0000'>again.</bdi>"
                        },
                        description(){
                                if (player.shiftAlias) return "<bdi style='color: #863813'></bdi><br>Current requirement:<br>"
                                return "Square X-Rays<br>base"
                        },
                        canAfford(){
                                if (player.tokens.coins.points.lt(tmp.tokens.upgrades[41].cost)) return false
                                return true
                        },
                        cost:() => new Decimal(60),
                        currencyLocation:() => player.tokens.coins,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Coins",
                        unlocked(){
                                if (hasUpgrade("t", 61) || hasUpgrade("or", 11)) return false
                                return hasMilestone("n", 5) || hasMilestone("tokens", 18) || hasUpgrade("tokens", 31) || hasUpgrade("tokens", 32) || hasUpgrade("tokens", 33) || hasUpgrade("tokens", 34)
                        }, // hasUpgrade("tokens", 41)
                },
                42: {
                        title(){
                                if (player.shiftAlias) return "<bdi style='color: #FF00FF'>Upgrade 42</bdi>"
                                return "<bdi style='color: #FF0000'>by Matsuo Bashō</bdi>"
                        },
                        description(){
                                if (player.shiftAlias) return "<bdi style='color: #863813'></bdi><br>Current requirement:<br>"
                                return "Re-unlock upgrade 21 and 22"
                        },
                        canAfford(){
                                if (player.tokens.coins.points.lt(tmp.tokens.upgrades[42].cost)) return false
                                return true
                        },
                        cost:() => new Decimal(60),
                        currencyLocation:() => player.tokens.coins,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Coins",
                        unlocked(){
                                if (hasUpgrade("t", 61) || hasUpgrade("or", 11)) return false
                                return hasMilestone("n", 5) || hasMilestone("tokens", 18) || hasUpgrade("tokens", 31) || hasUpgrade("tokens", 32) || hasUpgrade("tokens", 33) || hasUpgrade("tokens", 34)
                        }, // hasUpgrade("tokens", 42)
                },
                51: {
                        title(){
                                if (player.shiftAlias) return "<bdi style='color: #FF00FF'>Upgrade 51</bdi>"
                                return "<bdi style='color: #FF0000'>Tau</bdi>"
                        },
                        description(){
                                if (player.shiftAlias) {
                                        let a = "<bdi style='color: #863813'>Locks Upgrade 52</bdi>"
                                        let b = "<br>Current requirement:<br>!52"
                                        if (tmp.tokens.upgrades[62].unlocked) b += "||62"

                                        return a + b
                                }
                                return "Oxygen^ .1 multiplies Carbon gain"
                        },
                        canAfford(){
                                if (player.tokens.coins.points.lt(tmp.tokens.upgrades[51].cost)) return false
                                return player.p.unlocked || hasMilestone("n", 5) || !hasUpgrade("tokens", 52) || hasUpgrade("tokens", 62)
                        },
                        cost:() => new Decimal(100),
                        currencyLocation:() => player.tokens.coins,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Coins",
                        unlocked(){
                                if (hasUpgrade("t", 61) || hasUpgrade("or", 11)) return false
                                if (hasMilestone("n", 5) || hasMilestone("tokens", 18)) return true
                                if (!player.tokens.total.gte(18) && !player.n.unlocked) return false
                                return hasUpgrade("tokens", 41) && hasUpgrade("tokens", 42)
                        }, // hasUpgrade("tokens", 51)
                },
                52: {
                        title(){
                                if (player.shiftAlias) return "<bdi style='color: #FF00FF'>Upgrade 52</bdi>"
                                return "<bdi style='color: #FF0000'>Rhenium</bdi>"
                        },
                        description(){
                                if (player.shiftAlias) {
                                        let a = "<bdi style='color: #863813'>Locks Upgrade 51</bdi>"
                                        let b = "<br>Current requirement:<br>!51"
                                        if (tmp.tokens.upgrades[62].unlocked) b += "||62"

                                        return a + b
                                }
                                return "Carbon^ .1 multiplies Oxygen gain"
                        },
                        canAfford(){
                                if (player.tokens.coins.points.lt(tmp.tokens.upgrades[51].cost)) return false
                                return player.p.unlocked || hasMilestone("n", 5) || !hasUpgrade("tokens", 51) || hasUpgrade("tokens", 62)
                        },
                        cost:() => new Decimal(100),
                        currencyLocation:() => player.tokens.coins,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Coins",
                        unlocked(){
                                if (hasUpgrade("t", 61) || hasUpgrade("or", 11)) return false
                                if (hasMilestone("n", 5) || hasMilestone("tokens", 18)) return true
                                if (!player.tokens.total.gte(18) && !player.n.unlocked) return false
                                return hasUpgrade("tokens", 41) && hasUpgrade("tokens", 42)
                        }, // hasUpgrade("tokens", 52)
                },
                61: {
                        title(){
                                if (player.shiftAlias) return "<bdi style='color: #FF00FF'>Upgrade 61</bdi>"
                                return "<bdi style='color: #FF0000'>Electron</bdi>"
                        },
                        description(){
                                if (player.shiftAlias) return "<bdi style='color: #863813'></bdi><br>Current requirement:<br>"
                                if (player.extremeMode) return "Re-unlocks the third row of upgrades and unlock an Oxygen science upgrade"
                                return "Re-unlocks the third row of upgrades"
                        },
                        canAfford(){
                                if (player.tokens.coins.points.lt(tmp.tokens.upgrades[61].cost)) return false
                                return true
                        },
                        cost:() => new Decimal(200),
                        currencyLocation:() => player.tokens.coins,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Coins",
                        unlocked(){
                                if (hasUpgrade("t", 61) || hasUpgrade("or", 11)) return false
                                return hasMilestone("n", 5) || hasMilestone("tokens", 18) || (hasUpgrade("tokens", 51) || hasUpgrade("tokens", 52)) && player.tokens.total.gte(20)
                        }, // hasUpgrade("tokens", 61)
                },
                62: {
                        title(){
                                if (player.shiftAlias) return "<bdi style='color: #FF00FF'>Upgrade 62</bdi>"
                                return "<bdi style='color: #FF0000'>Oxygen</bdi>"
                        },
                        description(){
                                if (player.shiftAlias) return "<bdi style='color: #863813'></bdi><br>Current requirement:<br>"
                                return "Re-unlocks the fifth row of upgrades"
                        },
                        canAfford(){
                                if (player.tokens.coins.points.lt(tmp.tokens.upgrades[62].cost)) return false
                                return true
                        },
                        cost:() => new Decimal(250),
                        currencyLocation:() => player.tokens.coins,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Coins",
                        unlocked(){
                                if (hasUpgrade("t", 61) || hasUpgrade("or", 11)) return false
                                return hasMilestone("n", 5) || hasMilestone("tokens", 18) || (hasUpgrade("tokens", 51) || hasUpgrade("tokens", 52)) && player.tokens.total.gte(20)
                        }, // hasUpgrade("tokens", 62)
                },
                71: {
                        title(){
                                if (player.shiftAlias) return "<bdi style='color: #FF00FF'>Upgrade 71</bdi>"
                                return "<bdi style='color: #FF0000'>Fluorine</bdi>"
                        },
                        description(){
                                if (player.shiftAlias) {
                                        let a = "<bdi style='color: #863813'>Locks upgrades 72 and 73</bdi>"
                                        let b = "<br>Current requirement:<br>!72 && !73"

                                        if (hasUpgrade("h", 73)) {
                                                a = ""
                                                b = "<br>Current requirement:<br>"
                                        }

                                        return a + b
                                }
                                return "Allow for the purchase of the second row of Deuterium upgrades"
                        },
                        canAfford(){
                                if (player.tokens.coins.points.lt(tmp.tokens.upgrades[71].cost)) return false
                                return player.p.unlocked || hasMilestone("n", 5) || hasUpgrade("h", 73) || (!hasUpgrade("tokens", 72) && !hasUpgrade("tokens", 73))
                        },
                        cost:() => new Decimal(3000),
                        currencyLocation:() => player.tokens.coins,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Coins",
                        unlocked(){
                                if (hasUpgrade("t", 61) || hasUpgrade("or", 11)) return false
                                return hasMilestone("n", 5) || hasMilestone("tokens", 18) || (hasUpgrade("tokens", 61) || hasUpgrade("tokens", 62)) && player.tokens.total.gte(22)
                        }, // hasUpgrade("tokens", 71)
                },
                72: {
                        title(){
                                if (player.shiftAlias) return "<bdi style='color: #FF00FF'>Upgrade 72</bdi>"
                                return "<bdi style='color: #FF0000'>Lithium</bdi>"
                        },
                        description(){
                                if (player.shiftAlias) {
                                        let a = "<bdi style='color: #863813'>Locks upgrades 71 and 73</bdi>"
                                        let b = "<br>Current requirement:<br>!71 && !73"

                                        if (hasUpgrade("h", 73)) {
                                                a = ""
                                                b = "<br>Current requirement:<br>"
                                        }

                                        return a + b
                                }
                                return "Allow for the purchase of the second row of Atomic Hydrogen upgrades"
                        },
                        canAfford(){
                                if (player.tokens.coins.points.lt(tmp.tokens.upgrades[72].cost)) return false
                                return player.p.unlocked || hasMilestone("n", 5) || hasUpgrade("h", 73) || (!hasUpgrade("tokens", 71) && !hasUpgrade("tokens", 73))
                        },
                        cost:() => new Decimal(3000),
                        currencyLocation:() => player.tokens.coins,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Coins",
                        unlocked(){
                                if (hasUpgrade("t", 61) || hasUpgrade("or", 11)) return false
                                return hasMilestone("n", 5) || hasMilestone("tokens", 18) || (hasUpgrade("tokens", 61) || hasUpgrade("tokens", 62)) && player.tokens.total.gte(22)
                        }, // hasUpgrade("tokens", 72)
                },
                73: {
                        title(){
                                if (player.shiftAlias) return "<bdi style='color: #FF00FF'>Upgrade 73</bdi>"
                                return "<bdi style='color: #FF0000'>Iron</bdi>"
                        },
                        description(){
                                if (player.shiftAlias) {
                                        let a = "<bdi style='color: #863813'>Locks upgrades 71 and 72</bdi>"
                                        let b = "<br>Current requirement:<br>!71 && !72"

                                        if (hasUpgrade("h", 73)) {
                                                a = ""
                                                b = "<br>Current requirement:<br>"
                                        }

                                        return a + b
                                }
                                return "You have one fewer token for token prestige requirements"
                        },
                        canAfford(){
                                if (player.tokens.coins.points.lt(tmp.tokens.upgrades[73].cost)) return false
                                return player.p.unlocked || hasMilestone("n", 5) || hasUpgrade("h", 73) || (!hasUpgrade("tokens", 71) && !hasUpgrade("tokens", 72))
                        },
                        cost:() => new Decimal(2000),
                        currencyLocation:() => player.tokens.coins,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Coins",
                        unlocked(){
                                if (hasUpgrade("t", 61) || hasUpgrade("or", 11)) return false
                                return hasMilestone("n", 5) || hasMilestone("tokens", 18) || (hasUpgrade("tokens", 61) || hasUpgrade("tokens", 62)) && player.tokens.total.gte(22)
                        }, // hasUpgrade("tokens", 73)
                },
                81: {
                        title(){
                                if (player.shiftAlias) return "<bdi style='color: #FF00FF'>Upgrade 81</bdi>"
                                return "<bdi style='color: #FF0000'>The Easter</bdi>"
                        },
                        description(){
                                if (player.shiftAlias) {
                                        let a = "<bdi style='color: #863813'>Locks upgrades 82</bdi>"
                                        let b = "<br>Current requirement:<br>!82"
                                        if (hasUpgrade("mini", 31)) {
                                                a = "<bdi style='color: #863813'></bdi>"
                                                b = "<br>Current requirement:<br>"
                                        }

                                        return a + b
                                }
                                return "Gain 81x coins and Oxygen"
                        },
                        canAfford(){
                                if (player.tokens.coins.points.lt(tmp.tokens.upgrades[81].cost)) return false
                                return player.p.unlocked || hasMilestone("n", 5) || hasUpgrade("mini", 31) || (!hasUpgrade("tokens", 82))
                        },
                        cost:() => new Decimal(player.extremeMode ? 3e4 : 2e4),
                        currencyLocation:() => player.tokens.coins,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Coins",
                        unlocked(){
                                if (hasUpgrade("t", 61) || hasUpgrade("or", 11)) return false
                                let v = player.extremeMode ? 42 : 41
                                return hasMilestone("n", 5) || (hasUpgrade("tokens", 71) && hasUpgrade("tokens", 72) && hasUpgrade("tokens", 73)) && player.tokens.total.gte(v)
                        }, // hasUpgrade("tokens", 81)
                },
                82: {
                        title(){
                                if (player.shiftAlias) return "<bdi style='color: #FF00FF'>Upgrade 82</bdi>"
                                return "<bdi style='color: #FF0000'>Egg is here.</bdi>"
                        },
                        description(){
                                if (player.shiftAlias) {
                                        let a = "<bdi style='color: #863813'>Locks upgrades 81</bdi>"
                                        let b = "<br>Current requirement:<br>!81"
                                        if (hasUpgrade("mini", 31)) {
                                                a = "<bdi style='color: #863813'></bdi>"
                                                b = "<br>Current requirement:<br>"
                                        }

                                        return a + b
                                }
                                return "Token buyable exponent is .65"
                        },
                        canAfford(){
                                if (player.tokens.coins.points.lt(tmp.tokens.upgrades[82].cost)) return false
                                return player.p.unlocked || hasMilestone("n", 5) || hasUpgrade("mini", 31) || (!hasUpgrade("tokens", 81))
                        },
                        cost:() => new Decimal(player.extremeMode ? 3e4 : 2e4),
                        currencyLocation:() => player.tokens.coins,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Coins",
                        unlocked(){
                                if (hasUpgrade("t", 61) || hasUpgrade("or", 11)) return false
                                let v = player.extremeMode ? 42 : 41
                                return hasMilestone("n", 5) || (hasUpgrade("tokens", 71) && hasUpgrade("tokens", 72) && hasUpgrade("tokens", 73)) && player.tokens.total.gte(v)
                        }, // hasUpgrade("tokens", 82)
                },
                91: {
                        title(){
                                if (player.shiftAlias) return "<bdi style='color: #FF00FF'>Upgrade 91</bdi>"
                                return "<bdi style='color: #FF0000'>Once Upon</bdi>"
                        },
                        description(){
                                if (player.shiftAlias) return "<bdi style='color: #863813'></bdi><br>Current requirement:<br>"
                                return "C Point Gain 1's log10 is buffed to ln (upgrades in this row are never repealed)"
                        },
                        canAfford(){
                                if (player.tokens.coins.points.lt(tmp.tokens.upgrades[91].cost)) return false
                                return true
                        },
                        cost:() => new Decimal(1e5),
                        currencyLocation:() => player.tokens.coins,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Coins",
                        unlocked(){
                                if (hasUpgrade("t", 61) || hasUpgrade("or", 11)) return false
                                return hasUpgrade("tokens", 91) || player.tokens.total.gte(54) || hasMilestone("n", 5)
                        }, // hasUpgrade("tokens", 91)
                },
                92: {
                        title(){
                                if (player.shiftAlias) return "<bdi style='color: #FF00FF'>Upgrade 92</bdi>"
                                return "<bdi style='color: #FF0000'>A Time</bdi>"
                        },
                        description(){
                                if (player.shiftAlias) return "<bdi style='color: #863813'></bdi><br>Current requirement:<br>"
                                return "You can (automatically) gamble four times a second and apply Cod again"
                        },
                        canAfford(){
                                if (player.tokens.coins.points.lt(tmp.tokens.upgrades[92].cost)) return false
                                return true
                        },
                        cost:() => new Decimal(2e5),
                        currencyLocation:() => player.tokens.coins,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Coins",
                        unlocked(){
                                if (hasUpgrade("t", 61) || hasUpgrade("or", 11)) return false
                                return hasUpgrade("tokens", 92) || player.tokens.total.gte(56) || hasMilestone("n", 5)
                        }, // hasUpgrade("tokens", 92)
                },
                93: {
                        title(){
                                if (player.shiftAlias) return "<bdi style='color: #FF00FF'>Upgrade 93</bdi>"
                                return "<bdi style='color: #FF0000'>In a galaxy</bdi>"
                        },
                        description(){
                                if (player.shiftAlias) return "<bdi style='color: #863813'></bdi><br>Current requirement:<br>"
                                return "C Point gain 6's outer log10 becomes a ln and gain 81x coins"
                        },
                        canAfford(){
                                if (player.tokens.coins.points.lt(tmp.tokens.upgrades[93].cost)) return false
                                return true
                        },
                        cost:() => new Decimal(3e5),
                        currencyLocation:() => player.tokens.coins,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Coins",
                        unlocked(){
                                if (hasUpgrade("t", 61) || hasUpgrade("or", 11)) return false
                                return hasUpgrade("tokens", 93) || player.tokens.total.gte(61) || hasMilestone("n", 5)
                        }, // hasUpgrade("tokens", 93)
                },
                94: {
                        title(){
                                if (player.shiftAlias) return "<bdi style='color: #FF00FF'>Upgrade 94</bdi>"
                                return "<bdi style='color: #FF0000'>rather near</bdi>"
                        },
                        description(){
                                if (player.shiftAlias) return "<bdi style='color: #863813'></bdi><br>Current requirement:<br>"
                                return "C Point gain 6's inner log10 becomes a ln and Unlock a slot base is 10"
                        },
                        canAfford(){
                                if (player.tokens.coins.points.lt(tmp.tokens.upgrades[94].cost)) return false
                                return true
                        },
                        cost:() => new Decimal(1e6),
                        currencyLocation:() => player.tokens.coins,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Coins",
                        unlocked(){
                                if (hasUpgrade("t", 61) || hasUpgrade("or", 11)) return false
                                return hasUpgrade("tokens", 94) || player.tokens.total.gte(63) || hasMilestone("n", 5)
                        }, // hasUpgrade("tokens", 94)
                },
                95: {
                        title(){
                                if (player.shiftAlias) return "<bdi style='color: #FF00FF'>Upgrade 95</bdi>"
                                return "<bdi style='color: #FF0000'>here...</bdi>"
                        },
                        description(){
                                if (player.shiftAlias) return "<bdi style='color: #863813'></bdi><br>Current requirement:<br>"
                                return "The autobuyer can buy each buyable once per trigger"
                        },
                        canAfford(){
                                if (player.tokens.coins.points.lt(tmp.tokens.upgrades[95].cost)) return false
                                return true
                        },
                        cost:() => new Decimal(3e6),
                        currencyLocation:() => player.tokens.coins,
                        currencyInternalName:() => "points",
                        currencyDisplayName:() => "Coins",
                        unlocked(){
                                if (hasUpgrade("t", 61) || hasUpgrade("or", 11)) return false
                                return hasUpgrade("tokens", 95) || player.tokens.total.gte(64) || hasMilestone("n", 5)
                        }, // hasUpgrade("tokens", 95)
                },
        },
        microtabs: {
                currency_displays: {
                        "Nothing": {
                                content: [
                                        ["display-text", 
                                                makeRed("WARNING: The other tabs may cause large amounts of lag.") +
                                                br2 + "Only selected currencies have tabs,<br>if you'd want a currency to have a tab, let me know!"
                                        ],
                                ]
                        },
                        "Points": {
                                content: [
                                        ["display-text", function(){
                                                let a = "Point gain is (" + format(getPointConstant(), 1) + "*AX)^BX all dilated ^CX."
                                                let b = "AX, BX, and CX are initially 1 and boosted as follows."
                                                let c = ""

                                                if (tmp.l.effect.gt(1))         c += "Life effect multiplies AX by " + format(tmp.l.effect) + br
                                                if (tmp.sci.effect.gt(1))       c += "Science effect multiplies AX by " + format(tmp.sci.effect) + br
                                                if (hasUpgrade("sci", 302))     c += "N Sci II effect multiplies AX by " + format(tmp.sci.upgrades[302].effect) + br
                                                if (player.easyMode)            c += "Easy mode multiplies AX by 4" + br
                                                if (c.includes("AX"))           c += br

                                                if (player.easyMode)            c += "Easy mode multiplies BX by 1.001" + br
                                                if (hasMilestone("l", 1))       c += "Life Milestone 1 multiplies BX by " + format(tmp.l.milestones[1].effect) + br
                                                if (hasMilestone("l", 18) && !player.extremeMode) {
                                                                                c += "Life Milestone 18 multiplies BX by 2" + br
                                                }
                                                if (hasUpgrade("mu", 51))       c += "µ XXI multiplies BX by " + format(player.l.points.max(10).log10()) + br
                                                if (hasMilestone("l", 31)) {
                                                        let l31exp = Math.max(0, player.l.challenges[11] - 100)
                                                        let l31base = 100
                                                        if (player.extremeMode) l31base = 9
                                                        if (hasMilestone("l", 32)) l31base *= 10
                                                        if (hasMilestone("l", 34)) l31base *= 10
                                                                                c += "Life Milestones 31, 32, and 34 multiply BX by " + format(Decimal.pow(l31base, l31exp)) + br
                                                }
                                                if (hasMilestone("l", 33)) {
                                                        let l33base = Math.max(1, player.l.challenges[11]/(player.extremeMode ? 98 : 100) )
                                                        let l33exp = player.mu.buyables[33]
                                                                                c += "Life Milestone 33 multiplies BX by " + format(Decimal.pow(l33base, l33exp)) + br
                                                }
                                                if (layers.l.grid.getGemEffect(102).gt(1)) {
                                                                                c += "C12 Gems multiply BX by " + format(layers.l.grid.getGemEffect(102)) + br
                                                }
                                                if (hasMilestone("a", 18))      c += "Amino Acid milestone 18 multiplies BX by " + format(Decimal.pow(3, getBuyableAmount("l", 23))) + br
                                                if (!player.extremeMode) {
                                                        let c31base = layers.l.grid.getGemEffect(301)
                                                        if (c31base.gt(1))      c += "C31 Gems multiply BX by " + format(c31base.pow(tmp.l.getNonZeroGemCount)) + br
                                                        let c34base = layers.l.grid.getGemEffect(304)
                                                        if (c34base.gt(1))      c += "C34 Gems multiply BX by " + format(c34base.pow(getBuyableAmount("mu", 32))) + br
                                                        let c65base = layers.l.grid.getGemEffect(605)
                                                        if (c65base.gt(1))      c += "C65 Gems multiply BX by " + format(c65base.pow(getBuyableAmount("l", 11))) + br
                                                        if (!hasUpgrade("or", 132)) {
                                                                let c73base = layers.l.grid.getGemEffect(703)
                                                                if (c73base.gt(1)) {
                                                                                c += "C73 Gems multiply BX by " + format(c73base.pow(getBuyableAmount("a", 21))) + br
                                                                }
                                                        }
                                                        let c38base = layers.l.grid.getGemEffect(308)
                                                        if (c38base.gt(1))      c += "C38 Gems multiply BX by " + format(c38base.pow(getBuyableAmount("l", 21))) + br
                                                        if (hasMile("l", 36))   c += "Life Milestone 36 multiplies BX by 1.1" + br
                                                } else {
                                                        let c34base = layers.l.grid.getGemEffect(304)
                                                        if (c34base.gt(1))      c += "C34 Gems multiply BX by " + format(c34base.pow(getBuyableAmount("l", 33))) + br
                                                        if (hasUpg("p", 43))    c += "Phosphorus XVIII multiplies BX by " + format(Decimal.pow(2, player.p.upgrades.length))
                                                        if (hasMile("a", 17))   c += "Amino Acid Milestone 17 multiplies BX by " + format(Decimal.pow(3, player.a.milestones.length)) + br
                                                        if (hasMile("a", 22))   c += "Amino Acid Milestone 22 multiplies BX by " + format(Decimal.pow(1 + player.a.milestones.length/100, player.a.milestones.length)) + br
                                                                                c += "Extreme Mode multiplies BX by .75" + br
                                                }
                                                if (!hasUpgrade("or", 132)) {
                                                        let c54base = layers.l.grid.getGemEffect(504)
                                                                                c += "C54 Gems multiply BX by " + format(c54base.pow(getBuyableAmount("a", 22))) + br
                                                        let c64base = layers.l.grid.getGemEffect(604)
                                                                                c += "C64 Gems multiply BX by " + format(c64base.pow(getBuyableAmount("a", 33))) + br
                                                        let c17base = layers.l.grid.getGemEffect(107)
                                                                                c += "C17 Gems multiply BX by " + format(c17base.pow(getBuyableAmount("a", 32))) + br
                                                        let c18base = layers.l.grid.getGemEffect(108)
                                                                                c += "C18 Gems multiply BX by " + format(c18base.pow(getBuyableAmount("l", 33).pow(player.extremeMode ? 1.9394 : 1.8))) + br
                                                }
                                                if (hasMilestone("a", 19))      c += "Amino Acid Milestone 19 multiply BX by " + format(tmp.a.milestones[19].effect) + br
                                                if (hasUpgrade("a", 11))        c += "Amino Acid I multiplies BX by " + format(Decimal.pow(3, player.a.upgrades.length))
                                                if (hasUpgrade("a", 13))        c += "Amino Acid III multiplies BX by " + format(getBuyableAmount("a", 11).max(1))
                                                if (hasUpgrade("a", 15))        c += "Amino Acid V multiplies BX by " + format(getBuyableAmount("a", 12).max(1))
                                                if (hasUpgrade("a", 33))        c += "Amino Acid XIII multiplies BX by " + format(Decimal.pow(100, getBuyableAmount("a", 13)))
                                                let logProteinTimes = hasUpgrade("a", 34) + hasUpgrade("a", 35)
                                                if (logProteinTimes > 0)        c += "Amino Acid XIII and XIV multiplies BX by " + format(player.a.protein.points.max(10).log10().pow(logProteinTimes)) + br
                                                if (hasMilestone("a", 24))      c += "Amino Milestone 24 multiplies BX by " + format(tmp.a.milestones[24].effect) + br
                                                if (!hasUpgrade("or", 223))     c += "siRNA multiplies BX by " + format(tmp.a.buyables[22].effect) + br
                                                if (hasUpgrade("d", 12)) {
                                                        let ncRNA = getBuyableAmount("a", 31)
                                                        let d12exp = ncRNA.times(player.d.upgrades.length)
                                                        if (ncRNA.gt(1))        c += "DNA II multiplies BX by " + format(ncRNA.pow(d12exp)) + br
                                                }
                                                if (hasUpgrade("d", 13)) {
                                                        let d13base = getBuyableAmount("a", 13)
                                                        let d13exp = d13base.times(player.extremeMode && !hasUpgrade("sci", 455) ? 1 : player.d.upgrades.length)
                                                        if (d13base.gt(1))      c += "DNA III multiplies BX by " + format(d13base.pow(d13exp)) + br
                                                }
                                                if (hasUpgrade("d", 34)) {
                                                        let a2da = getBuyableAmount("l", 11)
                                                        let d34exp = a2da.times(player.d.upgrades.length)
                                                                                c += "DNA XIV multiplies BX by " + format(a2da.pow(d34exp)) + br
                                                }
                                                if (hasMilestone("d", 27) && tmp.d.milestones[27].effect.gt(1)) {
                                                                                c += "DNA Milestone 27 multiplies BX by " + format(tmp.d.milestones[27].effect) + br
                                                }
                                                if (hasUpgrade("l", 14))        c += "Life IV multiplies BX by " + format(tmp.l.upgrades[14].effect) + br
                                                if (hasUpgrade("l", 45))        c += "Live XX multiplies BX by " + format(player.l.buyables[22].max(1)) + br
                                                if (hasUpgrade("sci", 411))     c += "Protein Sci VI multiplies BX by " + format(player.sci.protein_science.points.max(1)) + br
                                                if (hasUpgrade("sci", 502))     c += "DNA Sci II multiplies BX by " + format(player.d.points.max(1).pow(player.a.buyables[31].plus(player.a.buyables[13]))) + br
                                                if (hasUpgrade("sci", 504))     c += "DNA Sci IV multiplies BX by " + format(tmp.sci.upgrades[504].effect) + br
                                                if (c.includes("BX"))           c += br

                                                if (inChallenge("l", 11))       c += "Dilation multiplies CX by " + format(tmp.l.challenges[11].challengeEffect) + br
                                                if (inChallenge("l", 12)) {
                                                        let c2depth = tmp.l.challenges[12].getChallengeDepths[2] || 0
                                                        let c5depth = tmp.l.challenges[12].getChallengeDepths[5] || 0  
                                                        let c6depth = tmp.l.challenges[12].getChallengeDepths[6] || 0
                                                        let c7depth = tmp.l.challenges[12].getChallengeDepths[7] || 0

                                                        let c6Layers = (86 + c2depth) * c6depth ** (1/(player.extremeMode ? 10 : 8))
                                                        let c6Base = player.extremeMode ? (hasUpgrade("sci", 451) ? .952 : .951) : .96
                                                        let c7Base = player.extremeMode ? .0188 : .023
                                                        c7Base -= layers.l.grid.getGemEffect(706).toNumber()
                                                        c6Base -= c7Base * c7depth ** .56

                                                        let portion = decimalOne
                                                        let challId = player.l.activeChallengeID
                                                        portion = portion.times(Decimal.pow(player.extremeMode ? .713 : .665, Math.sqrt(c5depth)))
                                                        portion = portion.times(Decimal.pow(c6Base, c6Layers))
                                                        if (challId > 801 && !player.extremeMode) {
                                                                portion = portion.div(Decimal.pow(200, Math.pow(challId-801, .57)))
                                                        }
                                                        if (challId > 801 && player.extremeMode) {
                                                                portion = portion.div(Decimal.pow(406, Math.pow(challId-801, .55)))
                                                        }
                                                        if (challId > 803) {
                                                                let sub = player.extremeMode && challId > 804 ? .058 : 0
                                                                portion = portion.div(Decimal.pow(2.2 - sub, nCk(challId-802, 2)))
                                                        }
                                                        if (challId > 805 && player.extremeMode) portion = portion.times(1.53)
                                                        if (challId > 806 && player.extremeMode) portion = portion.div(4.47)
                                                        if (challId > 807 && player.extremeMode) portion = portion.div(1.55)

                                                        if (hasMilestone("d", 24)) portion = portion.pow(.94)
                                                        if (hasMilestone("d", 25) && player.extremeMode) portion = portion.pow(.973)
                                                        
                                                        let c58exp = Math.max(0, tmp.l.getNonZeroGemCount - 53)
                                                        let c58base = layers.l.grid.getGemEffect(508)
                                                        
                                                        portion = portion.pow(c58base.pow(c58exp))
                                                                                c += "Selection multiplies CX by " + format(portion) + br
                                                }
                                                if (!hasMilestone("ch", 15)) {
                                                        if (hasUpgrade("cells", 11))    c += "Cells I multiplies CX by " + format(tmp.cells.upgrades[11].effect) + br
                                                        if (hasUpgrade("cells", 61))    c += "Cells XXVI multiplies CX by " + format(Decimal.pow(1.1, player.cells.upgrades.length)) + br
                                                }
                                                if (hasUpgrade("cells", 315) && !hasUpgrade("ch", 25)) {
                                                                                c += "Kappa V multiplies CX by " + format(player.tokens.total.max(1)) + br
                                                }
                                                if (hasMilestone("cells", 56) && !hasMilestone("ch", 13)) {
                                                                                c += "Cell Milestone 56 multiplies CX by " + format(tmp.cells.milestones[56].effect) + br
                                                }
                                                if (!hasMilestone("an", 30)) {
                                                        if (hasMilestone("t", 4))       c += "Tissue Milestone 4 multiplies CX by " + format(tmp.t.milestones[4].effect) + br
                                                        if (hasMilestone("t", 21))      c += "Tissue Milestone 21 multiplies CX by " + format(player.t.milestones.length) + br
                                                }
                                                if (!hasMilestone("ch", 14)) {
                                                        if (hasUpgrade("t", 114))       c += "Tissues LIV multiplies CX by " + format(player.t.upgrades.length) + br
                                                        if (hasUpgrade("t", 124))       c += "Tissues LIX multiplies CX by " + format(Math.max(1, player.cells.challenges[11]) ** 2.5) + br
                                                }
                                                if (hasUpgrade("cells", 43) && !hasMilestone("ch", 15)) {
                                                                                c += br + "Cells XVIII multiplies CX by " + format(Decimal.pow(13, player.tokens.tokens2.total)) + br
                                                }
                                                if (hasMilestone("or", 23))     c += "Organ Milestone 23 multiplies CX by " + format(player.or.energy.points.max(1).pow(.01 * player.or.milestones.length)) + br
                                                if (hasUpgrade("an", 25))       c += "Animal X multiplies CX by " + format(player.or.air.points.max(1).pow(.01 * player.an.upgrades.length)) + br

                                                let ret = a + br + b + br2 + c
                                                ret = ret.replaceAll("AX", makeRed("A"))
                                                ret = ret.replaceAll("BX", makeRed("B"))
                                                ret = ret.replaceAll("CX", makeRed("C"))
                                                return ret
                                        }],
                                ],
                                unlocked(){
                                        return true
                                },
                        },
                        "DNA": {
                                content: [
                                        ["display-text", function(){
                                                let a = "DNA gain is " + format(tmp.d.getBaseGain, 3) + "*AX"
                                                let b = "AX is multiplied by the following factors"
                                                let c = ""

                                                if (layers.l.grid.getGemEffect(206).gt(1)) {
                                                                                c += "C26 Gems multiply AX by " + format(layers.l.grid.getGemEffect(206)) + br
                                                }
                                                if (hasUpgrade("d", 12)) {
                                                        let base = 2
                                                        if (hasUpgrade("d", 13)) base *= 2
                                                        if (hasMilestone("d", 14)) base *= 2
                                                        if (hasUpgrade("d", 14)) base *= 2
                                                        if (hasUpgrade("d", 15)) base *= 2
                                                                                c += "DNA II, III, IV, and V and DNA Milestone 14 multiply AX by " + format(Decimal.pow(base, player.d.upgrades.length)) + br
                                                }       
                                                if (hasChallenge("l", 22))      c += "Anti-minigame multiplies AX by " + format(tmp.l.challenges[22].reward) + br
                                                if (!hasUpgrade("or", 133))     c += "C61 Gems multiply AX by " + format(layers.l.grid.getGemEffect(601).pow(getBuyableAmount("a", 33)).min("1e50000")) + br
                                                if (hasUpgrade("d", 23) && player.l.points.gt(10)) {
                                                                                c += "DNA VIII multiplies AX by " + format(player.l.points.max(10).log10()) + br
                                                }
                                                if (hasMilestone("d", 18) && !hasMilestone("an", 30)) {
                                                        let base = 2
                                                        if (hasUpgrade("d", 24) && !player.extremeMode) base *= 2
                                                        if (hasUpgrade("d", 25)) base *= 2
                                                        if (hasUpgrade("d", 31)) base *= 2
                                                                                c += "DNA IX, X, and XI and DNA Milestone 18 multiplies AX by " + format(Decimal.pow(base, player.d.milestones.length)) + br
                                                        if (player.extremeMode) c = c.replaceAll("DNA IX, X,", "DNA X")
                                                }
                                                if (layers.l.grid.getGemEffect(607).gt(1)) {
                                                                                c += "C67 Gems multiply AX by " + format(layers.l.grid.getGemEffect(607).pow(tmp.l.getNonZeroGemCount)) + br
                                                }
                                                if (hasUpgrade("d", 35) && getBuyableAmount("a", 33).gt(0)) {
                                                                                c += "DNA XV multiplies AX by " + format(Decimal.pow(1.01, getBuyableAmount("a", 33)).min("e2e5")) + br
                                                }
                                                if (hasUpgrade("cells", 113) && !hasUpgrade("ch", 25)) {
                                                                                c += "Mu III multiplies AX by " + format(tmp.cells.upgrades[113].effect) + br
                                                }
                                                if (hasChallenge("l", 111))     c += "Anti-Theta multiplies AX by " + format(tmp.l.challenges[21].reward) + br
                                                if (player.cells.challenges[21] >= 1) {
                                                        let base = player.points.max(10).log10().max(10).log10()
                                                        let exp = player.cells.upgrades.length
                                                                                c += "Tertiary multiplies AX by " + format(base.pow(exp)) + br
                                                }
                                                if (player.easyMode)            c += "Easy mode multiplies AX by 2" + br
                                                if (hasUpgrade("sci", 553))     c += "DNA Sci XXVIII multiplies AX by " + format(tmp.cells.buyables[13].effect) + br
                                                if (tmp.sci.buyables[503].effect.gt(0)) {
                                                        let eff = player.points.max(100).log10().log10().log10().max(1).pow(tmp.sci.buyables[503].effect)
                                                                                c += "DNA Polymerase multiplies AX by " + format(eff) + br
                                                }
                                                if (tmp.an.effect.gt(1))        c += "Animal effect multiplies AX by " + format(tmp.an.effect) + br
                                                if (tmp.or.effect.gt(1))        c += "Organ effect multiplies AX by " + format(tmp.or.effect) + br
                                                                                c += br + "Cell effect multiplies AX by " + format(tmp.cells.effect, 3) + br
                                                                                c += "Tissue effect multiplies AX by " + format(tmp.t.effect, 3) + br
                                                if (hasUpgrade("t", 112))       c += "Tissues LII multiplies AX by " + format(tmp.t.effect.pow(player.t.upgrades.length), 3) + br
                                                if (hasUpgrade("sp", 45))       c += "Effect XX multiplies AX by " + format(player.an.grid[208].extras.plus(1).pow(player.nu.points.pow(9))) + br

                                                return (a + br + b + br2 + c).replaceAll("AX", makeRed("A"))
                                        }],
                                ],
                                unlocked(){
                                        return true
                                },
                        },
                        "Cells": {
                                content: [
                                        ["display-text", function(){
                                                let a = "Cell gain is " + format(tmp.cells.getBaseGain, 3) + "*AX"
                                                let b = "AX is initially 1 and is multiplied by the following factors"
                                                let c = ""

                                                let ret = decimalOne
                                                
                                                if (!hasMilestone("an", 29)) {
                                                        if (hasUpgrade("cells", 111)) {
                                                                                c += "Mu I multiplies AX by " + format(tmp.cells.upgrades[111].effect) + br
                                                        }
                                                        if (hasUpgrade("cells", 211)) {
                                                                                c += "Lambda I multiplies AX by " + format(tmp.cells.upgrades[211].effect) + br
                                                        }
                                                        if (hasUpgrade("cells", 311)) {
                                                                                c += "Kappa I multiplies AX by " + format(tmp.cells.upgrades[311].effect) + br
                                                        }
                                                        if (hasUpgrade("cells", 411)) {
                                                                                c += "Iota I multiplies AX by " + format(tmp.cells.upgrades[411].effect) + br
                                                        }
                                                }
                                                if (hasMilestone("cells", 16) && !hasMilestone("ch", 13)) {
                                                                                c += "Cell Milestone 16 multiplies AX by " + format(tmp.cells.milestones[16].effect) + br
                                                }
                                                if (!hasUpgrade("an", 51))      c += "Secondary multiplies AX by " + format(tmp.cells.challenges[12].rewardEffect) + br                         
                                                                                c += "Stem Cells multiply AX by " + format(player.cells.stem_cells.points.plus(10).log10()) + br
                                                if (!hasMilestone("ch", 15)) {
                                                        if (hasUpgrade("cells", 15))    c += "Cells V multiplies AX by " + format(tmp.cells.upgrades[15].effect) + br
                                                        if (hasUpgrade("cells", 21) && player.extremeMode)  {
                                                                                        c += "Cells VI multiplies AX by " + format(Decimal.pow(player.cells.upgrades.length, player.cells.upgrades.length + 3)) + br
                                                        }
                                                        if (hasUpgrade("cells", 54) && tmp.cells.upgrades[54].effect.gt(1)) {
                                                                                        c += "Cells XXIV multiplies AX by " + format(tmp.cells.upgrades[54].effect) + br
                                                        }
                                                }
                                                if (hasMilestone("t", 17) && !hasMilestone("an", 30)) {
                                                                                c += "Tissue Milestone 17 multiplies AX by " + format(player.tokens.tokens2.total.max(1).pow(player.t.milestones.length)) + br
                                                }
                                                if (hasUpgrade("t", 135) && !hasMilestone("ch", 14)) {
                                                                                c += "Tissues LXV multiplies AX by " + format(tmp.t.upgrades[135].effect) + br
                                                }
                                                if (hasUpgrade("sci", 511))     c += "DNA Sci VI multiplies AX by " + format(Decimal.pow(2, tmp.sci.upgrades[511].lvls)) + br
                                                if (hasUpgrade("sci", 555))     c += "DNA Sci XXV multiplies AX by " + format(tmp.sci.buyables[501].effect.max(1)) + br
                                                if (hasUpgrade("sci", 561))     c += "DNA Sci XXVI multiplies AX by " + format(tmp.sci.buyables[502].effect.max(1)) + br
                                                if (hasChallenge("l", 111))     c += "Anti-Theta multiplies AX by " + format(tmp.l.challenges[22].reward.min(ret.sqrt())) + br
                                                if (tmp.or.effect.gt(1))        c += "Organ effect multiplies AX by " + format(tmp.or.effect) + br
                                                if (player.easyMode)            c += "Easy mode multiplies AX by 2" + br
                                                if (hasUpgrade("sci", 514))     c += "DNA Sci IX multiplies AX by " + format(player.cells.stem_cells.points.plus(10).log10()) + br
                                                if (hasUpgrade("sci", 551))     c += "DNA Sci XXI multiplies AX by " + format(player.sci.dna_science.points.max(10).log10().pow(tmp.sci.upgrades[551].lvls)) + br
                                                if (tmp.an.effect.gt(1))        c += "Animal effect multiplies AX by " + format(tmp.an.effect) + br
                                                if (tmp.or.challenges[21].reward.gt(1)) {
                                                        c += "Primary Bronchi multiplies AX by " + format(tmp.or.challenges[21].reward) + br
                                                }
                                                if (hasUpgrade("or", 102))      c += "Heart II multiplies AX by " + format(tmp.or.upgrades[102].cell_effect) + br
                                                                                
                                                if (hasMilestone("cells", 40))  c += br + "Cell Milestone 40 multiplies AX by " + format(player.cells.stem_cells.best.max(1).root(100), 3) + br
                                                                                c += "Tissue effect multiplies AX by " + format(tmp.t.effect, 3) + br
                                                if (hasUpgrade("an", 41))       c += "Mammalia III amount multiplies AX by " + format(player.an.grid[406].extras.plus(1).pow(player.an.grid[507].buyables.pow(3))) + br

                                                return (a + br + b + br2 + c).replaceAll("AX", makeRed("A"))
                                        }],
                                ],
                                unlocked(){
                                        return true
                                },
                        },
                        "Stem Cells": {
                                content: [
                                        ["display-text", function(){
                                                let a = "Stem Cell gain is (AX<sup>BX</sup>CX)<sup>DX</sup>."
                                                let b = "AX, BX, CX, and DX are initially 1 and boosted as follows."
                                                let c = ""
                        
                                                if (player.hardMode)            c += "Hard mode divides AX by 4" + br
                                                if (player.easyMode)            c += "Easy mode multiplies AX by 4" + br
                                                if (!hasUpgrade("an", 45)) {
                                                        if (hasUpgrade("cells", 114))   c += "Mu IV multiplies AX by " + format(getBuyableAmount("cells", 112)) + br
                                                        if (hasUpgrade("cells", 214))   c += "Lambda IV multiplies AX by " + format(tmp.cells.upgrades[214].effect) + br
                                                        if (hasUpgrade("cells", 314))   c += "Kappa IV multiplies AX by " + format(tmp.cells.upgrades[314].effect) + br
                                                        if (hasUpgrade("cells", 414))   c += "Iota IV multiplies AX by " + format(getBuyableAmount("cells", 411).max(10).log10().pow(1 + player.extremeMode)) + br
                                                }
                                                if (!hasUpgrade("an", 51))      c += "Primary reward multiplies AX by " + format(tmp.cells.challenges[11].rewardEffect) + br
                                                if (!hasMilestone("ch", 13)) {
                                                        if (hasMilestone("cells", 12)) {
                                                                let exp = player.extremeMode ? 2.5 : 1
                                                                                        c += "Cell Milestone 12 multiplies AX by " + format(player.cells.milestones.length ** exp) + br
                                                        }
                                                        if (hasMilestone("cells", 16))  c += "Cell Milestone 16 multiplies AX by " + format(tmp.cells.milestones[16].effect) + br
                                                        if (hasMilestone("cells", 17))  {
                                                                let exp = player.cells.activeChallenge ? 2 : 1
                                                                if (!player.extremeMode) exp = .5
                                                                                        c += "Cell Milestone 17 multiplies AX by " + format(Math.max(1, player.cells.upgrades.length) ** exp) + br
                                                        }
                                                        if (hasMilestone("cells", 22))  c += "Cell Milestone 22 multiplies AX by " + format(getBuyableAmount("cells", 11).plus(1)) + br
                                                        if (hasMilestone("cells", 23))  c += "Cell Milestone 23 multiplies AX by " + format(player.cells.mu.best.max(10).log10()) + br
                                                        if (hasMilestone("cells", 24))  c += "Cell Milestone 24 multiplies AX by " + format(tmp.tokens.buyables[21].effect) + br
                                                        if (hasMilestone("cells", 26))  c += "Cell Milestone 26 multiplies AX by " + format(player.tokens.total.max(1)) + br
                                                        if (hasMilestone("cells", 32))  c += "Cell Milestone 32 multiplies AX by " + format(player.cells.lambda.points.max(10).log10()) + br
                                                        if (hasMilestone("cells", 38))  c += "Cell Milestone 38 multiplies AX by " + format(player.d.points.max(10).log10()) + br
                                                        if (hasMilestone("cells", 39))  c += "Cell Milestone 39 multiplies AX by " + format(player.mu.points.max(10).log10()) + br
                                                        if (hasMilestone("cells", 41))  c += "Cell Milestone 41 multiplies AX by " + format(player.tokens.buyables[11].max(1)) + br
                                                        if (hasMilestone("cells", 53))  c += "Cell Milestone 53 multiplies AX by " + format(tmp.cells.milestones[53].effect) + br
                                                        if (hasMilestone("cells", 59) && !player.extremeMode) {
                                                                                        c += "Cell Milestone 59 multiplies AX by " + format(layerChallengeCompletions("cells") ** 2) + br
                                                        }
                                                }
                                                if (hasChallenge("l", 111) && player.cells.challenges[12] >= 15 && !player.extremeMode) {
                                                                                c += "Anti-Theta multiplies AX by " + format(tmp.l.challenges[31].reward.max(1)) + br
                                                }
                                                if (!hasMilestone("ch", 15)) {
                                                        if (hasUpgrade("cells", 15))    c += "Cells V multiplies AX by " + format(tmp.cells.upgrades[15].effect) + br
                                                        if (hasUpgrade("cells", 21))  {
                                                                let exp = player.extremeMode ? player.cells.upgrades.length + 3 : 2
                                                                                        c += "Cells VI multiplies AX by " + format(Decimal.pow(player.cells.upgrades.length, exp)) + br
                                                        }
                                                        if (hasUpgrade("cells", 23) && !player.extremeMode) {
                                                                                        c += "Cells VIII multiplies AX by " + format(player.cells.upgrades.length) + br
                                                        }
                                                        if (hasUpgrade("cells", 24)) {
                                                                if (player.extremeMode) c += "Cells IX multiplies AX by " + format(player.cells.points.max(1).pow(.01)) + br
                                                                else                    c += "Cells IX multiplies AX by " + format(player.cells.upgrades.length) + br
                                                        }
                                                        if (hasUpgrade("cells", 52))    c += "Cells XXII multiplies AX by " + format(player.cells.points.max(10).log10().pow(player.tokens.tokens2.total)) + br
                                                        if (hasUpgrade("cells", 54) && tmp.cells.upgrades[54].effect.gt(1)) {
                                                                                        c += "Cells XXIV multiplies AX by " + format(tmp.cells.upgrades[54].effect) + br
                                                        }
                                                }
                                                if (!hasMilestone("an", 30)) {
                                                        if (hasMilestone("t", 10)) {
                                                                let base = getBuyableAmount("cells", 13).max(1)
                                                                let exp  = player.t.upgrades.length ** .5
                                                                                        c += "Tissue Milestone 10 multiplies AX by " + format(base.pow(exp)) + br
                                                        }
                                                        if (hasMilestone("t", 11)) {
                                                                let base = getBuyableAmount("cells", 13).max(1)
                                                                let exp  = player.t.milestones.length
                                                                                        c += "Tissue Milestone 11 multiplies AX by " + format(base.pow(exp)) + br
                                                        }
                                                        if (hasMilestone("t", 17))      c += "Tissue Milestone 17 multiplies AX by " + format(player.tokens.tokens2.total.max(1).pow(player.t.milestones.length)) + br
                                                        if (hasMilestone("t", 18))      c += "Tissue Milestone 18 multiplies AX by " + format(player.tokens.total.pow10().root(player.extremeMode ? 29.918840221005354 : 47.19363281906435)) + br
                                                }
                                                if (!hasMilestone("ch", 14)) {
                                                        if (hasUpgrade("t", 31))        c += "Tissues XI multiplies AX by 3" + br
                                                        if (hasUpgrade("t", 32) && player.cells.activeChallenge != undefined) {
                                                                                        c += "Tissues XII multiplies AX by 10" + br
                                                        }        
                                                        if (hasUpgrade("t", 34))        c += "Tissues XIV multiplies AX by " + format(tmp.t.upgrades[34].effect) + br
                                                        if (hasUpgrade("t", 92))        c += "Tissues XLII multiplies AX by " + format(player.tokens.total.max(1).pow(Math.PI)) + br
                                                        if (hasUpgrade("t", 111))       c += "Tissues LI multiplies AX by 5" + br
                                                        if (hasUpgrade("t", 113))       c += "Tissues LIII multiplies AX by " + format(player.tokens.tokens2.total.div(69).plus(1).pow(player.tokens.total)) + br
                                                        if (hasUpgrade("t", 135))       c += "Tissues LXV multiplies AX by " + format(tmp.t.upgrades[135].effect) + br
                                                        if (hasUpgrade("t", 144))       c += "Tissues LXIX multiplies AX by " + format(Decimal.pow(2, player.t.upgrades.length)) + br
                                                }
                                                if (!hasUpgrade("an", 34))      c += "Down Quark multiplies AX by " + format(tmp.tokens.buyables[102].effect) + br
                                                if (tmp.or.effect.gt(1))        c += "Organ effect multiplies AX by " + format(tmp.or.effect) + br
                                                if (player.extremeMode)         c += "Telomerase multiplies AX by " + format(tmp.sci.buyables[522].stem_cell_effect) + br
                                                if ((!inChallenge("cells", 12) || player.cells.challenges[12] < 10) && tmp.sci.buyables[523].stem_cell_effect.gt(1)) {
                                                                                c += "Single-strand DNA-binding protein multiplies AX by " + format(tmp.sci.buyables[523].stem_cell_effect) + br
                                                }
                                                if (hasUpgrade("sci", 524))     c += "DNA Sci XIV multiplies AX by " + format(tmp.sci.buyables[501].effect.max(1)) + br
                                                if (hasUpgrade("sci", 525))     c += "DNA Sci XV multiplies AX by " + format(tmp.sci.buyables[502].effect.max(1)) + br
                                                if (hasMilestone("cells", 32) && player.extremeMode && !hasMilestone("ch", 13)) {
                                                                                c += "Cell Milestone 32 multiplies AX by " + format(tmp.sci.buyables[503].effect.max(1)) + br
                                                }
                                                if (hasUpgrade("sci", 531))     c += "DNA Sci XVI multiplies AX by " + format(tmp.sci.buyables[511].effect.max(1)) + br
                                                if (hasUpgrade("sci", 532))     c += "DNA Sci XVII multiplies AX by " + format(tmp.sci.buyables[512].effect.max(1).times(tmp.sci.upgrades[532].effect)) + br
                                                if (hasMilestone("cells", 34) && player.extremeMode) {
                                                                                c += "Cell Milestone 34 multiplies AX by " + format(tmp.sci.buyables[513].effect.max(1)) + br
                                                }
                                                if (hasUpgrade("sci", 533))     c += "DNA Sci XVIII multiplies AX by " + format(tmp.sci.buyables[521].effect.max(1)) + br
                                                if (hasUpgrade("sci", 534))     c += "DNA Sci XIX multiplies AX by " + format(tmp.sci.buyables[522].effect.max(1)) + br
                                                if (hasUpgrade("sci", 535))     c += "DNA Sci XX multiplies AX by " + format(tmp.sci.buyables[523].effect.max(1).times(Decimal.pow(1.01, tmp.sci.buyables.dnaBuyablesTotal))) + br
                                                if (hasUpgrade("sci", 542))     c += "DNA Sci XXII multiplies AX by " + format(tmp.sci.upgrades[542].effect) + br
                                                if (hasUpgrade("sci", 543))     c += "DNA Sci XXIII multiplies AX by " + format(tmp.sci.upgrades.dnaUpgradesLength) + br
                                                if (hasUpgrade("or", 102))      c += "Heart II multiplies AX by " + format(tmp.or.upgrades[102].stem_cell_effect) + br
                                                if (hasUpgrade("sci", 552))     c += "DNA Sci XXVII multiplies AX by " + format(Decimal.pow(2, tmp.sci.upgrades[552].lvls)) + br
                                                if (hasUpgrade("t", 72) && player.extremeMode) {
                                                                                c += "Tissues XXXII multiplies AX by " + format(player.cells.points.max(10).log10()) + br
                                                }
                                                if (hasUpgrade("sci", 553))     c += "DNA Sci XXVIII multiplies AX by " + format(player.tokens.total.max(1)) + br
                                                if (hasUpgrade("sci", 561))     c += "DNA Sci XXXI multiplies AX by " + format(Decimal.pow(2, tmp.sci.upgrades.dnaUpgradesLength)) + br
                                                if (hasUpgrade("sci", 562))     c += "DNA Sci XXXII multiplies AX by " + format(tmp.sci.buyables[521].effect.max(1).pow(tmp.sci.upgrades[551].lvls)) + br
                                                if (hasUpgrade("sci", 563))     c += "DNA Sci XXXIII multiplies AX by " + format(tmp.sci.buyables[512].effect.max(1).pow(tmp.sci.upgrades[551].lvls)) + br
                                                if (hasUpgrade("sci", 564))     c += "DNA Sci XXXIV multiplies AX by " + format(tmp.sci.buyables[522].effect.max(1).pow(tmp.sci.upgrades[551].lvls)) + br
                                                if (hasUpgrade("t", 91) && player.extremeMode) {
                                                                                c += "Tissues XLI multiplies AX by " + format(tmp.t.upgrades[91].effect) + br
                                                }
                                                if (tmp.or.challenges[12].reward.gt(1)) {
                                                                                c += "Trachea multiplies AX by " + format(tmp.or.challenges[12].reward) + br
                                                }
                                                if (tmp.an.effect.gt(1))        c += "Animal Effect multiplies AX by " + format(tmp.an.effect) + br
                                                if (tmp.t.effect.gt(1))         c += br + "Tissue effect multiplies AX by " + format(tmp.t.effect) + br
                                                if (hasUpgrade("or", 332))      c += "Lung XVII multiplies AX by " + format(player.or.contaminants.points.max(1).pow(.01 * player.or.upgrades.length)) + br
                                                                                c += "Omnipotent multiplies AX by " + format(tmp.cells.buyables[11].effect) + br
                                                                                c += "Totipotent multiplies AX by " + format(tmp.cells.buyables[12].effect) + br
                                                                                c += "Pluripotent multiplies AX by " + format(tmp.cells.buyables[13].effect) + br
                                                                                c += "Multipotent multiplies AX by " + format(tmp.cells.buyables[21].effect) + br
                                                                                c += "Oligopotent multiplies AX by " + format(tmp.cells.buyables[22].effect) + br
                                                if (hasMilestone("cells", 40))  c += "Cell Milestone 40 multiplies AX by " + format(player.cells.best.max(1).root(player.extremeMode ? 100 : 50)) + br
                                                if (c.includes("AX"))           c += br

                                                if (inChallenge("cells", 12))   c += "Secondary Challenge multiplies BX by " + format(tmp.cells.challenges[12].challengeEffect) + br
                                                if (c.includes("BX"))           c += br

                                                // AFTER SECONDARY BUFFS
                                                if (!hasMilestone("ch", 14)) {
                                                        if (hasUpgrade("t", 63))        c += "Tissues XXVIII multiplies CX by " + format(tmp.t.effect) + br
                                                        if (hasUpgrade("t", 124))       c += "Tissues LIX multiplies CX by " + format(Math.max(1, player.cells.challenges[11]) ** 2.5) + br
                                                }
                                                if (hasMilestone("t", 20) && !hasMilestone("an", 30)) {
                                                                                c += "Tissue Milestone 20 multiplies CX by " + format(Decimal.pow(1.5, player.tokens.tokens2.total)) + br
                                                }
                                                if (c.includes("CX"))           c += br

                                                if (hasUpgrade("t", 35))        c += "Tissues XV multiplies DX by 1.001" + br
                                                if (hasUpgrade("sci", 513))     c += "DNA Sci VIII multiplies DX by " + format(tmp.sci.upgrades[513].effect, 4) + br
                                                if (hasUpgrade("sci", 525))     c += "DNA Sci XV multiplies DX by 1.01" + br
                                                if (player.extremeMode)         c += "Extreme mode multiplies DX by .75" + br
                                                if (hasUpgrade("or", 205) && player.or.filterLeftKidney) {
                                                                                c += "Kidney V multiplies DX by 1.001" + br
                                                }
                                                if (hasUpgrade("or", 214) && !player.or.filterLeftKidney) {
                                                                                c += "Kidney IX multiplies DX by 1.001" + br
                                                }
                                                if (c.includes("DX"))           c += br

                                                let ret = a + br + b + br2 + c
                                                ret = ret.replaceAll("AX", makeRed("A"))
                                                ret = ret.replaceAll("BX", makeRed("B"))
                                                ret = ret.replaceAll("CX", makeRed("C"))
                                                ret = ret.replaceAll("DX", makeRed("D"))
                                                return ret
                                        }],
                                ],
                                unlocked(){
                                        return true
                                },
                        },
                        "Tissues": {
                                content: [
                                        ["display-text", function(){
                                                let a = "Tissue gain is " + format(tmp.t.getBaseGain, 3) + "*AX"
                                                let b = "AX is initially 1 and is multiplied by the following factors"
                                                let c = ""

                                                if (player.easyMode)            c += "Easy Mode multiplies AX by " + format(2) + br
                                                if (!hasMilestone("ch", 14)) {
                                                        if (hasUpgrade("t", 83)) {
                                                                let base = new Decimal(player.cells.challenges[12]).max(10).log10()
                                                                let exp = Math.max(0, player.cells.challenges[11] - 10)
                                                                                        c += "Tissues XXXVIII multiplies AX by " + format(base.pow(exp)) + br
                                                        }
                                                        if (hasUpgrade("t", 131))       c += "Tissues LXI multiplies AX by " + format(Decimal.pow(2, tmp.t.upgrades.endUpgradeAmount)) + br
                                                        if (hasUpgrade("t", 155))       c += "Tissues LXXV multiplies AX by " + format(Decimal.pow(1.11, player.tokens.tokens2.total)) + br
                                                }
                                                if (hasUpgrade("cells", 44) && !hasMilestone("ch", 15)) {
                                                                                c += "Cells XIX multiplies AX by " + format(player.tokens.tokens2.total.max(1)) + br
                                                }
                                                if (!hasUpgrade("or", 43))      c += "Bottom Quark multiplies AX by " + format(tmp.tokens.buyables[122].effect) + br
                                                if (player.cells.challenges[21] >= 2) {
                                                                                c += "Tertiary multiplies AX by " + format(player.t.best.plus(10).log10().plus(9).log10().pow(player.cells.challenges[21])) + br
                                                }
                                                if (tmp.an.effect.gt(1))        c += "Animal effect multiplies AX by " + format(tmp.an.effect) + br
                                                if (hasMilestone("or", 10))     c += "Organ Milestone 10 multiplies AX by " + format(Decimal.pow(2, player.or.milestones.length)) + br
                                                if (hasUpgrade("sci", 552))     c += "DNA Sci XXVII multiplies AX by " + format(Decimal.pow(2, tmp.sci.upgrades[552].lvls)) + br
                                                if (hasUpgrade("or", 143))      c += "Heart XXIII multiplies AX by " + format(player.or.buyables[202].max(1).pow(player.or.upgrades.length)) + br
                                                if (hasUpgrade("or", 155))      c += "Heart XXX multiplies AX by " + format(player.or.energy.points.max(1)) + br
                                                if (hasUpgrade("sci", 563))     c += "DNA Sci XXXIII multiplies AX by " + format(2) + br
                                                if (tmp.or.challenges[32].reward.gt(1)) {
                                                                                c += "Bronchioles multiplies AX by " + format(tmp.or.challenges[32].reward) + br
                                                }
                                                if (hasUpgrade("an", 14))       c += "Animals IV multiplies AX by " + format(player.an.grid[608].extras.plus(1).pow(player.an.milestones.length ** 2)) + br
                                                if (hasUpgrade("an", 34))       c += "Animals XIV multiplies AX by " + format(tmp.tokens.buyables[102].effect) + br
                                                if (hasUpgrade("an", 54))       c += "Animals XXIV multiplies AX by " + format(player.nu.points.div(4).plus(1).pow(player.an.upgrades.length)) + br
                                                if (hasMilestone("nu", 2))      c += "Nucleus Milestone 2 multiplies AX by " + format(player.t.points.plus(10).log10().pow(player.nu.points)) + br
                                                if (tmp.or.effect.gt(1))        c += br + "Organ effect multiplies AX by " + format(tmp.or.effect) + br
                                                if (hasMilestone("an", 39))     c += "Animal Milestone 39 multiplies AX by " + format(player.an.grid[307].extras.plus(1).pow(player.ch.points.pow(3))) + br
                                                
                                                return (a + br + b + br2 + c).replaceAll("AX", makeRed("A"))
                                        }],
                                ],
                                unlocked(){
                                        return true
                                },
                        },
                        "Organs": {
                                content: [
                                        ["display-text", function(){
                                                let a = "Organ gain is " + format(tmp.or.getBaseGain, 3) + "*AX"
                                                let b = "AX is initially 1 and is multiplied by the following factors"
                                                let c = ""

                                                if (player.easyMode)            c += "Easy Mode multiplies AX by 2" + br
                                                if (hasUpgrade("or", 124))      c += "Heart XIV multiplies AX by " + format(tmp.or.upgrades[124].effect) + br
                                                if (hasUpgrade("or", 131))      c += "Heart XVI multiplies AX by " + format(player.or.milestones.length) + br
                                                if (hasUpgrade("or", 135))      c += "Heart XX multiplies AX by " + format(player.or.upgrades.length) + br
                                                if (hasUpgrade("or", 141) && !hasUpgrade("or", 41)) {
                                                        let lvls = Math.max(0, player.or.upgrades.length - 30)
                                                                                c += "Heart XXI multiplies AX by " + format(player.or.buyables[201].plus(10).log10().pow(lvls)) + br
                                                }
                                                if (hasUpgrade("or", 14))       c += "Organs IV multiplies AX by " + format(player.tokens.tokens2.total.max(1)) + br
                                                if (hasUpgrade("or", 31))       c += "Organs XI multiplies AX by " + format(Decimal.pow(1.03, player.tokens.tokens2.total)) + br
                                                if (hasUpgrade("or", 313))      c += "Lung VIII multiplies AX by " + format(player.or.air.points.max(10).log10()) + br
                                                if (hasMilestone("or", 20))     c += "Organ Milestone 20 multiplies AX by " + format(player.or.energy.points.max(10).log10()) + br
                                                if (tmp.or.buyables[423].effect.gt(1)) {
                                                                                c += br + "intes<u>TINE</u> multiplies AX by " + format(tmp.or.buyables[423].effect) + br
                                                }
                                                if (tmp.an.effect.gt(1))        c += "Animal effect multiplies AX by " + format(tmp.an.effect) + br
                                                if (hasUpgrade("an", 23))       c += "Animals VIII multiplies AX by " + format(player.an.grid[506].extras.plus(1)) + br
                                                if (hasMilestone("ch", 7))      c += "Chromosome Milestone 7 multiplies AX by " + format(player.ch.points.pow(player.ch.points)) + br
                                                if (player.an.achActive[13] && hasAchievement("an", 13) || hasAchievement("an", 23)) {
                                                                                c += "COM I being ON multiplies AX by " + format(player.an.grid[308].extras.plus(1).pow(player.ch.points.div(17))) + br
                                                }
                                                if (hasUpgrade("ch", 41))       c += "Chromosomes XVI multiplies AX by " + format(player.an.grid[303].extras.plus(1).pow(player.nu.points)) + br
                                                if (hasUpgrade("nu", 24))       c += "Nucleuses IX multiplies AX by " + format(player.an.grid[203].extras.plus(1).pow(player.ch.points)) + br
                                                if (hasUpgrade("sp", 12))       c += "Effect II multiplies AX by " + format(tmp.sp.effect.pow(player.sp.times ** 2)) + br

                                                return (a + br + b + br2 + c).replaceAll("AX", makeRed("A"))
                                        }],
                                ],
                                unlocked(){
                                        return player.or.unlocked
                                },
                        },
                        "Air": {
                                content: [
                                        ["display-text", function(){
                                                let a = "Air gain is AX<sup>BX</sup>"
                                                let b = "AX and BX are initially 1 and are multiplied by the following factors"
                                                let c = ""

                                                if (player.hardMode)            c += "Hard Mode divides AX by 4" + br
                                                if (player.easyMode)            c += "Easy Mode multiplies AX by 4" + br
                                                if (!hasMilestone("ch", 11)) {
                                                                                c += "Larynx multiplies AX by " + format(tmp.or.challenges[11].reward) + br
                                                                                c += "Trachea multiplies AX by " + format(tmp.or.challenges[12].reward) + br
                                                                                c += "Primary Bronchi multiplies AX by " + format(tmp.or.challenges[21].reward) + br
                                                                                c += "Secondary Bronchi multiplies AX by " + format(tmp.or.challenges[22].reward) + br
                                                                                c += "Tertiary Bronchi multiplies AX by " + format(tmp.or.challenges[31].reward) + br
                                                                                c += "Bronchoiles multiplies AX by " + format(tmp.or.challenges[32].reward) + br
                                                }
                                                if (hasUpgrade("or", 221))      c += "Kidney XI multiplies AX by " + format(player.t.points.max(10).log10()) + br
                                                if (hasUpgrade("or", 224))      c += "Kidney XIV multiplies AX by " + format(tmp.or.upgrades[224].effect) + br
                                                if (hasUpgrade("or", 225))      c += "Kidney XV multiplies AX by " + format(tmp.or.buyables[412].effect) + br
                                                if (hasUpgrade("or", 233))      c += "Kidney XVIII multiplies AX by " + format(tmp.or.upgrades[323].effect) + br
                                                if (hasUpgrade("or", 301))      c += "Air I multiplies AX by " + format(tmp.or.upgrades[301].effect) + br
                                                if (hasUpgrade("or", 312))      c += "Air VII multiplies AX by " + format(Decimal.pow(3, player.tokens.best_buyables[101].sub(30)).max(1)) + br
                                                if (hasMilestone("or", 17))     c += "Organ Milestone 18 multiplies AX by " + format(player.or.milestones.length) + br
                                                if (hasMilestone("or", 20))     c += "Organ Milestone 20 multiplies AX by " + format(player.or.energy.points.max(10).log10()) + br
                                                if (hasUpgrade("or", 23))       c += "Organs VIII multiplies AX by " + format(tmp.or.upgrades[23].effect) + br
                                                if (hasUpgrade("or", 43))       c += "Organs XVIII multiplies AX by " + format(tmp.tokens.buyables[122].effect) + br
                                                if (tmp.an.effect.gt(1))        c += "Animal effect multiplies AX by " + format(tmp.an.effect) + br
                                                if (hasMilestone("an", 16))     c += "Animal Milestone 16 multiplies AX by " + format(player.an.grid[808].extras.plus(1)) + br
                                                if (hasUpgrade("an", 22))       c += "Animals VII multiplies AX by " + format(player.an.grid[505].extras.plus(1).pow(player.an.grid[508].buyables)) + br
                                                if (hasUpgrade("sp", 14))       c += "Effect IV multiplies AX by " + format(tmp.sp.effect.pow(player.tokens.total.pow(.7))) + br
                                                if (c.includes("AX"))           c += br

                                                if (hasMilestone("ch", 11))     c += "Chromosome Milestone 11 multiplies BX by " + format(60) + br
                                                if (hasMilestone("nu", 17))     c += "Nucleus Milestone 17 multiplies BX by " + format(Decimal.pow(1.01, player.nu.points)) + br
                                                if (c.includes("BX"))           c += br

                                                let ret = a + br + b + br2 + c
                                                ret = ret.replaceAll("AX", makeRed("A"))
                                                ret = ret.replaceAll("BX", makeRed("B"))
                                                return ret
                                        }],
                                ],
                                unlocked(){
                                        return player.or.air.points.gt(0) || player.an.unlocked
                                },
                        },
                        "Energy": {
                                content: [
                                        ["display-text", function(){
                                                let a = "Energy gain is AX<sup>BX</sup>"
                                                let b = "AX and BX are initially 1 and are multiplied by the following factors"
                                                let c = ""
                                                let data = player.or.extras

                                                if (player.easyMode)            c += "Easy Mode multiplies AX by 4" + br
                                                if (data[401].gt(0))            c += "<u>IN</u>testine multiplies AX by " + format(data[401].plus(1)) + br
                                                if (data[402].gt(0))            c += "<u>in</u>TEStine multiplies AX by " + format(data[402].plus(1)) + br
                                                if (data[403].gt(0))            c += "<u>in</u>tesTINE multiplies AX by " + format(data[403].plus(1)) + br
                                                if (data[411].gt(0))            c += "IN<u>tes</u>tine multiplies AX by " + format(data[411].plus(1)) + br
                                                if (data[412].gt(0))            c += "in<u>TES</u>tine multiplies AX by " + format(data[412].plus(1)) + br
                                                if (data[413].gt(0))            c += "in<u>tes</u>TINE multiplies AX by " + format(data[413].plus(1)) + br
                                                if (data[421].gt(0))            c += "INtes<u>tine</u> multiplies AX by " + format(data[421].plus(1)) + br
                                                if (data[422].gt(0))            c += "inTES<u>tine</u> multiplies AX by " + format(data[422].plus(1)) + br
                                                if (data[423].gt(0))            c += "intes<u>TINE</u> multiplies AX by " + format(data[423].plus(1)) + br
                                                if (hasMilestone("or", 20))     c += "Organ Milestone 20 multiplies AX by " + format(player.or.milestones.length) + br
                                                if (hasUpgrade("or", 21))       c += "Organs VI multiplies AX by " + format(player.d.points.max(10).log10()) + br
                                                if (hasUpgrade("or", 23))       c += "Organs VII multiplies AX by " + format(tmp.or.upgrades[23].effect) + br
                                                if (hasUpgrade("or", 43))       c += "Organs XVIII multiplies AX by " + format(tmp.tokens.buyables[122].effect) + br
                                                if (hasUpgrade("or", 323))      c += "Lung XIII multiplies AX by " + format(tmp.or.upgrades[323].effect) + br
                                                if (tmp.an.effect.gt(1))        c += "Animal effect multiplies AX by " + format(tmp.an.effect) + br
                                                if (hasUpgrade("an", 15))       c += "Animals V multiplies AX by " + format(player.an.grid[607].extras.plus(1)) + br
                                                if (hasMilestone("an", 23))     c += "Animal Milestone 23 multiplies AX by " + format(player.an.grid[404].extras.plus(1).pow(player.ch.points)) + br
                                                if (c.includes("AX"))           c += br

                                                // BELOW IS EXPONENTIAL THINGS
                                                if (hasMilestone("or", 21)) {
                                                        let a = hasUpgrade("or", 151) + hasUpgrade("or", 152) + hasUpgrade("or", 153)
                                                        a += hasUpgrade("or", 154) + hasUpgrade("or", 155) 
                                                                                c += "Organ Milestone 21 multiplies BX by " + format(Decimal.pow(1.01, a), 4) + br
                                                }
                                                if (hasUpgrade("nu", 21))       c += "Nucleuses VI multiplies BX by " + format(player.ch.points.max(1234).div(1234).cbrt().min(1.01), 4) + br
                                                if (hasMilestone("an", 42))     c += "Animal Milestone 42 multiplies BX by " + format(player.ch.points.max(1465).div(1465).sqrt().min(1.1), 4) + br
                                                if (c.includes("BX"))           c += br

                                                let ret = a + br + b + br2 + c
                                                ret = ret.replaceAll("AX", makeRed("A"))
                                                ret = ret.replaceAll("BX", makeRed("B"))
                                                return ret
                                        }],
                                ],
                                unlocked(){
                                        return player.or.energy.points.gt(0) || player.an.unlocked
                                },
                        },
                        "Animals": {
                                content: [
                                        ["display-text", function(){
                                                let a = "Animal gain is " + format(tmp.an.getBaseGain, 3) + "*AX"
                                                let b = "AX is initially 1 and is multiplied by the following factors"
                                                let c = ""

                                                if (player.easyMode)            c += "Easy Mode multiplies AX by 2" + br
                                                if (hasMilestone("an", 13))     c += "Animal Milestone 13 multiplies AX by " + format(player.an.milestones.length) + br
                                                if (hasMilestone("an", 18))     c += "Animal Milestone 18 multiplies AX by " + format(player.an.genes.points.max(10).log10()) + br
                                                else if (hasUpgrade("or", 351)) {
                                                        let a = 1
                                                        if (hasUpgrade("or", 352)) a ++
                                                        if (hasUpgrade("or", 353)) a ++
                                                        if (hasUpgrade("or", 354)) a ++
                                                        if (hasUpgrade("or", 355)) a ++
                                                                                c += "Lung XXVI multiplies AX by " + format(Decimal.pow(2, a)) + br
                                                }
                                                if (hasUpgrade("an", 35))       c += "Animals XV multiplies AX by " + format(Decimal.pow(1.01, player.ch.points)) + br
                                                if (hasAchievement("an", 23) && player.an.achActive[23]) {
                                                                                c += "COM II multiplies AX by 10" + br
                                                }
                                                if (hasMilestone("nu", 1))      c += "Nucleuses Milestone 1 multiplies AX by 2" + br

                                                if (hasUpgrade("an", 53))       c += br + "Animals XXIII multiplies AX by " + format(Decimal.pow(1.01, player.tokens.tokens2.total.sub(hasMilestone("nu", 9) ? 0 : 7200).max(0))) + br
                                                if (hasMilestone("an", 22))     c += "Animal Milestone 22 multiplies AX by " + format(player.an.grid[508].extras.plus(1).pow(.01)) + br
                                                if ((player.an.achActive[33] || hasMilestone("nu", 14)) && hasAchievement("an", 33)) {
                                                                                c += "COM III multiplies AX by " + format(Decimal.pow(5, player.nu.points.times(tmp.an.clickables.rowThreeOff))) + br
                                                }
                                                if (hasUpgrade("sp", 11))       c += "Effect I multiplies AX by " + format(tmp.sp.effect) + br

                                                return (a + br + b + br2 + c).replaceAll("AX", makeRed("A"))
                                        }],
                                ],
                                unlocked(){
                                        return player.an.unlocked
                                },
                        },
                        "Genes": {
                                content: [
                                        ["display-text", function(){
                                                let a = "Gene gain is " + format(player.an.grid[808].extras.plus(1), 3) + "*AX"
                                                let b = "AX is initially 1 and is multiplied by the following factors"
                                                let c = ""

                                                if (player.easyMode)            c += "Easy Mode multiplies AX by 4" + br
                                                if (hasMilestone("an", 16)) {
                                                        let sub = hasMilestone("an", 22) ? 0 : 1000
                                                                                c += "Animal Milestone 16 multiplies AX by " + format(Decimal.pow(1.01, player.tokens.tokens2.total.sub(sub).max(0))) + br
                                                }
                                                if (hasMilestone("an", 16) && player.sp.unlocked) {
                                                                                c += "Animal Milestone 16 due to Species multiplies AX by " + format(Decimal.pow(10, player.sp.times).min(1e22)) + br
                                                }
                                                if (!hasUpgrade("ch", 44)) {
                                                        if (hasMilestone("an", 17)) {
                                                                let base = player.or.deoxygenated_blood.points.max(10).log10().max(10).log10()
                                                                let exp = player.nu.points.plus(player.an.upgrades.length)
                                                                                        c += "Animal Milestone 17 multiplies AX by " + format(base.pow(exp)) + br
                                                        }
                                                        if (hasMilestone("an", 18))     c += "Animal Milestone 18 multiplies AX by " + format(player.an.points.max(10).log10()) + br
                                                        if (hasMilestone("an", 19))     c += "Animal Milestone 19 multiplies AX by " + format(player.or.contaminants.points.max(10).log10()) + br
                                                        if (hasMilestone("an", 20))     c += "Animal Milestone 20 multiplies AX by " + format(player.cells.points.max(10).log10()) + br
                                                }
                                                if (hasMilestone("an", 21) && !hasUpgrade("nu", 23)) {
                                                                                c += "Animal Milestone 21 multiplies AX by " + format(tmp.an.milestones[21].effect) + br
                                                }
                                                if (hasMilestone("an", 23))     c += "Animal Milestone 23 multiplies AX by " + format(player.or.energy.points.div("1e14000").plus(1).pow(.002)) + br
                                                if (hasMilestone("an", 28))     c += "Animal Milestone 28 multiplies AX by " + format(player.an.grid[306].extras.plus(1)) + br
                                                if (hasMilestone("an", 34) && !hasMilestone("an", 36)) {
                                                                                c += "Animal Milestone 34 multiplies AX by 10" + br
                                                }
                                                if (hasMilestone("an", 39))     c += "Animal Milestone 39 multiplies AX by 1000" + br
                                                if (hasMilestone("ch", 5) && !hasUpgrade("an", 31)) {
                                                                                c += "Chromosome Milestone 5 divides AX by " + format(Decimal.pow(2, player.ch.points.sub(8))) + br
                                                }
                                                if (hasMilestone("ch", 6) && !hasMilestone("an", 24)) {
                                                                                c += "Chromosome Milestone 6 divides AX by " + format(Decimal.pow(2, player.ch.points)) + br
                                                }
                                                if (hasMilestone("ch", 7))      c += "Chromosome Milestone 7 multiplies AX by " + format(player.ch.points.div(67).plus(1).pow(player.ch.points)) + br
                                                if (!hasUpgrade("nu", 23)) {
                                                        if (hasMilestone("ch", 8))      c += "Chromosome Milestone 8 multiplies AX by " + format(player.ch.points.pow(player.ch.milestones.length/3).max(1)) + br
                                                        if (hasMilestone("ch", 16))     c += "Chromosome Milestone 16 multiplies AX by " + format(player.ch.points.plus(1)) + br
                                                        if (hasMilestone("ch", 17))     c += "Chromosome Milestone 17 multiplies AX by " + format(Decimal.pow(2, player.nu.points)) + br
                                                }
                                                if (hasUpgrade("ch", 14) && !hasMilestone("ch", 30)) {
                                                                                c += "Chromosomes IV multiplies AX by " + format(tmp.ch.upgrades[14].effect) + br
                                                }
                                                if (hasUpgrade("ch", 15)) {
                                                        let base = hasUpgrade("an", 34) ? 1.04 : 1.01
                                                        let sub = hasUpgrade("an", 43) ? 0 : 2600
                                                        let exp = player.tokens.tokens2.total.sub(sub).max(0)
                                                                                c += "Chromosomes V multiplies AX by " + format(Decimal.pow(base, exp)) + br
                                                }
                                                if (hasUpgrade("ch", 23) && !hasUpgrade("nu", 14)) {
                                                                                c += "Chromosomes VIII multiplies AX by 20" + br
                                                }
                                                if (hasUpgrade("ch", 32) && !hasUpgrade("nu", 14)) {
                                                                                c += "Chromosomes XII multiplies AX by 20" + br
                                                }
                                                if (hasUpgrade("an", 43) && !hasMilestone("ch", 29)) {
                                                                                c += "Animals XVIII divides AX by 1e42" + br
                                                }
                                                if (hasUpgrade("an", 51))       c += "Animals XXI multiplies AX by 2" + br
                                                if (hasUpgrade("an", 53)) {
                                                        let sub = hasMilestone("nu", 9) ? 0 : 7200
                                                        let per = 1.05
                                                                                c += "Animals XXIII multiplies AX by " + format(Decimal.pow(per, player.tokens.tokens2.total.sub(sub).max(0))) + br
                                                }
                                                if (!player.an.achActive[11] && hasAchievement("an", 11)) {
                                                        if (!player.an.achActive[22]) {
                                                                                c += "PRO I multiplies AX by " + format(Decimal.pow(hasMilestone("an", 36) ? 25 : 5, player.an.achievements.length + 4)) + br
                                                        } else                  c += "PRO I multiplies AX by 25" + br
                                                }
                                                if (hasAchievement("an", 12)) {
                                                        if ((player.an.achActive[12] || hasMilestone("ch", 16)) && !hasUpgrade("ch", 34)) {
                                                                                c += "PRI I divides AX by 4e49" + br
                                                        } 
                                                        if (!player.an.achActive[12] || hasAchievement("an", 22)) {
                                                                                c += "PRI I multiplies AX by " + format(Decimal.pow(hasMilestone("an", 31) ? 2 : 4, player.ch.points.sub(hasUpgrade("nu", 12) ? 0 : 200).max(0))) + br
                                                        }
                                                }
                                                if (hasAchievement("an", 21)) {
                                                        let l = player.ch.points.sub(235).max(0)
                                                        let aa = player.an.achActive
                                                        let r1o = !aa[11] + !aa[12] + !aa[13] + !aa[14]
                                                        if (player.an.achActive[21])    c += "PRO II multiplies AX by " + format(Decimal.pow(3.3, l.times(r1o))) + br
                                                        else                            c += "PRO II multiplies AX by " + format(Decimal.pow(100, l)) + br
                                                }
                                                if (hasAchievement("an", 31))   c += "Progression III multiplies AX by " + format(Decimal.pow(15, player.nu.milestones.length)) + br
                                                if (hasMilestone("nu", 1))      c += "Nucleus Milestone 1 multiplies AX by 2" + br
                                                if (hasMilestone("nu", 2))      c += "Nucleus Milestone 2 multiplies AX by " + format(Decimal.pow(hasMilestone("an", 43) ? 70 : 10, player.nu.points)) + br

                                                return (a + br + b + br2 + c).replaceAll("AX", makeRed("A"))
                                        }],
                                ],
                                unlocked(){
                                        return player.an.unlocked
                                },
                        },
                        
                },      
        },
        tabFormat: {
                "Milestones": {
                        content: [
                                "main-display",
                                ["prestige-button", "", function (){ return false ? {'display': 'none'} : {}}],
                                "milestones",
                        ],
                        unlocked(){
                                return !hasUpgrade("cells", 42)
                        },
                        shouldNotify(){
                                return canReset("tokens")
                        },
                },
                "Old": {
                        content: [
                                ["prestige-button", "", function (){ return false ? {'display': 'none'} : {}}],
                                ["display-text", function(){
                                        let a = "Current tetrational scaling formula: "
                                        let div = formatWhole(tmp.tokens.getTetrationScalingDivisor)
                                        let add = player.extremeMode ? TOKEN_COSTS_EXTREME.length : TOKEN_COSTS.length
                                        let sub = formatWhole(tmp.tokens.getMinusEffectiveTokens.plus(add))
                                        let baseStr = formatWhole(tmp.tokens.getTetrationBase, false, 1)
                                        return br + a + "<sup>4+(Tokens-" + sub + ")/" + div + "</sup>" + baseStr
                                }],
                                "blank",
                                "blank",
                                "blank",
                                ["microtabs", "currency_displays"],
                                "blank",
                                "blank",
                        ],
                        unlocked(){
                                return hasUpgrade("cells", 42)
                        },
                        shouldNotify(){
                                return canReset("tokens") && player.tokens.total.lt(1e4)
                        },
                },
                "II": {
                        content: [
                                "main-display",
                                ["secondary-display-tokens2", "tokens2"],
                                ["buyables", [10,11,12,19]],
                                ["clickables", [1]],
                                ["display-text", "<br>Buying a Token II buyable buffs all the other buyables in its column (denoted by C),<br> and nerfs the buyables in its row (denoted by R)<br><br><br>"],
                        ],
                        unlocked(){
                                return hasUpgrade("cells", 42)
                        },
                        shouldNotify(){
                                let data = tmp.tokens.buyables
                                if (data[191].canAfford && !hasMilestone("or", 6)) return true
                                if (data[192].canAfford && !hasMilestone("or", 7)) return true
                                if (data[193].canAfford && !hasMilestone("or", 8) && data[193].unlocked) return true
                                return false
                        },
                },
                "Flat": {
                        content: [
                                "main-display",
                                ["display-text", function(){
                                        let b = ""
                                        if (player.tokens.total.lt(10)) {
                                                b = "Note that selling things that boost decaying resources can cause you to lose resources."
                                        } else if (player.tokens.total.gte(14)) {
                                                b = "The synchronized amount is currently " + formatWhole(player.tokens.best_buyables[11]) + " levels."
                                                b += " You have " + formatWhole(player.tokens.total) + " total tokens."
                                        }
                                        return "Each upgrade boosts something different! You can sell upgrades at any time with no cost.<br>" + b
                                }],
                                ["buyables", [1,2,3]],
                                ["display-text", "<br><br><br>"],
                                ["buyables", [7]],
                        ],
                        unlocked(){
                                return !hasUpgrade("cells", 42)
                        },
                        shouldNotify(){
                                if (hasUpgrade("cells", 42)) return false
                                let x = ["11", "12", "13", "21", "22", 
                                        "23", "31", "32", "33", "41", 
                                        "42", "43", "51", "52", "53", 
                                        "61", "62", "63"]
                                for (i in x){
                                        id = x[i]
                                        if (!tmp.tokens.buyables[id].canAfford) return false
                                }
                                return true
                        },
                },
                "Scaling": {
                        content: [
                                "main-display",
                                ["display-text", function(){
                                        let b = ""
                                        if (player.tokens.total.lt(10)) {
                                                b = "Note that selling things that boost decaying resources can cause you to lose resources."
                                        } else if (player.tokens.total.gte(14)) {
                                                b = "The synchronized amount is currently " + formatWhole(player.tokens.best_buyables[11]) + " levels."
                                                b += " You have " + formatWhole(player.tokens.total) + " total tokens."
                                        }
                                        return "Each upgrade boosts something different! You can sell upgrades at any time with no cost.<br>" + b
                                }],
                                ["buyables", [4,5,6]],
                                ["display-text", "<br><br><br>"],
                                ["buyables", [7]],
                        ],
                        unlocked(){
                                return !hasUpgrade("cells", 42)
                        },
                        shouldNotify(){
                                if (hasUpgrade("cells", 42)) return false
                                let x = ["11", "12", "13", "21", "22", 
                                        "23", "31", "32", "33", "41", 
                                        "42", "43", "51", "52", "53", 
                                        "61", "62", "63"]
                                for (i in x){
                                        id = x[i]
                                        if (!tmp.tokens.buyables[id].canAfford) return false
                                }
                                return true
                        },
                },
                "Coins": {
                        content: [
                                ["secondary-display", "coins"],
                                ["display-text", function(){
                                        if (!player.shiftAlias) return "You passively gain coins. Hold shift to see upgrade numbers and when upgrades get locked.<br>At any time you can remove all upgrades, but you do NOT get coins back."
                                        let b = "Formula: " + format(tmp.tokens.coins.getGainMult) + "/(1+coins)"
                                        let c = "<br>You are currently gaining " + format(tmp.tokens.coins.getGainMult.div(player.tokens.coins.points.plus(1))) + " coins per second."
                                        return b + c
                                }],
                                ["upgrades", [1,2,3,4,5,6,7,8,9]],
                                ["display-text", "<br><br><br>"],
                                ["buyables", [8]],
                        ],
                        unlocked(){
                                if (hasUpgrade("t", 61) || hasUpgrade("or", 11)) return false
                                if (hasMilestone("l", 3)) return true
                                return hasUpgrade("c", 21) || hasMilestone("n", 9) || hasChallenge("l", 31)
                        },
                        shouldNotify(){
                                if (hasUpgrade("cells", 42)) return false
                                let x = ["11", "21", "22", "31", "32", 
                                         "33", "34", "41", "42", "51", 
                                         "52", "61", "62", "71", "72", 
                                         "73", "81", "82", "91", "92", 
                                         "93", "94", "95",]
                                for (i in x){
                                        id = x[i]
                                        if (hasUpgrade("tokens", id)) continue
                                        if (!tmp.tokens.upgrades[id].unlocked) continue
                                        if (canAffordUpgrade("tokens", id)) return true
                                }
                                return false
                        },
                },
        },

        doReset(layer){
                if (layer != "tokens") return
                /*
                Things to Reset 
                1. A point stuff
                2. B pt stuff
                3. C
                4. O
                5. H
                */

                // 1: A point stuff
                let data1 = player.mini
                if (!false) {
                        data1.a_points = {
                                points: decimalZero,
                                best: decimalZero,
                                extras: {
                                        11: decimalOne,
                                        12: decimalZero,
                                        13: decimalZero,
                                        21: decimalZero,
                                        23: decimalZero,
                                        61: decimalZero,
                                        62: decimalZero,
                                        63: decimalZero,
                                }
                        }
                        let list1 = ["11", "12", "13", "21", 
                                     "22", "23", "61", 
                                     "62", "63"]
                        for (i = 0; i < list1.length; i++){
                                data1.buyables[list1[i]] = decimalZero
                        }
                }
                // 2: B point stuff
                if (!false) {
                        data1.b_points = {
                                points: decimalZero,
                                best: decimalZero,
                        }
                        let list2 = ["31", "32", 
                                     "33", "41", "42", "43", 
                                     "51", "52", "53"]
                        for (i = 0; i < list1.length; i++){
                                data1.buyables[list2[i]] = decimalZero
                        }
                }

                // 3: C
                if (!false) {
                        if (!hasMilestone("tokens", 11) && !hasMilestone("n", 6)) {
                                player.c.upgrades = filterOut(player.c.upgrades, [11, 12, 13, 14, 15])
                        }
                        player.c.points = decimalZero
                        player.c.best = decimalZero
                }

                // 4: O
                if (!false) {
                        if (!hasMilestone("tokens", 11) && !hasMilestone("n", 5)) {
                                player.o.upgrades = filterOut(player.o.upgrades, [11, 12, 13, 14, 15])
                        }
                        player.o.points = decimalZero
                        player.o.best = decimalZero
                }

                // 5: H
                if (!false) {
                        let remove = [11, 12, 13, 14, 15, 
                                      31, 32, 33, 34, 35, 
                                      21, 22, 23, 24, 25, 
                                      41, 42, 43, 44, 45, 
                                      51, 52, 53, 54, 55, 
                                      61, 62, 63, 64, 65]

                        if (hasMilestone("tokens", 5)) {
                                remove = remove.slice(player.tokens.milestones.length * 3)
                        }

                        if (hasMilestone("tokens", 2)) remove = filterOut(remove, [51, 52])

                        if (!hasMilestone("n", 1)) player.h.upgrades = filterOut(player.h.upgrades, remove)
                        player.h.points = decimalZero
                        player.h.best = decimalZero
                        player.h.atomic_hydrogen.points = decimalZero
                        player.h.atomic_hydrogen.best = decimalZero
                        player.h.deuterium.points = decimalZero
                        player.h.deuterium.best = decimalZero
                }

                if (player.extremeMode) layers.sci.doReset("tokens")
        },
})





